
USB CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0800e000  0800e000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012220  0800e1e8  0800e1e8  0000e1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08020408  08020408  00020408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207b8  080207b8  000305a8  2**0
                  CONTENTS
  4 .ARM          00000000  080207b8  080207b8  000305a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080207b8  080207b8  000305a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080207b8  080207b8  000207b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080207bc  080207bc  000207bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  080207c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001720  200005a8  08020d68  000305a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc8  08020d68  00031cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000305a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e67f  00000000  00000000  000305d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051b9  00000000  00000000  0005ec50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc8  00000000  00000000  00063e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bc8  00000000  00000000  00065bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221fd  00000000  00000000  000677a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f48e  00000000  00000000  0008999d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae28c  00000000  00000000  000a8e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001570b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d4c  00000000  00000000  00157134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800e1e8 <__do_global_dtors_aux>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	4c05      	ldr	r4, [pc, #20]	; (800e200 <__do_global_dtors_aux+0x18>)
 800e1ec:	7823      	ldrb	r3, [r4, #0]
 800e1ee:	b933      	cbnz	r3, 800e1fe <__do_global_dtors_aux+0x16>
 800e1f0:	4b04      	ldr	r3, [pc, #16]	; (800e204 <__do_global_dtors_aux+0x1c>)
 800e1f2:	b113      	cbz	r3, 800e1fa <__do_global_dtors_aux+0x12>
 800e1f4:	4804      	ldr	r0, [pc, #16]	; (800e208 <__do_global_dtors_aux+0x20>)
 800e1f6:	f3af 8000 	nop.w
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	7023      	strb	r3, [r4, #0]
 800e1fe:	bd10      	pop	{r4, pc}
 800e200:	200005a8 	.word	0x200005a8
 800e204:	00000000 	.word	0x00000000
 800e208:	080203f0 	.word	0x080203f0

0800e20c <frame_dummy>:
 800e20c:	b508      	push	{r3, lr}
 800e20e:	4b03      	ldr	r3, [pc, #12]	; (800e21c <frame_dummy+0x10>)
 800e210:	b11b      	cbz	r3, 800e21a <frame_dummy+0xe>
 800e212:	4903      	ldr	r1, [pc, #12]	; (800e220 <frame_dummy+0x14>)
 800e214:	4803      	ldr	r0, [pc, #12]	; (800e224 <frame_dummy+0x18>)
 800e216:	f3af 8000 	nop.w
 800e21a:	bd08      	pop	{r3, pc}
 800e21c:	00000000 	.word	0x00000000
 800e220:	200005ac 	.word	0x200005ac
 800e224:	080203f0 	.word	0x080203f0

0800e228 <strlen>:
 800e228:	4603      	mov	r3, r0
 800e22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e22e:	2a00      	cmp	r2, #0
 800e230:	d1fb      	bne.n	800e22a <strlen+0x2>
 800e232:	1a18      	subs	r0, r3, r0
 800e234:	3801      	subs	r0, #1
 800e236:	4770      	bx	lr

0800e238 <__aeabi_drsub>:
 800e238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e23c:	e002      	b.n	800e244 <__adddf3>
 800e23e:	bf00      	nop

0800e240 <__aeabi_dsub>:
 800e240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e244 <__adddf3>:
 800e244:	b530      	push	{r4, r5, lr}
 800e246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e24a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e24e:	ea94 0f05 	teq	r4, r5
 800e252:	bf08      	it	eq
 800e254:	ea90 0f02 	teqeq	r0, r2
 800e258:	bf1f      	itttt	ne
 800e25a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e25e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e26a:	f000 80e2 	beq.w	800e432 <__adddf3+0x1ee>
 800e26e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e276:	bfb8      	it	lt
 800e278:	426d      	neglt	r5, r5
 800e27a:	dd0c      	ble.n	800e296 <__adddf3+0x52>
 800e27c:	442c      	add	r4, r5
 800e27e:	ea80 0202 	eor.w	r2, r0, r2
 800e282:	ea81 0303 	eor.w	r3, r1, r3
 800e286:	ea82 0000 	eor.w	r0, r2, r0
 800e28a:	ea83 0101 	eor.w	r1, r3, r1
 800e28e:	ea80 0202 	eor.w	r2, r0, r2
 800e292:	ea81 0303 	eor.w	r3, r1, r3
 800e296:	2d36      	cmp	r5, #54	; 0x36
 800e298:	bf88      	it	hi
 800e29a:	bd30      	pophi	{r4, r5, pc}
 800e29c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e2a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e2a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e2a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e2ac:	d002      	beq.n	800e2b4 <__adddf3+0x70>
 800e2ae:	4240      	negs	r0, r0
 800e2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e2b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e2b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e2bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e2c0:	d002      	beq.n	800e2c8 <__adddf3+0x84>
 800e2c2:	4252      	negs	r2, r2
 800e2c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e2c8:	ea94 0f05 	teq	r4, r5
 800e2cc:	f000 80a7 	beq.w	800e41e <__adddf3+0x1da>
 800e2d0:	f1a4 0401 	sub.w	r4, r4, #1
 800e2d4:	f1d5 0e20 	rsbs	lr, r5, #32
 800e2d8:	db0d      	blt.n	800e2f6 <__adddf3+0xb2>
 800e2da:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e2de:	fa22 f205 	lsr.w	r2, r2, r5
 800e2e2:	1880      	adds	r0, r0, r2
 800e2e4:	f141 0100 	adc.w	r1, r1, #0
 800e2e8:	fa03 f20e 	lsl.w	r2, r3, lr
 800e2ec:	1880      	adds	r0, r0, r2
 800e2ee:	fa43 f305 	asr.w	r3, r3, r5
 800e2f2:	4159      	adcs	r1, r3
 800e2f4:	e00e      	b.n	800e314 <__adddf3+0xd0>
 800e2f6:	f1a5 0520 	sub.w	r5, r5, #32
 800e2fa:	f10e 0e20 	add.w	lr, lr, #32
 800e2fe:	2a01      	cmp	r2, #1
 800e300:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e304:	bf28      	it	cs
 800e306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e30a:	fa43 f305 	asr.w	r3, r3, r5
 800e30e:	18c0      	adds	r0, r0, r3
 800e310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e318:	d507      	bpl.n	800e32a <__adddf3+0xe6>
 800e31a:	f04f 0e00 	mov.w	lr, #0
 800e31e:	f1dc 0c00 	rsbs	ip, ip, #0
 800e322:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e326:	eb6e 0101 	sbc.w	r1, lr, r1
 800e32a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e32e:	d31b      	bcc.n	800e368 <__adddf3+0x124>
 800e330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e334:	d30c      	bcc.n	800e350 <__adddf3+0x10c>
 800e336:	0849      	lsrs	r1, r1, #1
 800e338:	ea5f 0030 	movs.w	r0, r0, rrx
 800e33c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e340:	f104 0401 	add.w	r4, r4, #1
 800e344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e34c:	f080 809a 	bcs.w	800e484 <__adddf3+0x240>
 800e350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e354:	bf08      	it	eq
 800e356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e35a:	f150 0000 	adcs.w	r0, r0, #0
 800e35e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e362:	ea41 0105 	orr.w	r1, r1, r5
 800e366:	bd30      	pop	{r4, r5, pc}
 800e368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e36c:	4140      	adcs	r0, r0
 800e36e:	eb41 0101 	adc.w	r1, r1, r1
 800e372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e376:	f1a4 0401 	sub.w	r4, r4, #1
 800e37a:	d1e9      	bne.n	800e350 <__adddf3+0x10c>
 800e37c:	f091 0f00 	teq	r1, #0
 800e380:	bf04      	itt	eq
 800e382:	4601      	moveq	r1, r0
 800e384:	2000      	moveq	r0, #0
 800e386:	fab1 f381 	clz	r3, r1
 800e38a:	bf08      	it	eq
 800e38c:	3320      	addeq	r3, #32
 800e38e:	f1a3 030b 	sub.w	r3, r3, #11
 800e392:	f1b3 0220 	subs.w	r2, r3, #32
 800e396:	da0c      	bge.n	800e3b2 <__adddf3+0x16e>
 800e398:	320c      	adds	r2, #12
 800e39a:	dd08      	ble.n	800e3ae <__adddf3+0x16a>
 800e39c:	f102 0c14 	add.w	ip, r2, #20
 800e3a0:	f1c2 020c 	rsb	r2, r2, #12
 800e3a4:	fa01 f00c 	lsl.w	r0, r1, ip
 800e3a8:	fa21 f102 	lsr.w	r1, r1, r2
 800e3ac:	e00c      	b.n	800e3c8 <__adddf3+0x184>
 800e3ae:	f102 0214 	add.w	r2, r2, #20
 800e3b2:	bfd8      	it	le
 800e3b4:	f1c2 0c20 	rsble	ip, r2, #32
 800e3b8:	fa01 f102 	lsl.w	r1, r1, r2
 800e3bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e3c0:	bfdc      	itt	le
 800e3c2:	ea41 010c 	orrle.w	r1, r1, ip
 800e3c6:	4090      	lslle	r0, r2
 800e3c8:	1ae4      	subs	r4, r4, r3
 800e3ca:	bfa2      	ittt	ge
 800e3cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e3d0:	4329      	orrge	r1, r5
 800e3d2:	bd30      	popge	{r4, r5, pc}
 800e3d4:	ea6f 0404 	mvn.w	r4, r4
 800e3d8:	3c1f      	subs	r4, #31
 800e3da:	da1c      	bge.n	800e416 <__adddf3+0x1d2>
 800e3dc:	340c      	adds	r4, #12
 800e3de:	dc0e      	bgt.n	800e3fe <__adddf3+0x1ba>
 800e3e0:	f104 0414 	add.w	r4, r4, #20
 800e3e4:	f1c4 0220 	rsb	r2, r4, #32
 800e3e8:	fa20 f004 	lsr.w	r0, r0, r4
 800e3ec:	fa01 f302 	lsl.w	r3, r1, r2
 800e3f0:	ea40 0003 	orr.w	r0, r0, r3
 800e3f4:	fa21 f304 	lsr.w	r3, r1, r4
 800e3f8:	ea45 0103 	orr.w	r1, r5, r3
 800e3fc:	bd30      	pop	{r4, r5, pc}
 800e3fe:	f1c4 040c 	rsb	r4, r4, #12
 800e402:	f1c4 0220 	rsb	r2, r4, #32
 800e406:	fa20 f002 	lsr.w	r0, r0, r2
 800e40a:	fa01 f304 	lsl.w	r3, r1, r4
 800e40e:	ea40 0003 	orr.w	r0, r0, r3
 800e412:	4629      	mov	r1, r5
 800e414:	bd30      	pop	{r4, r5, pc}
 800e416:	fa21 f004 	lsr.w	r0, r1, r4
 800e41a:	4629      	mov	r1, r5
 800e41c:	bd30      	pop	{r4, r5, pc}
 800e41e:	f094 0f00 	teq	r4, #0
 800e422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e426:	bf06      	itte	eq
 800e428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e42c:	3401      	addeq	r4, #1
 800e42e:	3d01      	subne	r5, #1
 800e430:	e74e      	b.n	800e2d0 <__adddf3+0x8c>
 800e432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e436:	bf18      	it	ne
 800e438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e43c:	d029      	beq.n	800e492 <__adddf3+0x24e>
 800e43e:	ea94 0f05 	teq	r4, r5
 800e442:	bf08      	it	eq
 800e444:	ea90 0f02 	teqeq	r0, r2
 800e448:	d005      	beq.n	800e456 <__adddf3+0x212>
 800e44a:	ea54 0c00 	orrs.w	ip, r4, r0
 800e44e:	bf04      	itt	eq
 800e450:	4619      	moveq	r1, r3
 800e452:	4610      	moveq	r0, r2
 800e454:	bd30      	pop	{r4, r5, pc}
 800e456:	ea91 0f03 	teq	r1, r3
 800e45a:	bf1e      	ittt	ne
 800e45c:	2100      	movne	r1, #0
 800e45e:	2000      	movne	r0, #0
 800e460:	bd30      	popne	{r4, r5, pc}
 800e462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e466:	d105      	bne.n	800e474 <__adddf3+0x230>
 800e468:	0040      	lsls	r0, r0, #1
 800e46a:	4149      	adcs	r1, r1
 800e46c:	bf28      	it	cs
 800e46e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e472:	bd30      	pop	{r4, r5, pc}
 800e474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e478:	bf3c      	itt	cc
 800e47a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e47e:	bd30      	popcc	{r4, r5, pc}
 800e480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e48c:	f04f 0000 	mov.w	r0, #0
 800e490:	bd30      	pop	{r4, r5, pc}
 800e492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e496:	bf1a      	itte	ne
 800e498:	4619      	movne	r1, r3
 800e49a:	4610      	movne	r0, r2
 800e49c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e4a0:	bf1c      	itt	ne
 800e4a2:	460b      	movne	r3, r1
 800e4a4:	4602      	movne	r2, r0
 800e4a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e4aa:	bf06      	itte	eq
 800e4ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e4b0:	ea91 0f03 	teqeq	r1, r3
 800e4b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e4b8:	bd30      	pop	{r4, r5, pc}
 800e4ba:	bf00      	nop

0800e4bc <__aeabi_ui2d>:
 800e4bc:	f090 0f00 	teq	r0, #0
 800e4c0:	bf04      	itt	eq
 800e4c2:	2100      	moveq	r1, #0
 800e4c4:	4770      	bxeq	lr
 800e4c6:	b530      	push	{r4, r5, lr}
 800e4c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e4cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e4d0:	f04f 0500 	mov.w	r5, #0
 800e4d4:	f04f 0100 	mov.w	r1, #0
 800e4d8:	e750      	b.n	800e37c <__adddf3+0x138>
 800e4da:	bf00      	nop

0800e4dc <__aeabi_i2d>:
 800e4dc:	f090 0f00 	teq	r0, #0
 800e4e0:	bf04      	itt	eq
 800e4e2:	2100      	moveq	r1, #0
 800e4e4:	4770      	bxeq	lr
 800e4e6:	b530      	push	{r4, r5, lr}
 800e4e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e4ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e4f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e4f4:	bf48      	it	mi
 800e4f6:	4240      	negmi	r0, r0
 800e4f8:	f04f 0100 	mov.w	r1, #0
 800e4fc:	e73e      	b.n	800e37c <__adddf3+0x138>
 800e4fe:	bf00      	nop

0800e500 <__aeabi_f2d>:
 800e500:	0042      	lsls	r2, r0, #1
 800e502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e506:	ea4f 0131 	mov.w	r1, r1, rrx
 800e50a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e50e:	bf1f      	itttt	ne
 800e510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e51c:	4770      	bxne	lr
 800e51e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e522:	bf08      	it	eq
 800e524:	4770      	bxeq	lr
 800e526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800e52a:	bf04      	itt	eq
 800e52c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800e530:	4770      	bxeq	lr
 800e532:	b530      	push	{r4, r5, lr}
 800e534:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e53c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e540:	e71c      	b.n	800e37c <__adddf3+0x138>
 800e542:	bf00      	nop

0800e544 <__aeabi_ul2d>:
 800e544:	ea50 0201 	orrs.w	r2, r0, r1
 800e548:	bf08      	it	eq
 800e54a:	4770      	bxeq	lr
 800e54c:	b530      	push	{r4, r5, lr}
 800e54e:	f04f 0500 	mov.w	r5, #0
 800e552:	e00a      	b.n	800e56a <__aeabi_l2d+0x16>

0800e554 <__aeabi_l2d>:
 800e554:	ea50 0201 	orrs.w	r2, r0, r1
 800e558:	bf08      	it	eq
 800e55a:	4770      	bxeq	lr
 800e55c:	b530      	push	{r4, r5, lr}
 800e55e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800e562:	d502      	bpl.n	800e56a <__aeabi_l2d+0x16>
 800e564:	4240      	negs	r0, r0
 800e566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e56a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e56e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800e576:	f43f aed8 	beq.w	800e32a <__adddf3+0xe6>
 800e57a:	f04f 0203 	mov.w	r2, #3
 800e57e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e582:	bf18      	it	ne
 800e584:	3203      	addne	r2, #3
 800e586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e58a:	bf18      	it	ne
 800e58c:	3203      	addne	r2, #3
 800e58e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800e592:	f1c2 0320 	rsb	r3, r2, #32
 800e596:	fa00 fc03 	lsl.w	ip, r0, r3
 800e59a:	fa20 f002 	lsr.w	r0, r0, r2
 800e59e:	fa01 fe03 	lsl.w	lr, r1, r3
 800e5a2:	ea40 000e 	orr.w	r0, r0, lr
 800e5a6:	fa21 f102 	lsr.w	r1, r1, r2
 800e5aa:	4414      	add	r4, r2
 800e5ac:	e6bd      	b.n	800e32a <__adddf3+0xe6>
 800e5ae:	bf00      	nop

0800e5b0 <__aeabi_dmul>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e5b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e5ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e5be:	bf1d      	ittte	ne
 800e5c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e5c4:	ea94 0f0c 	teqne	r4, ip
 800e5c8:	ea95 0f0c 	teqne	r5, ip
 800e5cc:	f000 f8de 	bleq	800e78c <__aeabi_dmul+0x1dc>
 800e5d0:	442c      	add	r4, r5
 800e5d2:	ea81 0603 	eor.w	r6, r1, r3
 800e5d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800e5da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800e5de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800e5e2:	bf18      	it	ne
 800e5e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800e5e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5f0:	d038      	beq.n	800e664 <__aeabi_dmul+0xb4>
 800e5f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800e5f6:	f04f 0500 	mov.w	r5, #0
 800e5fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800e5fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800e602:	fbe0 e503 	umlal	lr, r5, r0, r3
 800e606:	f04f 0600 	mov.w	r6, #0
 800e60a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800e60e:	f09c 0f00 	teq	ip, #0
 800e612:	bf18      	it	ne
 800e614:	f04e 0e01 	orrne.w	lr, lr, #1
 800e618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800e61c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800e620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800e624:	d204      	bcs.n	800e630 <__aeabi_dmul+0x80>
 800e626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800e62a:	416d      	adcs	r5, r5
 800e62c:	eb46 0606 	adc.w	r6, r6, r6
 800e630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800e634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800e638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800e63c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800e640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800e644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e648:	bf88      	it	hi
 800e64a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e64e:	d81e      	bhi.n	800e68e <__aeabi_dmul+0xde>
 800e650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800e654:	bf08      	it	eq
 800e656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800e65a:	f150 0000 	adcs.w	r0, r0, #0
 800e65e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e662:	bd70      	pop	{r4, r5, r6, pc}
 800e664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800e668:	ea46 0101 	orr.w	r1, r6, r1
 800e66c:	ea40 0002 	orr.w	r0, r0, r2
 800e670:	ea81 0103 	eor.w	r1, r1, r3
 800e674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800e678:	bfc2      	ittt	gt
 800e67a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e67e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e682:	bd70      	popgt	{r4, r5, r6, pc}
 800e684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e688:	f04f 0e00 	mov.w	lr, #0
 800e68c:	3c01      	subs	r4, #1
 800e68e:	f300 80ab 	bgt.w	800e7e8 <__aeabi_dmul+0x238>
 800e692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800e696:	bfde      	ittt	le
 800e698:	2000      	movle	r0, #0
 800e69a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800e69e:	bd70      	pople	{r4, r5, r6, pc}
 800e6a0:	f1c4 0400 	rsb	r4, r4, #0
 800e6a4:	3c20      	subs	r4, #32
 800e6a6:	da35      	bge.n	800e714 <__aeabi_dmul+0x164>
 800e6a8:	340c      	adds	r4, #12
 800e6aa:	dc1b      	bgt.n	800e6e4 <__aeabi_dmul+0x134>
 800e6ac:	f104 0414 	add.w	r4, r4, #20
 800e6b0:	f1c4 0520 	rsb	r5, r4, #32
 800e6b4:	fa00 f305 	lsl.w	r3, r0, r5
 800e6b8:	fa20 f004 	lsr.w	r0, r0, r4
 800e6bc:	fa01 f205 	lsl.w	r2, r1, r5
 800e6c0:	ea40 0002 	orr.w	r0, r0, r2
 800e6c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e6c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e6cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e6d0:	fa21 f604 	lsr.w	r6, r1, r4
 800e6d4:	eb42 0106 	adc.w	r1, r2, r6
 800e6d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e6dc:	bf08      	it	eq
 800e6de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e6e2:	bd70      	pop	{r4, r5, r6, pc}
 800e6e4:	f1c4 040c 	rsb	r4, r4, #12
 800e6e8:	f1c4 0520 	rsb	r5, r4, #32
 800e6ec:	fa00 f304 	lsl.w	r3, r0, r4
 800e6f0:	fa20 f005 	lsr.w	r0, r0, r5
 800e6f4:	fa01 f204 	lsl.w	r2, r1, r4
 800e6f8:	ea40 0002 	orr.w	r0, r0, r2
 800e6fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e704:	f141 0100 	adc.w	r1, r1, #0
 800e708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e70c:	bf08      	it	eq
 800e70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	f1c4 0520 	rsb	r5, r4, #32
 800e718:	fa00 f205 	lsl.w	r2, r0, r5
 800e71c:	ea4e 0e02 	orr.w	lr, lr, r2
 800e720:	fa20 f304 	lsr.w	r3, r0, r4
 800e724:	fa01 f205 	lsl.w	r2, r1, r5
 800e728:	ea43 0302 	orr.w	r3, r3, r2
 800e72c:	fa21 f004 	lsr.w	r0, r1, r4
 800e730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e734:	fa21 f204 	lsr.w	r2, r1, r4
 800e738:	ea20 0002 	bic.w	r0, r0, r2
 800e73c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800e740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e744:	bf08      	it	eq
 800e746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e74a:	bd70      	pop	{r4, r5, r6, pc}
 800e74c:	f094 0f00 	teq	r4, #0
 800e750:	d10f      	bne.n	800e772 <__aeabi_dmul+0x1c2>
 800e752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e756:	0040      	lsls	r0, r0, #1
 800e758:	eb41 0101 	adc.w	r1, r1, r1
 800e75c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e760:	bf08      	it	eq
 800e762:	3c01      	subeq	r4, #1
 800e764:	d0f7      	beq.n	800e756 <__aeabi_dmul+0x1a6>
 800e766:	ea41 0106 	orr.w	r1, r1, r6
 800e76a:	f095 0f00 	teq	r5, #0
 800e76e:	bf18      	it	ne
 800e770:	4770      	bxne	lr
 800e772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800e776:	0052      	lsls	r2, r2, #1
 800e778:	eb43 0303 	adc.w	r3, r3, r3
 800e77c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800e780:	bf08      	it	eq
 800e782:	3d01      	subeq	r5, #1
 800e784:	d0f7      	beq.n	800e776 <__aeabi_dmul+0x1c6>
 800e786:	ea43 0306 	orr.w	r3, r3, r6
 800e78a:	4770      	bx	lr
 800e78c:	ea94 0f0c 	teq	r4, ip
 800e790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e794:	bf18      	it	ne
 800e796:	ea95 0f0c 	teqne	r5, ip
 800e79a:	d00c      	beq.n	800e7b6 <__aeabi_dmul+0x206>
 800e79c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e7a0:	bf18      	it	ne
 800e7a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e7a6:	d1d1      	bne.n	800e74c <__aeabi_dmul+0x19c>
 800e7a8:	ea81 0103 	eor.w	r1, r1, r3
 800e7ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e7b0:	f04f 0000 	mov.w	r0, #0
 800e7b4:	bd70      	pop	{r4, r5, r6, pc}
 800e7b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e7ba:	bf06      	itte	eq
 800e7bc:	4610      	moveq	r0, r2
 800e7be:	4619      	moveq	r1, r3
 800e7c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e7c4:	d019      	beq.n	800e7fa <__aeabi_dmul+0x24a>
 800e7c6:	ea94 0f0c 	teq	r4, ip
 800e7ca:	d102      	bne.n	800e7d2 <__aeabi_dmul+0x222>
 800e7cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800e7d0:	d113      	bne.n	800e7fa <__aeabi_dmul+0x24a>
 800e7d2:	ea95 0f0c 	teq	r5, ip
 800e7d6:	d105      	bne.n	800e7e4 <__aeabi_dmul+0x234>
 800e7d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800e7dc:	bf1c      	itt	ne
 800e7de:	4610      	movne	r0, r2
 800e7e0:	4619      	movne	r1, r3
 800e7e2:	d10a      	bne.n	800e7fa <__aeabi_dmul+0x24a>
 800e7e4:	ea81 0103 	eor.w	r1, r1, r3
 800e7e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e7ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e7f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7f4:	f04f 0000 	mov.w	r0, #0
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}
 800e7fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e7fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800e802:	bd70      	pop	{r4, r5, r6, pc}

0800e804 <__aeabi_ddiv>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e80a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e80e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e812:	bf1d      	ittte	ne
 800e814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e818:	ea94 0f0c 	teqne	r4, ip
 800e81c:	ea95 0f0c 	teqne	r5, ip
 800e820:	f000 f8a7 	bleq	800e972 <__aeabi_ddiv+0x16e>
 800e824:	eba4 0405 	sub.w	r4, r4, r5
 800e828:	ea81 0e03 	eor.w	lr, r1, r3
 800e82c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e834:	f000 8088 	beq.w	800e948 <__aeabi_ddiv+0x144>
 800e838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e83c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800e844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800e848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e84c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800e850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800e854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800e858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800e85c:	429d      	cmp	r5, r3
 800e85e:	bf08      	it	eq
 800e860:	4296      	cmpeq	r6, r2
 800e862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800e866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800e86a:	d202      	bcs.n	800e872 <__aeabi_ddiv+0x6e>
 800e86c:	085b      	lsrs	r3, r3, #1
 800e86e:	ea4f 0232 	mov.w	r2, r2, rrx
 800e872:	1ab6      	subs	r6, r6, r2
 800e874:	eb65 0503 	sbc.w	r5, r5, r3
 800e878:	085b      	lsrs	r3, r3, #1
 800e87a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e87e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800e886:	ebb6 0e02 	subs.w	lr, r6, r2
 800e88a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e88e:	bf22      	ittt	cs
 800e890:	1ab6      	subcs	r6, r6, r2
 800e892:	4675      	movcs	r5, lr
 800e894:	ea40 000c 	orrcs.w	r0, r0, ip
 800e898:	085b      	lsrs	r3, r3, #1
 800e89a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e89e:	ebb6 0e02 	subs.w	lr, r6, r2
 800e8a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e8a6:	bf22      	ittt	cs
 800e8a8:	1ab6      	subcs	r6, r6, r2
 800e8aa:	4675      	movcs	r5, lr
 800e8ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e8b0:	085b      	lsrs	r3, r3, #1
 800e8b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800e8b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800e8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e8be:	bf22      	ittt	cs
 800e8c0:	1ab6      	subcs	r6, r6, r2
 800e8c2:	4675      	movcs	r5, lr
 800e8c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e8c8:	085b      	lsrs	r3, r3, #1
 800e8ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800e8ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800e8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e8d6:	bf22      	ittt	cs
 800e8d8:	1ab6      	subcs	r6, r6, r2
 800e8da:	4675      	movcs	r5, lr
 800e8dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e8e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800e8e4:	d018      	beq.n	800e918 <__aeabi_ddiv+0x114>
 800e8e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e8ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e8ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e8f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e8f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e8fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e8fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e902:	d1c0      	bne.n	800e886 <__aeabi_ddiv+0x82>
 800e904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e908:	d10b      	bne.n	800e922 <__aeabi_ddiv+0x11e>
 800e90a:	ea41 0100 	orr.w	r1, r1, r0
 800e90e:	f04f 0000 	mov.w	r0, #0
 800e912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e916:	e7b6      	b.n	800e886 <__aeabi_ddiv+0x82>
 800e918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e91c:	bf04      	itt	eq
 800e91e:	4301      	orreq	r1, r0
 800e920:	2000      	moveq	r0, #0
 800e922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e926:	bf88      	it	hi
 800e928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e92c:	f63f aeaf 	bhi.w	800e68e <__aeabi_dmul+0xde>
 800e930:	ebb5 0c03 	subs.w	ip, r5, r3
 800e934:	bf04      	itt	eq
 800e936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e93a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e93e:	f150 0000 	adcs.w	r0, r0, #0
 800e942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e94c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e954:	bfc2      	ittt	gt
 800e956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e95a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e95e:	bd70      	popgt	{r4, r5, r6, pc}
 800e960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e964:	f04f 0e00 	mov.w	lr, #0
 800e968:	3c01      	subs	r4, #1
 800e96a:	e690      	b.n	800e68e <__aeabi_dmul+0xde>
 800e96c:	ea45 0e06 	orr.w	lr, r5, r6
 800e970:	e68d      	b.n	800e68e <__aeabi_dmul+0xde>
 800e972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e976:	ea94 0f0c 	teq	r4, ip
 800e97a:	bf08      	it	eq
 800e97c:	ea95 0f0c 	teqeq	r5, ip
 800e980:	f43f af3b 	beq.w	800e7fa <__aeabi_dmul+0x24a>
 800e984:	ea94 0f0c 	teq	r4, ip
 800e988:	d10a      	bne.n	800e9a0 <__aeabi_ddiv+0x19c>
 800e98a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e98e:	f47f af34 	bne.w	800e7fa <__aeabi_dmul+0x24a>
 800e992:	ea95 0f0c 	teq	r5, ip
 800e996:	f47f af25 	bne.w	800e7e4 <__aeabi_dmul+0x234>
 800e99a:	4610      	mov	r0, r2
 800e99c:	4619      	mov	r1, r3
 800e99e:	e72c      	b.n	800e7fa <__aeabi_dmul+0x24a>
 800e9a0:	ea95 0f0c 	teq	r5, ip
 800e9a4:	d106      	bne.n	800e9b4 <__aeabi_ddiv+0x1b0>
 800e9a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e9aa:	f43f aefd 	beq.w	800e7a8 <__aeabi_dmul+0x1f8>
 800e9ae:	4610      	mov	r0, r2
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	e722      	b.n	800e7fa <__aeabi_dmul+0x24a>
 800e9b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e9b8:	bf18      	it	ne
 800e9ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e9be:	f47f aec5 	bne.w	800e74c <__aeabi_dmul+0x19c>
 800e9c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e9c6:	f47f af0d 	bne.w	800e7e4 <__aeabi_dmul+0x234>
 800e9ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e9ce:	f47f aeeb 	bne.w	800e7a8 <__aeabi_dmul+0x1f8>
 800e9d2:	e712      	b.n	800e7fa <__aeabi_dmul+0x24a>

0800e9d4 <__gedf2>:
 800e9d4:	f04f 3cff 	mov.w	ip, #4294967295
 800e9d8:	e006      	b.n	800e9e8 <__cmpdf2+0x4>
 800e9da:	bf00      	nop

0800e9dc <__ledf2>:
 800e9dc:	f04f 0c01 	mov.w	ip, #1
 800e9e0:	e002      	b.n	800e9e8 <__cmpdf2+0x4>
 800e9e2:	bf00      	nop

0800e9e4 <__cmpdf2>:
 800e9e4:	f04f 0c01 	mov.w	ip, #1
 800e9e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e9ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e9f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e9f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e9f8:	bf18      	it	ne
 800e9fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e9fe:	d01b      	beq.n	800ea38 <__cmpdf2+0x54>
 800ea00:	b001      	add	sp, #4
 800ea02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ea06:	bf0c      	ite	eq
 800ea08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ea0c:	ea91 0f03 	teqne	r1, r3
 800ea10:	bf02      	ittt	eq
 800ea12:	ea90 0f02 	teqeq	r0, r2
 800ea16:	2000      	moveq	r0, #0
 800ea18:	4770      	bxeq	lr
 800ea1a:	f110 0f00 	cmn.w	r0, #0
 800ea1e:	ea91 0f03 	teq	r1, r3
 800ea22:	bf58      	it	pl
 800ea24:	4299      	cmppl	r1, r3
 800ea26:	bf08      	it	eq
 800ea28:	4290      	cmpeq	r0, r2
 800ea2a:	bf2c      	ite	cs
 800ea2c:	17d8      	asrcs	r0, r3, #31
 800ea2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ea32:	f040 0001 	orr.w	r0, r0, #1
 800ea36:	4770      	bx	lr
 800ea38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ea3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ea40:	d102      	bne.n	800ea48 <__cmpdf2+0x64>
 800ea42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800ea46:	d107      	bne.n	800ea58 <__cmpdf2+0x74>
 800ea48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ea4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ea50:	d1d6      	bne.n	800ea00 <__cmpdf2+0x1c>
 800ea52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ea56:	d0d3      	beq.n	800ea00 <__cmpdf2+0x1c>
 800ea58:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop

0800ea60 <__aeabi_cdrcmple>:
 800ea60:	4684      	mov	ip, r0
 800ea62:	4610      	mov	r0, r2
 800ea64:	4662      	mov	r2, ip
 800ea66:	468c      	mov	ip, r1
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4663      	mov	r3, ip
 800ea6c:	e000      	b.n	800ea70 <__aeabi_cdcmpeq>
 800ea6e:	bf00      	nop

0800ea70 <__aeabi_cdcmpeq>:
 800ea70:	b501      	push	{r0, lr}
 800ea72:	f7ff ffb7 	bl	800e9e4 <__cmpdf2>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	bf48      	it	mi
 800ea7a:	f110 0f00 	cmnmi.w	r0, #0
 800ea7e:	bd01      	pop	{r0, pc}

0800ea80 <__aeabi_dcmpeq>:
 800ea80:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ea84:	f7ff fff4 	bl	800ea70 <__aeabi_cdcmpeq>
 800ea88:	bf0c      	ite	eq
 800ea8a:	2001      	moveq	r0, #1
 800ea8c:	2000      	movne	r0, #0
 800ea8e:	f85d fb08 	ldr.w	pc, [sp], #8
 800ea92:	bf00      	nop

0800ea94 <__aeabi_dcmplt>:
 800ea94:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ea98:	f7ff ffea 	bl	800ea70 <__aeabi_cdcmpeq>
 800ea9c:	bf34      	ite	cc
 800ea9e:	2001      	movcc	r0, #1
 800eaa0:	2000      	movcs	r0, #0
 800eaa2:	f85d fb08 	ldr.w	pc, [sp], #8
 800eaa6:	bf00      	nop

0800eaa8 <__aeabi_dcmple>:
 800eaa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eaac:	f7ff ffe0 	bl	800ea70 <__aeabi_cdcmpeq>
 800eab0:	bf94      	ite	ls
 800eab2:	2001      	movls	r0, #1
 800eab4:	2000      	movhi	r0, #0
 800eab6:	f85d fb08 	ldr.w	pc, [sp], #8
 800eaba:	bf00      	nop

0800eabc <__aeabi_dcmpge>:
 800eabc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eac0:	f7ff ffce 	bl	800ea60 <__aeabi_cdrcmple>
 800eac4:	bf94      	ite	ls
 800eac6:	2001      	movls	r0, #1
 800eac8:	2000      	movhi	r0, #0
 800eaca:	f85d fb08 	ldr.w	pc, [sp], #8
 800eace:	bf00      	nop

0800ead0 <__aeabi_dcmpgt>:
 800ead0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ead4:	f7ff ffc4 	bl	800ea60 <__aeabi_cdrcmple>
 800ead8:	bf34      	ite	cc
 800eada:	2001      	movcc	r0, #1
 800eadc:	2000      	movcs	r0, #0
 800eade:	f85d fb08 	ldr.w	pc, [sp], #8
 800eae2:	bf00      	nop

0800eae4 <__aeabi_dcmpun>:
 800eae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eaec:	d102      	bne.n	800eaf4 <__aeabi_dcmpun+0x10>
 800eaee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800eaf2:	d10a      	bne.n	800eb0a <__aeabi_dcmpun+0x26>
 800eaf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800eaf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eafc:	d102      	bne.n	800eb04 <__aeabi_dcmpun+0x20>
 800eafe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800eb02:	d102      	bne.n	800eb0a <__aeabi_dcmpun+0x26>
 800eb04:	f04f 0000 	mov.w	r0, #0
 800eb08:	4770      	bx	lr
 800eb0a:	f04f 0001 	mov.w	r0, #1
 800eb0e:	4770      	bx	lr

0800eb10 <__aeabi_d2iz>:
 800eb10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800eb14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800eb18:	d215      	bcs.n	800eb46 <__aeabi_d2iz+0x36>
 800eb1a:	d511      	bpl.n	800eb40 <__aeabi_d2iz+0x30>
 800eb1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800eb20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800eb24:	d912      	bls.n	800eb4c <__aeabi_d2iz+0x3c>
 800eb26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800eb2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800eb32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800eb36:	fa23 f002 	lsr.w	r0, r3, r2
 800eb3a:	bf18      	it	ne
 800eb3c:	4240      	negne	r0, r0
 800eb3e:	4770      	bx	lr
 800eb40:	f04f 0000 	mov.w	r0, #0
 800eb44:	4770      	bx	lr
 800eb46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800eb4a:	d105      	bne.n	800eb58 <__aeabi_d2iz+0x48>
 800eb4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800eb50:	bf08      	it	eq
 800eb52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800eb56:	4770      	bx	lr
 800eb58:	f04f 0000 	mov.w	r0, #0
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop

0800eb60 <__aeabi_d2uiz>:
 800eb60:	004a      	lsls	r2, r1, #1
 800eb62:	d211      	bcs.n	800eb88 <__aeabi_d2uiz+0x28>
 800eb64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800eb68:	d211      	bcs.n	800eb8e <__aeabi_d2uiz+0x2e>
 800eb6a:	d50d      	bpl.n	800eb88 <__aeabi_d2uiz+0x28>
 800eb6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800eb70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800eb74:	d40e      	bmi.n	800eb94 <__aeabi_d2uiz+0x34>
 800eb76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800eb7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800eb82:	fa23 f002 	lsr.w	r0, r3, r2
 800eb86:	4770      	bx	lr
 800eb88:	f04f 0000 	mov.w	r0, #0
 800eb8c:	4770      	bx	lr
 800eb8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800eb92:	d102      	bne.n	800eb9a <__aeabi_d2uiz+0x3a>
 800eb94:	f04f 30ff 	mov.w	r0, #4294967295
 800eb98:	4770      	bx	lr
 800eb9a:	f04f 0000 	mov.w	r0, #0
 800eb9e:	4770      	bx	lr

0800eba0 <__aeabi_d2f>:
 800eba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800eba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800eba8:	bf24      	itt	cs
 800ebaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800ebae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800ebb2:	d90d      	bls.n	800ebd0 <__aeabi_d2f+0x30>
 800ebb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ebb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800ebbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800ebc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ebc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800ebc8:	bf08      	it	eq
 800ebca:	f020 0001 	biceq.w	r0, r0, #1
 800ebce:	4770      	bx	lr
 800ebd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800ebd4:	d121      	bne.n	800ec1a <__aeabi_d2f+0x7a>
 800ebd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800ebda:	bfbc      	itt	lt
 800ebdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800ebe0:	4770      	bxlt	lr
 800ebe2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ebe6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800ebea:	f1c2 0218 	rsb	r2, r2, #24
 800ebee:	f1c2 0c20 	rsb	ip, r2, #32
 800ebf2:	fa10 f30c 	lsls.w	r3, r0, ip
 800ebf6:	fa20 f002 	lsr.w	r0, r0, r2
 800ebfa:	bf18      	it	ne
 800ebfc:	f040 0001 	orrne.w	r0, r0, #1
 800ec00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ec04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800ec08:	fa03 fc0c 	lsl.w	ip, r3, ip
 800ec0c:	ea40 000c 	orr.w	r0, r0, ip
 800ec10:	fa23 f302 	lsr.w	r3, r3, r2
 800ec14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec18:	e7cc      	b.n	800ebb4 <__aeabi_d2f+0x14>
 800ec1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800ec1e:	d107      	bne.n	800ec30 <__aeabi_d2f+0x90>
 800ec20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800ec24:	bf1e      	ittt	ne
 800ec26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800ec2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800ec2e:	4770      	bxne	lr
 800ec30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800ec34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800ec38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop

0800ec40 <__aeabi_frsub>:
 800ec40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800ec44:	e002      	b.n	800ec4c <__addsf3>
 800ec46:	bf00      	nop

0800ec48 <__aeabi_fsub>:
 800ec48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800ec4c <__addsf3>:
 800ec4c:	0042      	lsls	r2, r0, #1
 800ec4e:	bf1f      	itttt	ne
 800ec50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800ec54:	ea92 0f03 	teqne	r2, r3
 800ec58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800ec5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800ec60:	d06a      	beq.n	800ed38 <__addsf3+0xec>
 800ec62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800ec66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800ec6a:	bfc1      	itttt	gt
 800ec6c:	18d2      	addgt	r2, r2, r3
 800ec6e:	4041      	eorgt	r1, r0
 800ec70:	4048      	eorgt	r0, r1
 800ec72:	4041      	eorgt	r1, r0
 800ec74:	bfb8      	it	lt
 800ec76:	425b      	neglt	r3, r3
 800ec78:	2b19      	cmp	r3, #25
 800ec7a:	bf88      	it	hi
 800ec7c:	4770      	bxhi	lr
 800ec7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800ec82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ec86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ec8a:	bf18      	it	ne
 800ec8c:	4240      	negne	r0, r0
 800ec8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ec92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800ec96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800ec9a:	bf18      	it	ne
 800ec9c:	4249      	negne	r1, r1
 800ec9e:	ea92 0f03 	teq	r2, r3
 800eca2:	d03f      	beq.n	800ed24 <__addsf3+0xd8>
 800eca4:	f1a2 0201 	sub.w	r2, r2, #1
 800eca8:	fa41 fc03 	asr.w	ip, r1, r3
 800ecac:	eb10 000c 	adds.w	r0, r0, ip
 800ecb0:	f1c3 0320 	rsb	r3, r3, #32
 800ecb4:	fa01 f103 	lsl.w	r1, r1, r3
 800ecb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ecbc:	d502      	bpl.n	800ecc4 <__addsf3+0x78>
 800ecbe:	4249      	negs	r1, r1
 800ecc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800ecc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800ecc8:	d313      	bcc.n	800ecf2 <__addsf3+0xa6>
 800ecca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800ecce:	d306      	bcc.n	800ecde <__addsf3+0x92>
 800ecd0:	0840      	lsrs	r0, r0, #1
 800ecd2:	ea4f 0131 	mov.w	r1, r1, rrx
 800ecd6:	f102 0201 	add.w	r2, r2, #1
 800ecda:	2afe      	cmp	r2, #254	; 0xfe
 800ecdc:	d251      	bcs.n	800ed82 <__addsf3+0x136>
 800ecde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800ece2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800ece6:	bf08      	it	eq
 800ece8:	f020 0001 	biceq.w	r0, r0, #1
 800ecec:	ea40 0003 	orr.w	r0, r0, r3
 800ecf0:	4770      	bx	lr
 800ecf2:	0049      	lsls	r1, r1, #1
 800ecf4:	eb40 0000 	adc.w	r0, r0, r0
 800ecf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800ecfc:	f1a2 0201 	sub.w	r2, r2, #1
 800ed00:	d1ed      	bne.n	800ecde <__addsf3+0x92>
 800ed02:	fab0 fc80 	clz	ip, r0
 800ed06:	f1ac 0c08 	sub.w	ip, ip, #8
 800ed0a:	ebb2 020c 	subs.w	r2, r2, ip
 800ed0e:	fa00 f00c 	lsl.w	r0, r0, ip
 800ed12:	bfaa      	itet	ge
 800ed14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800ed18:	4252      	neglt	r2, r2
 800ed1a:	4318      	orrge	r0, r3
 800ed1c:	bfbc      	itt	lt
 800ed1e:	40d0      	lsrlt	r0, r2
 800ed20:	4318      	orrlt	r0, r3
 800ed22:	4770      	bx	lr
 800ed24:	f092 0f00 	teq	r2, #0
 800ed28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800ed2c:	bf06      	itte	eq
 800ed2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800ed32:	3201      	addeq	r2, #1
 800ed34:	3b01      	subne	r3, #1
 800ed36:	e7b5      	b.n	800eca4 <__addsf3+0x58>
 800ed38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800ed3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800ed40:	bf18      	it	ne
 800ed42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800ed46:	d021      	beq.n	800ed8c <__addsf3+0x140>
 800ed48:	ea92 0f03 	teq	r2, r3
 800ed4c:	d004      	beq.n	800ed58 <__addsf3+0x10c>
 800ed4e:	f092 0f00 	teq	r2, #0
 800ed52:	bf08      	it	eq
 800ed54:	4608      	moveq	r0, r1
 800ed56:	4770      	bx	lr
 800ed58:	ea90 0f01 	teq	r0, r1
 800ed5c:	bf1c      	itt	ne
 800ed5e:	2000      	movne	r0, #0
 800ed60:	4770      	bxne	lr
 800ed62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800ed66:	d104      	bne.n	800ed72 <__addsf3+0x126>
 800ed68:	0040      	lsls	r0, r0, #1
 800ed6a:	bf28      	it	cs
 800ed6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800ed70:	4770      	bx	lr
 800ed72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800ed76:	bf3c      	itt	cc
 800ed78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800ed7c:	4770      	bxcc	lr
 800ed7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ed82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800ed86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ed8a:	4770      	bx	lr
 800ed8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800ed90:	bf16      	itet	ne
 800ed92:	4608      	movne	r0, r1
 800ed94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800ed98:	4601      	movne	r1, r0
 800ed9a:	0242      	lsls	r2, r0, #9
 800ed9c:	bf06      	itte	eq
 800ed9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800eda2:	ea90 0f01 	teqeq	r0, r1
 800eda6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800edaa:	4770      	bx	lr

0800edac <__aeabi_ui2f>:
 800edac:	f04f 0300 	mov.w	r3, #0
 800edb0:	e004      	b.n	800edbc <__aeabi_i2f+0x8>
 800edb2:	bf00      	nop

0800edb4 <__aeabi_i2f>:
 800edb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800edb8:	bf48      	it	mi
 800edba:	4240      	negmi	r0, r0
 800edbc:	ea5f 0c00 	movs.w	ip, r0
 800edc0:	bf08      	it	eq
 800edc2:	4770      	bxeq	lr
 800edc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800edc8:	4601      	mov	r1, r0
 800edca:	f04f 0000 	mov.w	r0, #0
 800edce:	e01c      	b.n	800ee0a <__aeabi_l2f+0x2a>

0800edd0 <__aeabi_ul2f>:
 800edd0:	ea50 0201 	orrs.w	r2, r0, r1
 800edd4:	bf08      	it	eq
 800edd6:	4770      	bxeq	lr
 800edd8:	f04f 0300 	mov.w	r3, #0
 800eddc:	e00a      	b.n	800edf4 <__aeabi_l2f+0x14>
 800edde:	bf00      	nop

0800ede0 <__aeabi_l2f>:
 800ede0:	ea50 0201 	orrs.w	r2, r0, r1
 800ede4:	bf08      	it	eq
 800ede6:	4770      	bxeq	lr
 800ede8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800edec:	d502      	bpl.n	800edf4 <__aeabi_l2f+0x14>
 800edee:	4240      	negs	r0, r0
 800edf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800edf4:	ea5f 0c01 	movs.w	ip, r1
 800edf8:	bf02      	ittt	eq
 800edfa:	4684      	moveq	ip, r0
 800edfc:	4601      	moveq	r1, r0
 800edfe:	2000      	moveq	r0, #0
 800ee00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800ee04:	bf08      	it	eq
 800ee06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800ee0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800ee0e:	fabc f28c 	clz	r2, ip
 800ee12:	3a08      	subs	r2, #8
 800ee14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800ee18:	db10      	blt.n	800ee3c <__aeabi_l2f+0x5c>
 800ee1a:	fa01 fc02 	lsl.w	ip, r1, r2
 800ee1e:	4463      	add	r3, ip
 800ee20:	fa00 fc02 	lsl.w	ip, r0, r2
 800ee24:	f1c2 0220 	rsb	r2, r2, #32
 800ee28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800ee2c:	fa20 f202 	lsr.w	r2, r0, r2
 800ee30:	eb43 0002 	adc.w	r0, r3, r2
 800ee34:	bf08      	it	eq
 800ee36:	f020 0001 	biceq.w	r0, r0, #1
 800ee3a:	4770      	bx	lr
 800ee3c:	f102 0220 	add.w	r2, r2, #32
 800ee40:	fa01 fc02 	lsl.w	ip, r1, r2
 800ee44:	f1c2 0220 	rsb	r2, r2, #32
 800ee48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800ee4c:	fa21 f202 	lsr.w	r2, r1, r2
 800ee50:	eb43 0002 	adc.w	r0, r3, r2
 800ee54:	bf08      	it	eq
 800ee56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800ee5a:	4770      	bx	lr

0800ee5c <__aeabi_fmul>:
 800ee5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ee60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800ee64:	bf1e      	ittt	ne
 800ee66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800ee6a:	ea92 0f0c 	teqne	r2, ip
 800ee6e:	ea93 0f0c 	teqne	r3, ip
 800ee72:	d06f      	beq.n	800ef54 <__aeabi_fmul+0xf8>
 800ee74:	441a      	add	r2, r3
 800ee76:	ea80 0c01 	eor.w	ip, r0, r1
 800ee7a:	0240      	lsls	r0, r0, #9
 800ee7c:	bf18      	it	ne
 800ee7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800ee82:	d01e      	beq.n	800eec2 <__aeabi_fmul+0x66>
 800ee84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ee88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800ee8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800ee90:	fba0 3101 	umull	r3, r1, r0, r1
 800ee94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800ee98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ee9c:	bf3e      	ittt	cc
 800ee9e:	0049      	lslcc	r1, r1, #1
 800eea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800eea4:	005b      	lslcc	r3, r3, #1
 800eea6:	ea40 0001 	orr.w	r0, r0, r1
 800eeaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800eeae:	2afd      	cmp	r2, #253	; 0xfd
 800eeb0:	d81d      	bhi.n	800eeee <__aeabi_fmul+0x92>
 800eeb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800eeba:	bf08      	it	eq
 800eebc:	f020 0001 	biceq.w	r0, r0, #1
 800eec0:	4770      	bx	lr
 800eec2:	f090 0f00 	teq	r0, #0
 800eec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800eeca:	bf08      	it	eq
 800eecc:	0249      	lsleq	r1, r1, #9
 800eece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800eed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800eed6:	3a7f      	subs	r2, #127	; 0x7f
 800eed8:	bfc2      	ittt	gt
 800eeda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800eede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800eee2:	4770      	bxgt	lr
 800eee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800eee8:	f04f 0300 	mov.w	r3, #0
 800eeec:	3a01      	subs	r2, #1
 800eeee:	dc5d      	bgt.n	800efac <__aeabi_fmul+0x150>
 800eef0:	f112 0f19 	cmn.w	r2, #25
 800eef4:	bfdc      	itt	le
 800eef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800eefa:	4770      	bxle	lr
 800eefc:	f1c2 0200 	rsb	r2, r2, #0
 800ef00:	0041      	lsls	r1, r0, #1
 800ef02:	fa21 f102 	lsr.w	r1, r1, r2
 800ef06:	f1c2 0220 	rsb	r2, r2, #32
 800ef0a:	fa00 fc02 	lsl.w	ip, r0, r2
 800ef0e:	ea5f 0031 	movs.w	r0, r1, rrx
 800ef12:	f140 0000 	adc.w	r0, r0, #0
 800ef16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800ef1a:	bf08      	it	eq
 800ef1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800ef20:	4770      	bx	lr
 800ef22:	f092 0f00 	teq	r2, #0
 800ef26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800ef2a:	bf02      	ittt	eq
 800ef2c:	0040      	lsleq	r0, r0, #1
 800ef2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800ef32:	3a01      	subeq	r2, #1
 800ef34:	d0f9      	beq.n	800ef2a <__aeabi_fmul+0xce>
 800ef36:	ea40 000c 	orr.w	r0, r0, ip
 800ef3a:	f093 0f00 	teq	r3, #0
 800ef3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ef42:	bf02      	ittt	eq
 800ef44:	0049      	lsleq	r1, r1, #1
 800ef46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800ef4a:	3b01      	subeq	r3, #1
 800ef4c:	d0f9      	beq.n	800ef42 <__aeabi_fmul+0xe6>
 800ef4e:	ea41 010c 	orr.w	r1, r1, ip
 800ef52:	e78f      	b.n	800ee74 <__aeabi_fmul+0x18>
 800ef54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800ef58:	ea92 0f0c 	teq	r2, ip
 800ef5c:	bf18      	it	ne
 800ef5e:	ea93 0f0c 	teqne	r3, ip
 800ef62:	d00a      	beq.n	800ef7a <__aeabi_fmul+0x11e>
 800ef64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800ef68:	bf18      	it	ne
 800ef6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800ef6e:	d1d8      	bne.n	800ef22 <__aeabi_fmul+0xc6>
 800ef70:	ea80 0001 	eor.w	r0, r0, r1
 800ef74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ef78:	4770      	bx	lr
 800ef7a:	f090 0f00 	teq	r0, #0
 800ef7e:	bf17      	itett	ne
 800ef80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800ef84:	4608      	moveq	r0, r1
 800ef86:	f091 0f00 	teqne	r1, #0
 800ef8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800ef8e:	d014      	beq.n	800efba <__aeabi_fmul+0x15e>
 800ef90:	ea92 0f0c 	teq	r2, ip
 800ef94:	d101      	bne.n	800ef9a <__aeabi_fmul+0x13e>
 800ef96:	0242      	lsls	r2, r0, #9
 800ef98:	d10f      	bne.n	800efba <__aeabi_fmul+0x15e>
 800ef9a:	ea93 0f0c 	teq	r3, ip
 800ef9e:	d103      	bne.n	800efa8 <__aeabi_fmul+0x14c>
 800efa0:	024b      	lsls	r3, r1, #9
 800efa2:	bf18      	it	ne
 800efa4:	4608      	movne	r0, r1
 800efa6:	d108      	bne.n	800efba <__aeabi_fmul+0x15e>
 800efa8:	ea80 0001 	eor.w	r0, r0, r1
 800efac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800efb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800efb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800efb8:	4770      	bx	lr
 800efba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800efbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800efc2:	4770      	bx	lr

0800efc4 <__aeabi_fdiv>:
 800efc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800efc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800efcc:	bf1e      	ittt	ne
 800efce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800efd2:	ea92 0f0c 	teqne	r2, ip
 800efd6:	ea93 0f0c 	teqne	r3, ip
 800efda:	d069      	beq.n	800f0b0 <__aeabi_fdiv+0xec>
 800efdc:	eba2 0203 	sub.w	r2, r2, r3
 800efe0:	ea80 0c01 	eor.w	ip, r0, r1
 800efe4:	0249      	lsls	r1, r1, #9
 800efe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800efea:	d037      	beq.n	800f05c <__aeabi_fdiv+0x98>
 800efec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800eff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800eff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800effc:	428b      	cmp	r3, r1
 800effe:	bf38      	it	cc
 800f000:	005b      	lslcc	r3, r3, #1
 800f002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800f006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800f00a:	428b      	cmp	r3, r1
 800f00c:	bf24      	itt	cs
 800f00e:	1a5b      	subcs	r3, r3, r1
 800f010:	ea40 000c 	orrcs.w	r0, r0, ip
 800f014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800f018:	bf24      	itt	cs
 800f01a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800f01e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800f022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800f026:	bf24      	itt	cs
 800f028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800f02c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800f030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800f034:	bf24      	itt	cs
 800f036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800f03a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800f03e:	011b      	lsls	r3, r3, #4
 800f040:	bf18      	it	ne
 800f042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800f046:	d1e0      	bne.n	800f00a <__aeabi_fdiv+0x46>
 800f048:	2afd      	cmp	r2, #253	; 0xfd
 800f04a:	f63f af50 	bhi.w	800eeee <__aeabi_fmul+0x92>
 800f04e:	428b      	cmp	r3, r1
 800f050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800f054:	bf08      	it	eq
 800f056:	f020 0001 	biceq.w	r0, r0, #1
 800f05a:	4770      	bx	lr
 800f05c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800f060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800f064:	327f      	adds	r2, #127	; 0x7f
 800f066:	bfc2      	ittt	gt
 800f068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800f06c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800f070:	4770      	bxgt	lr
 800f072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f076:	f04f 0300 	mov.w	r3, #0
 800f07a:	3a01      	subs	r2, #1
 800f07c:	e737      	b.n	800eeee <__aeabi_fmul+0x92>
 800f07e:	f092 0f00 	teq	r2, #0
 800f082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800f086:	bf02      	ittt	eq
 800f088:	0040      	lsleq	r0, r0, #1
 800f08a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800f08e:	3a01      	subeq	r2, #1
 800f090:	d0f9      	beq.n	800f086 <__aeabi_fdiv+0xc2>
 800f092:	ea40 000c 	orr.w	r0, r0, ip
 800f096:	f093 0f00 	teq	r3, #0
 800f09a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800f09e:	bf02      	ittt	eq
 800f0a0:	0049      	lsleq	r1, r1, #1
 800f0a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800f0a6:	3b01      	subeq	r3, #1
 800f0a8:	d0f9      	beq.n	800f09e <__aeabi_fdiv+0xda>
 800f0aa:	ea41 010c 	orr.w	r1, r1, ip
 800f0ae:	e795      	b.n	800efdc <__aeabi_fdiv+0x18>
 800f0b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800f0b4:	ea92 0f0c 	teq	r2, ip
 800f0b8:	d108      	bne.n	800f0cc <__aeabi_fdiv+0x108>
 800f0ba:	0242      	lsls	r2, r0, #9
 800f0bc:	f47f af7d 	bne.w	800efba <__aeabi_fmul+0x15e>
 800f0c0:	ea93 0f0c 	teq	r3, ip
 800f0c4:	f47f af70 	bne.w	800efa8 <__aeabi_fmul+0x14c>
 800f0c8:	4608      	mov	r0, r1
 800f0ca:	e776      	b.n	800efba <__aeabi_fmul+0x15e>
 800f0cc:	ea93 0f0c 	teq	r3, ip
 800f0d0:	d104      	bne.n	800f0dc <__aeabi_fdiv+0x118>
 800f0d2:	024b      	lsls	r3, r1, #9
 800f0d4:	f43f af4c 	beq.w	800ef70 <__aeabi_fmul+0x114>
 800f0d8:	4608      	mov	r0, r1
 800f0da:	e76e      	b.n	800efba <__aeabi_fmul+0x15e>
 800f0dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800f0e0:	bf18      	it	ne
 800f0e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800f0e6:	d1ca      	bne.n	800f07e <__aeabi_fdiv+0xba>
 800f0e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800f0ec:	f47f af5c 	bne.w	800efa8 <__aeabi_fmul+0x14c>
 800f0f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800f0f4:	f47f af3c 	bne.w	800ef70 <__aeabi_fmul+0x114>
 800f0f8:	e75f      	b.n	800efba <__aeabi_fmul+0x15e>
 800f0fa:	bf00      	nop

0800f0fc <__gesf2>:
 800f0fc:	f04f 3cff 	mov.w	ip, #4294967295
 800f100:	e006      	b.n	800f110 <__cmpsf2+0x4>
 800f102:	bf00      	nop

0800f104 <__lesf2>:
 800f104:	f04f 0c01 	mov.w	ip, #1
 800f108:	e002      	b.n	800f110 <__cmpsf2+0x4>
 800f10a:	bf00      	nop

0800f10c <__cmpsf2>:
 800f10c:	f04f 0c01 	mov.w	ip, #1
 800f110:	f84d cd04 	str.w	ip, [sp, #-4]!
 800f114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800f118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800f11c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800f120:	bf18      	it	ne
 800f122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800f126:	d011      	beq.n	800f14c <__cmpsf2+0x40>
 800f128:	b001      	add	sp, #4
 800f12a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800f12e:	bf18      	it	ne
 800f130:	ea90 0f01 	teqne	r0, r1
 800f134:	bf58      	it	pl
 800f136:	ebb2 0003 	subspl.w	r0, r2, r3
 800f13a:	bf88      	it	hi
 800f13c:	17c8      	asrhi	r0, r1, #31
 800f13e:	bf38      	it	cc
 800f140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800f144:	bf18      	it	ne
 800f146:	f040 0001 	orrne.w	r0, r0, #1
 800f14a:	4770      	bx	lr
 800f14c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800f150:	d102      	bne.n	800f158 <__cmpsf2+0x4c>
 800f152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800f156:	d105      	bne.n	800f164 <__cmpsf2+0x58>
 800f158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800f15c:	d1e4      	bne.n	800f128 <__cmpsf2+0x1c>
 800f15e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800f162:	d0e1      	beq.n	800f128 <__cmpsf2+0x1c>
 800f164:	f85d 0b04 	ldr.w	r0, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop

0800f16c <__aeabi_cfrcmple>:
 800f16c:	4684      	mov	ip, r0
 800f16e:	4608      	mov	r0, r1
 800f170:	4661      	mov	r1, ip
 800f172:	e7ff      	b.n	800f174 <__aeabi_cfcmpeq>

0800f174 <__aeabi_cfcmpeq>:
 800f174:	b50f      	push	{r0, r1, r2, r3, lr}
 800f176:	f7ff ffc9 	bl	800f10c <__cmpsf2>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	bf48      	it	mi
 800f17e:	f110 0f00 	cmnmi.w	r0, #0
 800f182:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800f184 <__aeabi_fcmpeq>:
 800f184:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f188:	f7ff fff4 	bl	800f174 <__aeabi_cfcmpeq>
 800f18c:	bf0c      	ite	eq
 800f18e:	2001      	moveq	r0, #1
 800f190:	2000      	movne	r0, #0
 800f192:	f85d fb08 	ldr.w	pc, [sp], #8
 800f196:	bf00      	nop

0800f198 <__aeabi_fcmplt>:
 800f198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f19c:	f7ff ffea 	bl	800f174 <__aeabi_cfcmpeq>
 800f1a0:	bf34      	ite	cc
 800f1a2:	2001      	movcc	r0, #1
 800f1a4:	2000      	movcs	r0, #0
 800f1a6:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1aa:	bf00      	nop

0800f1ac <__aeabi_fcmple>:
 800f1ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1b0:	f7ff ffe0 	bl	800f174 <__aeabi_cfcmpeq>
 800f1b4:	bf94      	ite	ls
 800f1b6:	2001      	movls	r0, #1
 800f1b8:	2000      	movhi	r0, #0
 800f1ba:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1be:	bf00      	nop

0800f1c0 <__aeabi_fcmpge>:
 800f1c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1c4:	f7ff ffd2 	bl	800f16c <__aeabi_cfrcmple>
 800f1c8:	bf94      	ite	ls
 800f1ca:	2001      	movls	r0, #1
 800f1cc:	2000      	movhi	r0, #0
 800f1ce:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1d2:	bf00      	nop

0800f1d4 <__aeabi_fcmpgt>:
 800f1d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1d8:	f7ff ffc8 	bl	800f16c <__aeabi_cfrcmple>
 800f1dc:	bf34      	ite	cc
 800f1de:	2001      	movcc	r0, #1
 800f1e0:	2000      	movcs	r0, #0
 800f1e2:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1e6:	bf00      	nop

0800f1e8 <__aeabi_f2iz>:
 800f1e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800f1ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800f1f0:	d30f      	bcc.n	800f212 <__aeabi_f2iz+0x2a>
 800f1f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800f1f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800f1fa:	d90d      	bls.n	800f218 <__aeabi_f2iz+0x30>
 800f1fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800f200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800f208:	fa23 f002 	lsr.w	r0, r3, r2
 800f20c:	bf18      	it	ne
 800f20e:	4240      	negne	r0, r0
 800f210:	4770      	bx	lr
 800f212:	f04f 0000 	mov.w	r0, #0
 800f216:	4770      	bx	lr
 800f218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800f21c:	d101      	bne.n	800f222 <__aeabi_f2iz+0x3a>
 800f21e:	0242      	lsls	r2, r0, #9
 800f220:	d105      	bne.n	800f22e <__aeabi_f2iz+0x46>
 800f222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800f226:	bf08      	it	eq
 800f228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800f22c:	4770      	bx	lr
 800f22e:	f04f 0000 	mov.w	r0, #0
 800f232:	4770      	bx	lr

0800f234 <__aeabi_f2uiz>:
 800f234:	0042      	lsls	r2, r0, #1
 800f236:	d20e      	bcs.n	800f256 <__aeabi_f2uiz+0x22>
 800f238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800f23c:	d30b      	bcc.n	800f256 <__aeabi_f2uiz+0x22>
 800f23e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800f242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800f246:	d409      	bmi.n	800f25c <__aeabi_f2uiz+0x28>
 800f248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800f24c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f250:	fa23 f002 	lsr.w	r0, r3, r2
 800f254:	4770      	bx	lr
 800f256:	f04f 0000 	mov.w	r0, #0
 800f25a:	4770      	bx	lr
 800f25c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800f260:	d101      	bne.n	800f266 <__aeabi_f2uiz+0x32>
 800f262:	0242      	lsls	r2, r0, #9
 800f264:	d102      	bne.n	800f26c <__aeabi_f2uiz+0x38>
 800f266:	f04f 30ff 	mov.w	r0, #4294967295
 800f26a:	4770      	bx	lr
 800f26c:	f04f 0000 	mov.w	r0, #0
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop

0800f274 <begin>:
	BMI160_INT2_FIFO_FULL_MASK,
	BMI160_INT2_FIFO_WM_MASK
};

//上层应用
void begin(TYPE v, uint8_t addr){
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	460a      	mov	r2, r1
 800f27e:	71fb      	strb	r3, [r7, #7]
 800f280:	4613      	mov	r3, r2
 800f282:	71bb      	strb	r3, [r7, #6]
    Obmi160=(struct bmi160Dev *)malloc(sizeof(struct bmi160Dev));
 800f284:	2028      	movs	r0, #40	; 0x28
 800f286:	f00e fd53 	bl	801dd30 <malloc>
 800f28a:	4603      	mov	r3, r0
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b1a      	ldr	r3, [pc, #104]	; (800f2f8 <begin+0x84>)
 800f290:	601a      	str	r2, [r3, #0]
    Oaccel= (struct bmi160SensorData*)malloc(sizeof(struct bmi160SensorData));
 800f292:	200c      	movs	r0, #12
 800f294:	f00e fd4c 	bl	801dd30 <malloc>
 800f298:	4603      	mov	r3, r0
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b17      	ldr	r3, [pc, #92]	; (800f2fc <begin+0x88>)
 800f29e:	601a      	str	r2, [r3, #0]
    Ogyro = (struct bmi160SensorData*)malloc(sizeof(struct bmi160SensorData));
 800f2a0:	200c      	movs	r0, #12
 800f2a2:	f00e fd45 	bl	801dd30 <malloc>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	4b15      	ldr	r3, [pc, #84]	; (800f300 <begin+0x8c>)
 800f2ac:	601a      	str	r2, [r3, #0]
	Obmi160->id = addr;
 800f2ae:	4b12      	ldr	r3, [pc, #72]	; (800f2f8 <begin+0x84>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	79ba      	ldrb	r2, [r7, #6]
 800f2b4:	705a      	strb	r2, [r3, #1]
	Obmi160->interface = BMI160_I2C_INTF;
 800f2b6:	4b10      	ldr	r3, [pc, #64]	; (800f2f8 <begin+0x84>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	709a      	strb	r2, [r3, #2]
	I2cInit(Obmi160);
 800f2be:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <begin+0x84>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 f820 	bl	800f308 <I2cInit>
	if(v == eStep){
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d110      	bne.n	800f2f0 <begin+0x7c>
        setInt(2);
 800f2ce:	2002      	movs	r0, #2
 800f2d0:	f000 f8fc 	bl	800f4cc <setInt>
        setStepCounter(1,Obmi160);
 800f2d4:	4b08      	ldr	r3, [pc, #32]	; (800f2f8 <begin+0x84>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	2001      	movs	r0, #1
 800f2dc:	f000 fc5c 	bl	800fb98 <setStepCounter>
        setStepPowerMode(stepNormalPowerMode,Obmi160);
 800f2e0:	4b08      	ldr	r3, [pc, #32]	; (800f304 <begin+0x90>)
 800f2e2:	781a      	ldrb	r2, [r3, #0]
 800f2e4:	4b04      	ldr	r3, [pc, #16]	; (800f2f8 <begin+0x84>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	f000 fc96 	bl	800fc1c <setStepPowerMode>
	}
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20000974 	.word	0x20000974
 800f2fc:	20000970 	.word	0x20000970
 800f300:	2000096c 	.word	0x2000096c
 800f304:	200005c4 	.word	0x200005c4

0800f308 <I2cInit>:

int8_t I2cInit(struct bmi160Dev *dev){
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	73fb      	strb	r3, [r7, #15]
  uint8_t chip_id=0;
 800f314:	2300      	movs	r3, #0
 800f316:	73bb      	strb	r3, [r7, #14]
  uint8_t data=0;
 800f318:	2300      	movs	r3, #0
 800f31a:	737b      	strb	r3, [r7, #13]
  if (dev==NULL){
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d102      	bne.n	800f328 <I2cInit+0x20>
    return BMI160_E_NULL_PTR;
 800f322:	f04f 33ff 	mov.w	r3, #4294967295
 800f326:	e039      	b.n	800f39c <I2cInit+0x94>
  }
  if (dev->interface == BMI160_SPI_INTF){
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	789b      	ldrb	r3, [r3, #2]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d108      	bne.n	800f342 <I2cInit+0x3a>
    rslt = getRegs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800f330:	f107 010d 	add.w	r1, r7, #13
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	207f      	movs	r0, #127	; 0x7f
 800f33a:	f001 fd09 	bl	8010d50 <getRegs>
 800f33e:	4603      	mov	r3, r0
 800f340:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt == BMI160_OK){
 800f342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d126      	bne.n	800f398 <I2cInit+0x90>
    rslt = getRegs(BMI160_CHIP_ID_ADDR, &chip_id, 1, dev);
 800f34a:	f107 010e 	add.w	r1, r7, #14
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	2000      	movs	r0, #0
 800f354:	f001 fcfc 	bl	8010d50 <getRegs>
 800f358:	4603      	mov	r3, r0
 800f35a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI160_OK)&&(chip_id==BMI160_CHIP_ID)){
 800f35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d117      	bne.n	800f394 <I2cInit+0x8c>
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	2bd1      	cmp	r3, #209	; 0xd1
 800f368:	d114      	bne.n	800f394 <I2cInit+0x8c>
      dev->any_sig_sel = eBmi160BothAnySigMotionDisabled;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	22ff      	movs	r2, #255	; 0xff
 800f36e:	70da      	strb	r2, [r3, #3]
      dev->chipId = chip_id;
 800f370:	7bba      	ldrb	r2, [r7, #14]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	701a      	strb	r2, [r3, #0]
      rslt = softReset(dev);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f858 	bl	800f42c <softReset>
 800f37c:	4603      	mov	r3, r0
 800f37e:	73fb      	strb	r3, [r7, #15]
      if (rslt==BMI160_OK){
 800f380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d107      	bne.n	800f398 <I2cInit+0x90>
        rslt = setSensConf(dev);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 f80b 	bl	800f3a4 <setSensConf>
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]
      if (rslt==BMI160_OK){
 800f392:	e001      	b.n	800f398 <I2cInit+0x90>
      }
    }else{
      rslt = BMI160_E_DEV_NOT_FOUND;
 800f394:	23fd      	movs	r3, #253	; 0xfd
 800f396:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 800f398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <setSensConf>:

int8_t setSensConf(struct bmi160Dev *dev){
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]
  dev->accelCfg.odr = BMI160_ACCEL_ODR_1600HZ;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	220c      	movs	r2, #12
 800f3b4:	715a      	strb	r2, [r3, #5]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2203      	movs	r2, #3
 800f3ba:	719a      	strb	r2, [r3, #6]
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2202      	movs	r2, #2
 800f3c0:	71da      	strb	r2, [r3, #7]

  dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2211      	movs	r2, #17
 800f3c6:	711a      	strb	r2, [r3, #4]

  dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	220d      	movs	r2, #13
 800f3cc:	735a      	strb	r2, [r3, #13]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	739a      	strb	r2, [r3, #14]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	73da      	strb	r2, [r3, #15]

  dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2215      	movs	r2, #21
 800f3de:	731a      	strb	r2, [r3, #12]


  rslt = setAccelConf(dev);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fdc7 	bl	800ff74 <setAccelConf>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800f3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d116      	bne.n	800f420 <setSensConf+0x7c>
    rslt = setGyroConf(dev);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fc80 	bl	800fcf8 <setGyroConf>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800f3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10d      	bne.n	800f420 <setSensConf+0x7c>
      /* write power mode for accel and gyro */
      rslt = setPowerMode(dev);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 febc 	bl	8010182 <setPowerMode>
 800f40a:	4603      	mov	r3, r0
 800f40c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 800f40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d104      	bne.n	800f420 <setSensConf+0x7c>
        rslt = checkInvalidSettg(dev);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fd77 	bl	800ff0a <checkInvalidSettg>
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rslt;
 800f420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <softReset>:

int8_t softReset(struct bmi160Dev *dev){
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	73fb      	strb	r3, [r7, #15]
  uint8_t data = BMI160_SOFT_RESET_CMD;
 800f438:	23b6      	movs	r3, #182	; 0xb6
 800f43a:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <softReset+0x1a>
    rslt = BMI160_E_NULL_PTR;
 800f442:	23ff      	movs	r3, #255	; 0xff
 800f444:	73fb      	strb	r3, [r7, #15]
  }
  rslt = setRegs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800f446:	f107 010e 	add.w	r1, r7, #14
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	207e      	movs	r0, #126	; 0x7e
 800f450:	f001 fcd4 	bl	8010dfc <setRegs>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]
  //delay(BMI160_SOFT_RESET_DELAY_MS);
  HAL_Delay(BMI160_SOFT_RESET_DELAY_MS);
 800f458:	200f      	movs	r0, #15
 800f45a:	f005 fe59 	bl	8015110 <HAL_Delay>
  if (rslt == BMI160_OK){
 800f45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d102      	bne.n	800f46c <softReset+0x40>
    defaultParamSettg(dev);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f806 	bl	800f478 <defaultParamSettg>
  }
  return rslt;
 800f46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <defaultParamSettg>:

void defaultParamSettg(struct bmi160Dev *dev){
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  /* Initializing accel and gyro params with
  * default values */
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2202      	movs	r2, #2
 800f484:	71da      	strb	r2, [r3, #7]
  dev->accelCfg.odr = BMI160_ACCEL_ODR_100HZ;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2208      	movs	r2, #8
 800f48a:	715a      	strb	r2, [r3, #5]
  dev->accelCfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2210      	movs	r2, #16
 800f490:	711a      	strb	r2, [r3, #4]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2203      	movs	r2, #3
 800f496:	719a      	strb	r2, [r3, #6]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2202      	movs	r2, #2
 800f49c:	73da      	strb	r2, [r3, #15]
  dev->gyroCfg.odr = BMI160_GYRO_ODR_100HZ;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2208      	movs	r2, #8
 800f4a2:	735a      	strb	r2, [r3, #13]
  dev->gyroCfg.power = BMI160_GYRO_SUSPEND_MODE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2214      	movs	r2, #20
 800f4a8:	731a      	strb	r2, [r3, #12]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	739a      	strb	r2, [r3, #14]

  /* To maintain the previous state of accel configuration */
  dev->prevAccelCfg = dev->accelCfg;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	6852      	ldr	r2, [r2, #4]
 800f4b6:	609a      	str	r2, [r3, #8]
  /* To maintain the previous state of gyro configuration */
  dev->prevGyroCfg = dev->gyroCfg;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	68d2      	ldr	r2, [r2, #12]
 800f4be:	611a      	str	r2, [r3, #16]
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bc80      	pop	{r7}
 800f4c8:	4770      	bx	lr
	...

0800f4cc <setInt>:

int8_t setInt(int intNum){
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b086      	sub	sp, #24
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	75fb      	strb	r3, [r7, #23]
  struct bmi160IntSettg intConfig;
  if (intNum == 1){
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d102      	bne.n	800f4e4 <setInt+0x18>
    intConfig.intChannel = BMI160_INT_CHANNEL_1;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	733b      	strb	r3, [r7, #12]
 800f4e2:	e008      	b.n	800f4f6 <setInt+0x2a>
  }else if(intNum == 2){
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d102      	bne.n	800f4f0 <setInt+0x24>
    intConfig.intChannel = BMI160_INT_CHANNEL_2;
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	733b      	strb	r3, [r7, #12]
 800f4ee:	e002      	b.n	800f4f6 <setInt+0x2a>
  }else{
    return BMI160_E_NULL_PTR;
 800f4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f4:	e02d      	b.n	800f552 <setInt+0x86>
  }
  /* Select the Interrupt type */
  intConfig.intType = BMI160_STEP_DETECT_INT;// Choosing Step Detector interrupt
 800f4f6:	2302      	movs	r3, #2
 800f4f8:	737b      	strb	r3, [r7, #13]
  /* Select the interrupt channel/pin settings */
  intConfig.intPinSettg.outputEn = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 800f4fa:	7bbb      	ldrb	r3, [r7, #14]
 800f4fc:	f043 0301 	orr.w	r3, r3, #1
 800f500:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.outputMode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 800f502:	7bbb      	ldrb	r3, [r7, #14]
 800f504:	f36f 0341 	bfc	r3, #1, #1
 800f508:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.outputType = BMI160_ENABLE;// Choosing active High output
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	f043 0304 	orr.w	r3, r3, #4
 800f510:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.edgeCtrl = BMI160_ENABLE;// Choosing edge triggered output
 800f512:	7bbb      	ldrb	r3, [r7, #14]
 800f514:	f043 0308 	orr.w	r3, r3, #8
 800f518:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.inputEn = BMI160_DISABLE;// Disabling interrupt pin to act as input
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	f36f 1304 	bfc	r3, #4, #1
 800f520:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.latchDur =BMI160_LATCH_DUR_NONE;// non-latched output
 800f522:	89fb      	ldrh	r3, [r7, #14]
 800f524:	f36f 1348 	bfc	r3, #5, #4
 800f528:	81fb      	strh	r3, [r7, #14]

  /* Select the Step Detector interrupt parameters, Kindly use the recommended settings for step detector */
  intConfig.intTypeCfg.accStepDetectInt.stepDetectorMode = BMI160_STEP_DETECT_NORMAL;
 800f52a:	7c3b      	ldrb	r3, [r7, #16]
 800f52c:	f36f 1387 	bfc	r3, #6, #2
 800f530:	743b      	strb	r3, [r7, #16]
  intConfig.intTypeCfg.accStepDetectInt.stepDetectorEn = BMI160_ENABLE;// 1-enable, 0-disable the step detector
 800f532:	7c3b      	ldrb	r3, [r7, #16]
 800f534:	f043 0301 	orr.w	r3, r3, #1
 800f538:	743b      	strb	r3, [r7, #16]
  rslt =setIntConfig(&intConfig, Obmi160);
 800f53a:	4b08      	ldr	r3, [pc, #32]	; (800f55c <setInt+0x90>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	f107 030c 	add.w	r3, r7, #12
 800f542:	4611      	mov	r1, r2
 800f544:	4618      	mov	r0, r3
 800f546:	f000 f80b 	bl	800f560 <setIntConfig>
 800f54a:	4603      	mov	r3, r0
 800f54c:	75fb      	strb	r3, [r7, #23]
  return rslt;
 800f54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3718      	adds	r7, #24
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	20000974 	.word	0x20000974

0800f560 <setIntConfig>:

int8_t setIntConfig(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	73fb      	strb	r3, [r7, #15]
  switch (intConfig->intType) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	785b      	ldrb	r3, [r3, #1]
 800f572:	2b0c      	cmp	r3, #12
 800f574:	d823      	bhi.n	800f5be <setIntConfig+0x5e>
 800f576:	a201      	add	r2, pc, #4	; (adr r2, 800f57c <setIntConfig+0x1c>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f5bf 	.word	0x0800f5bf
 800f580:	0800f5bf 	.word	0x0800f5bf
 800f584:	0800f5b1 	.word	0x0800f5b1
 800f588:	0800f5bf 	.word	0x0800f5bf
 800f58c:	0800f5bf 	.word	0x0800f5bf
 800f590:	0800f5bf 	.word	0x0800f5bf
 800f594:	0800f5bf 	.word	0x0800f5bf
 800f598:	0800f5bf 	.word	0x0800f5bf
 800f59c:	0800f5bf 	.word	0x0800f5bf
 800f5a0:	0800f5bf 	.word	0x0800f5bf
 800f5a4:	0800f5bf 	.word	0x0800f5bf
 800f5a8:	0800f5bf 	.word	0x0800f5bf
 800f5ac:	0800f5bf 	.word	0x0800f5bf
     /* Double tap and single tap Interrupt */
    //rslt = set_accel_tap_int(intConfig, dev);
    break;
  case BMI160_STEP_DETECT_INT:
    /* Step detector interrupt */
    rslt = setAccelStepDetectInt(intConfig, dev);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f80a 	bl	800f5cc <setAccelStepDetectInt>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f5bc:	e000      	b.n	800f5c0 <setIntConfig+0x60>
  case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:
     /* Fifo water-mark interrupt */
    //rslt = set_fifo_watermark_int(intConfig, dev);
    break;
  default:
    break;
 800f5be:	bf00      	nop
  }
  return rslt;
 800f5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <setAccelStepDetectInt>:

int8_t setAccelStepDetectInt(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	73fb      	strb	r3, [r7, #15]
  /* Null-pointer check */
  if (dev == NULL){
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d101      	bne.n	800f5e4 <setAccelStepDetectInt+0x18>
    rslt = BMI160_E_NULL_PTR;
 800f5e0:	23ff      	movs	r3, #255	; 0xff
 800f5e2:	73fb      	strb	r3, [r7, #15]
  }
  if ((rslt != BMI160_OK) || (intConfig == NULL)) {
 800f5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <setAccelStepDetectInt+0x26>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d102      	bne.n	800f5f8 <setAccelStepDetectInt+0x2c>
    rslt = BMI160_E_NULL_PTR;
 800f5f2:	23ff      	movs	r3, #255	; 0xff
 800f5f4:	73fb      	strb	r3, [r7, #15]
 800f5f6:	e026      	b.n	800f646 <setAccelStepDetectInt+0x7a>
  } else {
    /* updating the interrupt structure to local structure */
    struct bmi160AccStepDetectIntCfg *stepDetectIntCfg =
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	60bb      	str	r3, [r7, #8]
                &(intConfig->intTypeCfg.accStepDetectInt);
    rslt = enableStepDetectInt(stepDetectIntCfg, dev);
 800f5fe:	6839      	ldr	r1, [r7, #0]
 800f600:	68b8      	ldr	r0, [r7, #8]
 800f602:	f000 fa90 	bl	800fb26 <enableStepDetectInt>
 800f606:	4603      	mov	r3, r0
 800f608:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800f60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d119      	bne.n	800f646 <setAccelStepDetectInt+0x7a>
      /* Configure Interrupt pins */
      rslt = setIntrPinConfig(intConfig, dev);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f939 	bl	800f88c <setIntrPinConfig>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK) {
 800f61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10f      	bne.n	800f646 <setAccelStepDetectInt+0x7a>
        rslt = mapFeatureInterrupt(intConfig, dev);
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 f813 	bl	800f654 <mapFeatureInterrupt>
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK){
 800f632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d105      	bne.n	800f646 <setAccelStepDetectInt+0x7a>
          rslt = configStepDetect(stepDetectIntCfg, dev);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	68b8      	ldr	r0, [r7, #8]
 800f63e:	f000 f89b 	bl	800f778 <configStepDetect>
 800f642:	4603      	mov	r3, r0
 800f644:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
  return rslt;
 800f646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
	...

0800f654 <mapFeatureInterrupt>:

int8_t mapFeatureInterrupt(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t data[3] = {0, 0, 0};
 800f65e:	2300      	movs	r3, #0
 800f660:	733b      	strb	r3, [r7, #12]
 800f662:	2300      	movs	r3, #0
 800f664:	737b      	strb	r3, [r7, #13]
 800f666:	2300      	movs	r3, #0
 800f668:	73bb      	strb	r3, [r7, #14]
  uint8_t temp[3] = {0, 0, 0};
 800f66a:	2300      	movs	r3, #0
 800f66c:	723b      	strb	r3, [r7, #8]
 800f66e:	2300      	movs	r3, #0
 800f670:	727b      	strb	r3, [r7, #9]
 800f672:	2300      	movs	r3, #0
 800f674:	72bb      	strb	r3, [r7, #10]
  rslt = getRegs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 800f676:	f107 010c 	add.w	r1, r7, #12
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2203      	movs	r2, #3
 800f67e:	2055      	movs	r0, #85	; 0x55
 800f680:	f001 fb66 	bl	8010d50 <getRegs>
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800f688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d16a      	bne.n	800f766 <mapFeatureInterrupt+0x112>
    temp[0] = data[0] & ~int_mask_lookup_table[intConfig->intType];
 800f690:	7b3b      	ldrb	r3, [r7, #12]
 800f692:	b25a      	sxtb	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	785b      	ldrb	r3, [r3, #1]
 800f698:	4619      	mov	r1, r3
 800f69a:	4b36      	ldr	r3, [pc, #216]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f69c:	5c5b      	ldrb	r3, [r3, r1]
 800f69e:	b25b      	sxtb	r3, r3
 800f6a0:	43db      	mvns	r3, r3
 800f6a2:	b25b      	sxtb	r3, r3
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	b25b      	sxtb	r3, r3
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	723b      	strb	r3, [r7, #8]
    temp[2] = data[2] & ~int_mask_lookup_table[intConfig->intType];
 800f6ac:	7bbb      	ldrb	r3, [r7, #14]
 800f6ae:	b25a      	sxtb	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	785b      	ldrb	r3, [r3, #1]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4b2f      	ldr	r3, [pc, #188]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f6b8:	5c5b      	ldrb	r3, [r3, r1]
 800f6ba:	b25b      	sxtb	r3, r3
 800f6bc:	43db      	mvns	r3, r3
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	4013      	ands	r3, r2
 800f6c2:	b25b      	sxtb	r3, r3
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	72bb      	strb	r3, [r7, #10]
    switch (intConfig->intChannel) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d83b      	bhi.n	800f748 <mapFeatureInterrupt+0xf4>
 800f6d0:	a201      	add	r2, pc, #4	; (adr r2, 800f6d8 <mapFeatureInterrupt+0x84>)
 800f6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d6:	bf00      	nop
 800f6d8:	0800f6e9 	.word	0x0800f6e9
 800f6dc:	0800f6f3 	.word	0x0800f6f3
 800f6e0:	0800f70b 	.word	0x0800f70b
 800f6e4:	0800f723 	.word	0x0800f723
    case BMI160_INT_CHANNEL_NONE:
      data[0] = temp[0];
 800f6e8:	7a3b      	ldrb	r3, [r7, #8]
 800f6ea:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2];
 800f6ec:	7abb      	ldrb	r3, [r7, #10]
 800f6ee:	73bb      	strb	r3, [r7, #14]
      break;
 800f6f0:	e02c      	b.n	800f74c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_1:
      data[0] = temp[0] | int_mask_lookup_table[intConfig->intType];
 800f6f2:	7a3a      	ldrb	r2, [r7, #8]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	785b      	ldrb	r3, [r3, #1]
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	4b1e      	ldr	r3, [pc, #120]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f6fc:	5c5b      	ldrb	r3, [r3, r1]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	b2db      	uxtb	r3, r3
 800f702:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2];
 800f704:	7abb      	ldrb	r3, [r7, #10]
 800f706:	73bb      	strb	r3, [r7, #14]
      break;
 800f708:	e020      	b.n	800f74c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_2:
      data[2] = temp[2] | int_mask_lookup_table[intConfig->intType];
 800f70a:	7aba      	ldrb	r2, [r7, #10]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	785b      	ldrb	r3, [r3, #1]
 800f710:	4619      	mov	r1, r3
 800f712:	4b18      	ldr	r3, [pc, #96]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f714:	5c5b      	ldrb	r3, [r3, r1]
 800f716:	4313      	orrs	r3, r2
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	73bb      	strb	r3, [r7, #14]
      data[0] = temp[0];
 800f71c:	7a3b      	ldrb	r3, [r7, #8]
 800f71e:	733b      	strb	r3, [r7, #12]
      break;
 800f720:	e014      	b.n	800f74c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_BOTH:
      data[0] = temp[0] | int_mask_lookup_table[intConfig->intType];
 800f722:	7a3a      	ldrb	r2, [r7, #8]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	785b      	ldrb	r3, [r3, #1]
 800f728:	4619      	mov	r1, r3
 800f72a:	4b12      	ldr	r3, [pc, #72]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f72c:	5c5b      	ldrb	r3, [r3, r1]
 800f72e:	4313      	orrs	r3, r2
 800f730:	b2db      	uxtb	r3, r3
 800f732:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2] | int_mask_lookup_table[intConfig->intType];
 800f734:	7aba      	ldrb	r2, [r7, #10]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	785b      	ldrb	r3, [r3, #1]
 800f73a:	4619      	mov	r1, r3
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <mapFeatureInterrupt+0x120>)
 800f73e:	5c5b      	ldrb	r3, [r3, r1]
 800f740:	4313      	orrs	r3, r2
 800f742:	b2db      	uxtb	r3, r3
 800f744:	73bb      	strb	r3, [r7, #14]
      break;
 800f746:	e001      	b.n	800f74c <mapFeatureInterrupt+0xf8>
    default:
      rslt = BMI160_E_OUT_OF_RANGE;
 800f748:	23fc      	movs	r3, #252	; 0xfc
 800f74a:	73fb      	strb	r3, [r7, #15]
    }
    if (rslt == BMI160_OK)
 800f74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d108      	bne.n	800f766 <mapFeatureInterrupt+0x112>
      rslt = setRegs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 800f754:	f107 010c 	add.w	r1, r7, #12
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	2203      	movs	r2, #3
 800f75c:	2055      	movs	r0, #85	; 0x55
 800f75e:	f001 fb4d 	bl	8010dfc <setRegs>
 800f762:	4603      	mov	r3, r0
 800f764:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 800f766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	080204cc 	.word	0x080204cc

0800f778 <configStepDetect>:

int8_t configStepDetect(struct bmi160AccStepDetectIntCfg *stepDetectIntCfg, struct bmi160Dev *dev){
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 800f782:	2300      	movs	r3, #0
 800f784:	73fb      	strb	r3, [r7, #15]
  uint8_t data_array[2] = {0};
 800f786:	2300      	movs	r3, #0
 800f788:	81bb      	strh	r3, [r7, #12]


  if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_NORMAL) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b00      	cmp	r3, #0
 800f796:	d104      	bne.n	800f7a2 <configStepDetect+0x2a>
    /* Normal mode setting */
    data_array[0] = 0x15;
 800f798:	2315      	movs	r3, #21
 800f79a:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x03;
 800f79c:	2303      	movs	r3, #3
 800f79e:	737b      	strb	r3, [r7, #13]
 800f7a0:	e065      	b.n	800f86e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_SENSITIVE) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b40      	cmp	r3, #64	; 0x40
 800f7ae:	d104      	bne.n	800f7ba <configStepDetect+0x42>
    /* Sensitive mode setting */
    data_array[0] = 0x2D;
 800f7b0:	232d      	movs	r3, #45	; 0x2d
 800f7b2:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x00;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	737b      	strb	r3, [r7, #13]
 800f7b8:	e059      	b.n	800f86e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_ROBUST) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b80      	cmp	r3, #128	; 0x80
 800f7c6:	d104      	bne.n	800f7d2 <configStepDetect+0x5a>
    /* Robust mode setting */
    data_array[0] = 0x1D;
 800f7c8:	231d      	movs	r3, #29
 800f7ca:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x07;
 800f7cc:	2307      	movs	r3, #7
 800f7ce:	737b      	strb	r3, [r7, #13]
 800f7d0:	e04d      	b.n	800f86e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_USER_DEFINE) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2bc0      	cmp	r3, #192	; 0xc0
 800f7de:	d146      	bne.n	800f86e <configStepDetect+0xf6>
    /* Non recommended User defined setting */
    /* Configuring STEP_CONFIG register */
    rslt = getRegs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 800f7e0:	f107 010c 	add.w	r1, r7, #12
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	207a      	movs	r0, #122	; 0x7a
 800f7ea:	f001 fab1 	bl	8010d50 <getRegs>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	73bb      	strb	r3, [r7, #14]

    if (rslt == BMI160_OK) {
 800f7f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d139      	bne.n	800f86e <configStepDetect+0xf6>
      temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 800f7fa:	7b3b      	ldrb	r3, [r7, #12]
 800f7fc:	f023 0318 	bic.w	r3, r3, #24
 800f800:	73fb      	strb	r3, [r7, #15]
      /* Adding minThreshold */
      data_array[0] = temp | ((stepDetectIntCfg->minThreshold << 3)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	00db      	lsls	r3, r3, #3
          & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800f80e:	b25b      	sxtb	r3, r3
 800f810:	f003 0318 	and.w	r3, r3, #24
 800f814:	b25a      	sxtb	r2, r3
      data_array[0] = temp | ((stepDetectIntCfg->minThreshold << 3)
 800f816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	b25b      	sxtb	r3, r3
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	733b      	strb	r3, [r7, #12]

      temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 800f822:	7b3b      	ldrb	r3, [r7, #12]
 800f824:	f023 0307 	bic.w	r3, r3, #7
 800f828:	73fb      	strb	r3, [r7, #15]
      /* Adding steptimeMin */
      data_array[0] = temp | ((stepDetectIntCfg->steptimeMin)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f832:	b2db      	uxtb	r3, r3
 800f834:	b25b      	sxtb	r3, r3
          & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 800f836:	f003 0307 	and.w	r3, r3, #7
 800f83a:	b25a      	sxtb	r2, r3
      data_array[0] = temp | ((stepDetectIntCfg->steptimeMin)
 800f83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f840:	4313      	orrs	r3, r2
 800f842:	b25b      	sxtb	r3, r3
 800f844:	b2db      	uxtb	r3, r3
 800f846:	733b      	strb	r3, [r7, #12]

      temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 800f848:	7b7b      	ldrb	r3, [r7, #13]
 800f84a:	f023 0307 	bic.w	r3, r3, #7
 800f84e:	73fb      	strb	r3, [r7, #15]
      /* Adding steptimeMin */
      data_array[1] = temp | ((stepDetectIntCfg->stepMinBuf) & BMI160_STEP_MIN_BUF_MASK);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	785b      	ldrb	r3, [r3, #1]
 800f854:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	b25b      	sxtb	r3, r3
 800f85c:	f003 0307 	and.w	r3, r3, #7
 800f860:	b25a      	sxtb	r2, r3
 800f862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f866:	4313      	orrs	r3, r2
 800f868:	b25b      	sxtb	r3, r3
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	737b      	strb	r3, [r7, #13]

    }
  }

  /* Write data to STEP_CONFIG register */
  rslt = setRegs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 800f86e:	f107 010c 	add.w	r1, r7, #12
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2202      	movs	r2, #2
 800f876:	207a      	movs	r0, #122	; 0x7a
 800f878:	f001 fac0 	bl	8010dfc <setRegs>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73bb      	strb	r3, [r7, #14]

  return rslt;
 800f880:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <setIntrPinConfig>:

int8_t setIntrPinConfig(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* configure the behavioural settings of interrupt pin */
  rslt = configIntOutCtrl(intConfig, dev);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f87a 	bl	800f992 <configIntOutCtrl>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK)
 800f8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d105      	bne.n	800f8b6 <setIntrPinConfig+0x2a>
    rslt = configIntLatch(intConfig, dev);
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f808 	bl	800f8c2 <configIntLatch>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	73fb      	strb	r3, [r7, #15]
  return rslt;
 800f8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <configIntLatch>:

int8_t configIntLatch(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 800f8c2:	b580      	push	{r7, lr}
 800f8c4:	b086      	sub	sp, #24
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	75bb      	strb	r3, [r7, #22]
  uint8_t data = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	73fb      	strb	r3, [r7, #15]
  /* Configuration of latch on pins INT1 and INT2 are done in
   * BMI160_INT_LATCH_ADDR register*/
  rslt = getRegs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 800f8d4:	f107 010f 	add.w	r1, r7, #15
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	2054      	movs	r0, #84	; 0x54
 800f8de:	f001 fa37 	bl	8010d50 <getRegs>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	75fb      	strb	r3, [r7, #23]
  if (rslt == BMI160_OK) {
 800f8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d14b      	bne.n	800f986 <configIntLatch+0xc4>
    /* updating the interrupt pin structure to local structure */
    const struct bmi160IntPinSettg *intr_pin_sett = &(intConfig->intPinSettg);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	3302      	adds	r3, #2
 800f8f2:	613b      	str	r3, [r7, #16]
    if (intConfig->intChannel == BMI160_INT_CHANNEL_1) {
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d114      	bne.n	800f926 <configIntLatch+0x64>
      /* Configuring channel 1 */
      /* Input enable */
      temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	f023 0310 	bic.w	r3, r3, #16
 800f902:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->inputEn << 4) & BMI160_INT1_INPUT_EN_MASK);
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	011b      	lsls	r3, r3, #4
 800f910:	b25b      	sxtb	r3, r3
 800f912:	f003 0310 	and.w	r3, r3, #16
 800f916:	b25a      	sxtb	r2, r3
 800f918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	b25b      	sxtb	r3, r3
 800f920:	b2db      	uxtb	r3, r3
 800f922:	73fb      	strb	r3, [r7, #15]
 800f924:	e013      	b.n	800f94e <configIntLatch+0x8c>
    } else {
      /* Configuring channel 2 */
      /* Input enable */
      temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 800f926:	7bfb      	ldrb	r3, [r7, #15]
 800f928:	f023 0320 	bic.w	r3, r3, #32
 800f92c:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->inputEn << 5) & BMI160_INT2_INPUT_EN_MASK);
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f936:	b2db      	uxtb	r3, r3
 800f938:	015b      	lsls	r3, r3, #5
 800f93a:	b25b      	sxtb	r3, r3
 800f93c:	f003 0320 	and.w	r3, r3, #32
 800f940:	b25a      	sxtb	r2, r3
 800f942:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f946:	4313      	orrs	r3, r2
 800f948:	b25b      	sxtb	r3, r3
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	73fb      	strb	r3, [r7, #15]
    }
    /* In case of latch interrupt,update the latch duration */
    /* Latching holds the interrupt for the amount of latch
     * duration time */
    temp = data & ~BMI160_INT_LATCH_MASK;
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
 800f950:	f023 030f 	bic.w	r3, r3, #15
 800f954:	75bb      	strb	r3, [r7, #22]
    data = temp | (intr_pin_sett->latchDur & BMI160_INT_LATCH_MASK);
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	b25b      	sxtb	r3, r3
 800f962:	f003 030f 	and.w	r3, r3, #15
 800f966:	b25a      	sxtb	r2, r3
 800f968:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	b25b      	sxtb	r3, r3
 800f970:	b2db      	uxtb	r3, r3
 800f972:	73fb      	strb	r3, [r7, #15]
    /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
     * hence writing data to respective registers at one go */
    rslt = setRegs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 800f974:	f107 010f 	add.w	r1, r7, #15
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	2201      	movs	r2, #1
 800f97c:	2054      	movs	r0, #84	; 0x54
 800f97e:	f001 fa3d 	bl	8010dfc <setRegs>
 800f982:	4603      	mov	r3, r0
 800f984:	75fb      	strb	r3, [r7, #23]
  }
  return rslt;
 800f986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3718      	adds	r7, #24
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <configIntOutCtrl>:

int8_t configIntOutCtrl(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 800f992:	b580      	push	{r7, lr}
 800f994:	b086      	sub	sp, #24
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	75bb      	strb	r3, [r7, #22]
  uint8_t data = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]

  /* Configuration of output interrupt signals on pins INT1 and INT2 are
   * done in BMI160_INT_OUT_CTRL_ADDR register*/
  rslt = getRegs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 800f9a4:	f107 010f 	add.w	r1, r7, #15
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	2053      	movs	r0, #83	; 0x53
 800f9ae:	f001 f9cf 	bl	8010d50 <getRegs>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	75fb      	strb	r3, [r7, #23]

  if (rslt == BMI160_OK) {
 800f9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f040 80ad 	bne.w	800fb1a <configIntOutCtrl+0x188>
    /* updating the interrupt pin structure to local structure */
    const struct bmi160IntPinSettg *intr_pin_sett = &(intConfig->intPinSettg);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	613b      	str	r3, [r7, #16]

    /* Configuring channel 1 */
    if (intConfig->intChannel == BMI160_INT_CHANNEL_1) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d14f      	bne.n	800fa6e <configIntOutCtrl+0xdc>

      /* Output enable */
      temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	f023 0308 	bic.w	r3, r3, #8
 800f9d4:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputEn << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	00db      	lsls	r3, r3, #3
 800f9e2:	b25b      	sxtb	r3, r3
 800f9e4:	f003 0308 	and.w	r3, r3, #8
 800f9e8:	b25a      	sxtb	r2, r3
 800f9ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	b25b      	sxtb	r3, r3
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	73fb      	strb	r3, [r7, #15]

      /* Output mode */
      temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 800f9f6:	7bfb      	ldrb	r3, [r7, #15]
 800f9f8:	f023 0304 	bic.w	r3, r3, #4
 800f9fc:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputMode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	b25b      	sxtb	r3, r3
 800fa0c:	f003 0304 	and.w	r3, r3, #4
 800fa10:	b25a      	sxtb	r2, r3
 800fa12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	b25b      	sxtb	r3, r3
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	73fb      	strb	r3, [r7, #15]

      /* Output type */
      temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
 800fa20:	f023 0302 	bic.w	r3, r3, #2
 800fa24:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputType << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	b25b      	sxtb	r3, r3
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	b25a      	sxtb	r2, r3
 800fa3a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	b25b      	sxtb	r3, r3
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	73fb      	strb	r3, [r7, #15]

      /* edge control */
      temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
 800fa48:	f023 0301 	bic.w	r3, r3, #1
 800fa4c:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->edgeCtrl) & BMI160_INT1_EDGE_CTRL_MASK);
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	b25b      	sxtb	r3, r3
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	b25a      	sxtb	r2, r3
 800fa60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	b25b      	sxtb	r3, r3
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	73fb      	strb	r3, [r7, #15]
 800fa6c:	e04c      	b.n	800fb08 <configIntOutCtrl+0x176>

    } else {
      /* Configuring channel 2 */
      /* Output enable */
      temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 800fa6e:	7bfb      	ldrb	r3, [r7, #15]
 800fa70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa74:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputEn << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	01db      	lsls	r3, r3, #7
 800fa82:	b25a      	sxtb	r2, r3
 800fa84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	b25b      	sxtb	r3, r3
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	73fb      	strb	r3, [r7, #15]

      /* Output mode */
      temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
 800fa92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa96:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputMode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	019b      	lsls	r3, r3, #6
 800faa4:	b25b      	sxtb	r3, r3
 800faa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faaa:	b25a      	sxtb	r2, r3
 800faac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	b25b      	sxtb	r3, r3
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	73fb      	strb	r3, [r7, #15]

      /* Output type */
      temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
 800faba:	f023 0320 	bic.w	r3, r3, #32
 800fabe:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputType << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	015b      	lsls	r3, r3, #5
 800facc:	b25b      	sxtb	r3, r3
 800face:	f003 0320 	and.w	r3, r3, #32
 800fad2:	b25a      	sxtb	r2, r3
 800fad4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fad8:	4313      	orrs	r3, r2
 800fada:	b25b      	sxtb	r3, r3
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	73fb      	strb	r3, [r7, #15]

      /* edge control */
      temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	f023 0310 	bic.w	r3, r3, #16
 800fae6:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->edgeCtrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	011b      	lsls	r3, r3, #4
 800faf4:	b25b      	sxtb	r3, r3
 800faf6:	f003 0310 	and.w	r3, r3, #16
 800fafa:	b25a      	sxtb	r2, r3
 800fafc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	b25b      	sxtb	r3, r3
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	73fb      	strb	r3, [r7, #15]
    }

    rslt = setRegs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 800fb08:	f107 010f 	add.w	r1, r7, #15
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	2053      	movs	r0, #83	; 0x53
 800fb12:	f001 f973 	bl	8010dfc <setRegs>
 800fb16:	4603      	mov	r3, r0
 800fb18:	75fb      	strb	r3, [r7, #23]
  }

  return rslt;
 800fb1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <enableStepDetectInt>:

int8_t enableStepDetectInt(struct bmi160AccStepDetectIntCfg *stepDetectIntCfg, struct bmi160Dev *dev){
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t data = 0;
 800fb30:	2300      	movs	r3, #0
 800fb32:	737b      	strb	r3, [r7, #13]
  uint8_t temp = 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	73bb      	strb	r3, [r7, #14]
  /* Enable data ready interrupt in Int Enable 2 register */
  rslt = getRegs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800fb38:	f107 010d 	add.w	r1, r7, #13
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	2052      	movs	r0, #82	; 0x52
 800fb42:	f001 f905 	bl	8010d50 <getRegs>
 800fb46:	4603      	mov	r3, r0
 800fb48:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800fb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11c      	bne.n	800fb8c <enableStepDetectInt+0x66>
    temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 800fb52:	7b7b      	ldrb	r3, [r7, #13]
 800fb54:	f023 0308 	bic.w	r3, r3, #8
 800fb58:	73bb      	strb	r3, [r7, #14]
    data = temp | ((stepDetectIntCfg->stepDetectorEn << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	b25b      	sxtb	r3, r3
 800fb68:	f003 0308 	and.w	r3, r3, #8
 800fb6c:	b25a      	sxtb	r2, r3
 800fb6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	737b      	strb	r3, [r7, #13]
    /* Writing data to INT ENABLE 2 Address */
    rslt = setRegs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800fb7a:	f107 010d 	add.w	r1, r7, #13
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2201      	movs	r2, #1
 800fb82:	2052      	movs	r0, #82	; 0x52
 800fb84:	f001 f93a 	bl	8010dfc <setRegs>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 800fb8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <setStepCounter>:

int8_t setStepCounter(uint8_t step_cnt_enable, struct bmi160Dev *dev)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	6039      	str	r1, [r7, #0]
 800fba2:	71fb      	strb	r3, [r7, #7]
  int8_t rslt = BMI160_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]
  uint8_t data = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73bb      	strb	r3, [r7, #14]
  /* Null-pointer check */
  if (dev == NULL){
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <setStepCounter+0x1e>
    rslt = BMI160_E_NULL_PTR;
 800fbb2:	23ff      	movs	r3, #255	; 0xff
 800fbb4:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt != BMI160_OK) {
 800fbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d002      	beq.n	800fbc4 <setStepCounter+0x2c>
    rslt = BMI160_E_NULL_PTR;
 800fbbe:	23ff      	movs	r3, #255	; 0xff
 800fbc0:	73fb      	strb	r3, [r7, #15]
 800fbc2:	e025      	b.n	800fc10 <setStepCounter+0x78>
  } else {
    rslt = getRegs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
 800fbc4:	f107 010e 	add.w	r1, r7, #14
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	207b      	movs	r0, #123	; 0x7b
 800fbce:	f001 f8bf 	bl	8010d50 <getRegs>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800fbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d118      	bne.n	800fc10 <setStepCounter+0x78>
      if (step_cnt_enable == BMI160_ENABLE){
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d107      	bne.n	800fbf4 <setStepCounter+0x5c>
        data |= (uint8_t)(step_cnt_enable << 3);
 800fbe4:	79fb      	ldrb	r3, [r7, #7]
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	7bbb      	ldrb	r3, [r7, #14]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	73bb      	strb	r3, [r7, #14]
 800fbf2:	e004      	b.n	800fbfe <setStepCounter+0x66>
      }else{
        data &= ~BMI160_STEP_COUNT_EN_BIT_MASK;
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
 800fbf6:	f023 0308 	bic.w	r3, r3, #8
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	73bb      	strb	r3, [r7, #14]
      }
      rslt = setRegs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
 800fbfe:	f107 010e 	add.w	r1, r7, #14
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	2201      	movs	r2, #1
 800fc06:	207b      	movs	r0, #123	; 0x7b
 800fc08:	f001 f8f8 	bl	8010dfc <setRegs>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 800fc10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <setStepPowerMode>:

int8_t setStepPowerMode(uint8_t model,struct bmi160Dev *dev)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	4603      	mov	r3, r0
 800fc24:	6039      	str	r1, [r7, #0]
 800fc26:	71fb      	strb	r3, [r7, #7]
  int8_t rslt = BMI160_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
  if (model == stepNormalPowerMode){
 800fc2c:	4b30      	ldr	r3, [pc, #192]	; (800fcf0 <setStepPowerMode+0xd4>)
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	79fa      	ldrb	r2, [r7, #7]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d10c      	bne.n	800fc50 <setStepPowerMode+0x34>
    dev->accelCfg.odr=BMI160_ACCEL_ODR_1600HZ;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	220c      	movs	r2, #12
 800fc3a:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2211      	movs	r2, #17
 800fc40:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	220d      	movs	r2, #13
 800fc46:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2215      	movs	r2, #21
 800fc4c:	731a      	strb	r2, [r3, #12]
 800fc4e:	e01d      	b.n	800fc8c <setStepPowerMode+0x70>
  }else if(model == stepLowPowerMode){
 800fc50:	4b28      	ldr	r3, [pc, #160]	; (800fcf4 <setStepPowerMode+0xd8>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	79fa      	ldrb	r2, [r7, #7]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d10c      	bne.n	800fc74 <setStepPowerMode+0x58>
    dev->accelCfg.odr=BMI160_ACCEL_ODR_50HZ;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	2207      	movs	r2, #7
 800fc5e:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_LOWPOWER_MODE;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2212      	movs	r2, #18
 800fc64:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_50HZ;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2207      	movs	r2, #7
 800fc6a:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_SUSPEND_MODE;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2214      	movs	r2, #20
 800fc70:	731a      	strb	r2, [r3, #12]
 800fc72:	e00b      	b.n	800fc8c <setStepPowerMode+0x70>
  }else{
    dev->accelCfg.odr=BMI160_ACCEL_ODR_1600HZ;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	220c      	movs	r2, #12
 800fc78:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2211      	movs	r2, #17
 800fc7e:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	220d      	movs	r2, #13
 800fc84:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2215      	movs	r2, #21
 800fc8a:	731a      	strb	r2, [r3, #12]
  }
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	2202      	movs	r2, #2
 800fc90:	71da      	strb	r2, [r3, #7]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	2203      	movs	r2, #3
 800fc96:	719a      	strb	r2, [r3, #6]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	739a      	strb	r2, [r3, #14]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2202      	movs	r2, #2
 800fca2:	73da      	strb	r2, [r3, #15]
  rslt = setAccelConf(dev);
 800fca4:	6838      	ldr	r0, [r7, #0]
 800fca6:	f000 f965 	bl	800ff74 <setAccelConf>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800fcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d116      	bne.n	800fce4 <setStepPowerMode+0xc8>
    rslt = setGyroConf(dev);
 800fcb6:	6838      	ldr	r0, [r7, #0]
 800fcb8:	f000 f81e 	bl	800fcf8 <setGyroConf>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800fcc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10d      	bne.n	800fce4 <setStepPowerMode+0xc8>
      /* write power mode for accel and gyro */
      rslt = setPowerMode(dev);
 800fcc8:	6838      	ldr	r0, [r7, #0]
 800fcca:	f000 fa5a 	bl	8010182 <setPowerMode>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 800fcd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d104      	bne.n	800fce4 <setStepPowerMode+0xc8>
        rslt = checkInvalidSettg(dev);
 800fcda:	6838      	ldr	r0, [r7, #0]
 800fcdc:	f000 f915 	bl	800ff0a <checkInvalidSettg>
 800fce0:	4603      	mov	r3, r0
 800fce2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rslt;
 800fce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	200005c4 	.word	0x200005c4
 800fcf4:	20000000 	.word	0x20000000

0800fcf8 <setGyroConf>:

int8_t setGyroConf(struct bmi160Dev *dev){
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t data[2]={0};
 800fd00:	2300      	movs	r3, #0
 800fd02:	81bb      	strh	r3, [r7, #12]
  rslt = checkGyroConfig(data, dev);
 800fd04:	f107 030c 	add.w	r3, r7, #12
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 f836 	bl	800fd7c <checkGyroConfig>
 800fd10:	4603      	mov	r3, r0
 800fd12:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800fd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d129      	bne.n	800fd70 <setGyroConf+0x78>
    // Write output data rate and bandwidth
    rslt = setRegs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 800fd1c:	f107 010c 	add.w	r1, r7, #12
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	2042      	movs	r0, #66	; 0x42
 800fd26:	f001 f869 	bl	8010dfc <setRegs>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800fd2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d11c      	bne.n	800fd70 <setGyroConf+0x78>
      dev->prevGyroCfg.odr = dev->gyroCfg.odr;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	7b5a      	ldrb	r2, [r3, #13]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	745a      	strb	r2, [r3, #17]
      dev->prevGyroCfg.bw = dev->gyroCfg.bw;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7bda      	ldrb	r2, [r3, #15]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	74da      	strb	r2, [r3, #19]
      //delay(BMI160_ONE_MS_DELAY);
      HAL_Delay(BMI160_ONE_MS_DELAY);
 800fd46:	2001      	movs	r0, #1
 800fd48:	f005 f9e2 	bl	8015110 <HAL_Delay>
      // Write gyro range
      rslt = setRegs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800fd4c:	f107 030c 	add.w	r3, r7, #12
 800fd50:	1c59      	adds	r1, r3, #1
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2201      	movs	r2, #1
 800fd56:	2043      	movs	r0, #67	; 0x43
 800fd58:	f001 f850 	bl	8010dfc <setRegs>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 800fd60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d103      	bne.n	800fd70 <setGyroConf+0x78>
        dev->prevGyroCfg.range = dev->gyroCfg.range;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	7b9a      	ldrb	r2, [r3, #14]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	749a      	strb	r2, [r3, #18]
    }
  }
  return rslt;
 800fd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <checkGyroConfig>:

int8_t checkGyroConfig(uint8_t *data, struct bmi160Dev *dev){
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* read gyro Output data rate and bandwidth */
  rslt = getRegs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	2202      	movs	r2, #2
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	2042      	movs	r0, #66	; 0x42
 800fd8e:	f000 ffdf 	bl	8010d50 <getRegs>
 800fd92:	4603      	mov	r3, r0
 800fd94:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800fd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d11b      	bne.n	800fdd6 <checkGyroConfig+0x5a>
    rslt = processGyroOdr(&data[0], dev);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f81e 	bl	800fde2 <processGyroOdr>
 800fda6:	4603      	mov	r3, r0
 800fda8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800fdaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d111      	bne.n	800fdd6 <checkGyroConfig+0x5a>
      rslt = processGyroBw(&data[0], dev);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f87a 	bl	800feae <processGyroBw>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 800fdbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d107      	bne.n	800fdd6 <checkGyroConfig+0x5a>
        rslt = processGyroRange(&data[1], dev);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 f83b 	bl	800fe48 <processGyroRange>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 800fdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <processGyroOdr>:

int8_t processGyroOdr(uint8_t *data, struct bmi160Dev *dev){
 800fde2:	b480      	push	{r7}
 800fde4:	b085      	sub	sp, #20
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 800fdec:	2300      	movs	r3, #0
 800fdee:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73bb      	strb	r3, [r7, #14]
  uint8_t odr = 0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.odr <= BMI160_GYRO_ODR_MAX) {
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	7b5b      	ldrb	r3, [r3, #13]
 800fdfc:	2b0d      	cmp	r3, #13
 800fdfe:	d81a      	bhi.n	800fe36 <processGyroOdr+0x54>
    if (dev->gyroCfg.odr != dev->prevGyroCfg.odr) {
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	7b5a      	ldrb	r2, [r3, #13]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	7c5b      	ldrb	r3, [r3, #17]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d016      	beq.n	800fe3a <processGyroOdr+0x58>
      odr = (uint8_t)dev->gyroCfg.odr;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	7b5b      	ldrb	r3, [r3, #13]
 800fe10:	737b      	strb	r3, [r7, #13]
      temp = (*data & ~BMI160_GYRO_ODR_MASK);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	f023 030f 	bic.w	r3, r3, #15
 800fe1a:	73bb      	strb	r3, [r7, #14]
      /* Adding output data rate */
      *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800fe1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fe20:	f003 030f 	and.w	r3, r3, #15
 800fe24:	b25a      	sxtb	r2, r3
 800fe26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	b25b      	sxtb	r3, r3
 800fe2e:	b2da      	uxtb	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	701a      	strb	r2, [r3, #0]
 800fe34:	e001      	b.n	800fe3a <processGyroOdr+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 800fe36:	23fc      	movs	r3, #252	; 0xfc
 800fe38:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 800fe3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bc80      	pop	{r7}
 800fe46:	4770      	bx	lr

0800fe48 <processGyroRange>:

int8_t processGyroRange(uint8_t *data, struct bmi160Dev *dev){
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 800fe56:	2300      	movs	r3, #0
 800fe58:	73bb      	strb	r3, [r7, #14]
  uint8_t range = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.range <= BMI160_GYRO_RANGE_MAX) {
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	7b9b      	ldrb	r3, [r3, #14]
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d81a      	bhi.n	800fe9c <processGyroRange+0x54>
    if (dev->gyroCfg.range != dev->prevGyroCfg.range) {
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	7b9a      	ldrb	r2, [r3, #14]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	7c9b      	ldrb	r3, [r3, #18]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d016      	beq.n	800fea0 <processGyroRange+0x58>
      range = (uint8_t)dev->gyroCfg.range;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	7b9b      	ldrb	r3, [r3, #14]
 800fe76:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_GYRO_RANGE_MSK;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	f023 0307 	bic.w	r3, r3, #7
 800fe80:	73bb      	strb	r3, [r7, #14]
      /* Adding range */
      *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 800fe82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fe86:	f003 0307 	and.w	r3, r3, #7
 800fe8a:	b25a      	sxtb	r2, r3
 800fe8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe90:	4313      	orrs	r3, r2
 800fe92:	b25b      	sxtb	r3, r3
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	701a      	strb	r2, [r3, #0]
 800fe9a:	e001      	b.n	800fea0 <processGyroRange+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 800fe9c:	23fc      	movs	r3, #252	; 0xfc
 800fe9e:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 800fea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bc80      	pop	{r7}
 800feac:	4770      	bx	lr

0800feae <processGyroBw>:

int8_t processGyroBw(uint8_t *data, struct bmi160Dev *dev){
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 800feb8:	2300      	movs	r3, #0
 800feba:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	73bb      	strb	r3, [r7, #14]
  uint8_t bw = 0;
 800fec0:	2300      	movs	r3, #0
 800fec2:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.bw <= BMI160_GYRO_BW_MAX) {
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	7bdb      	ldrb	r3, [r3, #15]
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d815      	bhi.n	800fef8 <processGyroBw+0x4a>
    bw = (uint8_t)dev->gyroCfg.bw;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	7bdb      	ldrb	r3, [r3, #15]
 800fed0:	737b      	strb	r3, [r7, #13]
    temp = *data & ~BMI160_GYRO_BW_MASK;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800feda:	73bb      	strb	r3, [r7, #14]
    /* Adding bandwidth */
    *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800fedc:	7b7b      	ldrb	r3, [r7, #13]
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	b25b      	sxtb	r3, r3
 800fee2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fee6:	b25a      	sxtb	r2, r3
 800fee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800feec:	4313      	orrs	r3, r2
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	e001      	b.n	800fefc <processGyroBw+0x4e>
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 800fef8:	23fc      	movs	r3, #252	; 0xfc
 800fefa:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 800fefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bc80      	pop	{r7}
 800ff08:	4770      	bx	lr

0800ff0a <checkInvalidSettg>:

int8_t checkInvalidSettg( struct bmi160Dev *dev){
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b084      	sub	sp, #16
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t data = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	73bb      	strb	r3, [r7, #14]
  // read the error reg
  rslt = getRegs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800ff16:	f107 010e 	add.w	r1, r7, #14
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	2002      	movs	r0, #2
 800ff20:	f000 ff16 	bl	8010d50 <getRegs>
 800ff24:	4603      	mov	r3, r0
 800ff26:	73fb      	strb	r3, [r7, #15]
  data = data >> 1;
 800ff28:	7bbb      	ldrb	r3, [r7, #14]
 800ff2a:	085b      	lsrs	r3, r3, #1
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	73bb      	strb	r3, [r7, #14]
  data = data & BMI160_ERR_REG_MASK;
 800ff30:	7bbb      	ldrb	r3, [r7, #14]
 800ff32:	f003 030f 	and.w	r3, r3, #15
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	73bb      	strb	r3, [r7, #14]
  if (data == 1)
 800ff3a:	7bbb      	ldrb	r3, [r7, #14]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d102      	bne.n	800ff46 <checkInvalidSettg+0x3c>
    rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 800ff40:	23fa      	movs	r3, #250	; 0xfa
 800ff42:	73fb      	strb	r3, [r7, #15]
 800ff44:	e010      	b.n	800ff68 <checkInvalidSettg+0x5e>
  else if (data == 2)
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d102      	bne.n	800ff52 <checkInvalidSettg+0x48>
    rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800ff4c:	23f9      	movs	r3, #249	; 0xf9
 800ff4e:	73fb      	strb	r3, [r7, #15]
 800ff50:	e00a      	b.n	800ff68 <checkInvalidSettg+0x5e>
  else if (data == 3)
 800ff52:	7bbb      	ldrb	r3, [r7, #14]
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	d102      	bne.n	800ff5e <checkInvalidSettg+0x54>
    rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 800ff58:	23f8      	movs	r3, #248	; 0xf8
 800ff5a:	73fb      	strb	r3, [r7, #15]
 800ff5c:	e004      	b.n	800ff68 <checkInvalidSettg+0x5e>
  else if (data == 7)
 800ff5e:	7bbb      	ldrb	r3, [r7, #14]
 800ff60:	2b07      	cmp	r3, #7
 800ff62:	d101      	bne.n	800ff68 <checkInvalidSettg+0x5e>
    rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 800ff64:	23f7      	movs	r3, #247	; 0xf7
 800ff66:	73fb      	strb	r3, [r7, #15]

  return rslt;
 800ff68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <setAccelConf>:

int8_t setAccelConf(struct bmi160Dev *dev){
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	73fb      	strb	r3, [r7, #15]
  uint8_t data[2] = {0};
 800ff80:	2300      	movs	r3, #0
 800ff82:	81bb      	strh	r3, [r7, #12]
  rslt = checkAccelConfig(data, dev);
 800ff84:	f107 030c 	add.w	r3, r7, #12
 800ff88:	6879      	ldr	r1, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f000 f836 	bl	800fffc <checkAccelConfig>
 800ff90:	4603      	mov	r3, r0
 800ff92:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800ff94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d129      	bne.n	800fff0 <setAccelConf+0x7c>
    rslt = setRegs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 800ff9c:	f107 010c 	add.w	r1, r7, #12
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	2040      	movs	r0, #64	; 0x40
 800ffa6:	f000 ff29 	bl	8010dfc <setRegs>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800ffae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d11c      	bne.n	800fff0 <setAccelConf+0x7c>
      dev->prevAccelCfg.odr = dev->accelCfg.odr;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	795a      	ldrb	r2, [r3, #5]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	725a      	strb	r2, [r3, #9]
      dev->prevAccelCfg.bw = dev->accelCfg.bw;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	79da      	ldrb	r2, [r3, #7]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	72da      	strb	r2, [r3, #11]
      //delay(BMI160_ONE_MS_DELAY);
      HAL_Delay(BMI160_ONE_MS_DELAY);
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	f005 f8a2 	bl	8015110 <HAL_Delay>
      rslt = setRegs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 800ffcc:	f107 030c 	add.w	r3, r7, #12
 800ffd0:	1c59      	adds	r1, r3, #1
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	2041      	movs	r0, #65	; 0x41
 800ffd8:	f000 ff10 	bl	8010dfc <setRegs>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK){
 800ffe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <setAccelConf+0x7c>
        dev->prevAccelCfg.range = dev->accelCfg.range;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	799a      	ldrb	r2, [r3, #6]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	729a      	strb	r2, [r3, #10]
      }
    }
  }
  return rslt;
 800fff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <checkAccelConfig>:

int8_t checkAccelConfig(uint8_t *data, struct bmi160Dev *dev){
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* read accel Output data rate and bandwidth */
  rslt = getRegs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2202      	movs	r2, #2
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	2040      	movs	r0, #64	; 0x40
 801000e:	f000 fe9f 	bl	8010d50 <getRegs>
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8010016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d11b      	bne.n	8010056 <checkAccelConfig+0x5a>
    rslt = processAccelOdr(&data[0], dev);
 801001e:	6839      	ldr	r1, [r7, #0]
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f81e 	bl	8010062 <processAccelOdr>
 8010026:	4603      	mov	r3, r0
 8010028:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 801002a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d111      	bne.n	8010056 <checkAccelConfig+0x5a>
      rslt = processAccelBw(&data[0], dev);
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 f847 	bl	80100c8 <processAccelBw>
 801003a:	4603      	mov	r3, r0
 801003c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 801003e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d107      	bne.n	8010056 <checkAccelConfig+0x5a>
        rslt = processAccelRange(&data[1], dev);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	3301      	adds	r3, #1
 801004a:	6839      	ldr	r1, [r7, #0]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f865 	bl	801011c <processAccelRange>
 8010052:	4603      	mov	r3, r0
 8010054:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 8010056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <processAccelOdr>:

int8_t processAccelOdr(uint8_t *data,  struct bmi160Dev *dev){
 8010062:	b480      	push	{r7}
 8010064:	b085      	sub	sp, #20
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	73bb      	strb	r3, [r7, #14]
  uint8_t odr = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.odr <= BMI160_ACCEL_ODR_MAX) {
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	795b      	ldrb	r3, [r3, #5]
 801007c:	2b0f      	cmp	r3, #15
 801007e:	d81a      	bhi.n	80100b6 <processAccelOdr+0x54>
    if (dev->accelCfg.odr != dev->prevAccelCfg.odr) {
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	795a      	ldrb	r2, [r3, #5]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	7a5b      	ldrb	r3, [r3, #9]
 8010088:	429a      	cmp	r2, r3
 801008a:	d016      	beq.n	80100ba <processAccelOdr+0x58>
      odr = (uint8_t)dev->accelCfg.odr;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	795b      	ldrb	r3, [r3, #5]
 8010090:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	f023 030f 	bic.w	r3, r3, #15
 801009a:	73bb      	strb	r3, [r7, #14]
      /* Adding output data rate */
      *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 801009c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80100a0:	f003 030f 	and.w	r3, r3, #15
 80100a4:	b25a      	sxtb	r2, r3
 80100a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	b25b      	sxtb	r3, r3
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	701a      	strb	r2, [r3, #0]
 80100b4:	e001      	b.n	80100ba <processAccelOdr+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 80100b6:	23fc      	movs	r3, #252	; 0xfc
 80100b8:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 80100ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bc80      	pop	{r7}
 80100c6:	4770      	bx	lr

080100c8 <processAccelBw>:

int8_t processAccelBw(uint8_t *data, struct bmi160Dev *dev){
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	73bb      	strb	r3, [r7, #14]
  uint8_t bw = 0;
 80100da:	2300      	movs	r3, #0
 80100dc:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.bw <= BMI160_ACCEL_BW_MAX) {
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	79db      	ldrb	r3, [r3, #7]
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	d811      	bhi.n	801010a <processAccelBw+0x42>
    if (dev->accelCfg.bw != dev->prevAccelCfg.bw) {
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	79da      	ldrb	r2, [r3, #7]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	7adb      	ldrb	r3, [r3, #11]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d00d      	beq.n	801010e <processAccelBw+0x46>
      bw = (uint8_t)dev->accelCfg.bw;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	79db      	ldrb	r3, [r3, #7]
 80100f6:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_BW_MASK;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010100:	73bb      	strb	r3, [r7, #14]
      /* Adding bandwidth */
      *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7bba      	ldrb	r2, [r7, #14]
 8010106:	701a      	strb	r2, [r3, #0]
 8010108:	e001      	b.n	801010e <processAccelBw+0x46>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 801010a:	23fc      	movs	r3, #252	; 0xfc
 801010c:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 801010e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	bc80      	pop	{r7}
 801011a:	4770      	bx	lr

0801011c <processAccelRange>:

int8_t processAccelRange(uint8_t *data, struct bmi160Dev *dev){
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	73bb      	strb	r3, [r7, #14]
  uint8_t range = 0;
 801012e:	2300      	movs	r3, #0
 8010130:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.range <= BMI160_ACCEL_RANGE_MAX) {
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	799b      	ldrb	r3, [r3, #6]
 8010136:	2b0c      	cmp	r3, #12
 8010138:	d81a      	bhi.n	8010170 <processAccelRange+0x54>
    if (dev->accelCfg.range != dev->prevAccelCfg.range) {
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	799a      	ldrb	r2, [r3, #6]
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	7a9b      	ldrb	r3, [r3, #10]
 8010142:	429a      	cmp	r2, r3
 8010144:	d016      	beq.n	8010174 <processAccelRange+0x58>
      range = (uint8_t)dev->accelCfg.range;
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	799b      	ldrb	r3, [r3, #6]
 801014a:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	f023 030f 	bic.w	r3, r3, #15
 8010154:	73bb      	strb	r3, [r7, #14]
      /* Adding range */
      *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8010156:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801015a:	f003 030f 	and.w	r3, r3, #15
 801015e:	b25a      	sxtb	r2, r3
 8010160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010164:	4313      	orrs	r3, r2
 8010166:	b25b      	sxtb	r3, r3
 8010168:	b2da      	uxtb	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	e001      	b.n	8010174 <processAccelRange+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8010170:	23fc      	movs	r3, #252	; 0xfc
 8010172:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8010174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	bc80      	pop	{r7}
 8010180:	4770      	bx	lr

08010182 <setPowerMode>:

int8_t setPowerMode(struct bmi160Dev *dev){
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	73fb      	strb	r3, [r7, #15]
  rslt = setAccelPwr(dev);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f811 	bl	80101b6 <setAccelPwr>
 8010194:	4603      	mov	r3, r0
 8010196:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK){
 8010198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d104      	bne.n	80101aa <setPowerMode+0x28>
    rslt = setGyroPwr(dev);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f89e 	bl	80102e2 <setGyroPwr>
 80101a6:	4603      	mov	r3, r0
 80101a8:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 80101aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <setAccelPwr>:

int8_t setAccelPwr(struct bmi160Dev *dev){
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
  uint8_t data = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	73bb      	strb	r3, [r7, #14]
  if ((dev->accelCfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	791b      	ldrb	r3, [r3, #4]
 80101ca:	2b0f      	cmp	r3, #15
 80101cc:	d92a      	bls.n	8010224 <setAccelPwr+0x6e>
    (dev->accelCfg.power <= BMI160_ACCEL_LOWPOWER_MODE)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	791b      	ldrb	r3, [r3, #4]
  if ((dev->accelCfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
 80101d2:	2b12      	cmp	r3, #18
 80101d4:	d826      	bhi.n	8010224 <setAccelPwr+0x6e>
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	791a      	ldrb	r2, [r3, #4]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	7a1b      	ldrb	r3, [r3, #8]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d023      	beq.n	801022a <setAccelPwr+0x74>
      rslt = processUnderSampling(&data, dev);
 80101e2:	f107 030e 	add.w	r3, r7, #14
 80101e6:	6879      	ldr	r1, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 f825 	bl	8010238 <processUnderSampling>
 80101ee:	4603      	mov	r3, r0
 80101f0:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK) {
 80101f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d117      	bne.n	801022a <setAccelPwr+0x74>
        /* Write accel power */
        rslt = setRegs(BMI160_COMMAND_REG_ADDR, &dev->accelCfg.power, 1, dev);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	1d19      	adds	r1, r3, #4
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	207e      	movs	r0, #126	; 0x7e
 8010204:	f000 fdfa 	bl	8010dfc <setRegs>
 8010208:	4603      	mov	r3, r0
 801020a:	73fb      	strb	r3, [r7, #15]
        /* Add delay of 5 ms */
        if (dev->prevAccelCfg.power == BMI160_ACCEL_SUSPEND_MODE){
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	7a1b      	ldrb	r3, [r3, #8]
 8010210:	2b10      	cmp	r3, #16
 8010212:	d102      	bne.n	801021a <setAccelPwr+0x64>
          //delay(BMI160_ACCEL_DELAY_MS);
        	HAL_Delay(BMI160_ACCEL_DELAY_MS);
 8010214:	2005      	movs	r0, #5
 8010216:	f004 ff7b 	bl	8015110 <HAL_Delay>
        }
        dev->prevAccelCfg.power = dev->accelCfg.power;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	791a      	ldrb	r2, [r3, #4]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	721a      	strb	r2, [r3, #8]
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 8010222:	e002      	b.n	801022a <setAccelPwr+0x74>
      }
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8010224:	23fc      	movs	r3, #252	; 0xfc
 8010226:	73fb      	strb	r3, [r7, #15]
 8010228:	e000      	b.n	801022c <setAccelPwr+0x76>
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 801022a:	bf00      	nop
  }
  return rslt;
 801022c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <processUnderSampling>:

int8_t processUnderSampling(uint8_t *data, struct bmi160Dev *dev){
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	73bb      	strb	r3, [r7, #14]
  uint8_t pre_filter = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	737b      	strb	r3, [r7, #13]
  rslt = getRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	2201      	movs	r2, #1
 801024e:	6879      	ldr	r1, [r7, #4]
 8010250:	2040      	movs	r0, #64	; 0x40
 8010252:	f000 fd7d 	bl	8010d50 <getRegs>
 8010256:	4603      	mov	r3, r0
 8010258:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 801025a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d139      	bne.n	80102d6 <processUnderSampling+0x9e>
    if (dev->accelCfg.power == BMI160_ACCEL_LOWPOWER_MODE) {
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	791b      	ldrb	r3, [r3, #4]
 8010266:	2b12      	cmp	r3, #18
 8010268:	d120      	bne.n	80102ac <processUnderSampling+0x74>
      temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010272:	73bb      	strb	r3, [r7, #14]
      /* Set under-sampling parameter */
      *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8010274:	7bbb      	ldrb	r3, [r7, #14]
 8010276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801027a:	b2da      	uxtb	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	701a      	strb	r2, [r3, #0]
      /* Write data */
      rslt = setRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2201      	movs	r2, #1
 8010284:	6879      	ldr	r1, [r7, #4]
 8010286:	2040      	movs	r0, #64	; 0x40
 8010288:	f000 fdb8 	bl	8010dfc <setRegs>
 801028c:	4603      	mov	r3, r0
 801028e:	73fb      	strb	r3, [r7, #15]
      /* disable the pre-filter data in
       * low power mode */
      if (rslt == BMI160_OK)
 8010290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d11e      	bne.n	80102d6 <processUnderSampling+0x9e>
        /* Disable the Pre-filter data*/
        rslt = setRegs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
 8010298:	f107 010d 	add.w	r1, r7, #13
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	2202      	movs	r2, #2
 80102a0:	2058      	movs	r0, #88	; 0x58
 80102a2:	f000 fdab 	bl	8010dfc <setRegs>
 80102a6:	4603      	mov	r3, r0
 80102a8:	73fb      	strb	r3, [r7, #15]
 80102aa:	e014      	b.n	80102d6 <processUnderSampling+0x9e>
    } else {
      if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	b25b      	sxtb	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	da0f      	bge.n	80102d6 <processUnderSampling+0x9e>

        temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102be:	73bb      	strb	r3, [r7, #14]
        /* disable under-sampling parameter
        if already enabled */
        *data = temp;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	7bba      	ldrb	r2, [r7, #14]
 80102c4:	701a      	strb	r2, [r3, #0]
        /* Write data */
        rslt =setRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2201      	movs	r2, #1
 80102ca:	6879      	ldr	r1, [r7, #4]
 80102cc:	2040      	movs	r0, #64	; 0x40
 80102ce:	f000 fd95 	bl	8010dfc <setRegs>
 80102d2:	4603      	mov	r3, r0
 80102d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return rslt;
 80102d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <setGyroPwr>:

int8_t setGyroPwr(struct bmi160Dev *dev){
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b084      	sub	sp, #16
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	73fb      	strb	r3, [r7, #15]
  if ((dev->gyroCfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyroCfg.power == BMI160_GYRO_NORMAL_MODE)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	7b1b      	ldrb	r3, [r3, #12]
 80102f2:	2b14      	cmp	r3, #20
 80102f4:	d007      	beq.n	8010306 <setGyroPwr+0x24>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	7b1b      	ldrb	r3, [r3, #12]
 80102fa:	2b15      	cmp	r3, #21
 80102fc:	d003      	beq.n	8010306 <setGyroPwr+0x24>
    || (dev->gyroCfg.power == BMI160_GYRO_FASTSTARTUP_MODE)) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	7b1b      	ldrb	r3, [r3, #12]
 8010302:	2b17      	cmp	r3, #23
 8010304:	d127      	bne.n	8010356 <setGyroPwr+0x74>
    if (dev->gyroCfg.power != dev->prevGyroCfg.power) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	7b1a      	ldrb	r2, [r3, #12]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	7c1b      	ldrb	r3, [r3, #16]
 801030e:	429a      	cmp	r2, r3
 8010310:	d023      	beq.n	801035a <setGyroPwr+0x78>
      /* Write gyro power */
      rslt = setRegs(BMI160_COMMAND_REG_ADDR, &dev->gyroCfg.power, 1, dev);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f103 010c 	add.w	r1, r3, #12
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	207e      	movs	r0, #126	; 0x7e
 801031e:	f000 fd6d 	bl	8010dfc <setRegs>
 8010322:	4603      	mov	r3, r0
 8010324:	73fb      	strb	r3, [r7, #15]
      if (dev->prevGyroCfg.power == BMI160_GYRO_SUSPEND_MODE) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	7c1b      	ldrb	r3, [r3, #16]
 801032a:	2b14      	cmp	r3, #20
 801032c:	d103      	bne.n	8010336 <setGyroPwr+0x54>
        /* Delay of 81 ms */
        //delay(BMI160_GYRO_DELAY_MS);
        HAL_Delay(BMI160_GYRO_DELAY_MS);
 801032e:	2051      	movs	r0, #81	; 0x51
 8010330:	f004 feee 	bl	8015110 <HAL_Delay>
 8010334:	e00a      	b.n	801034c <setGyroPwr+0x6a>
      } else if ((dev->prevGyroCfg.power == BMI160_GYRO_FASTSTARTUP_MODE)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	7c1b      	ldrb	r3, [r3, #16]
 801033a:	2b17      	cmp	r3, #23
 801033c:	d106      	bne.n	801034c <setGyroPwr+0x6a>
        && (dev->gyroCfg.power == BMI160_GYRO_NORMAL_MODE)) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7b1b      	ldrb	r3, [r3, #12]
 8010342:	2b15      	cmp	r3, #21
 8010344:	d102      	bne.n	801034c <setGyroPwr+0x6a>
        /* This delay is required for transition from
        fast-startup mode to normal mode */
        //delay(10);
        HAL_Delay(10);
 8010346:	200a      	movs	r0, #10
 8010348:	f004 fee2 	bl	8015110 <HAL_Delay>
      } else {
        /* do nothing */
      }
      dev->prevGyroCfg.power = dev->gyroCfg.power;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7b1a      	ldrb	r2, [r3, #12]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	741a      	strb	r2, [r3, #16]
    if (dev->gyroCfg.power != dev->prevGyroCfg.power) {
 8010354:	e001      	b.n	801035a <setGyroPwr+0x78>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8010356:	23fc      	movs	r3, #252	; 0xfc
 8010358:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 801035a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
	...

08010368 <getAccX>:

float getAccX(){
 8010368:	b590      	push	{r4, r7, lr}
 801036a:	b087      	sub	sp, #28
 801036c:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 801036e:	1d3b      	adds	r3, r7, #4
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	605a      	str	r2, [r3, #4]
 8010376:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 8010378:	1d3b      	adds	r3, r7, #4
 801037a:	4618      	mov	r0, r3
 801037c:	f000 f8c4 	bl	8010508 <getAccelGyroData>
 8010380:	4603      	mov	r3, r0
 8010382:	617b      	str	r3, [r7, #20]
	k=accelGyro[3]/16384.0;
 8010384:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe f8a7 	bl	800e4dc <__aeabi_i2d>
 801038e:	f04f 0200 	mov.w	r2, #0
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <getAccX+0x4c>)
 8010394:	f7fe fa36 	bl	800e804 <__aeabi_ddiv>
 8010398:	4603      	mov	r3, r0
 801039a:	460c      	mov	r4, r1
 801039c:	4618      	mov	r0, r3
 801039e:	4621      	mov	r1, r4
 80103a0:	f7fe fbfe 	bl	800eba0 <__aeabi_d2f>
 80103a4:	4603      	mov	r3, r0
 80103a6:	613b      	str	r3, [r7, #16]
	return k;
 80103a8:	693b      	ldr	r3, [r7, #16]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	371c      	adds	r7, #28
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd90      	pop	{r4, r7, pc}
 80103b2:	bf00      	nop
 80103b4:	40d00000 	.word	0x40d00000

080103b8 <getAccY>:

float getAccY(){
 80103b8:	b590      	push	{r4, r7, lr}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 80103be:	1d3b      	adds	r3, r7, #4
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	605a      	str	r2, [r3, #4]
 80103c6:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 80103c8:	1d3b      	adds	r3, r7, #4
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 f89c 	bl	8010508 <getAccelGyroData>
 80103d0:	4603      	mov	r3, r0
 80103d2:	617b      	str	r3, [r7, #20]
	k=accelGyro[4]/16384.0;
 80103d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fe f87f 	bl	800e4dc <__aeabi_i2d>
 80103de:	f04f 0200 	mov.w	r2, #0
 80103e2:	4b08      	ldr	r3, [pc, #32]	; (8010404 <getAccY+0x4c>)
 80103e4:	f7fe fa0e 	bl	800e804 <__aeabi_ddiv>
 80103e8:	4603      	mov	r3, r0
 80103ea:	460c      	mov	r4, r1
 80103ec:	4618      	mov	r0, r3
 80103ee:	4621      	mov	r1, r4
 80103f0:	f7fe fbd6 	bl	800eba0 <__aeabi_d2f>
 80103f4:	4603      	mov	r3, r0
 80103f6:	613b      	str	r3, [r7, #16]
	return k;
 80103f8:	693b      	ldr	r3, [r7, #16]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	371c      	adds	r7, #28
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd90      	pop	{r4, r7, pc}
 8010402:	bf00      	nop
 8010404:	40d00000 	.word	0x40d00000

08010408 <getAccZ>:
float getAccZ(){
 8010408:	b590      	push	{r4, r7, lr}
 801040a:	b087      	sub	sp, #28
 801040c:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 801040e:	1d3b      	adds	r3, r7, #4
 8010410:	2200      	movs	r2, #0
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	605a      	str	r2, [r3, #4]
 8010416:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 8010418:	1d3b      	adds	r3, r7, #4
 801041a:	4618      	mov	r0, r3
 801041c:	f000 f874 	bl	8010508 <getAccelGyroData>
 8010420:	4603      	mov	r3, r0
 8010422:	617b      	str	r3, [r7, #20]
	k=accelGyro[5]/16384.0;
 8010424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe f857 	bl	800e4dc <__aeabi_i2d>
 801042e:	f04f 0200 	mov.w	r2, #0
 8010432:	4b09      	ldr	r3, [pc, #36]	; (8010458 <getAccZ+0x50>)
 8010434:	f7fe f9e6 	bl	800e804 <__aeabi_ddiv>
 8010438:	4603      	mov	r3, r0
 801043a:	460c      	mov	r4, r1
 801043c:	4618      	mov	r0, r3
 801043e:	4621      	mov	r1, r4
 8010440:	f7fe fbae 	bl	800eba0 <__aeabi_d2f>
 8010444:	4603      	mov	r3, r0
 8010446:	613b      	str	r3, [r7, #16]
	return -k;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
}
 801044e:	4618      	mov	r0, r3
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	bd90      	pop	{r4, r7, pc}
 8010456:	bf00      	nop
 8010458:	40d00000 	.word	0x40d00000

0801045c <getstep>:

int getstep(void){
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
	uint16_t k=0;
 8010462:	2300      	movs	r3, #0
 8010464:	80fb      	strh	r3, [r7, #6]
    uint16_t stepCounter = 0;
 8010466:	2300      	movs	r3, #0
 8010468:	80bb      	strh	r3, [r7, #4]
    if (readStepCounter(&stepCounter,Obmi160)==BMI160_OK){
 801046a:	4b08      	ldr	r3, [pc, #32]	; (801048c <getstep+0x30>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	1d3b      	adds	r3, r7, #4
 8010470:	4611      	mov	r1, r2
 8010472:	4618      	mov	r0, r3
 8010474:	f000 f80c 	bl	8010490 <readStepCounter>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d101      	bne.n	8010482 <getstep+0x26>
	  k=stepCounter;
 801047e:	88bb      	ldrh	r3, [r7, #4]
 8010480:	80fb      	strh	r3, [r7, #6]
    }
	return k;
 8010482:	88fb      	ldrh	r3, [r7, #6]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	20000974 	.word	0x20000974

08010490 <readStepCounter>:

int8_t readStepCounter(uint16_t *stepVal, struct bmi160Dev *dev){
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 801049a:	2300      	movs	r3, #0
 801049c:	73fb      	strb	r3, [r7, #15]
  uint8_t data[2] = {0, 0};
 801049e:	2300      	movs	r3, #0
 80104a0:	723b      	strb	r3, [r7, #8]
 80104a2:	2300      	movs	r3, #0
 80104a4:	727b      	strb	r3, [r7, #9]
  uint16_t msb = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	81bb      	strh	r3, [r7, #12]
  uint8_t lsb = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	72fb      	strb	r3, [r7, #11]
  if (dev == NULL){
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <readStepCounter+0x28>
    rslt = BMI160_E_NULL_PTR;
 80104b4:	23ff      	movs	r3, #255	; 0xff
 80104b6:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt != BMI160_OK) {
 80104b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <readStepCounter+0x36>
    rslt = BMI160_E_NULL_PTR;
 80104c0:	23ff      	movs	r3, #255	; 0xff
 80104c2:	73fb      	strb	r3, [r7, #15]
 80104c4:	e019      	b.n	80104fa <readStepCounter+0x6a>
  } else {
    rslt = getRegs(BMI160_INT_STEP_CNT_0_ADDR, data, 2, dev);
 80104c6:	f107 0108 	add.w	r1, r7, #8
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	2202      	movs	r2, #2
 80104ce:	2078      	movs	r0, #120	; 0x78
 80104d0:	f000 fc3e 	bl	8010d50 <getRegs>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 80104d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10c      	bne.n	80104fa <readStepCounter+0x6a>
      lsb = data[0];
 80104e0:	7a3b      	ldrb	r3, [r7, #8]
 80104e2:	72fb      	strb	r3, [r7, #11]
      msb = data[1] << 8;
 80104e4:	7a7b      	ldrb	r3, [r7, #9]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	021b      	lsls	r3, r3, #8
 80104ea:	81bb      	strh	r3, [r7, #12]
      *stepVal = msb | lsb;
 80104ec:	7afb      	ldrb	r3, [r7, #11]
 80104ee:	b29a      	uxth	r2, r3
 80104f0:	89bb      	ldrh	r3, [r7, #12]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	801a      	strh	r2, [r3, #0]
    }
  }
  return rslt;
 80104fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
	...

08010508 <getAccelGyroData>:

int8_t getAccelGyroData( int16_t* data)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 8010510:	2300      	movs	r3, #0
 8010512:	73fb      	strb	r3, [r7, #15]
  rslt = getSensorData((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),Oaccel, Ogyro, Obmi160);
 8010514:	4b1e      	ldr	r3, [pc, #120]	; (8010590 <getAccelGyroData+0x88>)
 8010516:	6819      	ldr	r1, [r3, #0]
 8010518:	4b1e      	ldr	r3, [pc, #120]	; (8010594 <getAccelGyroData+0x8c>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	4b1e      	ldr	r3, [pc, #120]	; (8010598 <getAccelGyroData+0x90>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2003      	movs	r0, #3
 8010522:	f000 f83b 	bl	801059c <getSensorData>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]
  if(rslt == BMI160_OK){
 801052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d128      	bne.n	8010584 <getAccelGyroData+0x7c>
    data[0]=Ogyro->x;
 8010532:	4b18      	ldr	r3, [pc, #96]	; (8010594 <getAccelGyroData+0x8c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f9b3 2000 	ldrsh.w	r2, [r3]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	801a      	strh	r2, [r3, #0]
    data[1]=Ogyro->y;
 801053e:	4b15      	ldr	r3, [pc, #84]	; (8010594 <getAccelGyroData+0x8c>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	3302      	adds	r3, #2
 8010546:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801054a:	801a      	strh	r2, [r3, #0]
    data[2]=Ogyro->z;
 801054c:	4b11      	ldr	r3, [pc, #68]	; (8010594 <getAccelGyroData+0x8c>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3304      	adds	r3, #4
 8010554:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010558:	801a      	strh	r2, [r3, #0]
    data[3]=Oaccel->x;
 801055a:	4b0d      	ldr	r3, [pc, #52]	; (8010590 <getAccelGyroData+0x88>)
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3306      	adds	r3, #6
 8010562:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010566:	801a      	strh	r2, [r3, #0]
    data[4]=Oaccel->y;
 8010568:	4b09      	ldr	r3, [pc, #36]	; (8010590 <getAccelGyroData+0x88>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3308      	adds	r3, #8
 8010570:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010574:	801a      	strh	r2, [r3, #0]
    data[5]=Oaccel->z;
 8010576:	4b06      	ldr	r3, [pc, #24]	; (8010590 <getAccelGyroData+0x88>)
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	330a      	adds	r3, #10
 801057e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010582:	801a      	strh	r2, [r3, #0]
  }
  return rslt;
 8010584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	20000970 	.word	0x20000970
 8010594:	2000096c 	.word	0x2000096c
 8010598:	20000974 	.word	0x20000974

0801059c <getSensorData>:

int8_t getSensorData(uint8_t select_sensor, struct bmi160SensorData *accel, struct bmi160SensorData *gyro,struct bmi160Dev *dev){
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60b9      	str	r1, [r7, #8]
 80105a4:	607a      	str	r2, [r7, #4]
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	4603      	mov	r3, r0
 80105aa:	73fb      	strb	r3, [r7, #15]
  int8_t rslt = BMI160_OK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	75fb      	strb	r3, [r7, #23]
  uint8_t time_sel;
  uint8_t sen_sel;
  uint8_t len = 0;
 80105b0:	2300      	movs	r3, #0
 80105b2:	75bb      	strb	r3, [r7, #22]
  /*Extract the sensor  and time select information*/
  sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 80105b4:	7bfb      	ldrb	r3, [r7, #15]
 80105b6:	f003 0307 	and.w	r3, r3, #7
 80105ba:	757b      	strb	r3, [r7, #21]
  time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 80105bc:	7d7b      	ldrb	r3, [r7, #21]
 80105be:	109b      	asrs	r3, r3, #2
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	f003 0301 	and.w	r3, r3, #1
 80105c6:	753b      	strb	r3, [r7, #20]
  sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 80105c8:	7d7b      	ldrb	r3, [r7, #21]
 80105ca:	f003 0303 	and.w	r3, r3, #3
 80105ce:	757b      	strb	r3, [r7, #21]
  if (time_sel == 1)
 80105d0:	7d3b      	ldrb	r3, [r7, #20]
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d101      	bne.n	80105da <getSensorData+0x3e>
    len = 3;
 80105d6:	2303      	movs	r3, #3
 80105d8:	75bb      	strb	r3, [r7, #22]
  /* Null-pointer check */
  if (dev != NULL) {
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d03a      	beq.n	8010656 <getSensorData+0xba>
    switch (sen_sel) {
 80105e0:	7d7b      	ldrb	r3, [r7, #21]
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	d012      	beq.n	801060c <getSensorData+0x70>
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d01f      	beq.n	801062a <getSensorData+0x8e>
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d12f      	bne.n	801064e <getSensorData+0xb2>
    case eBmi160AccelOnly:
      /* Null-pointer check */
      if (accel == NULL)
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d102      	bne.n	80105fa <getSensorData+0x5e>
        rslt = BMI160_E_NULL_PTR;
 80105f4:	23ff      	movs	r3, #255	; 0xff
 80105f6:	75fb      	strb	r3, [r7, #23]
      else
        rslt =getAccelData(len, accel, dev);
      break;
 80105f8:	e02f      	b.n	801065a <getSensorData+0xbe>
        rslt =getAccelData(len, accel, dev);
 80105fa:	7dbb      	ldrb	r3, [r7, #22]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	68b9      	ldr	r1, [r7, #8]
 8010600:	4618      	mov	r0, r3
 8010602:	f000 f9b5 	bl	8010970 <getAccelData>
 8010606:	4603      	mov	r3, r0
 8010608:	75fb      	strb	r3, [r7, #23]
      break;
 801060a:	e026      	b.n	801065a <getSensorData+0xbe>
    case eBmi160GyroOnly:
      /* Null-pointer check */
      if (gyro == NULL)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d102      	bne.n	8010618 <getSensorData+0x7c>
        rslt = BMI160_E_NULL_PTR;
 8010612:	23ff      	movs	r3, #255	; 0xff
 8010614:	75fb      	strb	r3, [r7, #23]
      else
        rslt = getGyroData1(len, gyro, dev);
      break;
 8010616:	e020      	b.n	801065a <getSensorData+0xbe>
        rslt = getGyroData1(len, gyro, dev);
 8010618:	7dbb      	ldrb	r3, [r7, #22]
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	6879      	ldr	r1, [r7, #4]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 f821 	bl	8010666 <getGyroData1>
 8010624:	4603      	mov	r3, r0
 8010626:	75fb      	strb	r3, [r7, #23]
      break;
 8010628:	e017      	b.n	801065a <getSensorData+0xbe>
    case eBmi160BothAccelAndGyro:
      /* Null-pointer check */
      if ((gyro == NULL) || (accel == NULL))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <getSensorData+0x9a>
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d102      	bne.n	801063c <getSensorData+0xa0>
        rslt = BMI160_E_NULL_PTR;
 8010636:	23ff      	movs	r3, #255	; 0xff
 8010638:	75fb      	strb	r3, [r7, #23]
      else
        rslt = getAccelGyroData1(len, accel, gyro, dev);
      break;
 801063a:	e00e      	b.n	801065a <getSensorData+0xbe>
        rslt = getAccelGyroData1(len, accel, gyro, dev);
 801063c:	7db8      	ldrb	r0, [r7, #22]
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	68b9      	ldr	r1, [r7, #8]
 8010644:	f000 fa4e 	bl	8010ae4 <getAccelGyroData1>
 8010648:	4603      	mov	r3, r0
 801064a:	75fb      	strb	r3, [r7, #23]
      break;
 801064c:	e005      	b.n	801065a <getSensorData+0xbe>
    default:
      rslt = BMI160_E_INVALID_INPUT;
 801064e:	23fb      	movs	r3, #251	; 0xfb
 8010650:	75fb      	strb	r3, [r7, #23]
      break;
 8010652:	bf00      	nop
 8010654:	e001      	b.n	801065a <getSensorData+0xbe>
    }
  } else {
    rslt = BMI160_E_NULL_PTR;
 8010656:	23ff      	movs	r3, #255	; 0xff
 8010658:	75fb      	strb	r3, [r7, #23]
  }

  return rslt;
 801065a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3718      	adds	r7, #24
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <getGyroData1>:

int8_t getGyroData1(uint8_t len, struct bmi160SensorData *gyro, struct bmi160Dev *dev){
 8010666:	b580      	push	{r7, lr}
 8010668:	b08e      	sub	sp, #56	; 0x38
 801066a:	af00      	add	r7, sp, #0
 801066c:	4603      	mov	r3, r0
 801066e:	60b9      	str	r1, [r7, #8]
 8010670:	607a      	str	r2, [r7, #4]
 8010672:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 8010674:	2300      	movs	r3, #0
 8010676:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t data_array[15] = {0};
 801067a:	f107 0314 	add.w	r3, r7, #20
 801067e:	2200      	movs	r2, #0
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	605a      	str	r2, [r3, #4]
 8010684:	609a      	str	r2, [r3, #8]
 8010686:	f8c3 200b 	str.w	r2, [r3, #11]
  uint8_t time_0 = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint16_t time_1 = 0;
 8010690:	2300      	movs	r3, #0
 8010692:	867b      	strh	r3, [r7, #50]	; 0x32
  uint32_t time_2 = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t lsb;
  uint8_t msb;
  float msblsb;
  if (len == 0) {
 8010698:	7bfb      	ldrb	r3, [r7, #15]
 801069a:	2b00      	cmp	r3, #0
 801069c:	f040 809b 	bne.w	80107d6 <getGyroData1+0x170>
    /* read gyro data only */
    rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80106a0:	f107 0114 	add.w	r1, r7, #20
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2206      	movs	r2, #6
 80106a8:	200c      	movs	r0, #12
 80106aa:	f000 fb51 	bl	8010d50 <getRegs>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BMI160_OK) {
 80106b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f040 8088 	bne.w	80107ce <getGyroData1+0x168>
      /* Gyro Data */
      lsb = data_array[idx++];
 80106be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80106c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80106cc:	4413      	add	r3, r2
 80106ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80106d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 80106d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80106e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80106e4:	4413      	add	r3, r2
 80106e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80106ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80106ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80106f2:	021b      	lsls	r3, r3, #8
 80106f4:	b21a      	sxth	r2, r3
 80106f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80106fa:	b21b      	sxth	r3, r3
 80106fc:	4313      	orrs	r3, r2
 80106fe:	b21b      	sxth	r3, r3
 8010700:	4618      	mov	r0, r3
 8010702:	f7fe fb57 	bl	800edb4 <__aeabi_i2f>
 8010706:	4603      	mov	r3, r0
 8010708:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->x = msblsb; /* Data in X axis */
 801070a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801070c:	f7fe fd6c 	bl	800f1e8 <__aeabi_f2iz>
 8010710:	4603      	mov	r3, r0
 8010712:	b21a      	sxth	r2, r3
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	801a      	strh	r2, [r3, #0]

      lsb = data_array[idx++];
 8010718:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801071c:	1c5a      	adds	r2, r3, #1
 801071e:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8010722:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010726:	4413      	add	r3, r2
 8010728:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801072c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 8010730:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801073a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801073e:	4413      	add	r3, r2
 8010740:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 8010748:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801074c:	021b      	lsls	r3, r3, #8
 801074e:	b21a      	sxth	r2, r3
 8010750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010754:	b21b      	sxth	r3, r3
 8010756:	4313      	orrs	r3, r2
 8010758:	b21b      	sxth	r3, r3
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe fb2a 	bl	800edb4 <__aeabi_i2f>
 8010760:	4603      	mov	r3, r0
 8010762:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->y = msblsb; /* Data in Y axis */
 8010764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010766:	f7fe fd3f 	bl	800f1e8 <__aeabi_f2iz>
 801076a:	4603      	mov	r3, r0
 801076c:	b21a      	sxth	r2, r3
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	805a      	strh	r2, [r3, #2]

      lsb = data_array[idx++];
 8010772:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801077c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010780:	4413      	add	r3, r2
 8010782:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 801078a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8010794:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010798:	4413      	add	r3, r2
 801079a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801079e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80107a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80107a6:	021b      	lsls	r3, r3, #8
 80107a8:	b21a      	sxth	r2, r3
 80107aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80107ae:	b21b      	sxth	r3, r3
 80107b0:	4313      	orrs	r3, r2
 80107b2:	b21b      	sxth	r3, r3
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe fafd 	bl	800edb4 <__aeabi_i2f>
 80107ba:	4603      	mov	r3, r0
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->z = msblsb; /* Data in Z axis */
 80107be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107c0:	f7fe fd12 	bl	800f1e8 <__aeabi_f2iz>
 80107c4:	4603      	mov	r3, r0
 80107c6:	b21a      	sxth	r2, r3
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	809a      	strh	r2, [r3, #4]
 80107cc:	e0ca      	b.n	8010964 <getGyroData1+0x2fe>
    } else {
      rslt = BMI160_E_COM_FAIL;
 80107ce:	23fe      	movs	r3, #254	; 0xfe
 80107d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107d4:	e0c6      	b.n	8010964 <getGyroData1+0x2fe>
    }
  } else {
    /* read gyro sensor data along with time */
    rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	330c      	adds	r3, #12
 80107dc:	b29a      	uxth	r2, r3
 80107de:	f107 0114 	add.w	r1, r7, #20
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	200c      	movs	r0, #12
 80107e6:	f000 fab3 	bl	8010d50 <getRegs>
 80107ea:	4603      	mov	r3, r0
 80107ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BMI160_OK) {
 80107f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f040 80b2 	bne.w	801095e <getGyroData1+0x2f8>
      /* Gyro Data */
      lsb = data_array[idx++];
 80107fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80107fe:	1c5a      	adds	r2, r3, #1
 8010800:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8010804:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010808:	4413      	add	r3, r2
 801080a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801080e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 8010812:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010816:	1c5a      	adds	r2, r3, #1
 8010818:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801081c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010820:	4413      	add	r3, r2
 8010822:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010826:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 801082a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801082e:	021b      	lsls	r3, r3, #8
 8010830:	b21a      	sxth	r2, r3
 8010832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010836:	b21b      	sxth	r3, r3
 8010838:	4313      	orrs	r3, r2
 801083a:	b21b      	sxth	r3, r3
 801083c:	4618      	mov	r0, r3
 801083e:	f7fe fab9 	bl	800edb4 <__aeabi_i2f>
 8010842:	4603      	mov	r3, r0
 8010844:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->x = msblsb; /* gyro X axis data */
 8010846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010848:	f7fe fcce 	bl	800f1e8 <__aeabi_f2iz>
 801084c:	4603      	mov	r3, r0
 801084e:	b21a      	sxth	r2, r3
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	801a      	strh	r2, [r3, #0]

      lsb = data_array[idx++];
 8010854:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010858:	1c5a      	adds	r2, r3, #1
 801085a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801085e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010862:	4413      	add	r3, r2
 8010864:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 801086c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010870:	1c5a      	adds	r2, r3, #1
 8010872:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8010876:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801087a:	4413      	add	r3, r2
 801087c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 8010884:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8010888:	021b      	lsls	r3, r3, #8
 801088a:	b21a      	sxth	r2, r3
 801088c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010890:	b21b      	sxth	r3, r3
 8010892:	4313      	orrs	r3, r2
 8010894:	b21b      	sxth	r3, r3
 8010896:	4618      	mov	r0, r3
 8010898:	f7fe fa8c 	bl	800edb4 <__aeabi_i2f>
 801089c:	4603      	mov	r3, r0
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->y = msblsb; /* gyro Y axis data */
 80108a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108a2:	f7fe fca1 	bl	800f1e8 <__aeabi_f2iz>
 80108a6:	4603      	mov	r3, r0
 80108a8:	b21a      	sxth	r2, r3
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	805a      	strh	r2, [r3, #2]

      lsb = data_array[idx++];
 80108ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80108b2:	1c5a      	adds	r2, r3, #1
 80108b4:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80108b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80108bc:	4413      	add	r3, r2
 80108be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80108c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 80108c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80108ca:	1c5a      	adds	r2, r3, #1
 80108cc:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80108d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80108d4:	4413      	add	r3, r2
 80108d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80108da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80108de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80108e2:	021b      	lsls	r3, r3, #8
 80108e4:	b21a      	sxth	r2, r3
 80108e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80108ea:	b21b      	sxth	r3, r3
 80108ec:	4313      	orrs	r3, r2
 80108ee:	b21b      	sxth	r3, r3
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fe fa5f 	bl	800edb4 <__aeabi_i2f>
 80108f6:	4603      	mov	r3, r0
 80108f8:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->z = msblsb; /* gyro Z axis data */
 80108fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108fc:	f7fe fc74 	bl	800f1e8 <__aeabi_f2iz>
 8010900:	4603      	mov	r3, r0
 8010902:	b21a      	sxth	r2, r3
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	809a      	strh	r2, [r3, #4]

      idx = idx + 6;
 8010908:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801090c:	3306      	adds	r3, #6
 801090e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      time_0 = data_array[idx++];
 8010912:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010916:	1c5a      	adds	r2, r3, #1
 8010918:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801091c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010920:	4413      	add	r3, r2
 8010922:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010926:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      time_1 = (uint16_t)(data_array[idx++] << 8);
 801092a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8010934:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010938:	4413      	add	r3, r2
 801093a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801093e:	b29b      	uxth	r3, r3
 8010940:	021b      	lsls	r3, r3, #8
 8010942:	867b      	strh	r3, [r7, #50]	; 0x32
      time_2 = (uint32_t)(data_array[idx++] << 16);
 8010944:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010948:	1c5a      	adds	r2, r3, #1
 801094a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 801094e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010952:	4413      	add	r3, r2
 8010954:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8010958:	041b      	lsls	r3, r3, #16
 801095a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801095c:	e002      	b.n	8010964 <getGyroData1+0x2fe>
      //gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);

    } else {
      rslt = BMI160_E_COM_FAIL;
 801095e:	23fe      	movs	r3, #254	; 0xfe
 8010960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }

  return rslt;
 8010964:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010968:	4618      	mov	r0, r3
 801096a:	3738      	adds	r7, #56	; 0x38
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <getAccelData>:
    data[2]=Oaccel->z;
  }
  return rslt;
}

int8_t getAccelData(uint8_t len, struct bmi160SensorData *accel, struct bmi160Dev *dev){
 8010970:	b580      	push	{r7, lr}
 8010972:	b08c      	sub	sp, #48	; 0x30
 8010974:	af00      	add	r7, sp, #0
 8010976:	4603      	mov	r3, r0
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
 801097c:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t data_array[9] = {0};
 8010984:	f107 0310 	add.w	r3, r7, #16
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	605a      	str	r2, [r3, #4]
 801098e:	721a      	strb	r2, [r3, #8]
  uint8_t time_0 = 0;
 8010990:	2300      	movs	r3, #0
 8010992:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint16_t time_1 = 0;
 8010996:	2300      	movs	r3, #0
 8010998:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t time_2 = 0;
 801099a:	2300      	movs	r3, #0
 801099c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t lsb;
  uint8_t msb;
  float msblsb;
  rslt = getRegs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 801099e:	7bfb      	ldrb	r3, [r7, #15]
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	3306      	adds	r3, #6
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	f107 0110 	add.w	r1, r7, #16
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2012      	movs	r0, #18
 80109ae:	f000 f9cf 	bl	8010d50 <getRegs>
 80109b2:	4603      	mov	r3, r0
 80109b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (rslt == BMI160_OK){
 80109b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f040 8088 	bne.w	8010ad2 <getAccelData+0x162>
    lsb = data_array[idx++];
 80109c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80109c6:	1c5a      	adds	r2, r3, #1
 80109c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80109cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80109d0:	4413      	add	r3, r2
 80109d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80109d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 80109da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80109de:	1c5a      	adds	r2, r3, #1
 80109e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80109e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80109e8:	4413      	add	r3, r2
 80109ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80109ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 80109f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109f6:	021b      	lsls	r3, r3, #8
 80109f8:	b21a      	sxth	r2, r3
 80109fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80109fe:	b21b      	sxth	r3, r3
 8010a00:	4313      	orrs	r3, r2
 8010a02:	b21b      	sxth	r3, r3
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fe f9d5 	bl	800edb4 <__aeabi_i2f>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	61fb      	str	r3, [r7, #28]
    accel->x = msblsb; /* Data in X axis */
 8010a0e:	69f8      	ldr	r0, [r7, #28]
 8010a10:	f7fe fbea 	bl	800f1e8 <__aeabi_f2iz>
 8010a14:	4603      	mov	r3, r0
 8010a16:	b21a      	sxth	r2, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	801a      	strh	r2, [r3, #0]
    lsb = data_array[idx++];
 8010a1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010a20:	1c5a      	adds	r2, r3, #1
 8010a22:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010a26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010a2a:	4413      	add	r3, r2
 8010a2c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010a34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010a3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010a42:	4413      	add	r3, r2
 8010a44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010a4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a50:	021b      	lsls	r3, r3, #8
 8010a52:	b21a      	sxth	r2, r3
 8010a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010a58:	b21b      	sxth	r3, r3
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	b21b      	sxth	r3, r3
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fe f9a8 	bl	800edb4 <__aeabi_i2f>
 8010a64:	4603      	mov	r3, r0
 8010a66:	61fb      	str	r3, [r7, #28]
    accel->y = msblsb; /* Data in X axis */
 8010a68:	69f8      	ldr	r0, [r7, #28]
 8010a6a:	f7fe fbbd 	bl	800f1e8 <__aeabi_f2iz>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	b21a      	sxth	r2, r3
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	805a      	strh	r2, [r3, #2]
    lsb = data_array[idx++];
 8010a76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010a80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010a84:	4413      	add	r3, r2
 8010a86:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010a92:	1c5a      	adds	r2, r3, #1
 8010a94:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010a98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010a9c:	4413      	add	r3, r2
 8010a9e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010aa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010aa6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010aaa:	021b      	lsls	r3, r3, #8
 8010aac:	b21a      	sxth	r2, r3
 8010aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ab2:	b21b      	sxth	r3, r3
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	b21b      	sxth	r3, r3
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7fe f97b 	bl	800edb4 <__aeabi_i2f>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	61fb      	str	r3, [r7, #28]
    accel->z = msblsb; /* Data in X axis */
 8010ac2:	69f8      	ldr	r0, [r7, #28]
 8010ac4:	f7fe fb90 	bl	800f1e8 <__aeabi_f2iz>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	b21a      	sxth	r2, r3
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	809a      	strh	r2, [r3, #4]
 8010ad0:	e002      	b.n	8010ad8 <getAccelData+0x168>
  }else{
    rslt = BMI160_E_COM_FAIL;
 8010ad2:	23fe      	movs	r3, #254	; 0xfe
 8010ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  return rslt;
 8010ad8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3730      	adds	r7, #48	; 0x30
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <getAccelGyroData1>:

int8_t getAccelGyroData1(uint8_t len, struct bmi160SensorData *accel, struct bmi160SensorData *gyro, struct bmi160Dev *dev){
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08c      	sub	sp, #48	; 0x30
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60b9      	str	r1, [r7, #8]
 8010aec:	607a      	str	r2, [r7, #4]
 8010aee:	603b      	str	r3, [r7, #0]
 8010af0:	4603      	mov	r3, r0
 8010af2:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 8010af4:	2300      	movs	r3, #0
 8010af6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t data_array[15] = {0};
 8010afa:	f107 0310 	add.w	r3, r7, #16
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	605a      	str	r2, [r3, #4]
 8010b04:	609a      	str	r2, [r3, #8]
 8010b06:	f8c3 200b 	str.w	r2, [r3, #11]
  uint8_t time_0 = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint16_t time_1 = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t time_2 = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t msb;
  int16_t msblsb;

  /* read both accel and gyro sensor data
   * along with time if requested */
  rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	330c      	adds	r3, #12
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	f107 0110 	add.w	r1, r7, #16
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	200c      	movs	r0, #12
 8010b28:	f000 f912 	bl	8010d50 <getRegs>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (rslt == BMI160_OK) {
 8010b32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f040 8101 	bne.w	8010d3e <getAccelGyroData1+0x25a>
    /* Gyro Data */
    lsb = data_array[idx++];
 8010b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010b40:	1c5a      	adds	r2, r3, #1
 8010b42:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010b46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010b54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010b62:	4413      	add	r3, r2
 8010b64:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010b6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010b70:	021b      	lsls	r3, r3, #8
 8010b72:	b21a      	sxth	r2, r3
 8010b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010b78:	b21b      	sxth	r3, r3
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	843b      	strh	r3, [r7, #32]
    gyro->x = msblsb; /* gyro X axis data */
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	8c3a      	ldrh	r2, [r7, #32]
 8010b82:	801a      	strh	r2, [r3, #0]

    lsb = data_array[idx++];
 8010b84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010b8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010b92:	4413      	add	r3, r2
 8010b94:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010ba6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010baa:	4413      	add	r3, r2
 8010bac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010bb8:	021b      	lsls	r3, r3, #8
 8010bba:	b21a      	sxth	r2, r3
 8010bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010bc0:	b21b      	sxth	r3, r3
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	843b      	strh	r3, [r7, #32]
    gyro->y = msblsb; /* gyro Y axis data */
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8c3a      	ldrh	r2, [r7, #32]
 8010bca:	805a      	strh	r2, [r3, #2]

    lsb = data_array[idx++];
 8010bcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010bd0:	1c5a      	adds	r2, r3, #1
 8010bd2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010bd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010bda:	4413      	add	r3, r2
 8010bdc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010be4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010be8:	1c5a      	adds	r2, r3, #1
 8010bea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010bee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010bfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010c00:	021b      	lsls	r3, r3, #8
 8010c02:	b21a      	sxth	r2, r3
 8010c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c08:	b21b      	sxth	r3, r3
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	843b      	strh	r3, [r7, #32]
    gyro->z = msblsb; /* gyro Z axis data */
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8c3a      	ldrh	r2, [r7, #32]
 8010c12:	809a      	strh	r2, [r3, #4]

    /* Accel Data */
    lsb = data_array[idx++];
 8010c14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010c1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c22:	4413      	add	r3, r2
 8010c24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010c2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010c36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010c44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010c48:	021b      	lsls	r3, r3, #8
 8010c4a:	b21a      	sxth	r2, r3
 8010c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	4313      	orrs	r3, r2
 8010c54:	843b      	strh	r3, [r7, #32]
    accel->x = (int16_t)msblsb; /* accel X axis data */
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	8c3a      	ldrh	r2, [r7, #32]
 8010c5a:	801a      	strh	r2, [r3, #0]

    lsb = data_array[idx++];
 8010c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010c66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c6a:	4413      	add	r3, r2
 8010c6c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010c74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c78:	1c5a      	adds	r2, r3, #1
 8010c7a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010c7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c82:	4413      	add	r3, r2
 8010c84:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010c90:	021b      	lsls	r3, r3, #8
 8010c92:	b21a      	sxth	r2, r3
 8010c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c98:	b21b      	sxth	r3, r3
 8010c9a:	4313      	orrs	r3, r2
 8010c9c:	843b      	strh	r3, [r7, #32]
    accel->y = (int16_t)msblsb; /* accel Y axis data */
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	8c3a      	ldrh	r2, [r7, #32]
 8010ca2:	805a      	strh	r2, [r3, #2]

    lsb = data_array[idx++];
 8010ca4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010ca8:	1c5a      	adds	r2, r3, #1
 8010caa:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010cae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010cb2:	4413      	add	r3, r2
 8010cb4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8010cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010cc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010cca:	4413      	add	r3, r2
 8010ccc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8010cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010cd8:	021b      	lsls	r3, r3, #8
 8010cda:	b21a      	sxth	r2, r3
 8010cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ce0:	b21b      	sxth	r3, r3
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	843b      	strh	r3, [r7, #32]
    accel->z = (int16_t)msblsb; /* accel Z axis data */
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	8c3a      	ldrh	r2, [r7, #32]
 8010cea:	809a      	strh	r2, [r3, #4]

    if (len == 3) {
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
 8010cee:	2b03      	cmp	r3, #3
 8010cf0:	d128      	bne.n	8010d44 <getAccelGyroData1+0x260>
      time_0 = data_array[idx++];
 8010cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010cf6:	1c5a      	adds	r2, r3, #1
 8010cf8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010cfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010d00:	4413      	add	r3, r2
 8010d02:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010d06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
      time_1 = (uint16_t)(data_array[idx++] << 8);
 8010d0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010d14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010d18:	4413      	add	r3, r2
 8010d1a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	021b      	lsls	r3, r3, #8
 8010d22:	857b      	strh	r3, [r7, #42]	; 0x2a
      time_2 = (uint32_t)(data_array[idx++] << 16);
 8010d24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8010d2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010d32:	4413      	add	r3, r2
 8010d34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8010d38:	041b      	lsls	r3, r3, #16
 8010d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010d3c:	e002      	b.n	8010d44 <getAccelGyroData1+0x260>
      //accel->sensortime = 0;
      //gyro->sensortime = 0;
      ;
    }
  } else {
    rslt = BMI160_E_COM_FAIL;
 8010d3e:	23fe      	movs	r3, #254	; 0xfe
 8010d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return rslt;
 8010d44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3730      	adds	r7, #48	; 0x30
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <getRegs>:

//底层通信层
int8_t getRegs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi160Dev *dev){
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60b9      	str	r1, [r7, #8]
 8010d58:	607b      	str	r3, [r7, #4]
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	73fb      	strb	r3, [r7, #15]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	81bb      	strh	r3, [r7, #12]
  int8_t rslt = BMI160_OK;
 8010d62:	2300      	movs	r3, #0
 8010d64:	75fb      	strb	r3, [r7, #23]
  if (dev == NULL) {
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <getRegs+0x22>
    rslt = BMI160_E_NULL_PTR;
 8010d6c:	23ff      	movs	r3, #255	; 0xff
 8010d6e:	75fb      	strb	r3, [r7, #23]
 8010d70:	e00d      	b.n	8010d8e <getRegs+0x3e>
  } else {
    rslt = I2cGetRegs(dev, reg_addr, data, len);
 8010d72:	89bb      	ldrh	r3, [r7, #12]
 8010d74:	7bf9      	ldrb	r1, [r7, #15]
 8010d76:	68ba      	ldr	r2, [r7, #8]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 f80f 	bl	8010d9c <I2cGetRegs>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK){
 8010d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <getRegs+0x3e>
      rslt = BMI160_E_COM_FAIL;
 8010d8a:	23fe      	movs	r3, #254	; 0xfe
 8010d8c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return rslt;
 8010d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <I2cGetRegs>:

int8_t I2cGetRegs(struct bmi160Dev *dev, uint8_t reg_addr, uint8_t *data, uint16_t len){
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b086      	sub	sp, #24
 8010da0:	af02      	add	r7, sp, #8
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	607a      	str	r2, [r7, #4]
 8010da6:	461a      	mov	r2, r3
 8010da8:	460b      	mov	r3, r1
 8010daa:	72fb      	strb	r3, [r7, #11]
 8010dac:	4613      	mov	r3, r2
 8010dae:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c2,dev->id<<1,&reg_addr,1,1000);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	785b      	ldrb	r3, [r3, #1]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	b299      	uxth	r1, r3
 8010dba:	f107 020b 	add.w	r2, r7, #11
 8010dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	480c      	ldr	r0, [pc, #48]	; (8010df8 <I2cGetRegs+0x5c>)
 8010dc8:	f005 fcc0 	bl	801674c <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8010dcc:	200a      	movs	r0, #10
 8010dce:	f004 f99f 	bl	8015110 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c2,dev->id<<1,data,len,1000);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	785b      	ldrb	r3, [r3, #1]
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	b299      	uxth	r1, r3
 8010ddc:	893a      	ldrh	r2, [r7, #8]
 8010dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	4613      	mov	r3, r2
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	4803      	ldr	r0, [pc, #12]	; (8010df8 <I2cGetRegs+0x5c>)
 8010dea:	f005 fdad 	bl	8016948 <HAL_I2C_Master_Receive>
  return BMI160_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20000918 	.word	0x20000918

08010dfc <setRegs>:

int8_t setRegs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi160Dev *dev){
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60b9      	str	r1, [r7, #8]
 8010e04:	607b      	str	r3, [r7, #4]
 8010e06:	4603      	mov	r3, r0
 8010e08:	73fb      	strb	r3, [r7, #15]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	81bb      	strh	r3, [r7, #12]
  int8_t rslt = BMI160_OK;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	75fb      	strb	r3, [r7, #23]
  uint8_t count = 0;
 8010e12:	2300      	movs	r3, #0
 8010e14:	75bb      	strb	r3, [r7, #22]
  if(dev == NULL){
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <setRegs+0x26>
    rslt = BMI160_E_NULL_PTR;
 8010e1c:	23ff      	movs	r3, #255	; 0xff
 8010e1e:	75fb      	strb	r3, [r7, #23]
 8010e20:	e010      	b.n	8010e44 <setRegs+0x48>
  }else{
    rslt =I2cSetRegs(dev,reg_addr,data,len);
 8010e22:	89bb      	ldrh	r3, [r7, #12]
 8010e24:	7bf9      	ldrb	r1, [r7, #15]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 f811 	bl	8010e50 <I2cSetRegs>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(1);
 8010e32:	2001      	movs	r0, #1
 8010e34:	f004 f96c 	bl	8015110 <HAL_Delay>
    if(rslt != BMI160_OK)
 8010e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <setRegs+0x48>
      rslt = BMI160_E_COM_FAIL;
 8010e40:	23fe      	movs	r3, #254	; 0xfe
 8010e42:	75fb      	strb	r3, [r7, #23]
  }
  return rslt;
 8010e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3718      	adds	r7, #24
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <I2cSetRegs>:

int8_t I2cSetRegs(struct bmi160Dev *dev, uint8_t reg_addr, uint8_t *data, uint16_t len){
 8010e50:	b590      	push	{r4, r7, lr}
 8010e52:	b0c9      	sub	sp, #292	; 0x124
 8010e54:	af02      	add	r7, sp, #8
 8010e56:	f107 040c 	add.w	r4, r7, #12
 8010e5a:	6020      	str	r0, [r4, #0]
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	1d39      	adds	r1, r7, #4
 8010e60:	600a      	str	r2, [r1, #0]
 8010e62:	4619      	mov	r1, r3
 8010e64:	f107 030b 	add.w	r3, r7, #11
 8010e68:	4602      	mov	r2, r0
 8010e6a:	701a      	strb	r2, [r3, #0]
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	460a      	mov	r2, r1
 8010e72:	801a      	strh	r2, [r3, #0]
  uint8_t buf[255]={0};
 8010e74:	f107 0314 	add.w	r3, r7, #20
 8010e78:	4618      	mov	r0, r3
 8010e7a:	23ff      	movs	r3, #255	; 0xff
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	2100      	movs	r1, #0
 8010e80:	f00c ff69 	bl	801dd56 <memset>
  buf[0]=reg_addr;
 8010e84:	f107 0314 	add.w	r3, r7, #20
 8010e88:	f107 020b 	add.w	r2, r7, #11
 8010e8c:	7812      	ldrb	r2, [r2, #0]
 8010e8e:	701a      	strb	r2, [r3, #0]
  for(int i=1;i<len+1;i++)
 8010e90:	2301      	movs	r3, #1
 8010e92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010e96:	e012      	b.n	8010ebe <I2cSetRegs+0x6e>
	  buf[i]=data[i-1];
 8010e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	1d3a      	adds	r2, r7, #4
 8010ea0:	6812      	ldr	r2, [r2, #0]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	7819      	ldrb	r1, [r3, #0]
 8010ea6:	f107 0214 	add.w	r2, r7, #20
 8010eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eae:	4413      	add	r3, r2
 8010eb0:	460a      	mov	r2, r1
 8010eb2:	701a      	strb	r2, [r3, #0]
  for(int i=1;i<len+1;i++)
 8010eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eb8:	3301      	adds	r3, #1
 8010eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010ebe:	f107 0308 	add.w	r3, r7, #8
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	dbe4      	blt.n	8010e98 <I2cSetRegs+0x48>
  HAL_I2C_Master_Transmit(&hi2c2,dev->id<<1,buf,len+1,1000);
 8010ece:	f107 030c 	add.w	r3, r7, #12
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	785b      	ldrb	r3, [r3, #1]
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	b299      	uxth	r1, r3
 8010edc:	f107 0308 	add.w	r3, r7, #8
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	b298      	uxth	r0, r3
 8010ee6:	f107 0214 	add.w	r2, r7, #20
 8010eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	4804      	ldr	r0, [pc, #16]	; (8010f04 <I2cSetRegs+0xb4>)
 8010ef4:	f005 fc2a 	bl	801674c <HAL_I2C_Master_Transmit>
  return BMI160_OK;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd90      	pop	{r4, r7, pc}
 8010f04:	20000918 	.word	0x20000918

08010f08 <DFR_USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010f14:	2300      	movs	r3, #0
 8010f16:	73fb      	strb	r3, [r7, #15]
  DFR_USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7c1b      	ldrb	r3, [r3, #16]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d115      	bne.n	8010f4c <DFR_USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, DFR_CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f24:	2202      	movs	r2, #2
 8010f26:	2184      	movs	r1, #132	; 0x84
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f00c fd64 	bl	801d9f6 <USBD_LL_OpenEP>
                   DFR_CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[DFR_CDC_IN_EP & 0xFU].is_used = 1U;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	669a      	str	r2, [r3, #104]	; 0x68

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, DFR_CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f38:	2202      	movs	r2, #2
 8010f3a:	2104      	movs	r1, #4
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f00c fd5a 	bl	801d9f6 <USBD_LL_OpenEP>
                   DFR_CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[DFR_CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8010f4a:	e012      	b.n	8010f72 <DFR_USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, DFR_CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f4c:	2340      	movs	r3, #64	; 0x40
 8010f4e:	2202      	movs	r2, #2
 8010f50:	2184      	movs	r1, #132	; 0x84
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f00c fd4f 	bl	801d9f6 <USBD_LL_OpenEP>
                   DFR_CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[DFR_CDC_IN_EP & 0xFU].is_used = 1U;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	669a      	str	r2, [r3, #104]	; 0x68

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, DFR_CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f5e:	2340      	movs	r3, #64	; 0x40
 8010f60:	2202      	movs	r2, #2
 8010f62:	2104      	movs	r1, #4
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f00c fd46 	bl	801d9f6 <USBD_LL_OpenEP>
                   DFR_CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[DFR_CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, DFR_CDC_CMD_EP, USBD_EP_TYPE_INTR, DFR_CDC_CMD_PACKET_SIZE);
 8010f72:	2308      	movs	r3, #8
 8010f74:	2203      	movs	r2, #3
 8010f76:	2182      	movs	r1, #130	; 0x82
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f00c fd3c 	bl	801d9f6 <USBD_LL_OpenEP>
  pdev->ep_in[DFR_CDC_CMD_EP & 0xFU].is_used = 1U;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(DFR_USBD_CDC_HandleTypeDef));
 8010f84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010f88:	f00c fe5c 	bl	801dc44 <USBD_static_malloc>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d102      	bne.n	8010fa4 <DFR_USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	73fb      	strb	r3, [r7, #15]
 8010fa2:	e026      	b.n	8010ff2 <DFR_USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010faa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	7c1b      	ldrb	r3, [r3, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d109      	bne.n	8010fe2 <DFR_USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, DFR_CDC_OUT_EP, hcdc->RxBuffer,
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fd8:	2104      	movs	r1, #4
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f00c fdfc 	bl	801dbd8 <USBD_LL_PrepareReceive>
 8010fe0:	e007      	b.n	8010ff2 <DFR_USBD_CDC_Init+0xea>
                             DFR_CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, DFR_CDC_OUT_EP, hcdc->RxBuffer,
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fe8:	2340      	movs	r3, #64	; 0x40
 8010fea:	2104      	movs	r1, #4
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f00c fdf3 	bl	801dbd8 <USBD_LL_PrepareReceive>
                             DFR_CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <DFR_USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	460b      	mov	r3, r1
 8011006:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011008:	2300      	movs	r3, #0
 801100a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, DFR_CDC_IN_EP);
 801100c:	2184      	movs	r1, #132	; 0x84
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f00c fd17 	bl	801da42 <USBD_LL_CloseEP>
  pdev->ep_in[DFR_CDC_IN_EP & 0xFU].is_used = 0U;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	669a      	str	r2, [r3, #104]	; 0x68

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, DFR_CDC_OUT_EP);
 801101a:	2104      	movs	r1, #4
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f00c fd10 	bl	801da42 <USBD_LL_CloseEP>
  pdev->ep_out[DFR_CDC_OUT_EP & 0xFU].is_used = 0U;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, DFR_CDC_CMD_EP);
 801102a:	2182      	movs	r1, #130	; 0x82
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f00c fd08 	bl	801da42 <USBD_LL_CloseEP>
  pdev->ep_in[DFR_CDC_CMD_EP & 0xFU].is_used = 0U;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00e      	beq.n	8011060 <DFR_USBD_CDC_DeInit+0x64>
  {
    ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011052:	4618      	mov	r0, r3
 8011054:	f00c fe02 	bl	801dc5c <USBD_static_free>
    pdev->pClassData = NULL;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8011060:	7bfb      	ldrb	r3, [r7, #15]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <DFR_USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b086      	sub	sp, #24
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	6039      	str	r1, [r7, #0]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801107a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011080:	2300      	movs	r3, #0
 8011082:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8011084:	2300      	movs	r3, #0
 8011086:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011090:	2b00      	cmp	r3, #0
 8011092:	d039      	beq.n	8011108 <DFR_USBD_CDC_Setup+0x9e>
 8011094:	2b20      	cmp	r3, #32
 8011096:	d17c      	bne.n	8011192 <DFR_USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	88db      	ldrh	r3, [r3, #6]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d029      	beq.n	80110f4 <DFR_USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	b25b      	sxtb	r3, r3
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	da11      	bge.n	80110ce <DFR_USBD_CDC_Setup+0x64>
        {
          ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110b0:	689b      	ldr	r3, [r3, #8]
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80110b6:	6939      	ldr	r1, [r7, #16]
          ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	88d2      	ldrh	r2, [r2, #6]
 80110bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80110be:	6939      	ldr	r1, [r7, #16]
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	88db      	ldrh	r3, [r3, #6]
 80110c4:	461a      	mov	r2, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f00c f994 	bl	801d3f4 <USBD_CtlSendData>
      else
      {
        ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80110cc:	e068      	b.n	80111a0 <DFR_USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	785a      	ldrb	r2, [r3, #1]
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	88db      	ldrh	r3, [r3, #6]
 80110dc:	b2da      	uxtb	r2, r3
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80110e4:	6939      	ldr	r1, [r7, #16]
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	88db      	ldrh	r3, [r3, #6]
 80110ea:	461a      	mov	r2, r3
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f00c f9af 	bl	801d450 <USBD_CtlPrepareRx>
      break;
 80110f2:	e055      	b.n	80111a0 <DFR_USBD_CDC_Setup+0x136>
        ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	7850      	ldrb	r0, [r2, #1]
 8011100:	2200      	movs	r2, #0
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	4798      	blx	r3
      break;
 8011106:	e04b      	b.n	80111a0 <DFR_USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	785b      	ldrb	r3, [r3, #1]
 801110c:	2b0a      	cmp	r3, #10
 801110e:	d017      	beq.n	8011140 <DFR_USBD_CDC_Setup+0xd6>
 8011110:	2b0b      	cmp	r3, #11
 8011112:	d029      	beq.n	8011168 <DFR_USBD_CDC_Setup+0xfe>
 8011114:	2b00      	cmp	r3, #0
 8011116:	d133      	bne.n	8011180 <DFR_USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801111e:	2b03      	cmp	r3, #3
 8011120:	d107      	bne.n	8011132 <DFR_USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011122:	f107 030c 	add.w	r3, r7, #12
 8011126:	2202      	movs	r2, #2
 8011128:	4619      	mov	r1, r3
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f00c f962 	bl	801d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011130:	e02e      	b.n	8011190 <DFR_USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f00c f8f3 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 801113a:	2302      	movs	r3, #2
 801113c:	75fb      	strb	r3, [r7, #23]
          break;
 801113e:	e027      	b.n	8011190 <DFR_USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011146:	2b03      	cmp	r3, #3
 8011148:	d107      	bne.n	801115a <DFR_USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801114a:	f107 030f 	add.w	r3, r7, #15
 801114e:	2201      	movs	r2, #1
 8011150:	4619      	mov	r1, r3
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f00c f94e 	bl	801d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011158:	e01a      	b.n	8011190 <DFR_USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f00c f8df 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 8011162:	2302      	movs	r3, #2
 8011164:	75fb      	strb	r3, [r7, #23]
          break;
 8011166:	e013      	b.n	8011190 <DFR_USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801116e:	2b03      	cmp	r3, #3
 8011170:	d00d      	beq.n	801118e <DFR_USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f00c f8d3 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 801117a:	2302      	movs	r3, #2
 801117c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801117e:	e006      	b.n	801118e <DFR_USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f00c f8cc 	bl	801d320 <USBD_CtlError>
          ret = USBD_FAIL;
 8011188:	2302      	movs	r3, #2
 801118a:	75fb      	strb	r3, [r7, #23]
          break;
 801118c:	e000      	b.n	8011190 <DFR_USBD_CDC_Setup+0x126>
          break;
 801118e:	bf00      	nop
      }
      break;
 8011190:	e006      	b.n	80111a0 <DFR_USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8011192:	6839      	ldr	r1, [r7, #0]
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f00c f8c3 	bl	801d320 <USBD_CtlError>
      ret = USBD_FAIL;
 801119a:	2302      	movs	r3, #2
 801119c:	75fb      	strb	r3, [r7, #23]
      break;
 801119e:	bf00      	nop
  }

  return ret;
 80111a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3718      	adds	r7, #24
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <DFR_USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	460b      	mov	r3, r1
 80111b4:	70fb      	strb	r3, [r7, #3]
  DFR_USBD_CDC_HandleTypeDef *hcdc = (DFR_USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d03a      	beq.n	8011246 <DFR_USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80111d0:	78fa      	ldrb	r2, [r7, #3]
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	4613      	mov	r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	4413      	add	r3, r2
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	440b      	add	r3, r1
 80111de:	331c      	adds	r3, #28
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d029      	beq.n	801123a <DFR_USBD_CDC_DataIn+0x90>
 80111e6:	78fa      	ldrb	r2, [r7, #3]
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	4613      	mov	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	440b      	add	r3, r1
 80111f4:	331c      	adds	r3, #28
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	78f9      	ldrb	r1, [r7, #3]
 80111fa:	68b8      	ldr	r0, [r7, #8]
 80111fc:	460b      	mov	r3, r1
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	440b      	add	r3, r1
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	4403      	add	r3, r0
 8011206:	3338      	adds	r3, #56	; 0x38
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	fbb2 f1f3 	udiv	r1, r2, r3
 801120e:	fb03 f301 	mul.w	r3, r3, r1
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	2b00      	cmp	r3, #0
 8011216:	d110      	bne.n	801123a <DFR_USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8011218:	78fa      	ldrb	r2, [r7, #3]
 801121a:	6879      	ldr	r1, [r7, #4]
 801121c:	4613      	mov	r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	440b      	add	r3, r1
 8011226:	331c      	adds	r3, #28
 8011228:	2200      	movs	r2, #0
 801122a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801122c:	78f9      	ldrb	r1, [r7, #3]
 801122e:	2300      	movs	r3, #0
 8011230:	2200      	movs	r2, #0
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f00c fcad 	bl	801db92 <USBD_LL_Transmit>
 8011238:	e003      	b.n	8011242 <DFR_USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2200      	movs	r2, #0
 801123e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011242:	2300      	movs	r3, #0
 8011244:	e000      	b.n	8011248 <DFR_USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8011246:	2302      	movs	r3, #2
  }
}
 8011248:	4618      	mov	r0, r3
 801124a:	3710      	adds	r7, #16
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <DFR_USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	460b      	mov	r3, r1
 801125a:	70fb      	strb	r3, [r7, #3]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011262:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011264:	78fb      	ldrb	r3, [r7, #3]
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f00c fcd8 	bl	801dc1e <USBD_LL_GetRxDataSize>
 801126e:	4602      	mov	r2, r0
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801127c:	2b00      	cmp	r3, #0
 801127e:	d00d      	beq.n	801129c <DFR_USBD_CDC_DataOut+0x4c>
  {
    ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011294:	4611      	mov	r1, r2
 8011296:	4798      	blx	r3

    return USBD_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	e000      	b.n	801129e <DFR_USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801129c:	2302      	movs	r3, #2
  }
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <DFR_USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  DFR_USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d015      	beq.n	80112ec <DFR_USBD_CDC_EP0_RxReady+0x46>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80112c6:	2bff      	cmp	r3, #255	; 0xff
 80112c8:	d010      	beq.n	80112ec <DFR_USBD_CDC_EP0_RxReady+0x46>
  {
    ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	68fa      	ldr	r2, [r7, #12]
 80112d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80112d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((DFR_USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80112e0:	b292      	uxth	r2, r2
 80112e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	22ff      	movs	r2, #255	; 0xff
 80112e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80112ec:	2300      	movs	r3, #0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
	...

080112f8 <DFR_USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_CDC_CfgFSDesc);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2243      	movs	r2, #67	; 0x43
 8011304:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_CDC_CfgFSDesc;
 8011306:	4b03      	ldr	r3, [pc, #12]	; (8011314 <DFR_USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011308:	4618      	mov	r0, r3
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	bc80      	pop	{r7}
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	2000008c 	.word	0x2000008c

08011318 <DFR_USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_CDC_CfgHSDesc);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2243      	movs	r2, #67	; 0x43
 8011324:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_CDC_CfgHSDesc;
 8011326:	4b03      	ldr	r3, [pc, #12]	; (8011334 <DFR_USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011328:	4618      	mov	r0, r3
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	bc80      	pop	{r7}
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	20000048 	.word	0x20000048

08011338 <DFR_USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_CDC_OtherSpeedCfgDesc);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2243      	movs	r2, #67	; 0x43
 8011344:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_CDC_OtherSpeedCfgDesc;
 8011346:	4b03      	ldr	r3, [pc, #12]	; (8011354 <DFR_USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011348:	4618      	mov	r0, r3
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	bc80      	pop	{r7}
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop
 8011354:	200000d0 	.word	0x200000d0

08011358 <DFR_USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *DFR_USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_CDC_DeviceQualifierDesc);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	220a      	movs	r2, #10
 8011364:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_CDC_DeviceQualifierDesc;
 8011366:	4b03      	ldr	r3, [pc, #12]	; (8011374 <DFR_USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	bc80      	pop	{r7}
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	20000004 	.word	0x20000004

08011378 <DFR_USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  DFR_USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	4613      	mov	r3, r2
 8011384:	80fb      	strh	r3, [r7, #6]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	68ba      	ldr	r2, [r7, #8]
 8011392:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011396:	88fa      	ldrh	r2, [r7, #6]
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	371c      	adds	r7, #28
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bc80      	pop	{r7}
 80113a8:	4770      	bx	lr

080113aa <DFR_USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  DFR_USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80113aa:	b480      	push	{r7}
 80113ac:	b085      	sub	sp, #20
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bc80      	pop	{r7}
 80113ce:	4770      	bx	lr

080113d0 <DFR_USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  DFR_USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d01c      	beq.n	8011424 <DFR_USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d115      	bne.n	8011420 <DFR_USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2201      	movs	r2, #1
 80113f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[DFR_CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, DFR_CDC_IN_EP, hcdc->TxBuffer,
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, DFR_CDC_IN_EP, hcdc->TxBuffer,
 8011412:	b29b      	uxth	r3, r3
 8011414:	2184      	movs	r1, #132	; 0x84
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f00c fbbb 	bl	801db92 <USBD_LL_Transmit>

      return USBD_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	e002      	b.n	8011426 <DFR_USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011420:	2301      	movs	r3, #1
 8011422:	e000      	b.n	8011426 <DFR_USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8011424:	2302      	movs	r3, #2
  }
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}

0801142e <DFR_USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  DFR_USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801142e:	b580      	push	{r7, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
  DFR_USBD_CDC_HandleTypeDef   *hcdc = (DFR_USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801143c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011444:	2b00      	cmp	r3, #0
 8011446:	d017      	beq.n	8011478 <DFR_USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7c1b      	ldrb	r3, [r3, #16]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d109      	bne.n	8011464 <DFR_USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011456:	f44f 7300 	mov.w	r3, #512	; 0x200
 801145a:	2104      	movs	r1, #4
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f00c fbbb 	bl	801dbd8 <USBD_LL_PrepareReceive>
 8011462:	e007      	b.n	8011474 <DFR_USBD_CDC_ReceivePacket+0x46>
                             DFR_CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801146a:	2340      	movs	r3, #64	; 0x40
 801146c:	2104      	movs	r1, #4
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f00c fbb2 	bl	801dbd8 <USBD_LL_PrepareReceive>
                             DFR_CDC_OUT_EP,
                             hcdc->RxBuffer,
                             DFR_CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011474:	2300      	movs	r3, #0
 8011476:	e000      	b.n	801147a <DFR_USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011478:	2302      	movs	r3, #2
  }
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8011484:	b480      	push	{r7}
 8011486:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011488:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801148c:	4b05      	ldr	r3, [pc, #20]	; (80114a4 <__NVIC_SystemReset+0x20>)
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011494:	4903      	ldr	r1, [pc, #12]	; (80114a4 <__NVIC_SystemReset+0x20>)
 8011496:	4b04      	ldr	r3, [pc, #16]	; (80114a8 <__NVIC_SystemReset+0x24>)
 8011498:	4313      	orrs	r3, r2
 801149a:	60cb      	str	r3, [r1, #12]
 801149c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80114a0:	bf00      	nop
 80114a2:	e7fd      	b.n	80114a0 <__NVIC_SystemReset+0x1c>
 80114a4:	e000ed00 	.word	0xe000ed00
 80114a8:	05fa0004 	.word	0x05fa0004

080114ac <DFR_CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_CDC_Init_FS(void)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  DFR_USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80114b0:	2200      	movs	r2, #0
 80114b2:	4905      	ldr	r1, [pc, #20]	; (80114c8 <DFR_CDC_Init_FS+0x1c>)
 80114b4:	4805      	ldr	r0, [pc, #20]	; (80114cc <DFR_CDC_Init_FS+0x20>)
 80114b6:	f7ff ff5f 	bl	8011378 <DFR_USBD_CDC_SetTxBuffer>
  DFR_USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80114ba:	4905      	ldr	r1, [pc, #20]	; (80114d0 <DFR_CDC_Init_FS+0x24>)
 80114bc:	4803      	ldr	r0, [pc, #12]	; (80114cc <DFR_CDC_Init_FS+0x20>)
 80114be:	f7ff ff74 	bl	80113aa <DFR_USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80114c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	20000d64 	.word	0x20000d64
 80114cc:	20001514 	.word	0x20001514
 80114d0:	20000978 	.word	0x20000978

080114d4 <DFR_CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_CDC_DeInit_FS(void)
{
 80114d4:	b480      	push	{r7}
 80114d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114da:	4618      	mov	r0, r3
 80114dc:	46bd      	mov	sp, r7
 80114de:	bc80      	pop	{r7}
 80114e0:	4770      	bx	lr
	...

080114e4 <DFR_CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	6039      	str	r1, [r7, #0]
 80114ee:	71fb      	strb	r3, [r7, #7]
 80114f0:	4613      	mov	r3, r2
 80114f2:	80bb      	strh	r3, [r7, #4]
	static uint8_t count;
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	2b23      	cmp	r3, #35	; 0x23
 80114f8:	d862      	bhi.n	80115c0 <DFR_CDC_Control_FS+0xdc>
 80114fa:	a201      	add	r2, pc, #4	; (adr r2, 8011500 <DFR_CDC_Control_FS+0x1c>)
 80114fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011500:	080115c1 	.word	0x080115c1
 8011504:	080115c1 	.word	0x080115c1
 8011508:	080115c1 	.word	0x080115c1
 801150c:	080115c1 	.word	0x080115c1
 8011510:	080115c1 	.word	0x080115c1
 8011514:	080115c1 	.word	0x080115c1
 8011518:	080115c1 	.word	0x080115c1
 801151c:	080115c1 	.word	0x080115c1
 8011520:	080115c1 	.word	0x080115c1
 8011524:	080115c1 	.word	0x080115c1
 8011528:	080115c1 	.word	0x080115c1
 801152c:	080115c1 	.word	0x080115c1
 8011530:	080115c1 	.word	0x080115c1
 8011534:	080115c1 	.word	0x080115c1
 8011538:	080115c1 	.word	0x080115c1
 801153c:	080115c1 	.word	0x080115c1
 8011540:	080115c1 	.word	0x080115c1
 8011544:	080115c1 	.word	0x080115c1
 8011548:	080115c1 	.word	0x080115c1
 801154c:	080115c1 	.word	0x080115c1
 8011550:	080115c1 	.word	0x080115c1
 8011554:	080115c1 	.word	0x080115c1
 8011558:	080115c1 	.word	0x080115c1
 801155c:	080115c1 	.word	0x080115c1
 8011560:	080115c1 	.word	0x080115c1
 8011564:	080115c1 	.word	0x080115c1
 8011568:	080115c1 	.word	0x080115c1
 801156c:	080115c1 	.word	0x080115c1
 8011570:	080115c1 	.word	0x080115c1
 8011574:	080115c1 	.word	0x080115c1
 8011578:	080115c1 	.word	0x080115c1
 801157c:	080115c1 	.word	0x080115c1
 8011580:	08011591 	.word	0x08011591
 8011584:	080115c1 	.word	0x080115c1
 8011588:	080115c1 	.word	0x080115c1
 801158c:	080115c1 	.word	0x080115c1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case DFR_CDC_SET_LINE_CODING:
    	if(pbuf[0]+(pbuf[1]<<8)==1200)
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	461a      	mov	r2, r3
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	3301      	adds	r3, #1
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	021b      	lsls	r3, r3, #8
 801159e:	4413      	add	r3, r2
 80115a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80115a4:	d10e      	bne.n	80115c4 <DFR_CDC_Control_FS+0xe0>
    	{
    		if(count>4){
 80115a6:	4b0a      	ldr	r3, [pc, #40]	; (80115d0 <DFR_CDC_Control_FS+0xec>)
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	2b04      	cmp	r3, #4
 80115ac:	d901      	bls.n	80115b2 <DFR_CDC_Control_FS+0xce>
    			NVIC_SystemReset();
 80115ae:	f7ff ff69 	bl	8011484 <__NVIC_SystemReset>
    		}else
    			count++;
 80115b2:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <DFR_CDC_Control_FS+0xec>)
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	3301      	adds	r3, #1
 80115b8:	b2da      	uxtb	r2, r3
 80115ba:	4b05      	ldr	r3, [pc, #20]	; (80115d0 <DFR_CDC_Control_FS+0xec>)
 80115bc:	701a      	strb	r2, [r3, #0]
    	}
    break;
 80115be:	e001      	b.n	80115c4 <DFR_CDC_Control_FS+0xe0>
    case DFR_CDC_SEND_BREAK:

    break;

  default:
    break;
 80115c0:	bf00      	nop
 80115c2:	e000      	b.n	80115c6 <DFR_CDC_Control_FS+0xe2>
    break;
 80115c4:	bf00      	nop
  }

  return (USBD_OK);
 80115c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	200005c5 	.word	0x200005c5

080115d4 <DFR_CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  DFR_USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  DFR_USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);
	flag2=1;
 80115de:	4b0d      	ldr	r3, [pc, #52]	; (8011614 <DFR_CDC_Receive_FS+0x40>)
 80115e0:	2201      	movs	r2, #1
 80115e2:	701a      	strb	r2, [r3, #0]
	memcpy(my_RxBuf,Buf,*Len);
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	461a      	mov	r2, r3
 80115ea:	6879      	ldr	r1, [r7, #4]
 80115ec:	480a      	ldr	r0, [pc, #40]	; (8011618 <DFR_CDC_Receive_FS+0x44>)
 80115ee:	f00c fba7 	bl	801dd40 <memcpy>
      my_RxLength=*Len;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	4a09      	ldr	r2, [pc, #36]	; (801161c <DFR_CDC_Receive_FS+0x48>)
 80115f8:	6013      	str	r3, [r2, #0]
      DFR_USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80115fa:	6879      	ldr	r1, [r7, #4]
 80115fc:	4808      	ldr	r0, [pc, #32]	; (8011620 <DFR_CDC_Receive_FS+0x4c>)
 80115fe:	f7ff fed4 	bl	80113aa <DFR_USBD_CDC_SetRxBuffer>
      DFR_USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011602:	4807      	ldr	r0, [pc, #28]	; (8011620 <DFR_CDC_Receive_FS+0x4c>)
 8011604:	f7ff ff13 	bl	801142e <DFR_USBD_CDC_ReceivePacket>
	return 1;
 8011608:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 801160a:	4618      	mov	r0, r3
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	20000d60 	.word	0x20000d60
 8011618:	20001150 	.word	0x20001150
 801161c:	2000114c 	.word	0x2000114c
 8011620:	20001514 	.word	0x20001514

08011624 <DFR_CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t DFR_CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	460b      	mov	r3, r1
 801162e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011630:	2300      	movs	r3, #0
 8011632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  DFR_USBD_CDC_HandleTypeDef *hcdc = (DFR_USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011634:	4b0d      	ldr	r3, [pc, #52]	; (801166c <DFR_CDC_Transmit_FS+0x48>)
 8011636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <DFR_CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011646:	2301      	movs	r3, #1
 8011648:	e00b      	b.n	8011662 <DFR_CDC_Transmit_FS+0x3e>
  }
  DFR_USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801164a:	887b      	ldrh	r3, [r7, #2]
 801164c:	461a      	mov	r2, r3
 801164e:	6879      	ldr	r1, [r7, #4]
 8011650:	4806      	ldr	r0, [pc, #24]	; (801166c <DFR_CDC_Transmit_FS+0x48>)
 8011652:	f7ff fe91 	bl	8011378 <DFR_USBD_CDC_SetTxBuffer>
  result = DFR_USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011656:	4805      	ldr	r0, [pc, #20]	; (801166c <DFR_CDC_Transmit_FS+0x48>)
 8011658:	f7ff feba 	bl	80113d0 <DFR_USBD_CDC_TransmitPacket>
 801165c:	4603      	mov	r3, r0
 801165e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011660:	7bfb      	ldrb	r3, [r7, #15]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	20001514 	.word	0x20001514

08011670 <DFR_USBD_Composite_Init>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  DFR_USBD_Composite_Init (USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	70fb      	strb	r3, [r7, #3]
  uint8_t res = 0;
 801167c:	2300      	movs	r3, #0
 801167e:	73fb      	strb	r3, [r7, #15]

  pdev->pUserData =  &DFR_USBD_KEYBOARD_fops_FS;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4a16      	ldr	r2, [pc, #88]	; (80116dc <DFR_USBD_Composite_Init+0x6c>)
 8011684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  res +=  DFR_USBD_KEYBOARD_HID.Init(pdev,cfgidx);
 8011688:	4b15      	ldr	r3, [pc, #84]	; (80116e0 <DFR_USBD_Composite_Init+0x70>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	78fa      	ldrb	r2, [r7, #3]
 801168e:	4611      	mov	r1, r2
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	4798      	blx	r3
 8011694:	4603      	mov	r3, r0
 8011696:	461a      	mov	r2, r3
 8011698:	7bfb      	ldrb	r3, [r7, #15]
 801169a:	4413      	add	r3, r2
 801169c:	73fb      	strb	r3, [r7, #15]
  pHIDData = pdev->pClassData;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a4:	4a0f      	ldr	r2, [pc, #60]	; (80116e4 <DFR_USBD_Composite_Init+0x74>)
 80116a6:	6013      	str	r3, [r2, #0]
  pdev->pUserData = &DFR_USBD_CDC_fops_FS;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4a0f      	ldr	r2, [pc, #60]	; (80116e8 <DFR_USBD_Composite_Init+0x78>)
 80116ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  res +=  DFR_USBD_CDC.Init(pdev,cfgidx);
 80116b0:	4b0e      	ldr	r3, [pc, #56]	; (80116ec <DFR_USBD_Composite_Init+0x7c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	78fa      	ldrb	r2, [r7, #3]
 80116b6:	4611      	mov	r1, r2
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	4798      	blx	r3
 80116bc:	4603      	mov	r3, r0
 80116be:	461a      	mov	r2, r3
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
 80116c2:	4413      	add	r3, r2
 80116c4:	73fb      	strb	r3, [r7, #15]
  pCDCData = pdev->pClassData;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116cc:	4a08      	ldr	r2, [pc, #32]	; (80116f0 <DFR_USBD_Composite_Init+0x80>)
 80116ce:	6013      	str	r3, [r2, #0]
  return res;
 80116d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	200002f0 	.word	0x200002f0
 80116e0:	200001dc 	.word	0x200001dc
 80116e4:	200005c8 	.word	0x200005c8
 80116e8:	20000114 	.word	0x20000114
 80116ec:	20000010 	.word	0x20000010
 80116f0:	200005cc 	.word	0x200005cc

080116f4 <DFR_USBD_Composite_DeInit>:
* @param  cfgidx: configuration index
* @retval status
*/
static uint8_t  DFR_USBD_Composite_DeInit (USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	460b      	mov	r3, r1
 80116fe:	70fb      	strb	r3, [r7, #3]
  uint8_t res = 0;
 8011700:	2300      	movs	r3, #0
 8011702:	73fb      	strb	r3, [r7, #15]
  pdev->pClassData = pHIDData;
 8011704:	4b16      	ldr	r3, [pc, #88]	; (8011760 <DFR_USBD_Composite_DeInit+0x6c>)
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = &DFR_USBD_KEYBOARD_fops_FS;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4a14      	ldr	r2, [pc, #80]	; (8011764 <DFR_USBD_Composite_DeInit+0x70>)
 8011712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  res +=  DFR_USBD_KEYBOARD_HID.DeInit(pdev,cfgidx);
 8011716:	4b14      	ldr	r3, [pc, #80]	; (8011768 <DFR_USBD_Composite_DeInit+0x74>)
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	78fa      	ldrb	r2, [r7, #3]
 801171c:	4611      	mov	r1, r2
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	4798      	blx	r3
 8011722:	4603      	mov	r3, r0
 8011724:	461a      	mov	r2, r3
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	4413      	add	r3, r2
 801172a:	73fb      	strb	r3, [r7, #15]

  pdev->pClassData = pCDCData;
 801172c:	4b0f      	ldr	r3, [pc, #60]	; (801176c <DFR_USBD_Composite_DeInit+0x78>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = &DFR_USBD_CDC_fops_FS;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a0d      	ldr	r2, [pc, #52]	; (8011770 <DFR_USBD_Composite_DeInit+0x7c>)
 801173a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  res +=  DFR_USBD_CDC.DeInit(pdev,cfgidx);
 801173e:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <DFR_USBD_Composite_DeInit+0x80>)
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	78fa      	ldrb	r2, [r7, #3]
 8011744:	4611      	mov	r1, r2
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	4798      	blx	r3
 801174a:	4603      	mov	r3, r0
 801174c:	461a      	mov	r2, r3
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	4413      	add	r3, r2
 8011752:	73fb      	strb	r3, [r7, #15]

  return res;
 8011754:	7bfb      	ldrb	r3, [r7, #15]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3710      	adds	r7, #16
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	200005c8 	.word	0x200005c8
 8011764:	200002f0 	.word	0x200002f0
 8011768:	200001dc 	.word	0x200001dc
 801176c:	200005cc 	.word	0x200005cc
 8011770:	20000114 	.word	0x20000114
 8011774:	20000010 	.word	0x20000010

08011778 <DFR_USBD_Composite_EP0_RxReady>:


static uint8_t  DFR_USBD_Composite_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  DFR_USBD_KEYBOARD_HID.EP0_RxReady(pdev);
 8011780:	4b06      	ldr	r3, [pc, #24]	; (801179c <DFR_USBD_Composite_EP0_RxReady+0x24>)
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	4798      	blx	r3
  return DFR_USBD_CDC.EP0_RxReady(pdev);
 8011788:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <DFR_USBD_Composite_EP0_RxReady+0x28>)
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	4798      	blx	r3
 8011790:	4603      	mov	r3, r0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	200001dc 	.word	0x200001dc
 80117a0:	20000010 	.word	0x20000010

080117a4 <DFR_USBD_Composite_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
static uint8_t  DFR_USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  switch (req->bmRequest & USB_REQ_RECIPIENT_MASK)
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	f003 0303 	and.w	r3, r3, #3
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d002      	beq.n	80117c0 <DFR_USBD_Composite_Setup+0x1c>
 80117ba:	2b02      	cmp	r3, #2
 80117bc:	d028      	beq.n	8011810 <DFR_USBD_Composite_Setup+0x6c>
 80117be:	e056      	b.n	801186e <DFR_USBD_Composite_Setup+0xca>
  {
  case USB_REQ_RECIPIENT_INTERFACE:
    switch(req->wIndex)
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	889b      	ldrh	r3, [r3, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d003      	beq.n	80117d0 <DFR_USBD_Composite_Setup+0x2c>
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d011      	beq.n	80117f0 <DFR_USBD_Composite_Setup+0x4c>
      pdev->pClassData = pCDCData;
      pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
      return(DFR_USBD_CDC.Setup (pdev, req));

    default:
      break;
 80117cc:	bf00      	nop
    }
    break;
 80117ce:	e04e      	b.n	801186e <DFR_USBD_Composite_Setup+0xca>
      pdev->pClassData = pHIDData;
 80117d0:	4b29      	ldr	r3, [pc, #164]	; (8011878 <DFR_USBD_Composite_Setup+0xd4>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
      pdev->pUserData =  &DFR_USBD_KEYBOARD_fops_FS;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4a27      	ldr	r2, [pc, #156]	; (801187c <DFR_USBD_Composite_Setup+0xd8>)
 80117de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      return(DFR_USBD_KEYBOARD_HID.Setup(pdev, req));
 80117e2:	4b27      	ldr	r3, [pc, #156]	; (8011880 <DFR_USBD_Composite_Setup+0xdc>)
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	4798      	blx	r3
 80117ec:	4603      	mov	r3, r0
 80117ee:	e03f      	b.n	8011870 <DFR_USBD_Composite_Setup+0xcc>
      pdev->pClassData = pCDCData;
 80117f0:	4b24      	ldr	r3, [pc, #144]	; (8011884 <DFR_USBD_Composite_Setup+0xe0>)
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
      pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a22      	ldr	r2, [pc, #136]	; (8011888 <DFR_USBD_Composite_Setup+0xe4>)
 80117fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      return(DFR_USBD_CDC.Setup (pdev, req));
 8011802:	4b22      	ldr	r3, [pc, #136]	; (801188c <DFR_USBD_Composite_Setup+0xe8>)
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	6839      	ldr	r1, [r7, #0]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	4798      	blx	r3
 801180c:	4603      	mov	r3, r0
 801180e:	e02f      	b.n	8011870 <DFR_USBD_Composite_Setup+0xcc>

  case USB_REQ_RECIPIENT_ENDPOINT:
    switch(req->wIndex)
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	889b      	ldrh	r3, [r3, #4]
 8011814:	2b04      	cmp	r3, #4
 8011816:	d019      	beq.n	801184c <DFR_USBD_Composite_Setup+0xa8>
 8011818:	2b04      	cmp	r3, #4
 801181a:	dc02      	bgt.n	8011822 <DFR_USBD_Composite_Setup+0x7e>
 801181c:	2b01      	cmp	r3, #1
 801181e:	d005      	beq.n	801182c <DFR_USBD_Composite_Setup+0x88>
      pdev->pClassData = pCDCData;
      pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
      return(DFR_USBD_CDC.Setup (pdev, req));

    default:
      break;
 8011820:	e024      	b.n	801186c <DFR_USBD_Composite_Setup+0xc8>
    switch(req->wIndex)
 8011822:	2b81      	cmp	r3, #129	; 0x81
 8011824:	d002      	beq.n	801182c <DFR_USBD_Composite_Setup+0x88>
 8011826:	2b84      	cmp	r3, #132	; 0x84
 8011828:	d010      	beq.n	801184c <DFR_USBD_Composite_Setup+0xa8>
      break;
 801182a:	e01f      	b.n	801186c <DFR_USBD_Composite_Setup+0xc8>
      pdev->pClassData = pHIDData;
 801182c:	4b12      	ldr	r3, [pc, #72]	; (8011878 <DFR_USBD_Composite_Setup+0xd4>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
      pdev->pUserData =  &DFR_USBD_KEYBOARD_fops_FS;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a10      	ldr	r2, [pc, #64]	; (801187c <DFR_USBD_Composite_Setup+0xd8>)
 801183a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      return(DFR_USBD_KEYBOARD_HID.Setup(pdev, req));
 801183e:	4b10      	ldr	r3, [pc, #64]	; (8011880 <DFR_USBD_Composite_Setup+0xdc>)
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	6839      	ldr	r1, [r7, #0]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	4798      	blx	r3
 8011848:	4603      	mov	r3, r0
 801184a:	e011      	b.n	8011870 <DFR_USBD_Composite_Setup+0xcc>
      pdev->pClassData = pCDCData;
 801184c:	4b0d      	ldr	r3, [pc, #52]	; (8011884 <DFR_USBD_Composite_Setup+0xe0>)
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
      pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4a0b      	ldr	r2, [pc, #44]	; (8011888 <DFR_USBD_Composite_Setup+0xe4>)
 801185a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      return(DFR_USBD_CDC.Setup (pdev, req));
 801185e:	4b0b      	ldr	r3, [pc, #44]	; (801188c <DFR_USBD_Composite_Setup+0xe8>)
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	6839      	ldr	r1, [r7, #0]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	4798      	blx	r3
 8011868:	4603      	mov	r3, r0
 801186a:	e001      	b.n	8011870 <DFR_USBD_Composite_Setup+0xcc>
    }
    break;
 801186c:	bf00      	nop
  }
  return USBD_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	200005c8 	.word	0x200005c8
 801187c:	200002f0 	.word	0x200002f0
 8011880:	200001dc 	.word	0x200001dc
 8011884:	200005cc 	.word	0x200005cc
 8011888:	20000114 	.word	0x20000114
 801188c:	20000010 	.word	0x20000010

08011890 <DFR_USBD_Composite_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  DFR_USBD_Composite_DataIn (USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	460b      	mov	r3, r1
 801189a:	70fb      	strb	r3, [r7, #3]
  switch(epnum | 0x80)
 801189c:	78fb      	ldrb	r3, [r7, #3]
 801189e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	2b81      	cmp	r3, #129	; 0x81
 80118a6:	d004      	beq.n	80118b2 <DFR_USBD_Composite_DataIn+0x22>
 80118a8:	2b84      	cmp	r3, #132	; 0x84
 80118aa:	d013      	beq.n	80118d4 <DFR_USBD_Composite_DataIn+0x44>
    pdev->pClassData = pCDCData;
    pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
    return(DFR_USBD_CDC.DataIn(pdev,epnum));

  default:
    break;
 80118ac:	bf00      	nop

  }
  return USBD_FAIL;
 80118ae:	2302      	movs	r3, #2
 80118b0:	e020      	b.n	80118f4 <DFR_USBD_Composite_DataIn+0x64>
    pdev->pClassData = pHIDData;
 80118b2:	4b12      	ldr	r3, [pc, #72]	; (80118fc <DFR_USBD_Composite_DataIn+0x6c>)
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData =  &DFR_USBD_KEYBOARD_fops_FS;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a10      	ldr	r2, [pc, #64]	; (8011900 <DFR_USBD_Composite_DataIn+0x70>)
 80118c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return(DFR_USBD_KEYBOARD_HID.DataIn(pdev,epnum));
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <DFR_USBD_Composite_DataIn+0x74>)
 80118c6:	695b      	ldr	r3, [r3, #20]
 80118c8:	78fa      	ldrb	r2, [r7, #3]
 80118ca:	4611      	mov	r1, r2
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	4798      	blx	r3
 80118d0:	4603      	mov	r3, r0
 80118d2:	e00f      	b.n	80118f4 <DFR_USBD_Composite_DataIn+0x64>
    pdev->pClassData = pCDCData;
 80118d4:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <DFR_USBD_Composite_DataIn+0x78>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4a0a      	ldr	r2, [pc, #40]	; (801190c <DFR_USBD_Composite_DataIn+0x7c>)
 80118e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return(DFR_USBD_CDC.DataIn(pdev,epnum));
 80118e6:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <DFR_USBD_Composite_DataIn+0x80>)
 80118e8:	695b      	ldr	r3, [r3, #20]
 80118ea:	78fa      	ldrb	r2, [r7, #3]
 80118ec:	4611      	mov	r1, r2
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	4798      	blx	r3
 80118f2:	4603      	mov	r3, r0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	200005c8 	.word	0x200005c8
 8011900:	200002f0 	.word	0x200002f0
 8011904:	200001dc 	.word	0x200001dc
 8011908:	200005cc 	.word	0x200005cc
 801190c:	20000114 	.word	0x20000114
 8011910:	20000010 	.word	0x20000010

08011914 <DFR_USBD_Composite_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  DFR_USBD_Composite_DataOut (USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
  switch(epnum)
 8011920:	78fb      	ldrb	r3, [r7, #3]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d004      	beq.n	8011930 <DFR_USBD_Composite_DataOut+0x1c>
 8011926:	2b04      	cmp	r3, #4
 8011928:	d013      	beq.n	8011952 <DFR_USBD_Composite_DataOut+0x3e>
    pdev->pClassData = pCDCData;
    pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
    return(DFR_USBD_CDC.DataOut(pdev,epnum));

  default:
    break;
 801192a:	bf00      	nop

  }
  return USBD_FAIL;
 801192c:	2302      	movs	r3, #2
 801192e:	e020      	b.n	8011972 <DFR_USBD_Composite_DataOut+0x5e>
    pdev->pClassData = pHIDData;
 8011930:	4b12      	ldr	r3, [pc, #72]	; (801197c <DFR_USBD_Composite_DataOut+0x68>)
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData =  &DFR_USBD_KEYBOARD_fops_FS;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4a10      	ldr	r2, [pc, #64]	; (8011980 <DFR_USBD_Composite_DataOut+0x6c>)
 801193e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return(DFR_USBD_KEYBOARD_HID.DataOut(pdev,epnum));
 8011942:	4b10      	ldr	r3, [pc, #64]	; (8011984 <DFR_USBD_Composite_DataOut+0x70>)
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	78fa      	ldrb	r2, [r7, #3]
 8011948:	4611      	mov	r1, r2
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	4798      	blx	r3
 801194e:	4603      	mov	r3, r0
 8011950:	e00f      	b.n	8011972 <DFR_USBD_Composite_DataOut+0x5e>
    pdev->pClassData = pCDCData;
 8011952:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <DFR_USBD_Composite_DataOut+0x74>)
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData =  &DFR_USBD_CDC_fops_FS;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4a0b      	ldr	r2, [pc, #44]	; (801198c <DFR_USBD_Composite_DataOut+0x78>)
 8011960:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return(DFR_USBD_CDC.DataOut(pdev,epnum));
 8011964:	4b0a      	ldr	r3, [pc, #40]	; (8011990 <DFR_USBD_Composite_DataOut+0x7c>)
 8011966:	699b      	ldr	r3, [r3, #24]
 8011968:	78fa      	ldrb	r2, [r7, #3]
 801196a:	4611      	mov	r1, r2
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	4798      	blx	r3
 8011970:	4603      	mov	r3, r0
}
 8011972:	4618      	mov	r0, r3
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200005c8 	.word	0x200005c8
 8011980:	200002f0 	.word	0x200002f0
 8011984:	200001dc 	.word	0x200001dc
 8011988:	200005cc 	.word	0x200005cc
 801198c:	20000114 	.word	0x20000114
 8011990:	20000010 	.word	0x20000010

08011994 <DFR_USBD_Composite_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *DFR_USBD_Composite_GetFSCfgDesc (uint16_t *length)
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  *length = sizeof (DFR_USBD_Composite_CfgFSDesc);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2273      	movs	r2, #115	; 0x73
 80119a0:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_Composite_CfgFSDesc;
 80119a2:	4b03      	ldr	r3, [pc, #12]	; (80119b0 <DFR_USBD_Composite_GetFSCfgDesc+0x1c>)
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bc80      	pop	{r7}
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	2000015c 	.word	0x2000015c

080119b4 <DFR_USBD_Composite_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *DFR_USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (DFR_USBD_Composite_DeviceQualifierDesc);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	220a      	movs	r2, #10
 80119c0:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_Composite_DeviceQualifierDesc;
 80119c2:	4b03      	ldr	r3, [pc, #12]	; (80119d0 <DFR_USBD_Composite_GetDeviceQualifierDescriptor+0x1c>)
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bc80      	pop	{r7}
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	200001d0 	.word	0x200001d0

080119d4 <DFR_USBD_KEYBOARD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  DFR_USBD_KEYBOARD_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	460b      	mov	r3, r1
 80119de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80119e0:	2300      	movs	r3, #0
 80119e2:	73fb      	strb	r3, [r7, #15]
  DFR_USBD_KEYBOARD_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, DFR_KEYBOARD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80119e4:	2302      	movs	r3, #2
 80119e6:	2203      	movs	r2, #3
 80119e8:	2181      	movs	r1, #129	; 0x81
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f00c f803 	bl	801d9f6 <USBD_LL_OpenEP>
                 DFR_KEYBOARD_HID_EPIN_SIZE);

  pdev->ep_in[DFR_KEYBOARD_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2201      	movs	r2, #1
 80119f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, DFR_KEYBOARD_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80119f6:	2302      	movs	r3, #2
 80119f8:	2203      	movs	r2, #3
 80119fa:	2101      	movs	r1, #1
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f00b fffa 	bl	801d9f6 <USBD_LL_OpenEP>
                 DFR_KEYBOARD_HID_EPOUT_SIZE);

  pdev->ep_out[DFR_KEYBOARD_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2201      	movs	r2, #1
 8011a06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(DFR_USBD_KEYBOARD_HID_HandleTypeDef));
 8011a0a:	2018      	movs	r0, #24
 8011a0c:	f00c f91a 	bl	801dc44 <USBD_static_malloc>
 8011a10:	4602      	mov	r2, r0
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <DFR_USBD_KEYBOARD_HID_Init+0x54>
  {
    ret = 1U;
 8011a22:	2301      	movs	r3, #1
 8011a24:	73fb      	strb	r3, [r7, #15]
 8011a26:	e011      	b.n	8011a4c <DFR_USBD_KEYBOARD_HID_Init+0x78>
  }
  else
  {
    hhid = (DFR_USBD_KEYBOARD_HID_HandleTypeDef *) pdev->pClassData;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a2e:	60bb      	str	r3, [r7, #8]

    hhid->state = DFR_KEYBOARD_HID_IDLE;
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	2200      	movs	r2, #0
 8011a34:	751a      	strb	r2, [r3, #20]
    ((DFR_USBD_KEYBOARD_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, DFR_KEYBOARD_HID_EPOUT_ADDR, hhid->Report_buf,
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	2302      	movs	r3, #2
 8011a44:	2101      	movs	r1, #1
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f00c f8c6 	bl	801dbd8 <USBD_LL_PrepareReceive>
                           DFR_USBD_KEYBOARDHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8011a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <DFR_USBD_KEYBOARD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  DFR_USBD_KEYBOARD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b082      	sub	sp, #8
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	460b      	mov	r3, r1
 8011a60:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, DFR_KEYBOARD_HID_EPIN_ADDR);
 8011a62:	2181      	movs	r1, #129	; 0x81
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f00b ffec 	bl	801da42 <USBD_LL_CloseEP>
  pdev->ep_in[DFR_KEYBOARD_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, DFR_KEYBOARD_HID_EPOUT_ADDR);
 8011a70:	2101      	movs	r1, #1
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f00b ffe5 	bl	801da42 <USBD_LL_CloseEP>
  pdev->ep_out[DFR_KEYBOARD_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d00e      	beq.n	8011aa8 <DFR_USBD_KEYBOARD_HID_DeInit+0x52>
  {
    ((DFR_USBD_KEYBOARD_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a90:	689b      	ldr	r3, [r3, #8]
 8011a92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f00c f8de 	bl	801dc5c <USBD_static_free>
    pdev->pClassData = NULL;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3708      	adds	r7, #8
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
	...

08011ab4 <DFR_USBD_KEYBOARD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  DFR_USBD_KEYBOARD_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b088      	sub	sp, #32
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  DFR_USBD_KEYBOARD_HID_HandleTypeDef *hhid = (DFR_USBD_KEYBOARD_HID_HandleTypeDef *)pdev->pClassData;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ac4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d051      	beq.n	8011b86 <DFR_USBD_KEYBOARD_HID_Setup+0xd2>
 8011ae2:	2b20      	cmp	r3, #32
 8011ae4:	f040 80d8 	bne.w	8011c98 <DFR_USBD_KEYBOARD_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	785b      	ldrb	r3, [r3, #1]
 8011aec:	3b02      	subs	r3, #2
 8011aee:	2b09      	cmp	r3, #9
 8011af0:	d841      	bhi.n	8011b76 <DFR_USBD_KEYBOARD_HID_Setup+0xc2>
 8011af2:	a201      	add	r2, pc, #4	; (adr r2, 8011af8 <DFR_USBD_KEYBOARD_HID_Setup+0x44>)
 8011af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af8:	08011b51 	.word	0x08011b51
 8011afc:	08011b2f 	.word	0x08011b2f
 8011b00:	08011b77 	.word	0x08011b77
 8011b04:	08011b77 	.word	0x08011b77
 8011b08:	08011b77 	.word	0x08011b77
 8011b0c:	08011b77 	.word	0x08011b77
 8011b10:	08011b77 	.word	0x08011b77
 8011b14:	08011b61 	.word	0x08011b61
 8011b18:	08011b3f 	.word	0x08011b3f
 8011b1c:	08011b21 	.word	0x08011b21
      {
        case DFR_KEYBOARD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	885b      	ldrh	r3, [r3, #2]
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	461a      	mov	r2, r3
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	605a      	str	r2, [r3, #4]
          break;
 8011b2c:	e02a      	b.n	8011b84 <DFR_USBD_KEYBOARD_HID_Setup+0xd0>

        case DFR_KEYBOARD_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	3304      	adds	r3, #4
 8011b32:	2201      	movs	r2, #1
 8011b34:	4619      	mov	r1, r3
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f00b fc5c 	bl	801d3f4 <USBD_CtlSendData>
          break;
 8011b3c:	e022      	b.n	8011b84 <DFR_USBD_KEYBOARD_HID_Setup+0xd0>

        case DFR_KEYBOARD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	885b      	ldrh	r3, [r3, #2]
 8011b42:	0a1b      	lsrs	r3, r3, #8
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	461a      	mov	r2, r3
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	609a      	str	r2, [r3, #8]
          break;
 8011b4e:	e019      	b.n	8011b84 <DFR_USBD_KEYBOARD_HID_Setup+0xd0>

        case DFR_KEYBOARD_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	3308      	adds	r3, #8
 8011b54:	2201      	movs	r2, #1
 8011b56:	4619      	mov	r1, r3
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f00b fc4b 	bl	801d3f4 <USBD_CtlSendData>
          break;
 8011b5e:	e011      	b.n	8011b84 <DFR_USBD_KEYBOARD_HID_Setup+0xd0>

        case DFR_KEYBOARD_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	2201      	movs	r2, #1
 8011b64:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8011b66:	6939      	ldr	r1, [r7, #16]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	88db      	ldrh	r3, [r3, #6]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f00b fc6e 	bl	801d450 <USBD_CtlPrepareRx>
          break;
 8011b74:	e006      	b.n	8011b84 <DFR_USBD_KEYBOARD_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f00b fbd1 	bl	801d320 <USBD_CtlError>
          ret = USBD_FAIL;
 8011b7e:	2302      	movs	r3, #2
 8011b80:	75fb      	strb	r3, [r7, #23]
          break;
 8011b82:	bf00      	nop
      }
      break;
 8011b84:	e08f      	b.n	8011ca6 <DFR_USBD_KEYBOARD_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	785b      	ldrb	r3, [r3, #1]
 8011b8a:	2b0b      	cmp	r3, #11
 8011b8c:	d87c      	bhi.n	8011c88 <DFR_USBD_KEYBOARD_HID_Setup+0x1d4>
 8011b8e:	a201      	add	r2, pc, #4	; (adr r2, 8011b94 <DFR_USBD_KEYBOARD_HID_Setup+0xe0>)
 8011b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b94:	08011bc5 	.word	0x08011bc5
 8011b98:	08011c89 	.word	0x08011c89
 8011b9c:	08011c89 	.word	0x08011c89
 8011ba0:	08011c89 	.word	0x08011c89
 8011ba4:	08011c89 	.word	0x08011c89
 8011ba8:	08011c89 	.word	0x08011c89
 8011bac:	08011bed 	.word	0x08011bed
 8011bb0:	08011c89 	.word	0x08011c89
 8011bb4:	08011c89 	.word	0x08011c89
 8011bb8:	08011c89 	.word	0x08011c89
 8011bbc:	08011c3b 	.word	0x08011c3b
 8011bc0:	08011c63 	.word	0x08011c63
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	d107      	bne.n	8011bde <DFR_USBD_KEYBOARD_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011bce:	f107 030e 	add.w	r3, r7, #14
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f00b fc0c 	bl	801d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bdc:	e05b      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8011bde:	6839      	ldr	r1, [r7, #0]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f00b fb9d 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 8011be6:	2302      	movs	r3, #2
 8011be8:	75fb      	strb	r3, [r7, #23]
          break;
 8011bea:	e054      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == DFR_KEYBOARD_HID_REPORT_DESC)
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	885b      	ldrh	r3, [r3, #2]
 8011bf0:	0a1b      	lsrs	r3, r3, #8
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	2b22      	cmp	r3, #34	; 0x22
 8011bf6:	d10b      	bne.n	8011c10 <DFR_USBD_KEYBOARD_HID_Setup+0x15c>
          {
            len = MIN(DFR_USBD_KEYBOARD_HID_REPORT_DESC_SIZE, req->wLength);
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	88db      	ldrh	r3, [r3, #6]
 8011bfc:	2b3f      	cmp	r3, #63	; 0x3f
 8011bfe:	bf28      	it	cs
 8011c00:	233f      	movcs	r3, #63	; 0x3f
 8011c02:	83fb      	strh	r3, [r7, #30]
            pbuf = ((DFR_USBD_KEYBOARD_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	61bb      	str	r3, [r7, #24]
 8011c0e:	e00d      	b.n	8011c2c <DFR_USBD_KEYBOARD_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == DFR_KEYBOARD_HID_DESCRIPTOR_TYPE)
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	885b      	ldrh	r3, [r3, #2]
 8011c14:	0a1b      	lsrs	r3, r3, #8
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	2b21      	cmp	r3, #33	; 0x21
 8011c1a:	d107      	bne.n	8011c2c <DFR_USBD_KEYBOARD_HID_Setup+0x178>
            {
              pbuf = DFR_USBD_KEYBOARD_HID_Desc;
 8011c1c:	4b24      	ldr	r3, [pc, #144]	; (8011cb0 <DFR_USBD_KEYBOARD_HID_Setup+0x1fc>)
 8011c1e:	61bb      	str	r3, [r7, #24]
              len = MIN(DFR_USB_KEYBOARD_HID_DESC_SIZ, req->wLength);
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	88db      	ldrh	r3, [r3, #6]
 8011c24:	2b09      	cmp	r3, #9
 8011c26:	bf28      	it	cs
 8011c28:	2309      	movcs	r3, #9
 8011c2a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8011c2c:	8bfb      	ldrh	r3, [r7, #30]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	69b9      	ldr	r1, [r7, #24]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f00b fbde 	bl	801d3f4 <USBD_CtlSendData>
          break;
 8011c38:	e02d      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d107      	bne.n	8011c54 <DFR_USBD_KEYBOARD_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	330c      	adds	r3, #12
 8011c48:	2201      	movs	r2, #1
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f00b fbd1 	bl	801d3f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c52:	e020      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8011c54:	6839      	ldr	r1, [r7, #0]
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f00b fb62 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c5c:	2302      	movs	r3, #2
 8011c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8011c60:	e019      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d106      	bne.n	8011c7a <DFR_USBD_KEYBOARD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	885b      	ldrh	r3, [r3, #2]
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	461a      	mov	r2, r3
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c78:	e00d      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f00b fb4f 	bl	801d320 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c82:	2302      	movs	r3, #2
 8011c84:	75fb      	strb	r3, [r7, #23]
          break;
 8011c86:	e006      	b.n	8011c96 <DFR_USBD_KEYBOARD_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f00b fb48 	bl	801d320 <USBD_CtlError>
          ret = USBD_FAIL;
 8011c90:	2302      	movs	r3, #2
 8011c92:	75fb      	strb	r3, [r7, #23]
          break;
 8011c94:	bf00      	nop
      }
      break;
 8011c96:	e006      	b.n	8011ca6 <DFR_USBD_KEYBOARD_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f00b fb40 	bl	801d320 <USBD_CtlError>
      ret = USBD_FAIL;
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ca4:	bf00      	nop
  }
  return ret;
 8011ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3720      	adds	r7, #32
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	20000298 	.word	0x20000298

08011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>:
  * @retval status
  */
uint8_t DFR_USBD_KEYBOARD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	80fb      	strh	r3, [r7, #6]
  DFR_USBD_KEYBOARD_HID_HandleTypeDef     *hhid = (DFR_USBD_KEYBOARD_HID_HandleTypeDef *)pdev->pClassData;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cd0:	2b03      	cmp	r3, #3
 8011cd2:	d10f      	bne.n	8011cf4 <DFR_USBD_KEYBOARD_HID_SendReport+0x40>
  {
    if (hhid->state == DFR_KEYBOARD_HID_IDLE)
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	7d1b      	ldrb	r3, [r3, #20]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d109      	bne.n	8011cf0 <DFR_USBD_KEYBOARD_HID_SendReport+0x3c>
    {
      hhid->state = DFR_KEYBOARD_HID_BUSY;
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, DFR_KEYBOARD_HID_EPIN_ADDR, report, len);
 8011ce2:	88fb      	ldrh	r3, [r7, #6]
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	2181      	movs	r1, #129	; 0x81
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f00b ff52 	bl	801db92 <USBD_LL_Transmit>
 8011cee:	e001      	b.n	8011cf4 <DFR_USBD_KEYBOARD_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e000      	b.n	8011cf6 <DFR_USBD_KEYBOARD_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8011cf4:	2300      	movs	r3, #0
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3718      	adds	r7, #24
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
	...

08011d00 <DFR_USBD_KEYBOARD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_KEYBOARD_HID_GetFSCfgDesc(uint16_t *length)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_KEYBOARD_HID_CfgFSDesc);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2229      	movs	r2, #41	; 0x29
 8011d0c:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_KEYBOARD_HID_CfgFSDesc;
 8011d0e:	4b03      	ldr	r3, [pc, #12]	; (8011d1c <DFR_USBD_KEYBOARD_HID_GetFSCfgDesc+0x1c>)
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bc80      	pop	{r7}
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	20000214 	.word	0x20000214

08011d20 <DFR_USBD_KEYBOARD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_KEYBOARD_HID_GetHSCfgDesc(uint16_t *length)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_KEYBOARD_HID_CfgHSDesc);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2229      	movs	r2, #41	; 0x29
 8011d2c:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_KEYBOARD_HID_CfgHSDesc;
 8011d2e:	4b03      	ldr	r3, [pc, #12]	; (8011d3c <DFR_USBD_KEYBOARD_HID_GetHSCfgDesc+0x1c>)
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bc80      	pop	{r7}
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	20000240 	.word	0x20000240

08011d40 <DFR_USBD_KEYBOARD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *DFR_USBD_KEYBOARD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_KEYBOARD_HID_OtherSpeedCfgDesc);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2229      	movs	r2, #41	; 0x29
 8011d4c:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_KEYBOARD_HID_OtherSpeedCfgDesc;
 8011d4e:	4b03      	ldr	r3, [pc, #12]	; (8011d5c <DFR_USBD_KEYBOARD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bc80      	pop	{r7}
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	2000026c 	.word	0x2000026c

08011d60 <DFR_USBD_KEYBOARD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  DFR_USBD_KEYBOARD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((DFR_USBD_KEYBOARD_HID_HandleTypeDef *)pdev->pClassData)->state = DFR_KEYBOARD_HID_IDLE;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d72:	2200      	movs	r2, #0
 8011d74:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8011d76:	2300      	movs	r3, #0
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bc80      	pop	{r7}
 8011d80:	4770      	bx	lr

08011d82 <DFR_USBD_KEYBOARD_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  DFR_USBD_KEYBOARD_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b084      	sub	sp, #16
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	70fb      	strb	r3, [r7, #3]

  DFR_USBD_KEYBOARD_HID_HandleTypeDef     *hhid = (DFR_USBD_KEYBOARD_HID_HandleTypeDef *)pdev->pClassData;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d94:	60fb      	str	r3, [r7, #12]

  ((DFR_USBD_KEYBOARD_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	7810      	ldrb	r0, [r2, #0]
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	7852      	ldrb	r2, [r2, #1]
 8011da6:	4611      	mov	r1, r2
 8011da8:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, DFR_KEYBOARD_HID_EPOUT_ADDR, hhid->Report_buf,
 8011daa:	68fa      	ldr	r2, [r7, #12]
 8011dac:	2302      	movs	r3, #2
 8011dae:	2101      	movs	r1, #1
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f00b ff11 	bl	801dbd8 <USBD_LL_PrepareReceive>
                         DFR_USBD_KEYBOARDHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <DFR_USBD_KEYBOARD_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t DFR_USBD_KEYBOARD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  DFR_USBD_KEYBOARD_HID_HandleTypeDef     *hhid = (DFR_USBD_KEYBOARD_HID_HandleTypeDef *)pdev->pClassData;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dce:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	691b      	ldr	r3, [r3, #16]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d10c      	bne.n	8011df2 <DFR_USBD_KEYBOARD_HID_EP0_RxReady+0x32>
  {
    ((DFR_USBD_KEYBOARD_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	7810      	ldrb	r0, [r2, #0]
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	7852      	ldrb	r2, [r2, #1]
 8011de8:	4611      	mov	r1, r2
 8011dea:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2200      	movs	r2, #0
 8011df0:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <DFR_USBD_KEYBOARD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *DFR_USBD_KEYBOARD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  *length = sizeof(DFR_USBD_KEYBOARD_HID_DeviceQualifierDesc);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	220a      	movs	r2, #10
 8011e08:	801a      	strh	r2, [r3, #0]
  return DFR_USBD_KEYBOARD_HID_DeviceQualifierDesc;
 8011e0a:	4b03      	ldr	r3, [pc, #12]	; (8011e18 <DFR_USBD_KEYBOARD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bc80      	pop	{r7}
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	200002a4 	.word	0x200002a4

08011e1c <DFR_KEYBOARD_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_KEYBOARD_HID_Init_FS(void)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011e20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bc80      	pop	{r7}
 8011e28:	4770      	bx	lr

08011e2a <DFR_KEYBOARD_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_KEYBOARD_HID_DeInit_FS(void)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011e2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bc80      	pop	{r7}
 8011e36:	4770      	bx	lr

08011e38 <DFR_KEYBOARD_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t DFR_KEYBOARD_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	4603      	mov	r3, r0
 8011e40:	460a      	mov	r2, r1
 8011e42:	71fb      	strb	r3, [r7, #7]
 8011e44:	4613      	mov	r3, r2
 8011e46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8011e48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	370c      	adds	r7, #12
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bc80      	pop	{r7}
 8011e52:	4770      	bx	lr

08011e54 <protocolWriteRequest>:
static short content_current = 0;
static short content_end = 0;
static uint8_t content_read_end = 0;
HUSKYLENSResult resultDefault;

PROTOCOL_CREATE(Request, Command, COMMAND_REQUEST)
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	2120      	movs	r1, #32
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fa16 	bl	8012290 <protocolWriteCommand>
 8011e64:	bf00      	nop
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <protocolWriteRequestClearText>:
PROTOCOL_CREATE(RequestLearned, Command, COMMAND_REQUEST_LEARNED)
PROTOCOL_CREATE(RequestBlocksLearned, Command, COMMAND_REQUEST_BLOCKS_LEARNED)
PROTOCOL_CREATE(RequestArrowsLearned, Command, COMMAND_REQUEST_ARROWS_LEARNED)
PROTOCOL_CREATE(RequestKnock, Command, COMMAND_REQUEST_KNOCK)
PROTOCOL_CREATE(ReturnOK, Command, COMMAND_RETURN_OK)
PROTOCOL_CREATE(RequestClearText, Command, COMMAND_REQUEST_CLEAR_TEXT)
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	2135      	movs	r1, #53	; 0x35
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f000 fa0a 	bl	8012290 <protocolWriteCommand>
 8011e7c:	bf00      	nop
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <protocolWriteRequestTakePhotoToSDCard>:
PROTOCOL_CREATE(RequestTakePhotoToSDCard, Command, COMMAND_REQUEST_TAKE_PHOTO_TO_SD_CARD)
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	2130      	movs	r1, #48	; 0x30
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f9fe 	bl	8012290 <protocolWriteCommand>
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <protocolWriteRequestForgetLearn>:
PROTOCOL_CREATE(RequestScreenshotToSDCard, Command, COMMAND_REQUEST_SCREENSHOT_TO_SD_CARD)
PROTOCOL_CREATE(RequestForgetLearn, Command, COMMAND_REQUEST_FORGET)
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	2137      	movs	r1, #55	; 0x37
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 f9f2 	bl	8012290 <protocolWriteCommand>
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <protocolWriteRequestSaveModelToTFCard>:
PROTOCOL_CREATE(RequestSaveModelToTFCard, BufferUint8, COMMAND_REQUEST_SAVE_MODEL_TO_SD_CARD)
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	2132      	movs	r1, #50	; 0x32
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f000 fb62 	bl	8012588 <protocolWriteBufferUint8>
 8011ec4:	bf00      	nop
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <protocolWriteRequestLoadModelFromTFCard>:
PROTOCOL_CREATE(RequestLoadModelFromTFCard, BufferUint8, COMMAND_REQUEST_LOAD_MODEL_FROM_SD_CARD)
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	2133      	movs	r1, #51	; 0x33
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 fb56 	bl	8012588 <protocolWriteBufferUint8>
 8011edc:	bf00      	nop
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <protocolWriteRequestAlgorithm>:

PROTOCOL_CREATE(RequestByID, OneInt16, COMMAND_REQUEST_BY_ID)
PROTOCOL_CREATE(RequestBlocksByID, OneInt16, COMMAND_REQUEST_BLOCKS_BY_ID)
PROTOCOL_CREATE(RequestArrowsByID, OneInt16, COMMAND_REQUEST_ARROWS_BY_ID)
PROTOCOL_CREATE(RequestAlgorithm, OneInt16, COMMAND_REQUEST_ALGORITHM)
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	212d      	movs	r1, #45	; 0x2d
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 fb00 	bl	80124f4 <protocolWriteOneInt16>
 8011ef4:	bf00      	nop
 8011ef6:	3708      	adds	r7, #8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <protocolReadReturnInfo>:

PROTOCOL_CREATE(ReturnInfo, FiveInt16, COMMAND_RETURN_INFO)
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	2129      	movs	r1, #41	; 0x29
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 fa64 	bl	80123d4 <protocolReadFiveInt16>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <protocolReadReturnBlock>:
PROTOCOL_CREATE(ReturnBlock, FiveInt16, COMMAND_RETURN_BLOCK)
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b082      	sub	sp, #8
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	212a      	movs	r1, #42	; 0x2a
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 fa57 	bl	80123d4 <protocolReadFiveInt16>
 8011f26:	4603      	mov	r3, r0
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <protocolReadReturnArrow>:
PROTOCOL_CREATE(ReturnArrow, FiveInt16, COMMAND_RETURN_ARROW)
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	212b      	movs	r1, #43	; 0x2b
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fa4a 	bl	80123d4 <protocolReadFiveInt16>
 8011f40:	4603      	mov	r3, r0
 8011f42:	4618      	mov	r0, r3
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <protocolWriteRequestCustomText>:

PROTOCOL_CREATE(RequestCustomText, BufferUint8, COMMAND_REQUEST_CUSTOM_TEXT)
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b082      	sub	sp, #8
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	2134      	movs	r1, #52	; 0x34
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 fb17 	bl	8012588 <protocolWriteBufferUint8>
 8011f5a:	bf00      	nop
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <protocolWriteRequestName>:
PROTOCOL_CREATE(RequestName, BufferUint8, COMMAND_REQUEST_NAME)
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b082      	sub	sp, #8
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	212f      	movs	r1, #47	; 0x2f
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 fb0b 	bl	8012588 <protocolWriteBufferUint8>
 8011f72:	bf00      	nop
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}

08011f7a <protocolWriteRequestLearnOnece>:
PROTOCOL_CREATE(RequestLearnOnece, BufferUint8, COMMAND_REQUEST_LEARN_ONECE)
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b082      	sub	sp, #8
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	2136      	movs	r1, #54	; 0x36
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 faff 	bl	8012588 <protocolWriteBufferUint8>
 8011f8a:	bf00      	nop
 8011f8c:	3708      	adds	r7, #8
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <writeAlgorithm>:
PROTOCOL_CREATE(RequestFirmwareVersion, BufferUint8, COMMAND_REQUEST_FIRMWARE_VERSION)

uint8_t writeAlgorithm(enum protocolAlgorithm algorithmType){
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b086      	sub	sp, #24
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	4603      	mov	r3, r0
 8011f9a:	71fb      	strb	r3, [r7, #7]
	Protocol_t protocol;
	protocol.algorithmType = algorithmType ;
 8011f9c:	79fb      	ldrb	r3, [r7, #7]
 8011f9e:	b21b      	sxth	r3, r3
 8011fa0:	817b      	strh	r3, [r7, #10]
	protocolWriteRequestAlgorithm(&protocol);//protocolWriteOneInt16
 8011fa2:	f107 0308 	add.w	r3, r7, #8
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7ff ff9c 	bl	8011ee4 <protocolWriteRequestAlgorithm>
	//return wait(COMMAND_RETURN_OK);
	return 1;
 8011fac:	2301      	movs	r3, #1
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3718      	adds	r7, #24
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}

08011fb6 <request>:

uint8_t request(){
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b084      	sub	sp, #16
 8011fba:	af00      	add	r7, sp, #0
	Protocol_t protocol;
    protocolWriteRequest(&protocol);
 8011fbc:	463b      	mov	r3, r7
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7ff ff48 	bl	8011e54 <protocolWriteRequest>
	HAL_Delay(100);
 8011fc4:	2064      	movs	r0, #100	; 0x64
 8011fc6:	f003 f8a3 	bl	8015110 <HAL_Delay>
    return processReturn();
 8011fca:	f000 f805 	bl	8011fd8 <processReturn>
 8011fce:	4603      	mov	r3, r0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3710      	adds	r7, #16
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <processReturn>:

uint8_t processReturn(){
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
    if (!wait(COMMAND_RETURN_INFO))
 8011fde:	2029      	movs	r0, #41	; 0x29
 8011fe0:	f000 f852 	bl	8012088 <wait>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d101      	bne.n	8011fee <processReturn+0x16>
        return 0;
 8011fea:	2300      	movs	r3, #0
 8011fec:	e044      	b.n	8012078 <processReturn+0xa0>
    protocolReadReturnInfo(&protocolInfo);
 8011fee:	4824      	ldr	r0, [pc, #144]	; (8012080 <processReturn+0xa8>)
 8011ff0:	f7ff ff84 	bl	8011efc <protocolReadReturnInfo>
    protocolPtr = (Protocol_t *)realloc(protocolPtr, max(protocolInfo.protocolSize, 1) * sizeof(Protocol_t));
 8011ff4:	4b23      	ldr	r3, [pc, #140]	; (8012084 <processReturn+0xac>)
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	4b21      	ldr	r3, [pc, #132]	; (8012080 <processReturn+0xa8>)
 8011ffa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	bfb8      	it	lt
 8012002:	2301      	movlt	r3, #1
 8012004:	b21b      	sxth	r3, r3
 8012006:	011b      	lsls	r3, r3, #4
 8012008:	4619      	mov	r1, r3
 801200a:	4610      	mov	r0, r2
 801200c:	f00c fbba 	bl	801e784 <realloc>
 8012010:	4602      	mov	r2, r0
 8012012:	4b1c      	ldr	r3, [pc, #112]	; (8012084 <processReturn+0xac>)
 8012014:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 8012016:	2300      	movs	r3, #0
 8012018:	607b      	str	r3, [r7, #4]
 801201a:	e025      	b.n	8012068 <processReturn+0x90>
        if (!wait(0))
 801201c:	2000      	movs	r0, #0
 801201e:	f000 f833 	bl	8012088 <wait>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <processReturn+0x54>
            return 0;
 8012028:	2300      	movs	r3, #0
 801202a:	e025      	b.n	8012078 <processReturn+0xa0>
        if (protocolReadReturnBlock(&protocolPtr[i]))
 801202c:	4b15      	ldr	r3, [pc, #84]	; (8012084 <processReturn+0xac>)
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	4413      	add	r3, r2
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff ff6d 	bl	8011f16 <protocolReadReturnBlock>
 801203c:	4603      	mov	r3, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10c      	bne.n	801205c <processReturn+0x84>
            continue;
        else if (protocolReadReturnArrow(&protocolPtr[i]))
 8012042:	4b10      	ldr	r3, [pc, #64]	; (8012084 <processReturn+0xac>)
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	011b      	lsls	r3, r3, #4
 801204a:	4413      	add	r3, r2
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff ff6f 	bl	8011f30 <protocolReadReturnArrow>
 8012052:	4603      	mov	r3, r0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d103      	bne.n	8012060 <processReturn+0x88>
            continue;
        else
            return 0;
 8012058:	2300      	movs	r3, #0
 801205a:	e00d      	b.n	8012078 <processReturn+0xa0>
            continue;
 801205c:	bf00      	nop
 801205e:	e000      	b.n	8012062 <processReturn+0x8a>
            continue;
 8012060:	bf00      	nop
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	3301      	adds	r3, #1
 8012066:	607b      	str	r3, [r7, #4]
 8012068:	4b05      	ldr	r3, [pc, #20]	; (8012080 <processReturn+0xa8>)
 801206a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801206e:	461a      	mov	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4293      	cmp	r3, r2
 8012074:	dbd2      	blt.n	801201c <processReturn+0x44>
    }
    return 1;
 8012076:	2301      	movs	r3, #1
}
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	200011b4 	.word	0x200011b4
 8012084:	200005d0 	.word	0x200005d0

08012088 <wait>:

uint8_t wait(uint8_t command){
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	4603      	mov	r3, r0
 8012090:	71fb      	strb	r3, [r7, #7]
	//return 1;
    while (1){
        if (protocolAvailable()){
 8012092:	f000 f839 	bl	8012108 <protocolAvailable>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d0fa      	beq.n	8012092 <wait+0xa>
            if (command){
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d008      	beq.n	80120b4 <wait+0x2c>
                if (husky_lens_protocol_read_begin(command))
 80120a2:	79fb      	ldrb	r3, [r7, #7]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f000 f80b 	bl	80120c0 <husky_lens_protocol_read_begin>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d0f0      	beq.n	8012092 <wait+0xa>
                    return 1;
 80120b0:	2301      	movs	r3, #1
 80120b2:	e000      	b.n	80120b6 <wait+0x2e>
            }else{
                return 1;
 80120b4:	2301      	movs	r3, #1
            }
        }
    }
    return 0;
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <husky_lens_protocol_read_begin>:

uint8_t husky_lens_protocol_read_begin(uint8_t command){
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	4603      	mov	r3, r0
 80120c8:	71fb      	strb	r3, [r7, #7]
    if (command == receive_buffer[COMMAND_INDEX]){
 80120ca:	4b0b      	ldr	r3, [pc, #44]	; (80120f8 <husky_lens_protocol_read_begin+0x38>)
 80120cc:	791b      	ldrb	r3, [r3, #4]
 80120ce:	79fa      	ldrb	r2, [r7, #7]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d10a      	bne.n	80120ea <husky_lens_protocol_read_begin+0x2a>
        content_current = CONTENT_INDEX;
 80120d4:	4b09      	ldr	r3, [pc, #36]	; (80120fc <husky_lens_protocol_read_begin+0x3c>)
 80120d6:	2205      	movs	r2, #5
 80120d8:	801a      	strh	r2, [r3, #0]
        content_read_end = 0;
 80120da:	4b09      	ldr	r3, [pc, #36]	; (8012100 <husky_lens_protocol_read_begin+0x40>)
 80120dc:	2200      	movs	r2, #0
 80120de:	701a      	strb	r2, [r3, #0]
        receive_fail = 0;
 80120e0:	4b08      	ldr	r3, [pc, #32]	; (8012104 <husky_lens_protocol_read_begin+0x44>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	701a      	strb	r2, [r3, #0]
        return 1;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <husky_lens_protocol_read_begin+0x2c>
    }
    return 0;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bc80      	pop	{r7}
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop
 80120f8:	20000654 	.word	0x20000654
 80120fc:	200006da 	.word	0x200006da
 8012100:	200006de 	.word	0x200006de
 8012104:	200006d9 	.word	0x200006d9

08012108 <protocolAvailable>:

uint8_t protocolAvailable(){
 8012108:	b580      	push	{r7, lr}
 801210a:	b088      	sub	sp, #32
 801210c:	af02      	add	r7, sp, #8
	uint8_t buf[16];
	int i;
	uint8_t result;
	HAL_I2C_Master_Receive(&hi2c2,0x32<<1,buf,16,1000);
 801210e:	463a      	mov	r2, r7
 8012110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	2310      	movs	r3, #16
 8012118:	2164      	movs	r1, #100	; 0x64
 801211a:	480f      	ldr	r0, [pc, #60]	; (8012158 <protocolAvailable+0x50>)
 801211c:	f004 fc14 	bl	8016948 <HAL_I2C_Master_Receive>
	for(i=0;i<16;i++){
 8012120:	2300      	movs	r3, #0
 8012122:	617b      	str	r3, [r7, #20]
 8012124:	e010      	b.n	8012148 <protocolAvailable+0x40>
		result=buf[i];
 8012126:	463a      	mov	r2, r7
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	4413      	add	r3, r2
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	74fb      	strb	r3, [r7, #19]
		if (husky_lens_protocol_receive(result))
 8012130:	7cfb      	ldrb	r3, [r7, #19]
 8012132:	4618      	mov	r0, r3
 8012134:	f000 f83c 	bl	80121b0 <husky_lens_protocol_receive>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d001      	beq.n	8012142 <protocolAvailable+0x3a>
			return 1;
 801213e:	2301      	movs	r3, #1
 8012140:	e006      	b.n	8012150 <protocolAvailable+0x48>
	for(i=0;i<16;i++){
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	3301      	adds	r3, #1
 8012146:	617b      	str	r3, [r7, #20]
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	2b0f      	cmp	r3, #15
 801214c:	ddeb      	ble.n	8012126 <protocolAvailable+0x1e>
	}
	return 0;
 801214e:	2300      	movs	r3, #0
}
 8012150:	4618      	mov	r0, r3
 8012152:	3718      	adds	r7, #24
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	20000918 	.word	0x20000918

0801215c <validateCheckSum>:

uint8_t validateCheckSum(){
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
    uint8_t stackSumIndex=receive_buffer[CONTENT_SIZE_INDEX] + CONTENT_INDEX;
 8012162:	4b12      	ldr	r3, [pc, #72]	; (80121ac <validateCheckSum+0x50>)
 8012164:	78db      	ldrb	r3, [r3, #3]
 8012166:	3305      	adds	r3, #5
 8012168:	717b      	strb	r3, [r7, #5]
    uint8_t sum = 0;
 801216a:	2300      	movs	r3, #0
 801216c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i=0; i< stackSumIndex; i++){
 801216e:	2300      	movs	r3, #0
 8012170:	71bb      	strb	r3, [r7, #6]
 8012172:	e008      	b.n	8012186 <validateCheckSum+0x2a>
        sum+=receive_buffer[i];
 8012174:	79bb      	ldrb	r3, [r7, #6]
 8012176:	4a0d      	ldr	r2, [pc, #52]	; (80121ac <validateCheckSum+0x50>)
 8012178:	5cd2      	ldrb	r2, [r2, r3]
 801217a:	79fb      	ldrb	r3, [r7, #7]
 801217c:	4413      	add	r3, r2
 801217e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i=0; i< stackSumIndex; i++){
 8012180:	79bb      	ldrb	r3, [r7, #6]
 8012182:	3301      	adds	r3, #1
 8012184:	71bb      	strb	r3, [r7, #6]
 8012186:	79ba      	ldrb	r2, [r7, #6]
 8012188:	797b      	ldrb	r3, [r7, #5]
 801218a:	429a      	cmp	r2, r3
 801218c:	d3f2      	bcc.n	8012174 <validateCheckSum+0x18>
    }
    return (sum == receive_buffer[stackSumIndex]);
 801218e:	797b      	ldrb	r3, [r7, #5]
 8012190:	4a06      	ldr	r2, [pc, #24]	; (80121ac <validateCheckSum+0x50>)
 8012192:	5cd3      	ldrb	r3, [r2, r3]
 8012194:	79fa      	ldrb	r2, [r7, #7]
 8012196:	429a      	cmp	r2, r3
 8012198:	bf0c      	ite	eq
 801219a:	2301      	moveq	r3, #1
 801219c:	2300      	movne	r3, #0
 801219e:	b2db      	uxtb	r3, r3
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bc80      	pop	{r7}
 80121a8:	4770      	bx	lr
 80121aa:	bf00      	nop
 80121ac:	20000654 	.word	0x20000654

080121b0 <husky_lens_protocol_receive>:

uint8_t husky_lens_protocol_receive(uint8_t data){
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	4603      	mov	r3, r0
 80121b8:	71fb      	strb	r3, [r7, #7]
    switch (receive_index){
 80121ba:	4b32      	ldr	r3, [pc, #200]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 80121bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121c0:	2b03      	cmp	r3, #3
 80121c2:	d833      	bhi.n	801222c <husky_lens_protocol_receive+0x7c>
 80121c4:	a201      	add	r2, pc, #4	; (adr r2, 80121cc <husky_lens_protocol_receive+0x1c>)
 80121c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ca:	bf00      	nop
 80121cc:	080121dd 	.word	0x080121dd
 80121d0:	080121f5 	.word	0x080121f5
 80121d4:	0801220d 	.word	0x0801220d
 80121d8:	08012215 	.word	0x08012215
    case HEADER_0_INDEX:
        if (data!=0x55) {receive_index = 0; return 0;}
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	2b55      	cmp	r3, #85	; 0x55
 80121e0:	d004      	beq.n	80121ec <husky_lens_protocol_receive+0x3c>
 80121e2:	4b28      	ldr	r3, [pc, #160]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	801a      	strh	r2, [r3, #0]
 80121e8:	2300      	movs	r3, #0
 80121ea:	e046      	b.n	801227a <husky_lens_protocol_receive+0xca>
        receive_buffer[HEADER_0_INDEX] = 0x55;
 80121ec:	4b26      	ldr	r3, [pc, #152]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 80121ee:	2255      	movs	r2, #85	; 0x55
 80121f0:	701a      	strb	r2, [r3, #0]
        break;
 80121f2:	e038      	b.n	8012266 <husky_lens_protocol_receive+0xb6>
    case HEADER_1_INDEX:
        if (data!=0xaa) {receive_index = 0; return 0;}
 80121f4:	79fb      	ldrb	r3, [r7, #7]
 80121f6:	2baa      	cmp	r3, #170	; 0xaa
 80121f8:	d004      	beq.n	8012204 <husky_lens_protocol_receive+0x54>
 80121fa:	4b22      	ldr	r3, [pc, #136]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	801a      	strh	r2, [r3, #0]
 8012200:	2300      	movs	r3, #0
 8012202:	e03a      	b.n	801227a <husky_lens_protocol_receive+0xca>
        receive_buffer[HEADER_1_INDEX] = 0xaa;
 8012204:	4b20      	ldr	r3, [pc, #128]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 8012206:	22aa      	movs	r2, #170	; 0xaa
 8012208:	705a      	strb	r2, [r3, #1]
        break;
 801220a:	e02c      	b.n	8012266 <husky_lens_protocol_receive+0xb6>
    case ADDRESS_INDEX:
        receive_buffer[ADDRESS_INDEX] = data;
 801220c:	4a1e      	ldr	r2, [pc, #120]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 801220e:	79fb      	ldrb	r3, [r7, #7]
 8012210:	7093      	strb	r3, [r2, #2]
        break;
 8012212:	e028      	b.n	8012266 <husky_lens_protocol_receive+0xb6>
    case CONTENT_SIZE_INDEX:
        if (data >= FRAME_BUFFER_SIZE-PROTOCOL_SIZE) {receive_index = 0; return 0;}
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	2b79      	cmp	r3, #121	; 0x79
 8012218:	d904      	bls.n	8012224 <husky_lens_protocol_receive+0x74>
 801221a:	4b1a      	ldr	r3, [pc, #104]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 801221c:	2200      	movs	r2, #0
 801221e:	801a      	strh	r2, [r3, #0]
 8012220:	2300      	movs	r3, #0
 8012222:	e02a      	b.n	801227a <husky_lens_protocol_receive+0xca>
        receive_buffer[CONTENT_SIZE_INDEX] = data;
 8012224:	4a18      	ldr	r2, [pc, #96]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 8012226:	79fb      	ldrb	r3, [r7, #7]
 8012228:	70d3      	strb	r3, [r2, #3]
        break;
 801222a:	e01c      	b.n	8012266 <husky_lens_protocol_receive+0xb6>
    default:
        receive_buffer[receive_index]=data;
 801222c:	4b15      	ldr	r3, [pc, #84]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 801222e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012232:	4619      	mov	r1, r3
 8012234:	4a14      	ldr	r2, [pc, #80]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	5453      	strb	r3, [r2, r1]
        if (receive_index==receive_buffer[CONTENT_SIZE_INDEX]+CONTENT_INDEX) {
 801223a:	4b12      	ldr	r3, [pc, #72]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 801223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012240:	461a      	mov	r2, r3
 8012242:	4b11      	ldr	r3, [pc, #68]	; (8012288 <husky_lens_protocol_receive+0xd8>)
 8012244:	78db      	ldrb	r3, [r3, #3]
 8012246:	3305      	adds	r3, #5
 8012248:	429a      	cmp	r2, r3
 801224a:	d10b      	bne.n	8012264 <husky_lens_protocol_receive+0xb4>
            content_end = receive_index;
 801224c:	4b0d      	ldr	r3, [pc, #52]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 801224e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012252:	4b0e      	ldr	r3, [pc, #56]	; (801228c <husky_lens_protocol_receive+0xdc>)
 8012254:	801a      	strh	r2, [r3, #0]
            receive_index=0;
 8012256:	4b0b      	ldr	r3, [pc, #44]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 8012258:	2200      	movs	r2, #0
 801225a:	801a      	strh	r2, [r3, #0]
            return validateCheckSum();
 801225c:	f7ff ff7e 	bl	801215c <validateCheckSum>
 8012260:	4603      	mov	r3, r0
 8012262:	e00a      	b.n	801227a <husky_lens_protocol_receive+0xca>
        }
        break;
 8012264:	bf00      	nop
    }
    receive_index++;
 8012266:	4b07      	ldr	r3, [pc, #28]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 8012268:	f9b3 3000 	ldrsh.w	r3, [r3]
 801226c:	b29b      	uxth	r3, r3
 801226e:	3301      	adds	r3, #1
 8012270:	b29b      	uxth	r3, r3
 8012272:	b21a      	sxth	r2, r3
 8012274:	4b03      	ldr	r3, [pc, #12]	; (8012284 <husky_lens_protocol_receive+0xd4>)
 8012276:	801a      	strh	r2, [r3, #0]
    return 0;
 8012278:	2300      	movs	r3, #0
}
 801227a:	4618      	mov	r0, r3
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	200006d6 	.word	0x200006d6
 8012288:	20000654 	.word	0x20000654
 801228c:	200006dc 	.word	0x200006dc

08012290 <protocolWriteCommand>:

void protocolWriteCommand(Protocol_t* protocol, uint8_t command){
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	70fb      	strb	r3, [r7, #3]
     protocol->command = command;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	78fa      	ldrb	r2, [r7, #3]
 80122a0:	701a      	strb	r2, [r3, #0]
     uint8_t *buffer = husky_lens_protocol_write_begin(protocol->command);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f000 f870 	bl	801238c <husky_lens_protocol_write_begin>
 80122ac:	60f8      	str	r0, [r7, #12]
     int length = husky_lens_protocol_write_end();
 80122ae:	f000 f81f 	bl	80122f0 <husky_lens_protocol_write_end>
 80122b2:	60b8      	str	r0, [r7, #8]
     protocolWrite(buffer, length);
 80122b4:	68b9      	ldr	r1, [r7, #8]
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f000 f804 	bl	80122c4 <protocolWrite>
 }
 80122bc:	bf00      	nop
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <protocolWrite>:
     {
         return 0;
     }
}

void protocolWrite(uint8_t *buffer, int length){
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af02      	add	r7, sp, #8
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c2,0x32<<1,buffer,length,1000);
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	4613      	mov	r3, r2
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	2164      	movs	r1, #100	; 0x64
 80122de:	4803      	ldr	r0, [pc, #12]	; (80122ec <protocolWrite+0x28>)
 80122e0:	f004 fa34 	bl	801674c <HAL_I2C_Master_Transmit>
}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	20000918 	.word	0x20000918

080122f0 <husky_lens_protocol_write_end>:

int husky_lens_protocol_write_end(){
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
    if(send_fail) {return 0;}
 80122f6:	4b22      	ldr	r3, [pc, #136]	; (8012380 <husky_lens_protocol_write_end+0x90>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <husky_lens_protocol_write_end+0x12>
 80122fe:	2300      	movs	r3, #0
 8012300:	e038      	b.n	8012374 <husky_lens_protocol_write_end+0x84>
    if(send_index + 1 >= FRAME_BUFFER_SIZE) {return 0;}
 8012302:	4b20      	ldr	r3, [pc, #128]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 8012304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012308:	3301      	adds	r3, #1
 801230a:	2b7f      	cmp	r3, #127	; 0x7f
 801230c:	dd01      	ble.n	8012312 <husky_lens_protocol_write_end+0x22>
 801230e:	2300      	movs	r3, #0
 8012310:	e030      	b.n	8012374 <husky_lens_protocol_write_end+0x84>
    send_buffer[CONTENT_SIZE_INDEX] = send_index - CONTENT_INDEX;
 8012312:	4b1c      	ldr	r3, [pc, #112]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 8012314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012318:	b2db      	uxtb	r3, r3
 801231a:	3b05      	subs	r3, #5
 801231c:	b2da      	uxtb	r2, r3
 801231e:	4b1a      	ldr	r3, [pc, #104]	; (8012388 <husky_lens_protocol_write_end+0x98>)
 8012320:	70da      	strb	r2, [r3, #3]
    uint8_t sum = 0;
 8012322:	2300      	movs	r3, #0
 8012324:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < send_index; i++)
 8012326:	2300      	movs	r3, #0
 8012328:	603b      	str	r3, [r7, #0]
 801232a:	e009      	b.n	8012340 <husky_lens_protocol_write_end+0x50>
    {
        sum += send_buffer[i];
 801232c:	4a16      	ldr	r2, [pc, #88]	; (8012388 <husky_lens_protocol_write_end+0x98>)
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	4413      	add	r3, r2
 8012332:	781a      	ldrb	r2, [r3, #0]
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	4413      	add	r3, r2
 8012338:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < send_index; i++)
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	3301      	adds	r3, #1
 801233e:	603b      	str	r3, [r7, #0]
 8012340:	4b10      	ldr	r3, [pc, #64]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 8012342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012346:	461a      	mov	r2, r3
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	4293      	cmp	r3, r2
 801234c:	dbee      	blt.n	801232c <husky_lens_protocol_write_end+0x3c>
    }
    send_buffer[send_index] = sum;
 801234e:	4b0d      	ldr	r3, [pc, #52]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 8012350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012354:	4619      	mov	r1, r3
 8012356:	4a0c      	ldr	r2, [pc, #48]	; (8012388 <husky_lens_protocol_write_end+0x98>)
 8012358:	79fb      	ldrb	r3, [r7, #7]
 801235a:	5453      	strb	r3, [r2, r1]
    send_index ++;
 801235c:	4b09      	ldr	r3, [pc, #36]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 801235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012362:	b29b      	uxth	r3, r3
 8012364:	3301      	adds	r3, #1
 8012366:	b29b      	uxth	r3, r3
 8012368:	b21a      	sxth	r2, r3
 801236a:	4b06      	ldr	r3, [pc, #24]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 801236c:	801a      	strh	r2, [r3, #0]
    return send_index;
 801236e:	4b05      	ldr	r3, [pc, #20]	; (8012384 <husky_lens_protocol_write_end+0x94>)
 8012370:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8012374:	4618      	mov	r0, r3
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	bc80      	pop	{r7}
 801237c:	4770      	bx	lr
 801237e:	bf00      	nop
 8012380:	200006d8 	.word	0x200006d8
 8012384:	200006d4 	.word	0x200006d4
 8012388:	200005d4 	.word	0x200005d4

0801238c <husky_lens_protocol_write_begin>:

uint8_t* husky_lens_protocol_write_begin(uint8_t command){
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	4603      	mov	r3, r0
 8012394:	71fb      	strb	r3, [r7, #7]
     send_fail = 0;
 8012396:	4b0c      	ldr	r3, [pc, #48]	; (80123c8 <husky_lens_protocol_write_begin+0x3c>)
 8012398:	2200      	movs	r2, #0
 801239a:	701a      	strb	r2, [r3, #0]
     send_buffer[HEADER_0_INDEX] = 0x55;
 801239c:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <husky_lens_protocol_write_begin+0x40>)
 801239e:	2255      	movs	r2, #85	; 0x55
 80123a0:	701a      	strb	r2, [r3, #0]
     send_buffer[HEADER_1_INDEX] = 0xAA;
 80123a2:	4b0a      	ldr	r3, [pc, #40]	; (80123cc <husky_lens_protocol_write_begin+0x40>)
 80123a4:	22aa      	movs	r2, #170	; 0xaa
 80123a6:	705a      	strb	r2, [r3, #1]
     send_buffer[ADDRESS_INDEX] = 0x11;
 80123a8:	4b08      	ldr	r3, [pc, #32]	; (80123cc <husky_lens_protocol_write_begin+0x40>)
 80123aa:	2211      	movs	r2, #17
 80123ac:	709a      	strb	r2, [r3, #2]
     send_buffer[COMMAND_INDEX] = command;
 80123ae:	4a07      	ldr	r2, [pc, #28]	; (80123cc <husky_lens_protocol_write_begin+0x40>)
 80123b0:	79fb      	ldrb	r3, [r7, #7]
 80123b2:	7113      	strb	r3, [r2, #4]
     send_index = CONTENT_INDEX;
 80123b4:	4b06      	ldr	r3, [pc, #24]	; (80123d0 <husky_lens_protocol_write_begin+0x44>)
 80123b6:	2205      	movs	r2, #5
 80123b8:	801a      	strh	r2, [r3, #0]
     return send_buffer;
 80123ba:	4b04      	ldr	r3, [pc, #16]	; (80123cc <husky_lens_protocol_write_begin+0x40>)
 }
 80123bc:	4618      	mov	r0, r3
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bc80      	pop	{r7}
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	200006d8 	.word	0x200006d8
 80123cc:	200005d4 	.word	0x200005d4
 80123d0:	200006d4 	.word	0x200006d4

080123d4 <protocolReadFiveInt16>:
     husky_lens_protocol_write_int16(protocol->fifth);
     int length = husky_lens_protocol_write_end();
     protocolWrite(buffer, length);
 }

 uint8_t protocolReadFiveInt16(Protocol_t* protocol, uint8_t command){
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	460b      	mov	r3, r1
 80123de:	70fb      	strb	r3, [r7, #3]
     if (husky_lens_protocol_read_begin(command))
 80123e0:	78fb      	ldrb	r3, [r7, #3]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fe6c 	bl	80120c0 <husky_lens_protocol_read_begin>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d024      	beq.n	8012438 <protocolReadFiveInt16+0x64>
     {
         protocol->command = command;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	78fa      	ldrb	r2, [r7, #3]
 80123f2:	701a      	strb	r2, [r3, #0]
         protocol->first = husky_lens_protocol_read_int16();
 80123f4:	f000 f846 	bl	8012484 <husky_lens_protocol_read_int16>
 80123f8:	4603      	mov	r3, r0
 80123fa:	461a      	mov	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	805a      	strh	r2, [r3, #2]
         protocol->second = husky_lens_protocol_read_int16();
 8012400:	f000 f840 	bl	8012484 <husky_lens_protocol_read_int16>
 8012404:	4603      	mov	r3, r0
 8012406:	461a      	mov	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	809a      	strh	r2, [r3, #4]
         protocol->third = husky_lens_protocol_read_int16();
 801240c:	f000 f83a 	bl	8012484 <husky_lens_protocol_read_int16>
 8012410:	4603      	mov	r3, r0
 8012412:	461a      	mov	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	80da      	strh	r2, [r3, #6]
         protocol->fourth = husky_lens_protocol_read_int16();
 8012418:	f000 f834 	bl	8012484 <husky_lens_protocol_read_int16>
 801241c:	4603      	mov	r3, r0
 801241e:	461a      	mov	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	811a      	strh	r2, [r3, #8]
         protocol->fifth = husky_lens_protocol_read_int16();
 8012424:	f000 f82e 	bl	8012484 <husky_lens_protocol_read_int16>
 8012428:	4603      	mov	r3, r0
 801242a:	461a      	mov	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	815a      	strh	r2, [r3, #10]
         husky_lens_protocol_read_end();
 8012430:	f000 f808 	bl	8012444 <husky_lens_protocol_read_end>
         return 1;
 8012434:	2301      	movs	r3, #1
 8012436:	e000      	b.n	801243a <protocolReadFiveInt16+0x66>
     }
     else
     {
         return 0;
 8012438:	2300      	movs	r3, #0
     }
 }
 801243a:	4618      	mov	r0, r3
 801243c:	3708      	adds	r7, #8
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
	...

08012444 <husky_lens_protocol_read_end>:

 uint8_t husky_lens_protocol_read_end(){
 8012444:	b480      	push	{r7}
 8012446:	af00      	add	r7, sp, #0
     if (receive_fail)
 8012448:	4b0b      	ldr	r3, [pc, #44]	; (8012478 <husky_lens_protocol_read_end+0x34>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d004      	beq.n	801245a <husky_lens_protocol_read_end+0x16>
     {
         receive_fail = 0;
 8012450:	4b09      	ldr	r3, [pc, #36]	; (8012478 <husky_lens_protocol_read_end+0x34>)
 8012452:	2200      	movs	r2, #0
 8012454:	701a      	strb	r2, [r3, #0]
         return 0;
 8012456:	2300      	movs	r3, #0
 8012458:	e00a      	b.n	8012470 <husky_lens_protocol_read_end+0x2c>
     }
     return content_current == content_end;
 801245a:	4b08      	ldr	r3, [pc, #32]	; (801247c <husky_lens_protocol_read_end+0x38>)
 801245c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012460:	4b07      	ldr	r3, [pc, #28]	; (8012480 <husky_lens_protocol_read_end+0x3c>)
 8012462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012466:	429a      	cmp	r2, r3
 8012468:	bf0c      	ite	eq
 801246a:	2301      	moveq	r3, #1
 801246c:	2300      	movne	r3, #0
 801246e:	b2db      	uxtb	r3, r3
 }
 8012470:	4618      	mov	r0, r3
 8012472:	46bd      	mov	sp, r7
 8012474:	bc80      	pop	{r7}
 8012476:	4770      	bx	lr
 8012478:	200006d9 	.word	0x200006d9
 801247c:	200006da 	.word	0x200006da
 8012480:	200006dc 	.word	0x200006dc

08012484 <husky_lens_protocol_read_int16>:

 int16_t husky_lens_protocol_read_int16(){
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
     if (content_current >= content_end || content_read_end){receive_fail = 1; return 0;}
 801248a:	4b15      	ldr	r3, [pc, #84]	; (80124e0 <husky_lens_protocol_read_int16+0x5c>)
 801248c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012490:	4b14      	ldr	r3, [pc, #80]	; (80124e4 <husky_lens_protocol_read_int16+0x60>)
 8012492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012496:	429a      	cmp	r2, r3
 8012498:	da03      	bge.n	80124a2 <husky_lens_protocol_read_int16+0x1e>
 801249a:	4b13      	ldr	r3, [pc, #76]	; (80124e8 <husky_lens_protocol_read_int16+0x64>)
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <husky_lens_protocol_read_int16+0x28>
 80124a2:	4b12      	ldr	r3, [pc, #72]	; (80124ec <husky_lens_protocol_read_int16+0x68>)
 80124a4:	2201      	movs	r2, #1
 80124a6:	701a      	strb	r2, [r3, #0]
 80124a8:	2300      	movs	r3, #0
 80124aa:	e013      	b.n	80124d4 <husky_lens_protocol_read_int16+0x50>
     int16_t result;
     memcpy(&result, receive_buffer + content_current, sizeof(result));
 80124ac:	4b0c      	ldr	r3, [pc, #48]	; (80124e0 <husky_lens_protocol_read_int16+0x5c>)
 80124ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124b2:	461a      	mov	r2, r3
 80124b4:	4b0e      	ldr	r3, [pc, #56]	; (80124f0 <husky_lens_protocol_read_int16+0x6c>)
 80124b6:	4413      	add	r3, r2
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	80fb      	strh	r3, [r7, #6]
//     if (IS_BIG_ENDIAN()){__builtin_bswap16(result);}
     content_current += sizeof(result);
 80124be:	4b08      	ldr	r3, [pc, #32]	; (80124e0 <husky_lens_protocol_read_int16+0x5c>)
 80124c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	3302      	adds	r3, #2
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	b21a      	sxth	r2, r3
 80124cc:	4b04      	ldr	r3, [pc, #16]	; (80124e0 <husky_lens_protocol_read_int16+0x5c>)
 80124ce:	801a      	strh	r2, [r3, #0]
     return result;
 80124d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 }
 80124d4:	4618      	mov	r0, r3
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	bc80      	pop	{r7}
 80124dc:	4770      	bx	lr
 80124de:	bf00      	nop
 80124e0:	200006da 	.word	0x200006da
 80124e4:	200006dc 	.word	0x200006dc
 80124e8:	200006de 	.word	0x200006de
 80124ec:	200006d9 	.word	0x200006d9
 80124f0:	20000654 	.word	0x20000654

080124f4 <protocolWriteOneInt16>:

 void protocolWriteOneInt16(Protocol_t* protocol, uint8_t command){
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	460b      	mov	r3, r1
 80124fe:	70fb      	strb	r3, [r7, #3]
     protocol->command = command;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	78fa      	ldrb	r2, [r7, #3]
 8012504:	701a      	strb	r2, [r3, #0]
     uint8_t *buffer = husky_lens_protocol_write_begin(protocol->command);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	4618      	mov	r0, r3
 801250c:	f7ff ff3e 	bl	801238c <husky_lens_protocol_write_begin>
 8012510:	60f8      	str	r0, [r7, #12]
     husky_lens_protocol_write_int16(protocol->first);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012518:	4618      	mov	r0, r3
 801251a:	f000 f80b 	bl	8012534 <husky_lens_protocol_write_int16>
     int length = husky_lens_protocol_write_end();
 801251e:	f7ff fee7 	bl	80122f0 <husky_lens_protocol_write_end>
 8012522:	60b8      	str	r0, [r7, #8]
     protocolWrite(buffer, length);
 8012524:	68b9      	ldr	r1, [r7, #8]
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f7ff fecc 	bl	80122c4 <protocolWrite>
 }
 801252c:	bf00      	nop
 801252e:	3710      	adds	r7, #16
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <husky_lens_protocol_write_int16>:

 void husky_lens_protocol_write_int16(int16_t content){
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	80fb      	strh	r3, [r7, #6]
     if(send_index + sizeof(content) >= FRAME_BUFFER_SIZE) {send_fail = 1; return;}
 801253e:	4b0f      	ldr	r3, [pc, #60]	; (801257c <husky_lens_protocol_write_int16+0x48>)
 8012540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012544:	3302      	adds	r3, #2
 8012546:	2b7f      	cmp	r3, #127	; 0x7f
 8012548:	d903      	bls.n	8012552 <husky_lens_protocol_write_int16+0x1e>
 801254a:	4b0d      	ldr	r3, [pc, #52]	; (8012580 <husky_lens_protocol_write_int16+0x4c>)
 801254c:	2201      	movs	r2, #1
 801254e:	701a      	strb	r2, [r3, #0]
 8012550:	e010      	b.n	8012574 <husky_lens_protocol_write_int16+0x40>
//     if (IS_BIG_ENDIAN()){__builtin_bswap16(content);}
     memcpy(send_buffer + send_index, &content, sizeof(content));
 8012552:	4b0a      	ldr	r3, [pc, #40]	; (801257c <husky_lens_protocol_write_int16+0x48>)
 8012554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012558:	461a      	mov	r2, r3
 801255a:	4b0a      	ldr	r3, [pc, #40]	; (8012584 <husky_lens_protocol_write_int16+0x50>)
 801255c:	4413      	add	r3, r2
 801255e:	88fa      	ldrh	r2, [r7, #6]
 8012560:	801a      	strh	r2, [r3, #0]
     send_index += sizeof(content);
 8012562:	4b06      	ldr	r3, [pc, #24]	; (801257c <husky_lens_protocol_write_int16+0x48>)
 8012564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012568:	b29b      	uxth	r3, r3
 801256a:	3302      	adds	r3, #2
 801256c:	b29b      	uxth	r3, r3
 801256e:	b21a      	sxth	r2, r3
 8012570:	4b02      	ldr	r3, [pc, #8]	; (801257c <husky_lens_protocol_write_int16+0x48>)
 8012572:	801a      	strh	r2, [r3, #0]
 }
 8012574:	370c      	adds	r7, #12
 8012576:	46bd      	mov	sp, r7
 8012578:	bc80      	pop	{r7}
 801257a:	4770      	bx	lr
 801257c:	200006d4 	.word	0x200006d4
 8012580:	200006d8 	.word	0x200006d8
 8012584:	200005d4 	.word	0x200005d4

08012588 <protocolWriteBufferUint8>:
     {
         return 0;
     }
 }

 void protocolWriteBufferUint8(Protocol_t* protocol, uint8_t command){
 8012588:	b580      	push	{r7, lr}
 801258a:	b084      	sub	sp, #16
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	460b      	mov	r3, r1
 8012592:	70fb      	strb	r3, [r7, #3]
     protocol->command = command;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	78fa      	ldrb	r2, [r7, #3]
 8012598:	701a      	strb	r2, [r3, #0]
     uint8_t *buffer = husky_lens_protocol_write_begin(protocol->command);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fef4 	bl	801238c <husky_lens_protocol_write_begin>
 80125a4:	60f8      	str	r0, [r7, #12]
     husky_lens_protocol_write_buffer_uint8(protocol->data, protocol->length);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	68da      	ldr	r2, [r3, #12]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80125b0:	4619      	mov	r1, r3
 80125b2:	4610      	mov	r0, r2
 80125b4:	f000 f80c 	bl	80125d0 <husky_lens_protocol_write_buffer_uint8>
     int length = husky_lens_protocol_write_end();
 80125b8:	f7ff fe9a 	bl	80122f0 <husky_lens_protocol_write_end>
 80125bc:	60b8      	str	r0, [r7, #8]
     protocolWrite(buffer, length);
 80125be:	68b9      	ldr	r1, [r7, #8]
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f7ff fe7f 	bl	80122c4 <protocolWrite>
 }
 80125c6:	bf00      	nop
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
	...

080125d0 <husky_lens_protocol_write_buffer_uint8>:

 void husky_lens_protocol_write_buffer_uint8(uint8_t *content, uint32_t length){
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
     if(send_index + sizeof(uint8_t) * length >= FRAME_BUFFER_SIZE) {send_fail = 1; return;}
 80125da:	4b12      	ldr	r3, [pc, #72]	; (8012624 <husky_lens_protocol_write_buffer_uint8+0x54>)
 80125dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e0:	461a      	mov	r2, r3
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	4413      	add	r3, r2
 80125e6:	2b7f      	cmp	r3, #127	; 0x7f
 80125e8:	d903      	bls.n	80125f2 <husky_lens_protocol_write_buffer_uint8+0x22>
 80125ea:	4b0f      	ldr	r3, [pc, #60]	; (8012628 <husky_lens_protocol_write_buffer_uint8+0x58>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	701a      	strb	r2, [r3, #0]
 80125f0:	e015      	b.n	801261e <husky_lens_protocol_write_buffer_uint8+0x4e>
     memcpy(send_buffer + send_index, content, sizeof(uint8_t) * length);
 80125f2:	4b0c      	ldr	r3, [pc, #48]	; (8012624 <husky_lens_protocol_write_buffer_uint8+0x54>)
 80125f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125f8:	461a      	mov	r2, r3
 80125fa:	4b0c      	ldr	r3, [pc, #48]	; (801262c <husky_lens_protocol_write_buffer_uint8+0x5c>)
 80125fc:	4413      	add	r3, r2
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f00b fb9c 	bl	801dd40 <memcpy>
     send_index += sizeof(uint8_t) * length;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	b29a      	uxth	r2, r3
 801260c:	4b05      	ldr	r3, [pc, #20]	; (8012624 <husky_lens_protocol_write_buffer_uint8+0x54>)
 801260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012612:	b29b      	uxth	r3, r3
 8012614:	4413      	add	r3, r2
 8012616:	b29b      	uxth	r3, r3
 8012618:	b21a      	sxth	r2, r3
 801261a:	4b02      	ldr	r3, [pc, #8]	; (8012624 <husky_lens_protocol_write_buffer_uint8+0x54>)
 801261c:	801a      	strh	r2, [r3, #0]
 }
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	200006d4 	.word	0x200006d4
 8012628:	200006d8 	.word	0x200006d8
 801262c:	200005d4 	.word	0x200005d4

08012630 <readLearnedIDCount>:
     content_current += sizeof(uint8_t)*length;
     return length;
 }

 //从结果中获取已学习的ID数
 int16_t readLearnedIDCount(){
 8012630:	b480      	push	{r7}
 8012632:	af00      	add	r7, sp, #0
	 return protocolInfo.knowledgeSize;
 8012634:	4b03      	ldr	r3, [pc, #12]	; (8012644 <readLearnedIDCount+0x14>)
 8012636:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 }
 801263a:	4618      	mov	r0, r3
 801263c:	46bd      	mov	sp, r7
 801263e:	bc80      	pop	{r7}
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	200011b4 	.word	0x200011b4

08012648 <writeOSD>:

//屏幕叠加显示文字
 uint8_t writeOSD(const char* text, int x, int y){
 8012648:	b580      	push	{r7, lr}
 801264a:	b090      	sub	sp, #64	; 0x40
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
     Protocol_t protocol;
     uint8_t textLength = strlen(text);
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f7fb fde7 	bl	800e228 <strlen>
 801265a:	4603      	mov	r3, r0
 801265c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
     uint8_t data[20]={textLength, 0, x, y};
 8012660:	f107 0314 	add.w	r3, r7, #20
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]
 8012668:	605a      	str	r2, [r3, #4]
 801266a:	609a      	str	r2, [r3, #8]
 801266c:	60da      	str	r2, [r3, #12]
 801266e:	611a      	str	r2, [r3, #16]
 8012670:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012674:	753b      	strb	r3, [r7, #20]
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	b2db      	uxtb	r3, r3
 801267a:	75bb      	strb	r3, [r7, #22]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	b2db      	uxtb	r3, r3
 8012680:	75fb      	strb	r3, [r7, #23]
     //uint8_t data[textLength + 5] = {textLength, 0, x, y};
     if (x > 255){
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	2bff      	cmp	r3, #255	; 0xff
 8012686:	dd09      	ble.n	801269c <writeOSD+0x54>
         data[1] = 0xff;
 8012688:	23ff      	movs	r3, #255	; 0xff
 801268a:	757b      	strb	r3, [r7, #21]
         data[2] = x % 256;
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	425a      	negs	r2, r3
 8012690:	b2db      	uxtb	r3, r3
 8012692:	b2d2      	uxtb	r2, r2
 8012694:	bf58      	it	pl
 8012696:	4253      	negpl	r3, r2
 8012698:	b2db      	uxtb	r3, r3
 801269a:	75bb      	strb	r3, [r7, #22]
     }
     for(int i=0;i<textLength + 1;i++){
 801269c:	2300      	movs	r3, #0
 801269e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126a0:	e00d      	b.n	80126be <writeOSD+0x76>
    	 data[i+4]=(int)text[i];
 80126a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	441a      	add	r2, r3
 80126a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126aa:	3304      	adds	r3, #4
 80126ac:	7812      	ldrb	r2, [r2, #0]
 80126ae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80126b2:	440b      	add	r3, r1
 80126b4:	f803 2c2c 	strb.w	r2, [r3, #-44]
     for(int i=0;i<textLength + 1;i++){
 80126b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ba:	3301      	adds	r3, #1
 80126bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80126c2:	3301      	adds	r3, #1
 80126c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126c6:	429a      	cmp	r2, r3
 80126c8:	dbeb      	blt.n	80126a2 <writeOSD+0x5a>
     }
     protocol.length = textLength + 4;
 80126ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	3304      	adds	r3, #4
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	b21b      	sxth	r3, r3
 80126d6:	867b      	strh	r3, [r7, #50]	; 0x32
     protocol.data = data;
 80126d8:	f107 0314 	add.w	r3, r7, #20
 80126dc:	637b      	str	r3, [r7, #52]	; 0x34
     protocolWriteRequestCustomText(&protocol);
 80126de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7ff fc31 	bl	8011f4a <protocolWriteRequestCustomText>
     return wait(COMMAND_RETURN_OK);
 80126e8:	202e      	movs	r0, #46	; 0x2e
 80126ea:	f7ff fccd 	bl	8012088 <wait>
 80126ee:	4603      	mov	r3, r0
 }
 80126f0:	4618      	mov	r0, r3
 80126f2:	3740      	adds	r7, #64	; 0x40
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <clearOSD>:

 //清除现在屏幕上显示的东西
 uint8_t clearOSD(){
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
	 Protocol_t protocol;
     protocolWriteRequestClearText(&protocol);
 80126fe:	463b      	mov	r3, r7
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff fbb3 	bl	8011e6c <protocolWriteRequestClearText>
     return wait(COMMAND_RETURN_OK);
 8012706:	202e      	movs	r0, #46	; 0x2e
 8012708:	f7ff fcbe 	bl	8012088 <wait>
 801270c:	4603      	mov	r3, r0
 }
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <isAppearDirect>:

//从结果中获取（方框，箭头）是否在画面中
uint8_t isAppearDirect(HUSKYLENSResultType type){
 8012716:	b580      	push	{r7, lr}
 8012718:	b082      	sub	sp, #8
 801271a:	af00      	add	r7, sp, #0
 801271c:	4603      	mov	r3, r0
 801271e:	71fb      	strb	r3, [r7, #7]
	 switch (type){
 8012720:	79fb      	ldrb	r3, [r7, #7]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d002      	beq.n	801272c <isAppearDirect+0x16>
 8012726:	2b01      	cmp	r3, #1
 8012728:	d005      	beq.n	8012736 <isAppearDirect+0x20>
 801272a:	e009      	b.n	8012740 <isAppearDirect+0x2a>
	 case HUSKYLENSResultBlock:
		 return countBlocks();
 801272c:	f000 f956 	bl	80129dc <countBlocks>
 8012730:	4603      	mov	r3, r0
 8012732:	b2db      	uxtb	r3, r3
 8012734:	e005      	b.n	8012742 <isAppearDirect+0x2c>
	 case HUSKYLENSResultArrow:
		 return countArrows();
 8012736:	f000 f9c1 	bl	8012abc <countArrows>
 801273a:	4603      	mov	r3, r0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	e000      	b.n	8012742 <isAppearDirect+0x2c>
	 default:
		 return 0;
 8012740:	2300      	movs	r3, #0
	 }
}
 8012742:	4618      	mov	r0, r3
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <readBlockCenterParameterDirect>:

//哈士奇获取靠近中心的参数
HUSKYLENSBlockDirectInfo readBlockCenterParameterDirect(){
 801274a:	b5b0      	push	{r4, r5, r7, lr}
 801274c:	b094      	sub	sp, #80	; 0x50
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
    int32_t distanceMin = INT32_MAX;
 8012752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012756:	64fb      	str	r3, [r7, #76]	; 0x4c
    int16_t distanceMinIndex = -1;
 8012758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801275c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    for (int i = 0; i < blocksavailable(); i++){
 8012760:	2300      	movs	r3, #0
 8012762:	647b      	str	r3, [r7, #68]	; 0x44
 8012764:	e023      	b.n	80127ae <readBlockCenterParameterDirect+0x64>
        HUSKYLENSResult resultBuffer = blocksreadDirect(i);
 8012766:	f107 030c 	add.w	r3, r7, #12
 801276a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801276c:	4618      	mov	r0, r3
 801276e:	f000 f8c7 	bl	8012900 <blocksreadDirect>
        int32_t distance = sq(resultBuffer.xCenter - 320 / 2) + sq(resultBuffer.yCenter - 240 / 2);
 8012772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012776:	3ba0      	subs	r3, #160	; 0xa0
 8012778:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801277c:	3aa0      	subs	r2, #160	; 0xa0
 801277e:	fb02 f203 	mul.w	r2, r2, r3
 8012782:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012786:	3b78      	subs	r3, #120	; 0x78
 8012788:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801278c:	3978      	subs	r1, #120	; 0x78
 801278e:	fb01 f303 	mul.w	r3, r1, r3
 8012792:	4413      	add	r3, r2
 8012794:	643b      	str	r3, [r7, #64]	; 0x40
        if (distance < distanceMin)
 8012796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801279a:	429a      	cmp	r2, r3
 801279c:	da04      	bge.n	80127a8 <readBlockCenterParameterDirect+0x5e>
        {
            distanceMin = distance;
 801279e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127a0:	64fb      	str	r3, [r7, #76]	; 0x4c
            distanceMinIndex = i;
 80127a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    for (int i = 0; i < blocksavailable(); i++){
 80127a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127aa:	3301      	adds	r3, #1
 80127ac:	647b      	str	r3, [r7, #68]	; 0x44
 80127ae:	f000 f90d 	bl	80129cc <blocksavailable>
 80127b2:	4602      	mov	r2, r0
 80127b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127b6:	4293      	cmp	r3, r2
 80127b8:	dbd5      	blt.n	8012766 <readBlockCenterParameterDirect+0x1c>
        }
    }

    HUSKYLENSResult result = blocksreadDirect(distanceMinIndex);
 80127ba:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80127be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80127c2:	4611      	mov	r1, r2
 80127c4:	4618      	mov	r0, r3
 80127c6:	f000 f89b 	bl	8012900 <blocksreadDirect>
    HUSKYLENSBlockDirectInfo block;
    block.xCenter = result.xCenter;
 80127ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80127ce:	61fb      	str	r3, [r7, #28]
    block.yCenter = result.yCenter;
 80127d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80127d4:	623b      	str	r3, [r7, #32]
    block.width = result.width;
 80127d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80127da:	627b      	str	r3, [r7, #36]	; 0x24
    block.height = result.height;
 80127dc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80127e0:	62bb      	str	r3, [r7, #40]	; 0x28
    block.ID = result.ID;
 80127e2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80127e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return block;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	461d      	mov	r5, r3
 80127ec:	f107 041c 	add.w	r4, r7, #28
 80127f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	602b      	str	r3, [r5, #0]
}
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	3750      	adds	r7, #80	; 0x50
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bdb0      	pop	{r4, r5, r7, pc}

08012800 <readArrowCenterParameterDirect>:

void readArrowCenterParameterDirect(HUSKYLENSArrowDirectInfo*arrow){
 8012800:	b580      	push	{r7, lr}
 8012802:	b08e      	sub	sp, #56	; 0x38
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
    int32_t distanceMin = INT32_MAX;
 8012808:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801280c:	637b      	str	r3, [r7, #52]	; 0x34
    int16_t distanceMinIndex = -1;
 801280e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012812:	867b      	strh	r3, [r7, #50]	; 0x32
    for (int i = 0; i <available(); i++){
 8012814:	2300      	movs	r3, #0
 8012816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012818:	e040      	b.n	801289c <readArrowCenterParameterDirect+0x9c>
        HUSKYLENSResult resultBuffer = readDirect(i);
 801281a:	f107 0308 	add.w	r3, r7, #8
 801281e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012820:	4618      	mov	r0, r3
 8012822:	f000 fa85 	bl	8012d30 <readDirect>
        int32_t distance = sq((resultBuffer.xOrigin + resultBuffer.xTarget) / 2 - 320 / 2) + sq((resultBuffer.yOrigin + resultBuffer.yTarget) / 2 - 240 / 2);
 8012826:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801282a:	461a      	mov	r2, r3
 801282c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012830:	4413      	add	r3, r2
 8012832:	0fda      	lsrs	r2, r3, #31
 8012834:	4413      	add	r3, r2
 8012836:	105b      	asrs	r3, r3, #1
 8012838:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 801283c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012840:	4619      	mov	r1, r3
 8012842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012846:	440b      	add	r3, r1
 8012848:	0fd9      	lsrs	r1, r3, #31
 801284a:	440b      	add	r3, r1
 801284c:	105b      	asrs	r3, r3, #1
 801284e:	3ba0      	subs	r3, #160	; 0xa0
 8012850:	fb03 f202 	mul.w	r2, r3, r2
 8012854:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012858:	4619      	mov	r1, r3
 801285a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801285e:	440b      	add	r3, r1
 8012860:	0fd9      	lsrs	r1, r3, #31
 8012862:	440b      	add	r3, r1
 8012864:	105b      	asrs	r3, r3, #1
 8012866:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 801286a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801286e:	4618      	mov	r0, r3
 8012870:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012874:	4403      	add	r3, r0
 8012876:	0fd8      	lsrs	r0, r3, #31
 8012878:	4403      	add	r3, r0
 801287a:	105b      	asrs	r3, r3, #1
 801287c:	3b78      	subs	r3, #120	; 0x78
 801287e:	fb03 f301 	mul.w	r3, r3, r1
 8012882:	4413      	add	r3, r2
 8012884:	62bb      	str	r3, [r7, #40]	; 0x28
        if (distance < distanceMin)
 8012886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801288a:	429a      	cmp	r2, r3
 801288c:	da03      	bge.n	8012896 <readArrowCenterParameterDirect+0x96>
        {
            distanceMin = distance;
 801288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012890:	637b      	str	r3, [r7, #52]	; 0x34
            distanceMinIndex = i;
 8012892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012894:	867b      	strh	r3, [r7, #50]	; 0x32
    for (int i = 0; i <available(); i++){
 8012896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012898:	3301      	adds	r3, #1
 801289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801289c:	f000 f829 	bl	80128f2 <available>
 80128a0:	4602      	mov	r2, r0
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	4293      	cmp	r3, r2
 80128a6:	dbb8      	blt.n	801281a <readArrowCenterParameterDirect+0x1a>
        }
    }
    HUSKYLENSResult result = readDirect(distanceMinIndex);
 80128a8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80128ac:	f107 0318 	add.w	r3, r7, #24
 80128b0:	4611      	mov	r1, r2
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 fa3c 	bl	8012d30 <readDirect>
//    HUSKYLENSArrowDirectInfo arrow;
    arrow->xOrigin = result.xOrigin;
 80128b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80128bc:	461a      	mov	r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	601a      	str	r2, [r3, #0]
    arrow->yOrigin = result.yOrigin;
 80128c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80128c6:	461a      	mov	r2, r3
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	605a      	str	r2, [r3, #4]
    arrow->xTarget = result.xTarget;
 80128cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80128d0:	461a      	mov	r2, r3
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	609a      	str	r2, [r3, #8]
    arrow->yTarget = result.yTarget;
 80128d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128da:	461a      	mov	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	60da      	str	r2, [r3, #12]
    arrow->ID = result.ID;
 80128e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80128e4:	461a      	mov	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	611a      	str	r2, [r3, #16]
//    return arrow;
}
 80128ea:	bf00      	nop
 80128ec:	3738      	adds	r7, #56	; 0x38
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}

080128f2 <available>:

int available(){
 80128f2:	b580      	push	{r7, lr}
 80128f4:	af00      	add	r7, sp, #0
    return countArrows();
 80128f6:	f000 f8e1 	bl	8012abc <countArrows>
 80128fa:	4603      	mov	r3, r0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	bd80      	pop	{r7, pc}

08012900 <blocksreadDirect>:


HUSKYLENSResult blocksreadDirect(int index){
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
	return readBlockDirect(index);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6839      	ldr	r1, [r7, #0]
 801290e:	4618      	mov	r0, r3
 8012910:	f000 f804 	bl	801291c <readBlockDirect>
}
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <readBlockDirect>:

HUSKYLENSResult readBlockDirect(int index){
 801291c:	b590      	push	{r4, r7, lr}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    Protocol_t *protocol = readBlockProtocol(index);
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	b21b      	sxth	r3, r3
 801292a:	4618      	mov	r0, r3
 801292c:	f000 f818 	bl	8012960 <readBlockProtocol>
 8012930:	60f8      	str	r0, [r7, #12]
    return protocol ? *protocol : resultDefault;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d006      	beq.n	8012946 <readBlockDirect+0x2a>
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	4614      	mov	r4, r2
 801293e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012944:	e006      	b.n	8012954 <readBlockDirect+0x38>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a04      	ldr	r2, [pc, #16]	; (801295c <readBlockDirect+0x40>)
 801294a:	461c      	mov	r4, r3
 801294c:	4613      	mov	r3, r2
 801294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	3714      	adds	r7, #20
 8012958:	46bd      	mov	sp, r7
 801295a:	bd90      	pop	{r4, r7, pc}
 801295c:	200011c4 	.word	0x200011c4

08012960 <readBlockProtocol>:

Protocol_t *readBlockProtocol(int16_t index){
 8012960:	b480      	push	{r7}
 8012962:	b085      	sub	sp, #20
 8012964:	af00      	add	r7, sp, #0
 8012966:	4603      	mov	r3, r0
 8012968:	80fb      	strh	r3, [r7, #6]
    int16_t counter = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 801296e:	2300      	movs	r3, #0
 8012970:	60bb      	str	r3, [r7, #8]
 8012972:	e01a      	b.n	80129aa <readBlockProtocol+0x4a>
    {
        if (protocolPtr[i].command == COMMAND_RETURN_BLOCK)
 8012974:	4b13      	ldr	r3, [pc, #76]	; (80129c4 <readBlockProtocol+0x64>)
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	011b      	lsls	r3, r3, #4
 801297c:	4413      	add	r3, r2
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b2a      	cmp	r3, #42	; 0x2a
 8012982:	d10f      	bne.n	80129a4 <readBlockProtocol+0x44>
            if (index == counter++)
 8012984:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012988:	b29a      	uxth	r2, r3
 801298a:	3201      	adds	r2, #1
 801298c:	b292      	uxth	r2, r2
 801298e:	81fa      	strh	r2, [r7, #14]
 8012990:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012994:	429a      	cmp	r2, r3
 8012996:	d105      	bne.n	80129a4 <readBlockProtocol+0x44>
                return protocolPtr + i;
 8012998:	4b0a      	ldr	r3, [pc, #40]	; (80129c4 <readBlockProtocol+0x64>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	011b      	lsls	r3, r3, #4
 80129a0:	4413      	add	r3, r2
 80129a2:	e00a      	b.n	80129ba <readBlockProtocol+0x5a>
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	3301      	adds	r3, #1
 80129a8:	60bb      	str	r3, [r7, #8]
 80129aa:	4b07      	ldr	r3, [pc, #28]	; (80129c8 <readBlockProtocol+0x68>)
 80129ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80129b0:	461a      	mov	r2, r3
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	4293      	cmp	r3, r2
 80129b6:	dbdd      	blt.n	8012974 <readBlockProtocol+0x14>
    }
    return NULL;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3714      	adds	r7, #20
 80129be:	46bd      	mov	sp, r7
 80129c0:	bc80      	pop	{r7}
 80129c2:	4770      	bx	lr
 80129c4:	200005d0 	.word	0x200005d0
 80129c8:	200011b4 	.word	0x200011b4

080129cc <blocksavailable>:

int blocksavailable(){
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
	return countBlocks();
 80129d0:	f000 f804 	bl	80129dc <countBlocks>
 80129d4:	4603      	mov	r3, r0
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	bd80      	pop	{r7, pc}
	...

080129dc <countBlocks>:

int16_t countBlocks(){
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
    int16_t counter = 0;
 80129e2:	2300      	movs	r3, #0
 80129e4:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 80129e6:	2300      	movs	r3, #0
 80129e8:	603b      	str	r3, [r7, #0]
 80129ea:	e010      	b.n	8012a0e <countBlocks+0x32>
        if (protocolPtr[i].command == COMMAND_RETURN_BLOCK)
 80129ec:	4b0f      	ldr	r3, [pc, #60]	; (8012a2c <countBlocks+0x50>)
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	011b      	lsls	r3, r3, #4
 80129f4:	4413      	add	r3, r2
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	2b2a      	cmp	r3, #42	; 0x2a
 80129fa:	d105      	bne.n	8012a08 <countBlocks+0x2c>
            counter++;
 80129fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	3301      	adds	r3, #1
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	603b      	str	r3, [r7, #0]
 8012a0e:	4b08      	ldr	r3, [pc, #32]	; (8012a30 <countBlocks+0x54>)
 8012a10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a14:	461a      	mov	r2, r3
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	dbe7      	blt.n	80129ec <countBlocks+0x10>
    }
    return counter;
 8012a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	370c      	adds	r7, #12
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bc80      	pop	{r7}
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	200005d0 	.word	0x200005d0
 8012a30:	200011b4 	.word	0x200011b4

08012a34 <isLearned>:

//哈士奇从结果中获取ID。。是否已学习
uint8_t isLearned(int ID){
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]

    return (ID <= countLearnedIDs()) && ID > 0;
 8012a3c:	f000 f810 	bl	8012a60 <countLearnedIDs>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	4293      	cmp	r3, r2
 8012a48:	dc04      	bgt.n	8012a54 <isLearned+0x20>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	dd01      	ble.n	8012a54 <isLearned+0x20>
 8012a50:	2301      	movs	r3, #1
 8012a52:	e000      	b.n	8012a56 <isLearned+0x22>
 8012a54:	2300      	movs	r3, #0
 8012a56:	b2db      	uxtb	r3, r3
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <countLearnedIDs>:

int16_t countLearnedIDs(){
 8012a60:	b480      	push	{r7}
 8012a62:	af00      	add	r7, sp, #0
    return protocolInfo.knowledgeSize;
 8012a64:	4b03      	ldr	r3, [pc, #12]	; (8012a74 <countLearnedIDs+0x14>)
 8012a66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bc80      	pop	{r7}
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	200011b4 	.word	0x200011b4

08012a78 <isAppear>:

//哈士奇从结果中获取ID是否在画面中

uint8_t isAppear(int ID, HUSKYLENSResultType type){
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	460b      	mov	r3, r1
 8012a82:	70fb      	strb	r3, [r7, #3]
    switch (type){
 8012a84:	78fb      	ldrb	r3, [r7, #3]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d002      	beq.n	8012a90 <isAppear+0x18>
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d008      	beq.n	8012aa0 <isAppear+0x28>
 8012a8e:	e00f      	b.n	8012ab0 <isAppear+0x38>
    case HUSKYLENSResultBlock:
        return countIDBlocks(ID);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	b21b      	sxth	r3, r3
 8012a94:	4618      	mov	r0, r3
 8012a96:	f000 f959 	bl	8012d4c <countIDBlocks>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	e008      	b.n	8012ab2 <isAppear+0x3a>
    case HUSKYLENSResultArrow:
        return countIDArrows(ID);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	b21b      	sxth	r3, r3
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f000 f989 	bl	8012dbc <countIDArrows>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	e000      	b.n	8012ab2 <isAppear+0x3a>
    default:
        return 0;
 8012ab0:	2300      	movs	r3, #0
    }
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
	...

08012abc <countArrows>:

int16_t countArrows(){
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
    int16_t counter = 0;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	603b      	str	r3, [r7, #0]
 8012aca:	e010      	b.n	8012aee <countArrows+0x32>
        if (protocolPtr[i].command == COMMAND_RETURN_ARROW)
 8012acc:	4b0f      	ldr	r3, [pc, #60]	; (8012b0c <countArrows+0x50>)
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	011b      	lsls	r3, r3, #4
 8012ad4:	4413      	add	r3, r2
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	2b2b      	cmp	r3, #43	; 0x2b
 8012ada:	d105      	bne.n	8012ae8 <countArrows+0x2c>
            counter++;
 8012adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < protocolInfo.protocolSize; i++){
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	3301      	adds	r3, #1
 8012aec:	603b      	str	r3, [r7, #0]
 8012aee:	4b08      	ldr	r3, [pc, #32]	; (8012b10 <countArrows+0x54>)
 8012af0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012af4:	461a      	mov	r2, r3
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	4293      	cmp	r3, r2
 8012afa:	dbe7      	blt.n	8012acc <countArrows+0x10>
    }
    return counter;
 8012afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bc80      	pop	{r7}
 8012b08:	4770      	bx	lr
 8012b0a:	bf00      	nop
 8012b0c:	200005d0 	.word	0x200005d0
 8012b10:	200011b4 	.word	0x200011b4

08012b14 <readBlockParameter>:

//哈士奇从结果中获取ID的参数

HUSKYLENSBlockInfo readBlockParameter(int ID, int index){
 8012b14:	b590      	push	{r4, r7, lr}
 8012b16:	b08d      	sub	sp, #52	; 0x34
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
    HUSKYLENSResult result = read(ID, index - 1);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	1e5a      	subs	r2, r3, #1
 8012b24:	f107 0320 	add.w	r3, r7, #32
 8012b28:	68b9      	ldr	r1, [r7, #8]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f000 f817 	bl	8012b5e <read>
    HUSKYLENSBlockInfo block;
    block.xCenter = result.xCenter;
 8012b30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b34:	613b      	str	r3, [r7, #16]
    block.yCenter = result.yCenter;
 8012b36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012b3a:	617b      	str	r3, [r7, #20]
    block.width = result.width;
 8012b3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b40:	61bb      	str	r3, [r7, #24]
    block.height = result.height;
 8012b42:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012b46:	61fb      	str	r3, [r7, #28]
    return block;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	461c      	mov	r4, r3
 8012b4c:	f107 0310 	add.w	r3, r7, #16
 8012b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	3734      	adds	r7, #52	; 0x34
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd90      	pop	{r4, r7, pc}

08012b5e <read>:
HUSKYLENSResult read(int ID, int index){
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b084      	sub	sp, #16
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	607a      	str	r2, [r7, #4]
    return readBlock(ID, index);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	68b9      	ldr	r1, [r7, #8]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 f805 	bl	8012b80 <readBlock>
}
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
	...

08012b80 <readBlock>:

HUSKYLENSResult readBlock(int ID , int index){
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b087      	sub	sp, #28
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
    Protocol_t *protocol = readBlockByIDProtocol(ID, index);
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	b21b      	sxth	r3, r3
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	b212      	sxth	r2, r2
 8012b94:	4611      	mov	r1, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f000 f818 	bl	8012bcc <readBlockByIDProtocol>
 8012b9c:	6178      	str	r0, [r7, #20]
    return protocol ? *protocol : resultDefault;
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d006      	beq.n	8012bb2 <readBlock+0x32>
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	4614      	mov	r4, r2
 8012baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012bb0:	e006      	b.n	8012bc0 <readBlock+0x40>
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	4a04      	ldr	r2, [pc, #16]	; (8012bc8 <readBlock+0x48>)
 8012bb6:	461c      	mov	r4, r3
 8012bb8:	4613      	mov	r3, r2
 8012bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012bc0:	68f8      	ldr	r0, [r7, #12]
 8012bc2:	371c      	adds	r7, #28
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd90      	pop	{r4, r7, pc}
 8012bc8:	200011c4 	.word	0x200011c4

08012bcc <readBlockByIDProtocol>:

Protocol_t *readBlockByIDProtocol(int16_t ID, int16_t index){
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	460a      	mov	r2, r1
 8012bd6:	80fb      	strh	r3, [r7, #6]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	80bb      	strh	r3, [r7, #4]
    int16_t counter = 0;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012be0:	2300      	movs	r3, #0
 8012be2:	60bb      	str	r3, [r7, #8]
 8012be4:	e025      	b.n	8012c32 <readBlockByIDProtocol+0x66>
    {
        if (protocolPtr[i].command == COMMAND_RETURN_BLOCK && protocolPtr[i].ID == ID)
 8012be6:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <readBlockByIDProtocol+0x80>)
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	011b      	lsls	r3, r3, #4
 8012bee:	4413      	add	r3, r2
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8012bf4:	d11a      	bne.n	8012c2c <readBlockByIDProtocol+0x60>
 8012bf6:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <readBlockByIDProtocol+0x80>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	011b      	lsls	r3, r3, #4
 8012bfe:	4413      	add	r3, r2
 8012c00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012c04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d10f      	bne.n	8012c2c <readBlockByIDProtocol+0x60>
            if (index == counter++)
 8012c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	3201      	adds	r2, #1
 8012c14:	b292      	uxth	r2, r2
 8012c16:	81fa      	strh	r2, [r7, #14]
 8012c18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d105      	bne.n	8012c2c <readBlockByIDProtocol+0x60>
                return protocolPtr + i;
 8012c20:	4b0a      	ldr	r3, [pc, #40]	; (8012c4c <readBlockByIDProtocol+0x80>)
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	011b      	lsls	r3, r3, #4
 8012c28:	4413      	add	r3, r2
 8012c2a:	e00a      	b.n	8012c42 <readBlockByIDProtocol+0x76>
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	60bb      	str	r3, [r7, #8]
 8012c32:	4b07      	ldr	r3, [pc, #28]	; (8012c50 <readBlockByIDProtocol+0x84>)
 8012c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	dbd2      	blt.n	8012be6 <readBlockByIDProtocol+0x1a>
    }
    return NULL;
 8012c40:	2300      	movs	r3, #0
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3714      	adds	r7, #20
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bc80      	pop	{r7}
 8012c4a:	4770      	bx	lr
 8012c4c:	200005d0 	.word	0x200005d0
 8012c50:	200011b4 	.word	0x200011b4

08012c54 <readArrowParameter>:

HUSKYLENSArrowInfo readArrowParameter(int ID, int index){
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b08d      	sub	sp, #52	; 0x34
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
    HUSKYLENSResult result = arrowsread(ID, index - 1);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	1e5a      	subs	r2, r3, #1
 8012c64:	f107 0320 	add.w	r3, r7, #32
 8012c68:	68b9      	ldr	r1, [r7, #8]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f000 f818 	bl	8012ca0 <arrowsread>
    HUSKYLENSArrowInfo arrow;
    arrow.xOrigin = result.xOrigin;
 8012c70:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012c74:	613b      	str	r3, [r7, #16]
    arrow.yOrigin = result.yOrigin;
 8012c76:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012c7a:	617b      	str	r3, [r7, #20]
    arrow.xTarget = result.xTarget;
 8012c7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012c80:	61bb      	str	r3, [r7, #24]
    arrow.yTarget = result.yTarget;
 8012c82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012c86:	61fb      	str	r3, [r7, #28]
    return arrow;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	461c      	mov	r4, r3
 8012c8c:	f107 0310 	add.w	r3, r7, #16
 8012c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012c96:	68f8      	ldr	r0, [r7, #12]
 8012c98:	3734      	adds	r7, #52	; 0x34
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd90      	pop	{r4, r7, pc}
	...

08012ca0 <arrowsread>:

HUSKYLENSResult arrowsread(int ID, int index){
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b087      	sub	sp, #28
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	60f8      	str	r0, [r7, #12]
 8012ca8:	60b9      	str	r1, [r7, #8]
 8012caa:	607a      	str	r2, [r7, #4]
    Protocol_t *protocol = readBlockByIDProtocol(ID, index);
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	b21b      	sxth	r3, r3
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	b212      	sxth	r2, r2
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff ff88 	bl	8012bcc <readBlockByIDProtocol>
 8012cbc:	6178      	str	r0, [r7, #20]
    return protocol ? *protocol : resultDefault;
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d006      	beq.n	8012cd2 <arrowsread+0x32>
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	4614      	mov	r4, r2
 8012cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012cd0:	e006      	b.n	8012ce0 <arrowsread+0x40>
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	4a04      	ldr	r2, [pc, #16]	; (8012ce8 <arrowsread+0x48>)
 8012cd6:	461c      	mov	r4, r3
 8012cd8:	4613      	mov	r3, r2
 8012cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	371c      	adds	r7, #28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd90      	pop	{r4, r7, pc}
 8012ce8:	200011c4 	.word	0x200011c4

08012cec <readALLCount>:

//哈士奇从结果中获取方框总数
float readALLCount(HUSKYLENSResultType type){
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	71fb      	strb	r3, [r7, #7]
    switch (type){
 8012cf6:	79fb      	ldrb	r3, [r7, #7]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <readALLCount+0x16>
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d008      	beq.n	8012d12 <readALLCount+0x26>
 8012d00:	e00f      	b.n	8012d22 <readALLCount+0x36>
    case HUSKYLENSResultBlock:
        return countBlocks();
 8012d02:	f7ff fe6b 	bl	80129dc <countBlocks>
 8012d06:	4603      	mov	r3, r0
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fc f853 	bl	800edb4 <__aeabi_i2f>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	e008      	b.n	8012d24 <readALLCount+0x38>
    case HUSKYLENSResultArrow:
        return countArrows();
 8012d12:	f7ff fed3 	bl	8012abc <countArrows>
 8012d16:	4603      	mov	r3, r0
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fc f84b 	bl	800edb4 <__aeabi_i2f>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	e000      	b.n	8012d24 <readALLCount+0x38>
    default:
        return -1.0f;
 8012d22:	4b02      	ldr	r3, [pc, #8]	; (8012d2c <readALLCount+0x40>)
    }
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	bf800000 	.word	0xbf800000

08012d30 <readDirect>:
    block.height = result.height;
    block.ID = result.ID;
    return block;
}

HUSKYLENSResult readDirect(int index){
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
    return readBlockDirect(index);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff fdec 	bl	801291c <readBlockDirect>
}
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	3708      	adds	r7, #8
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <countIDBlocks>:
			return countIDArrows(ID);
		default:
			return -1.0f;
    }
}
int16_t countIDBlocks(int16_t ID){
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	4603      	mov	r3, r0
 8012d54:	80fb      	strh	r3, [r7, #6]
    int16_t counter = 0;
 8012d56:	2300      	movs	r3, #0
 8012d58:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	60bb      	str	r3, [r7, #8]
 8012d5e:	e01b      	b.n	8012d98 <countIDBlocks+0x4c>
    {
        if (protocolPtr[i].command == COMMAND_RETURN_BLOCK && protocolPtr[i].ID == ID)
 8012d60:	4b14      	ldr	r3, [pc, #80]	; (8012db4 <countIDBlocks+0x68>)
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	011b      	lsls	r3, r3, #4
 8012d68:	4413      	add	r3, r2
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d6e:	d110      	bne.n	8012d92 <countIDBlocks+0x46>
 8012d70:	4b10      	ldr	r3, [pc, #64]	; (8012db4 <countIDBlocks+0x68>)
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	011b      	lsls	r3, r3, #4
 8012d78:	4413      	add	r3, r2
 8012d7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012d7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d105      	bne.n	8012d92 <countIDBlocks+0x46>
            counter++;
 8012d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	3301      	adds	r3, #1
 8012d96:	60bb      	str	r3, [r7, #8]
 8012d98:	4b07      	ldr	r3, [pc, #28]	; (8012db8 <countIDBlocks+0x6c>)
 8012d9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	4293      	cmp	r3, r2
 8012da4:	dbdc      	blt.n	8012d60 <countIDBlocks+0x14>
    }
    return counter;
 8012da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3714      	adds	r7, #20
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bc80      	pop	{r7}
 8012db2:	4770      	bx	lr
 8012db4:	200005d0 	.word	0x200005d0
 8012db8:	200011b4 	.word	0x200011b4

08012dbc <countIDArrows>:
int16_t countIDArrows(int16_t ID){
 8012dbc:	b480      	push	{r7}
 8012dbe:	b085      	sub	sp, #20
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	80fb      	strh	r3, [r7, #6]
    int16_t counter = 0;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012dca:	2300      	movs	r3, #0
 8012dcc:	60bb      	str	r3, [r7, #8]
 8012dce:	e01b      	b.n	8012e08 <countIDArrows+0x4c>
    {
        if (protocolPtr[i].command == COMMAND_RETURN_ARROW && protocolPtr[i].ID == ID)
 8012dd0:	4b14      	ldr	r3, [pc, #80]	; (8012e24 <countIDArrows+0x68>)
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	011b      	lsls	r3, r3, #4
 8012dd8:	4413      	add	r3, r2
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8012dde:	d110      	bne.n	8012e02 <countIDArrows+0x46>
 8012de0:	4b10      	ldr	r3, [pc, #64]	; (8012e24 <countIDArrows+0x68>)
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	011b      	lsls	r3, r3, #4
 8012de8:	4413      	add	r3, r2
 8012dea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d105      	bne.n	8012e02 <countIDArrows+0x46>
            counter++;
 8012df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < protocolInfo.protocolSize; i++)
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	3301      	adds	r3, #1
 8012e06:	60bb      	str	r3, [r7, #8]
 8012e08:	4b07      	ldr	r3, [pc, #28]	; (8012e28 <countIDArrows+0x6c>)
 8012e0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	4293      	cmp	r3, r2
 8012e14:	dbdc      	blt.n	8012dd0 <countIDArrows+0x14>
    }
    return counter;
 8012e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3714      	adds	r7, #20
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bc80      	pop	{r7}
 8012e22:	4770      	bx	lr
 8012e24:	200005d0 	.word	0x200005d0
 8012e28:	200011b4 	.word	0x200011b4

08012e2c <forgetLearn>:

//遗忘现在已经学习的全部数据
uint8_t forgetLearn(){
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
	Protocol_t protocol;
    protocolWriteRequestForgetLearn(&protocol);
 8012e32:	463b      	mov	r3, r7
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff f831 	bl	8011e9c <protocolWriteRequestForgetLearn>
    return wait(COMMAND_RETURN_OK);
 8012e3a:	202e      	movs	r0, #46	; 0x2e
 8012e3c:	f7ff f924 	bl	8012088 <wait>
 8012e40:	4603      	mov	r3, r0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <learnOnece>:

//哈士奇自动学习一次
uint8_t learnOnece(uint16_t id){
 8012e4a:	b580      	push	{r7, lr}
 8012e4c:	b088      	sub	sp, #32
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	4603      	mov	r3, r0
 8012e52:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {id & 0xff, (id >> 8) & 0xff};
 8012e54:	88fb      	ldrh	r3, [r7, #6]
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	773b      	strb	r3, [r7, #28]
 8012e5a:	88fb      	ldrh	r3, [r7, #6]
 8012e5c:	0a1b      	lsrs	r3, r3, #8
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	777b      	strb	r3, [r7, #29]
    Protocol_t protocol;
    protocol.length = 2;
 8012e64:	2302      	movs	r3, #2
 8012e66:	82fb      	strh	r3, [r7, #22]
    protocol.data = data;
 8012e68:	f107 031c 	add.w	r3, r7, #28
 8012e6c:	61bb      	str	r3, [r7, #24]
    protocolWriteRequestLearnOnece(&protocol);
 8012e6e:	f107 030c 	add.w	r3, r7, #12
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff f881 	bl	8011f7a <protocolWriteRequestLearnOnece>
    return wait(COMMAND_RETURN_OK);
 8012e78:	202e      	movs	r0, #46	; 0x2e
 8012e7a:	f7ff f905 	bl	8012088 <wait>
 8012e7e:	4603      	mov	r3, r0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3720      	adds	r7, #32
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <writeName>:

//给当前算法的当前ID改名字
uint8_t writeName(const char*name, uint8_t id){
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b0a2      	sub	sp, #136	; 0x88
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	460b      	mov	r3, r1
 8012e92:	70fb      	strb	r3, [r7, #3]
    Protocol_t protocol;
    uint8_t nameLength = strlen(name);
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7fb f9c7 	bl	800e228 <strlen>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    uint8_t data[100] = {id, (nameLength + 1) * 2};
 8012ea0:	f107 030c 	add.w	r3, r7, #12
 8012ea4:	2264      	movs	r2, #100	; 0x64
 8012ea6:	2100      	movs	r1, #0
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f00a ff54 	bl	801dd56 <memset>
 8012eae:	78fb      	ldrb	r3, [r7, #3]
 8012eb0:	733b      	strb	r3, [r7, #12]
 8012eb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	005b      	lsls	r3, r3, #1
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	737b      	strb	r3, [r7, #13]
    for(int i=0;i<nameLength;i++){
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ec6:	e011      	b.n	8012eec <writeName+0x64>
    	data[i+2]=name[i];
 8012ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	441a      	add	r2, r3
 8012ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ed4:	3302      	adds	r3, #2
 8012ed6:	7812      	ldrb	r2, [r2, #0]
 8012ed8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8012edc:	440b      	add	r3, r1
 8012ede:	f803 2c7c 	strb.w	r2, [r3, #-124]
    for(int i=0;i<nameLength;i++){
 8012ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012eec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012ef0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	dbe7      	blt.n	8012ec8 <writeName+0x40>
    }
    protocol.length = nameLength + 3;
 8012ef8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	3303      	adds	r3, #3
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	b21b      	sxth	r3, r3
 8012f04:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    protocol.data = data;
 8012f08:	f107 030c 	add.w	r3, r7, #12
 8012f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    protocolWriteRequestName(&protocol);
 8012f0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ff f825 	bl	8011f62 <protocolWriteRequestName>
    return wait(COMMAND_RETURN_OK);
 8012f18:	202e      	movs	r0, #46	; 0x2e
 8012f1a:	f7ff f8b5 	bl	8012088 <wait>
 8012f1e:	4603      	mov	r3, r0
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3788      	adds	r7, #136	; 0x88
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}

08012f28 <takePhotoToSDCard>:
//拍照
uint8_t takePhotoToSDCard(){
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
	Protocol_t protocol;
    protocolWriteRequestTakePhotoToSDCard(&protocol);
 8012f2e:	463b      	mov	r3, r7
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7fe ffa7 	bl	8011e84 <protocolWriteRequestTakePhotoToSDCard>
    return wait(COMMAND_RETURN_OK);
 8012f36:	202e      	movs	r0, #46	; 0x2e
 8012f38:	f7ff f8a6 	bl	8012088 <wait>
 8012f3c:	4603      	mov	r3, r0
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <saveModelToTFCard>:

//保存/加载到SD卡
uint8_t saveModelToTFCard(uint16_t index){
 8012f46:	b580      	push	{r7, lr}
 8012f48:	b088      	sub	sp, #32
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {index & 0xff, (index >> 8) & 0xff};
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	773b      	strb	r3, [r7, #28]
 8012f56:	88fb      	ldrh	r3, [r7, #6]
 8012f58:	0a1b      	lsrs	r3, r3, #8
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	777b      	strb	r3, [r7, #29]
    Protocol_t protocol;
    protocol.length = 2;
 8012f60:	2302      	movs	r3, #2
 8012f62:	82fb      	strh	r3, [r7, #22]
    protocol.data = data;
 8012f64:	f107 031c 	add.w	r3, r7, #28
 8012f68:	61bb      	str	r3, [r7, #24]
    protocolWriteRequestSaveModelToTFCard(&protocol);
 8012f6a:	f107 030c 	add.w	r3, r7, #12
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe ffa0 	bl	8011eb4 <protocolWriteRequestSaveModelToTFCard>
    return wait(COMMAND_RETURN_OK);
 8012f74:	202e      	movs	r0, #46	; 0x2e
 8012f76:	f7ff f887 	bl	8012088 <wait>
 8012f7a:	4603      	mov	r3, r0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3720      	adds	r7, #32
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <loadModelFromTFCard>:

uint8_t loadModelFromTFCard(uint16_t index){
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {index & 0xff, (index >> 8) & 0xff};
 8012f8e:	88fb      	ldrh	r3, [r7, #6]
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	773b      	strb	r3, [r7, #28]
 8012f94:	88fb      	ldrh	r3, [r7, #6]
 8012f96:	0a1b      	lsrs	r3, r3, #8
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	777b      	strb	r3, [r7, #29]
    Protocol_t protocol;
    protocol.length = 2;
 8012f9e:	2302      	movs	r3, #2
 8012fa0:	82fb      	strh	r3, [r7, #22]
    protocol.data = data;
 8012fa2:	f107 031c 	add.w	r3, r7, #28
 8012fa6:	61bb      	str	r3, [r7, #24]
    protocolWriteRequestLoadModelFromTFCard(&protocol);
 8012fa8:	f107 030c 	add.w	r3, r7, #12
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fe ff8d 	bl	8011ecc <protocolWriteRequestLoadModelFromTFCard>
    return 0;
 8012fb2:	2300      	movs	r3, #0
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3720      	adds	r7, #32
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <reoprt_sysex>:
 */
#include "firmata.h"
#include "string.h"
#include <DFRobot_usbd_cdc_if.h>
#if 1
static void reoprt_sysex(uint8_t command, uint8_t argc, uint8_t *argv){
 8012fbc:	b590      	push	{r4, r7, lr}
 8012fbe:	b0cf      	sub	sp, #316	; 0x13c
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	f107 0310 	add.w	r3, r7, #16
 8012fc6:	601a      	str	r2, [r3, #0]
 8012fc8:	f107 0317 	add.w	r3, r7, #23
 8012fcc:	4602      	mov	r2, r0
 8012fce:	701a      	strb	r2, [r3, #0]
 8012fd0:	f107 0316 	add.w	r3, r7, #22
 8012fd4:	460a      	mov	r2, r1
 8012fd6:	701a      	strb	r2, [r3, #0]
	uint8_t mode = 0;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
	uint8_t txbuffer[50]={0xf0,0x0d,0};
 8012fde:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012fe2:	2232      	movs	r2, #50	; 0x32
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f00a feb5 	bl	801dd56 <memset>
 8012fec:	23f0      	movs	r3, #240	; 0xf0
 8012fee:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8012ff2:	230d      	movs	r3, #13
 8012ff4:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
	HUSKYLENSBlockInfo BI;
	HUSKYLENSArrowInfo AI;
	int CT;
	int x ;
	int y ;
	switch(command){
 8012ff8:	f107 0317 	add.w	r3, r7, #23
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	2b51      	cmp	r3, #81	; 0x51
 8013000:	f000 860c 	beq.w	8013c1c <reoprt_sysex+0xc60>
 8013004:	2b76      	cmp	r3, #118	; 0x76
 8013006:	f000 860b 	beq.w	8013c20 <reoprt_sysex+0xc64>
 801300a:	2b0d      	cmp	r3, #13
 801300c:	d001      	beq.n	8013012 <reoprt_sysex+0x56>
				default:
					break;
			}
			break;
		default :
			break;
 801300e:	f000 be08 	b.w	8013c22 <reoprt_sysex+0xc66>
			mode = argv[0];
 8013012:	f107 0310 	add.w	r3, r7, #16
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
			float acceleration=0.0;
 801301e:	f04f 0300 	mov.w	r3, #0
 8013022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			uint8_t Accbuf[5]={0xf0,0x0d,0x00,0x00,0xf7};
 8013026:	f107 0320 	add.w	r3, r7, #32
 801302a:	4add      	ldr	r2, [pc, #884]	; (80133a0 <reoprt_sysex+0x3e4>)
 801302c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013030:	6018      	str	r0, [r3, #0]
 8013032:	3304      	adds	r3, #4
 8013034:	7019      	strb	r1, [r3, #0]
			uint8_t symbol=0;//0:正；1：负
 8013036:	2300      	movs	r3, #0
 8013038:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			uint8_t data=0;
 801303c:	2300      	movs	r3, #0
 801303e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			uint8_t stepbuf[7]={0xf0,0x0d,0x00,0x00,0x00,0x00,0xf7};
 8013042:	f107 0318 	add.w	r3, r7, #24
 8013046:	4ad7      	ldr	r2, [pc, #860]	; (80133a4 <reoprt_sysex+0x3e8>)
 8013048:	e892 0003 	ldmia.w	r2, {r0, r1}
 801304c:	6018      	str	r0, [r3, #0]
 801304e:	3304      	adds	r3, #4
 8013050:	8019      	strh	r1, [r3, #0]
 8013052:	3302      	adds	r3, #2
 8013054:	0c0a      	lsrs	r2, r1, #16
 8013056:	701a      	strb	r2, [r3, #0]
			uint32_t step=0;
 8013058:	2300      	movs	r3, #0
 801305a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			uint8_t addr=0;
 801305e:	2300      	movs	r3, #0
 8013060:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
			switch(mode){
 8013064:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8013068:	2b03      	cmp	r3, #3
 801306a:	f200 85d1 	bhi.w	8013c10 <reoprt_sysex+0xc54>
 801306e:	a201      	add	r2, pc, #4	; (adr r2, 8013074 <reoprt_sysex+0xb8>)
 8013070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013074:	08013085 	.word	0x08013085
 8013078:	080132a5 	.word	0x080132a5
 801307c:	08013b63 	.word	0x08013b63
 8013080:	08013b79 	.word	0x08013b79
					if(argv[1]==GYROSCOPE_BEGIN){
 8013084:	f107 0310 	add.w	r3, r7, #16
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	3301      	adds	r3, #1
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d121      	bne.n	80130d6 <reoprt_sysex+0x11a>
						if(argv[3]==0)
 8013092:	f107 0310 	add.w	r3, r7, #16
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	3303      	adds	r3, #3
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d103      	bne.n	80130a8 <reoprt_sysex+0xec>
							addr=0x68;
 80130a0:	2368      	movs	r3, #104	; 0x68
 80130a2:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 80130a6:	e009      	b.n	80130bc <reoprt_sysex+0x100>
						else if(argv[3]==1)
 80130a8:	f107 0310 	add.w	r3, r7, #16
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	3303      	adds	r3, #3
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d102      	bne.n	80130bc <reoprt_sysex+0x100>
							addr=0x69;
 80130b6:	2369      	movs	r3, #105	; 0x69
 80130b8:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
						begin(argv[2],addr);
 80130bc:	f107 0310 	add.w	r3, r7, #16
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	3302      	adds	r3, #2
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	f897 2132 	ldrb.w	r2, [r7, #306]	; 0x132
 80130ca:	4611      	mov	r1, r2
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fc f8d1 	bl	800f274 <begin>
					break;
 80130d2:	f000 bd9f 	b.w	8013c14 <reoprt_sysex+0xc58>
					}else if(argv[1]==GYROSCOPE_GET_MESSAGE){
 80130d6:	f107 0310 	add.w	r3, r7, #16
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	3301      	adds	r3, #1
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	f040 8597 	bne.w	8013c14 <reoprt_sysex+0xc58>
						switch(argv[2]){
 80130e6:	f107 0310 	add.w	r3, r7, #16
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	3302      	adds	r3, #2
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2b03      	cmp	r3, #3
 80130f2:	f200 80d4 	bhi.w	801329e <reoprt_sysex+0x2e2>
 80130f6:	a201      	add	r2, pc, #4	; (adr r2, 80130fc <reoprt_sysex+0x140>)
 80130f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130fc:	0801310d 	.word	0x0801310d
 8013100:	08013179 	.word	0x08013179
 8013104:	080131e5 	.word	0x080131e5
 8013108:	08013251 	.word	0x08013251
								acceleration=getAccX();
 801310c:	f7fd f92c 	bl	8010368 <getAccX>
 8013110:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
								if(acceleration<0)
 8013114:	f04f 0100 	mov.w	r1, #0
 8013118:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801311c:	f7fc f83c 	bl	800f198 <__aeabi_fcmplt>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <reoprt_sysex+0x170>
									symbol=1;
 8013126:	2301      	movs	r3, #1
 8013128:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
								data=(uint8_t)(fabs(acceleration)*100);
 801312c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013134:	4618      	mov	r0, r3
 8013136:	f7fb f9e3 	bl	800e500 <__aeabi_f2d>
 801313a:	f04f 0200 	mov.w	r2, #0
 801313e:	4b9a      	ldr	r3, [pc, #616]	; (80133a8 <reoprt_sysex+0x3ec>)
 8013140:	f7fb fa36 	bl	800e5b0 <__aeabi_dmul>
 8013144:	4603      	mov	r3, r0
 8013146:	460c      	mov	r4, r1
 8013148:	4618      	mov	r0, r3
 801314a:	4621      	mov	r1, r4
 801314c:	f7fb fd08 	bl	800eb60 <__aeabi_d2uiz>
 8013150:	4603      	mov	r3, r0
 8013152:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
								Accbuf[2]=symbol;
 8013156:	f107 0320 	add.w	r3, r7, #32
 801315a:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 801315e:	709a      	strb	r2, [r3, #2]
								Accbuf[3]=data;
 8013160:	f107 0320 	add.w	r3, r7, #32
 8013164:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8013168:	70da      	strb	r2, [r3, #3]
								DFR_CDC_Transmit_FS(Accbuf,5);
 801316a:	f107 0320 	add.w	r3, r7, #32
 801316e:	2105      	movs	r1, #5
 8013170:	4618      	mov	r0, r3
 8013172:	f7fe fa57 	bl	8011624 <DFR_CDC_Transmit_FS>
								break;
 8013176:	e093      	b.n	80132a0 <reoprt_sysex+0x2e4>
								acceleration=getAccY();
 8013178:	f7fd f91e 	bl	80103b8 <getAccY>
 801317c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
								if(acceleration<0)
 8013180:	f04f 0100 	mov.w	r1, #0
 8013184:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013188:	f7fc f806 	bl	800f198 <__aeabi_fcmplt>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d002      	beq.n	8013198 <reoprt_sysex+0x1dc>
									symbol=1;
 8013192:	2301      	movs	r3, #1
 8013194:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
								data=(uint8_t)(fabs(acceleration)*100);
 8013198:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801319c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fb f9ad 	bl	800e500 <__aeabi_f2d>
 80131a6:	f04f 0200 	mov.w	r2, #0
 80131aa:	4b7f      	ldr	r3, [pc, #508]	; (80133a8 <reoprt_sysex+0x3ec>)
 80131ac:	f7fb fa00 	bl	800e5b0 <__aeabi_dmul>
 80131b0:	4603      	mov	r3, r0
 80131b2:	460c      	mov	r4, r1
 80131b4:	4618      	mov	r0, r3
 80131b6:	4621      	mov	r1, r4
 80131b8:	f7fb fcd2 	bl	800eb60 <__aeabi_d2uiz>
 80131bc:	4603      	mov	r3, r0
 80131be:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
								Accbuf[2]=symbol;
 80131c2:	f107 0320 	add.w	r3, r7, #32
 80131c6:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80131ca:	709a      	strb	r2, [r3, #2]
								Accbuf[3]=data;
 80131cc:	f107 0320 	add.w	r3, r7, #32
 80131d0:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80131d4:	70da      	strb	r2, [r3, #3]
								DFR_CDC_Transmit_FS(Accbuf,5);
 80131d6:	f107 0320 	add.w	r3, r7, #32
 80131da:	2105      	movs	r1, #5
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fe fa21 	bl	8011624 <DFR_CDC_Transmit_FS>
								break;
 80131e2:	e05d      	b.n	80132a0 <reoprt_sysex+0x2e4>
								acceleration=getAccZ();
 80131e4:	f7fd f910 	bl	8010408 <getAccZ>
 80131e8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
								if(acceleration<0)
 80131ec:	f04f 0100 	mov.w	r1, #0
 80131f0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80131f4:	f7fb ffd0 	bl	800f198 <__aeabi_fcmplt>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d002      	beq.n	8013204 <reoprt_sysex+0x248>
									symbol=1;
 80131fe:	2301      	movs	r3, #1
 8013200:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
								data=(uint8_t)(fabs(acceleration)*100);
 8013204:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801320c:	4618      	mov	r0, r3
 801320e:	f7fb f977 	bl	800e500 <__aeabi_f2d>
 8013212:	f04f 0200 	mov.w	r2, #0
 8013216:	4b64      	ldr	r3, [pc, #400]	; (80133a8 <reoprt_sysex+0x3ec>)
 8013218:	f7fb f9ca 	bl	800e5b0 <__aeabi_dmul>
 801321c:	4603      	mov	r3, r0
 801321e:	460c      	mov	r4, r1
 8013220:	4618      	mov	r0, r3
 8013222:	4621      	mov	r1, r4
 8013224:	f7fb fc9c 	bl	800eb60 <__aeabi_d2uiz>
 8013228:	4603      	mov	r3, r0
 801322a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
								Accbuf[2]=symbol;
 801322e:	f107 0320 	add.w	r3, r7, #32
 8013232:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8013236:	709a      	strb	r2, [r3, #2]
								Accbuf[3]=data;
 8013238:	f107 0320 	add.w	r3, r7, #32
 801323c:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8013240:	70da      	strb	r2, [r3, #3]
								DFR_CDC_Transmit_FS(Accbuf,5);
 8013242:	f107 0320 	add.w	r3, r7, #32
 8013246:	2105      	movs	r1, #5
 8013248:	4618      	mov	r0, r3
 801324a:	f7fe f9eb 	bl	8011624 <DFR_CDC_Transmit_FS>
								break;
 801324e:	e027      	b.n	80132a0 <reoprt_sysex+0x2e4>
								step=getstep();
 8013250:	f7fd f904 	bl	801045c <getstep>
 8013254:	4603      	mov	r3, r0
 8013256:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
								stepbuf[3]=(uint8_t)(step>>24);
 801325a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801325e:	0e1b      	lsrs	r3, r3, #24
 8013260:	b2da      	uxtb	r2, r3
 8013262:	f107 0318 	add.w	r3, r7, #24
 8013266:	70da      	strb	r2, [r3, #3]
								stepbuf[4]=(uint8_t)(step>>16);
 8013268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801326c:	0c1b      	lsrs	r3, r3, #16
 801326e:	b2da      	uxtb	r2, r3
 8013270:	f107 0318 	add.w	r3, r7, #24
 8013274:	711a      	strb	r2, [r3, #4]
								stepbuf[5]=(uint8_t)(step>>8);
 8013276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801327a:	0a1b      	lsrs	r3, r3, #8
 801327c:	b2da      	uxtb	r2, r3
 801327e:	f107 0318 	add.w	r3, r7, #24
 8013282:	715a      	strb	r2, [r3, #5]
								stepbuf[2]=(uint8_t)step;
 8013284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013288:	b2da      	uxtb	r2, r3
 801328a:	f107 0318 	add.w	r3, r7, #24
 801328e:	709a      	strb	r2, [r3, #2]
								DFR_CDC_Transmit_FS(stepbuf,7);
 8013290:	f107 0318 	add.w	r3, r7, #24
 8013294:	2107      	movs	r1, #7
 8013296:	4618      	mov	r0, r3
 8013298:	f7fe f9c4 	bl	8011624 <DFR_CDC_Transmit_FS>
								break;
 801329c:	e000      	b.n	80132a0 <reoprt_sysex+0x2e4>
								break;
 801329e:	bf00      	nop
					break;
 80132a0:	f000 bcb8 	b.w	8013c14 <reoprt_sysex+0xc58>
					switch(argv[1]){
 80132a4:	f107 0310 	add.w	r3, r7, #16
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	3301      	adds	r3, #1
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	2b10      	cmp	r3, #16
 80132b0:	f200 8453 	bhi.w	8013b5a <reoprt_sysex+0xb9e>
 80132b4:	a201      	add	r2, pc, #4	; (adr r2, 80132bc <reoprt_sysex+0x300>)
 80132b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ba:	bf00      	nop
 80132bc:	08013301 	.word	0x08013301
 80132c0:	08013315 	.word	0x08013315
 80132c4:	0801331d 	.word	0x0801331d
 80132c8:	08013353 	.word	0x08013353
 80132cc:	080133ad 	.word	0x080133ad
 80132d0:	08013549 	.word	0x08013549
 80132d4:	08013595 	.word	0x08013595
 80132d8:	080135ef 	.word	0x080135ef
 80132dc:	0801378d 	.word	0x0801378d
 80132e0:	080137d3 	.word	0x080137d3
 80132e4:	08013999 	.word	0x08013999
 80132e8:	080139b3 	.word	0x080139b3
 80132ec:	080139b9 	.word	0x080139b9
 80132f0:	08013a31 	.word	0x08013a31
 80132f4:	08013b0b 	.word	0x08013b0b
 80132f8:	08013b11 	.word	0x08013b11
 80132fc:	08013b17 	.word	0x08013b17
							writeAlgorithm(argv[2]);
 8013300:	f107 0310 	add.w	r3, r7, #16
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3302      	adds	r3, #2
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	4618      	mov	r0, r3
 801330c:	f7fe fe41 	bl	8011f92 <writeAlgorithm>
							break;
 8013310:	f000 bc26 	b.w	8013b60 <reoprt_sysex+0xba4>
							request();
 8013314:	f7fe fe4f 	bl	8011fb6 <request>
							break;
 8013318:	f000 bc22 	b.w	8013b60 <reoprt_sysex+0xba4>
							TOTAL_ID=readLearnedIDCount();
 801331c:	f7ff f988 	bl	8012630 <readLearnedIDCount>
 8013320:	4603      	mov	r3, r0
 8013322:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
							txbuffer[2]=0x01;
 8013326:	2301      	movs	r3, #1
 8013328:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x02;
 801332c:	2302      	movs	r3, #2
 801332e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							txbuffer[4]=TOTAL_ID;
 8013332:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8013336:	b2db      	uxtb	r3, r3
 8013338:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=0xf7;
 801333c:	23f7      	movs	r3, #247	; 0xf7
 801333e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							DFR_CDC_Transmit_FS(txbuffer,6);
 8013342:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013346:	2106      	movs	r1, #6
 8013348:	4618      	mov	r0, r3
 801334a:	f7fe f96b 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 801334e:	f000 bc07 	b.w	8013b60 <reoprt_sysex+0xba4>
							ISAPPEARDIRECT=isAppearDirect(argv[2]);
 8013352:	f107 0310 	add.w	r3, r7, #16
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	3302      	adds	r3, #2
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff f9da 	bl	8012716 <isAppearDirect>
 8013362:	4603      	mov	r3, r0
 8013364:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							txbuffer[2]=0x01;
 8013368:	2301      	movs	r3, #1
 801336a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x03;
 801336e:	2303      	movs	r3, #3
 8013370:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							if(ISAPPEARDIRECT>0)
 8013374:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8013378:	2b00      	cmp	r3, #0
 801337a:	d003      	beq.n	8013384 <reoprt_sysex+0x3c8>
								txbuffer[4]=1;
 801337c:	2301      	movs	r3, #1
 801337e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8013382:	e002      	b.n	801338a <reoprt_sysex+0x3ce>
								txbuffer[4]=0;
 8013384:	2300      	movs	r3, #0
 8013386:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=0xf7;
 801338a:	23f7      	movs	r3, #247	; 0xf7
 801338c:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							DFR_CDC_Transmit_FS(txbuffer,6);
 8013390:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013394:	2106      	movs	r1, #6
 8013396:	4618      	mov	r0, r3
 8013398:	f7fe f944 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 801339c:	e3e0      	b.n	8013b60 <reoprt_sysex+0xba4>
 801339e:	bf00      	nop
 80133a0:	0802041c 	.word	0x0802041c
 80133a4:	08020424 	.word	0x08020424
 80133a8:	40590000 	.word	0x40590000
							if(argv[2]==0){
 80133ac:	f107 0310 	add.w	r3, r7, #16
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	3302      	adds	r3, #2
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d105      	bne.n	80133c6 <reoprt_sysex+0x40a>
								CENTER_Block_DATA=readBlockCenterParameterDirect();
 80133ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff f9c3 	bl	801274a <readBlockCenterParameterDirect>
 80133c4:	e00b      	b.n	80133de <reoprt_sysex+0x422>
							}else if(argv[2]==1){
 80133c6:	f107 0310 	add.w	r3, r7, #16
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	3302      	adds	r3, #2
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d104      	bne.n	80133de <reoprt_sysex+0x422>
								readArrowCenterParameterDirect(&CENTER_Arrow_DATA);
 80133d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff fa11 	bl	8012800 <readArrowCenterParameterDirect>
							txbuffer[2]=0x01;
 80133de:	2301      	movs	r3, #1
 80133e0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x04;
 80133e4:	2304      	movs	r3, #4
 80133e6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							switch(argv[3]){
 80133ea:	f107 0310 	add.w	r3, r7, #16
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	3303      	adds	r3, #3
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	2b04      	cmp	r3, #4
 80133f6:	d87b      	bhi.n	80134f0 <reoprt_sysex+0x534>
 80133f8:	a201      	add	r2, pc, #4	; (adr r2, 8013400 <reoprt_sysex+0x444>)
 80133fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fe:	bf00      	nop
 8013400:	08013415 	.word	0x08013415
 8013404:	08013441 	.word	0x08013441
 8013408:	0801346d 	.word	0x0801346d
 801340c:	08013499 	.word	0x08013499
 8013410:	080134c5 	.word	0x080134c5
									if(argv[2]==0)
 8013414:	f107 0310 	add.w	r3, r7, #16
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	3302      	adds	r3, #2
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d103      	bne.n	801342a <reoprt_sysex+0x46e>
										CT=CENTER_Block_DATA.xCenter;
 8013422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013424:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013428:	e064      	b.n	80134f4 <reoprt_sysex+0x538>
									else if(argv[2]==1)
 801342a:	f107 0310 	add.w	r3, r7, #16
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3302      	adds	r3, #2
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	2b01      	cmp	r3, #1
 8013436:	d15d      	bne.n	80134f4 <reoprt_sysex+0x538>
										CT=CENTER_Arrow_DATA.xOrigin;
 8013438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801343a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801343e:	e059      	b.n	80134f4 <reoprt_sysex+0x538>
									if(argv[2]==0)
 8013440:	f107 0310 	add.w	r3, r7, #16
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	3302      	adds	r3, #2
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d103      	bne.n	8013456 <reoprt_sysex+0x49a>
										CT=CENTER_Block_DATA.yCenter;
 801344e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013450:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013454:	e050      	b.n	80134f8 <reoprt_sysex+0x53c>
									else if(argv[2]==1)
 8013456:	f107 0310 	add.w	r3, r7, #16
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	3302      	adds	r3, #2
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	2b01      	cmp	r3, #1
 8013462:	d149      	bne.n	80134f8 <reoprt_sysex+0x53c>
										CT=CENTER_Arrow_DATA.yOrigin;
 8013464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013466:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801346a:	e045      	b.n	80134f8 <reoprt_sysex+0x53c>
									if(argv[2]==0)
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	3302      	adds	r3, #2
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d103      	bne.n	8013482 <reoprt_sysex+0x4c6>
										CT=CENTER_Block_DATA.width;
 801347a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801347c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013480:	e03c      	b.n	80134fc <reoprt_sysex+0x540>
									else if(argv[2]==1)
 8013482:	f107 0310 	add.w	r3, r7, #16
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	3302      	adds	r3, #2
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d135      	bne.n	80134fc <reoprt_sysex+0x540>
										CT=CENTER_Arrow_DATA.xTarget;
 8013490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013492:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013496:	e031      	b.n	80134fc <reoprt_sysex+0x540>
									if(argv[2]==0)
 8013498:	f107 0310 	add.w	r3, r7, #16
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	3302      	adds	r3, #2
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d103      	bne.n	80134ae <reoprt_sysex+0x4f2>
										CT=CENTER_Block_DATA.height;
 80134a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80134ac:	e028      	b.n	8013500 <reoprt_sysex+0x544>
									else if(argv[2]==1)
 80134ae:	f107 0310 	add.w	r3, r7, #16
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3302      	adds	r3, #2
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d121      	bne.n	8013500 <reoprt_sysex+0x544>
										CT=CENTER_Arrow_DATA.yTarget;
 80134bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80134c2:	e01d      	b.n	8013500 <reoprt_sysex+0x544>
									if(argv[2]==0)
 80134c4:	f107 0310 	add.w	r3, r7, #16
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	3302      	adds	r3, #2
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d103      	bne.n	80134da <reoprt_sysex+0x51e>
										CT=CENTER_Block_DATA.ID;
 80134d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80134d8:	e014      	b.n	8013504 <reoprt_sysex+0x548>
									else if(argv[2]==1)
 80134da:	f107 0310 	add.w	r3, r7, #16
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	3302      	adds	r3, #2
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b01      	cmp	r3, #1
 80134e6:	d10d      	bne.n	8013504 <reoprt_sysex+0x548>
										CT=CENTER_Arrow_DATA.ID;
 80134e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80134ee:	e009      	b.n	8013504 <reoprt_sysex+0x548>
									break;
 80134f0:	bf00      	nop
 80134f2:	e008      	b.n	8013506 <reoprt_sysex+0x54a>
									break;
 80134f4:	bf00      	nop
 80134f6:	e006      	b.n	8013506 <reoprt_sysex+0x54a>
									break;
 80134f8:	bf00      	nop
 80134fa:	e004      	b.n	8013506 <reoprt_sysex+0x54a>
									break;
 80134fc:	bf00      	nop
 80134fe:	e002      	b.n	8013506 <reoprt_sysex+0x54a>
									break;
 8013500:	bf00      	nop
 8013502:	e000      	b.n	8013506 <reoprt_sysex+0x54a>
									break;
 8013504:	bf00      	nop
							txbuffer[4]=(uint8_t)(CT>>24);
 8013506:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801350a:	161b      	asrs	r3, r3, #24
 801350c:	b2db      	uxtb	r3, r3
 801350e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=(uint8_t)(CT>>16);
 8013512:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013516:	141b      	asrs	r3, r3, #16
 8013518:	b2db      	uxtb	r3, r3
 801351a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							txbuffer[6]=(uint8_t)(CT>>8);
 801351e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013522:	121b      	asrs	r3, r3, #8
 8013524:	b2db      	uxtb	r3, r3
 8013526:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
							txbuffer[7]=(uint8_t)(CT);
 801352a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801352e:	b2db      	uxtb	r3, r3
 8013530:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
							txbuffer[8]=0xf7;
 8013534:	23f7      	movs	r3, #247	; 0xf7
 8013536:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
							DFR_CDC_Transmit_FS(txbuffer,9);
 801353a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801353e:	2109      	movs	r1, #9
 8013540:	4618      	mov	r0, r3
 8013542:	f7fe f86f 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 8013546:	e30b      	b.n	8013b60 <reoprt_sysex+0xba4>
							isLearn=isLearned(argv[2]);
 8013548:	f107 0310 	add.w	r3, r7, #16
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3302      	adds	r3, #2
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff fa6e 	bl	8012a34 <isLearned>
 8013558:	4603      	mov	r3, r0
 801355a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							txbuffer[2]=0x01;
 801355e:	2301      	movs	r3, #1
 8013560:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x05;
 8013564:	2305      	movs	r3, #5
 8013566:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							if(isLearn>0)
 801356a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 801356e:	2b00      	cmp	r3, #0
 8013570:	d003      	beq.n	801357a <reoprt_sysex+0x5be>
								txbuffer[4]=1;
 8013572:	2301      	movs	r3, #1
 8013574:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8013578:	e002      	b.n	8013580 <reoprt_sysex+0x5c4>
								txbuffer[4]=0;
 801357a:	2300      	movs	r3, #0
 801357c:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=0xf7;
 8013580:	23f7      	movs	r3, #247	; 0xf7
 8013582:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							DFR_CDC_Transmit_FS(txbuffer,6);
 8013586:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801358a:	2106      	movs	r1, #6
 801358c:	4618      	mov	r0, r3
 801358e:	f7fe f849 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 8013592:	e2e5      	b.n	8013b60 <reoprt_sysex+0xba4>
							ISAPPEAR=isAppear(argv[2],argv[3]);
 8013594:	f107 0310 	add.w	r3, r7, #16
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	3302      	adds	r3, #2
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	461a      	mov	r2, r3
 80135a0:	f107 0310 	add.w	r3, r7, #16
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	3303      	adds	r3, #3
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	4619      	mov	r1, r3
 80135ac:	4610      	mov	r0, r2
 80135ae:	f7ff fa63 	bl	8012a78 <isAppear>
 80135b2:	4603      	mov	r3, r0
 80135b4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
							txbuffer[2]=0x01;
 80135b8:	2301      	movs	r3, #1
 80135ba:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x06;
 80135be:	2306      	movs	r3, #6
 80135c0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							if(ISAPPEAR>0)
 80135c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d003      	beq.n	80135d4 <reoprt_sysex+0x618>
								txbuffer[4]=1;
 80135cc:	2301      	movs	r3, #1
 80135ce:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80135d2:	e002      	b.n	80135da <reoprt_sysex+0x61e>
								txbuffer[4]=0;
 80135d4:	2300      	movs	r3, #0
 80135d6:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=0xf7;
 80135da:	23f7      	movs	r3, #247	; 0xf7
 80135dc:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							DFR_CDC_Transmit_FS(txbuffer,6);
 80135e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80135e4:	2106      	movs	r1, #6
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fe f81c 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 80135ec:	e2b8      	b.n	8013b60 <reoprt_sysex+0xba4>
							ID=argv[2];
 80135ee:	f107 0310 	add.w	r3, r7, #16
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	789b      	ldrb	r3, [r3, #2]
 80135f6:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
							if(argv[3]==0){
 80135fa:	f107 0310 	add.w	r3, r7, #16
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	3303      	adds	r3, #3
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d108      	bne.n	801361a <reoprt_sysex+0x65e>
								BI=readBlockParameter(ID,1);
 8013608:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 801360c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013610:	2201      	movs	r2, #1
 8013612:	4618      	mov	r0, r3
 8013614:	f7ff fa7e 	bl	8012b14 <readBlockParameter>
 8013618:	e00e      	b.n	8013638 <reoprt_sysex+0x67c>
							}else if(argv[3]==1){
 801361a:	f107 0310 	add.w	r3, r7, #16
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	3303      	adds	r3, #3
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b01      	cmp	r3, #1
 8013626:	d107      	bne.n	8013638 <reoprt_sysex+0x67c>
								AI=readArrowParameter(ID,1);
 8013628:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 801362c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013630:	2201      	movs	r2, #1
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff fb0e 	bl	8012c54 <readArrowParameter>
							txbuffer[2]=0x01;
 8013638:	2301      	movs	r3, #1
 801363a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x07;
 801363e:	2307      	movs	r3, #7
 8013640:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							switch(argv[4]){
 8013644:	f107 0310 	add.w	r3, r7, #16
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	3304      	adds	r3, #4
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	2b03      	cmp	r3, #3
 8013650:	d872      	bhi.n	8013738 <reoprt_sysex+0x77c>
 8013652:	a201      	add	r2, pc, #4	; (adr r2, 8013658 <reoprt_sysex+0x69c>)
 8013654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013658:	08013669 	.word	0x08013669
 801365c:	0801369d 	.word	0x0801369d
 8013660:	080136d1 	.word	0x080136d1
 8013664:	08013705 	.word	0x08013705
									if(argv[3]==0)
 8013668:	f107 0310 	add.w	r3, r7, #16
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	3303      	adds	r3, #3
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d105      	bne.n	8013682 <reoprt_sysex+0x6c6>
										CT=BI.xCenter;
 8013676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013680:	e05c      	b.n	801373c <reoprt_sysex+0x780>
									else if(argv[2]==1)
 8013682:	f107 0310 	add.w	r3, r7, #16
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	3302      	adds	r3, #2
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d155      	bne.n	801373c <reoprt_sysex+0x780>
										CT=AI.xOrigin;
 8013690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801369a:	e04f      	b.n	801373c <reoprt_sysex+0x780>
									if(argv[3]==0)
 801369c:	f107 0310 	add.w	r3, r7, #16
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	3303      	adds	r3, #3
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d105      	bne.n	80136b6 <reoprt_sysex+0x6fa>
										CT=BI.yCenter;
 80136aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80136b4:	e044      	b.n	8013740 <reoprt_sysex+0x784>
									else if(argv[2]==1)
 80136b6:	f107 0310 	add.w	r3, r7, #16
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	3302      	adds	r3, #2
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d13d      	bne.n	8013740 <reoprt_sysex+0x784>
										CT=AI.yOrigin;
 80136c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80136ce:	e037      	b.n	8013740 <reoprt_sysex+0x784>
									if(argv[3]==0)
 80136d0:	f107 0310 	add.w	r3, r7, #16
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	3303      	adds	r3, #3
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d105      	bne.n	80136ea <reoprt_sysex+0x72e>
										CT=BI.yCenter;
 80136de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80136e8:	e02c      	b.n	8013744 <reoprt_sysex+0x788>
									else if(argv[2]==1)
 80136ea:	f107 0310 	add.w	r3, r7, #16
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	3302      	adds	r3, #2
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d125      	bne.n	8013744 <reoprt_sysex+0x788>
										CT=AI.xTarget;
 80136f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013702:	e01f      	b.n	8013744 <reoprt_sysex+0x788>
									if(argv[3]==0)
 8013704:	f107 0310 	add.w	r3, r7, #16
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	3303      	adds	r3, #3
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d105      	bne.n	801371e <reoprt_sysex+0x762>
										CT=BI.height;
 8013712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801371c:	e014      	b.n	8013748 <reoprt_sysex+0x78c>
									else if(argv[2]==1)
 801371e:	f107 0310 	add.w	r3, r7, #16
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	3302      	adds	r3, #2
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d10d      	bne.n	8013748 <reoprt_sysex+0x78c>
										CT=AI.yTarget;
 801372c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013736:	e007      	b.n	8013748 <reoprt_sysex+0x78c>
									break;
 8013738:	bf00      	nop
 801373a:	e006      	b.n	801374a <reoprt_sysex+0x78e>
									break;
 801373c:	bf00      	nop
 801373e:	e004      	b.n	801374a <reoprt_sysex+0x78e>
									break;
 8013740:	bf00      	nop
 8013742:	e002      	b.n	801374a <reoprt_sysex+0x78e>
									break;
 8013744:	bf00      	nop
 8013746:	e000      	b.n	801374a <reoprt_sysex+0x78e>
									break;
 8013748:	bf00      	nop
							txbuffer[4]=(uint8_t)(CT>>24);
 801374a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801374e:	161b      	asrs	r3, r3, #24
 8013750:	b2db      	uxtb	r3, r3
 8013752:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=(uint8_t)(CT>>16);
 8013756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801375a:	141b      	asrs	r3, r3, #16
 801375c:	b2db      	uxtb	r3, r3
 801375e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							txbuffer[6]=(uint8_t)(CT>>8);
 8013762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013766:	121b      	asrs	r3, r3, #8
 8013768:	b2db      	uxtb	r3, r3
 801376a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
							txbuffer[7]=(uint8_t)(CT);
 801376e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013772:	b2db      	uxtb	r3, r3
 8013774:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
							txbuffer[8]=0xf7;
 8013778:	23f7      	movs	r3, #247	; 0xf7
 801377a:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
							DFR_CDC_Transmit_FS(txbuffer,9);
 801377e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013782:	2109      	movs	r1, #9
 8013784:	4618      	mov	r0, r3
 8013786:	f7fd ff4d 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 801378a:	e1e9      	b.n	8013b60 <reoprt_sysex+0xba4>
							count=(uint8_t)(readALLCount(argv[2]));
 801378c:	f107 0310 	add.w	r3, r7, #16
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	3302      	adds	r3, #2
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	4618      	mov	r0, r3
 8013798:	f7ff faa8 	bl	8012cec <readALLCount>
 801379c:	4603      	mov	r3, r0
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fb fd48 	bl	800f234 <__aeabi_f2uiz>
 80137a4:	4603      	mov	r3, r0
 80137a6:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
							txbuffer[2]=0x01;
 80137aa:	2301      	movs	r3, #1
 80137ac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x08;
 80137b0:	2308      	movs	r3, #8
 80137b2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							txbuffer[4]=count;
 80137b6:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80137ba:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=0xf7;
 80137be:	23f7      	movs	r3, #247	; 0xf7
 80137c0:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							DFR_CDC_Transmit_FS(txbuffer,6);
 80137c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80137c8:	2106      	movs	r1, #6
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fd ff2a 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 80137d0:	e1c6      	b.n	8013b60 <reoprt_sysex+0xba4>
							ID=argv[2];
 80137d2:	f107 0310 	add.w	r3, r7, #16
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	789b      	ldrb	r3, [r3, #2]
 80137da:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
							if(argv[3]==0)
 80137de:	f107 0310 	add.w	r3, r7, #16
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	3303      	adds	r3, #3
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d112      	bne.n	8013812 <reoprt_sysex+0x856>
								BI=readBlockParameter(ID,argv[4]);
 80137ec:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 80137f0:	f107 0310 	add.w	r3, r7, #16
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	3304      	adds	r3, #4
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	461a      	mov	r2, r3
 80137fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8013800:	463b      	mov	r3, r7
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff f986 	bl	8012b14 <readBlockParameter>
 8013808:	463b      	mov	r3, r7
 801380a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801380c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013810:	e018      	b.n	8013844 <reoprt_sysex+0x888>
							else if(argv[3]==1)
 8013812:	f107 0310 	add.w	r3, r7, #16
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	3303      	adds	r3, #3
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	2b01      	cmp	r3, #1
 801381e:	d111      	bne.n	8013844 <reoprt_sysex+0x888>
								AI=readArrowParameter(ID,argv[4]);
 8013820:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 8013824:	f107 0310 	add.w	r3, r7, #16
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	3304      	adds	r3, #4
 801382c:	781b      	ldrb	r3, [r3, #0]
 801382e:	461a      	mov	r2, r3
 8013830:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8013834:	463b      	mov	r3, r7
 8013836:	4618      	mov	r0, r3
 8013838:	f7ff fa0c 	bl	8012c54 <readArrowParameter>
 801383c:	463b      	mov	r3, r7
 801383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							txbuffer[2]=0x01;
 8013844:	2301      	movs	r3, #1
 8013846:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
							txbuffer[3]=0x09;
 801384a:	2309      	movs	r3, #9
 801384c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
							switch(argv[5]){
 8013850:	f107 0310 	add.w	r3, r7, #16
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	3305      	adds	r3, #5
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b03      	cmp	r3, #3
 801385c:	d872      	bhi.n	8013944 <reoprt_sysex+0x988>
 801385e:	a201      	add	r2, pc, #4	; (adr r2, 8013864 <reoprt_sysex+0x8a8>)
 8013860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013864:	08013875 	.word	0x08013875
 8013868:	080138a9 	.word	0x080138a9
 801386c:	080138dd 	.word	0x080138dd
 8013870:	08013911 	.word	0x08013911
									if(argv[3]==0)
 8013874:	f107 0310 	add.w	r3, r7, #16
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	3303      	adds	r3, #3
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d105      	bne.n	801388e <reoprt_sysex+0x8d2>
										CT=BI.xCenter;
 8013882:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801388c:	e05c      	b.n	8013948 <reoprt_sysex+0x98c>
									else if(argv[2]==1)
 801388e:	f107 0310 	add.w	r3, r7, #16
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	3302      	adds	r3, #2
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	2b01      	cmp	r3, #1
 801389a:	d155      	bne.n	8013948 <reoprt_sysex+0x98c>
										CT=AI.xOrigin;
 801389c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80138a6:	e04f      	b.n	8013948 <reoprt_sysex+0x98c>
									if(argv[3]==0)
 80138a8:	f107 0310 	add.w	r3, r7, #16
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	3303      	adds	r3, #3
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d105      	bne.n	80138c2 <reoprt_sysex+0x906>
										CT=BI.yCenter;
 80138b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80138c0:	e044      	b.n	801394c <reoprt_sysex+0x990>
									else if(argv[2]==1)
 80138c2:	f107 0310 	add.w	r3, r7, #16
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	3302      	adds	r3, #2
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	d13d      	bne.n	801394c <reoprt_sysex+0x990>
										CT=AI.yOrigin;
 80138d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80138da:	e037      	b.n	801394c <reoprt_sysex+0x990>
									if(argv[3]==0)
 80138dc:	f107 0310 	add.w	r3, r7, #16
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	3303      	adds	r3, #3
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d105      	bne.n	80138f6 <reoprt_sysex+0x93a>
										CT=BI.yCenter;
 80138ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 80138f4:	e02c      	b.n	8013950 <reoprt_sysex+0x994>
									else if(argv[2]==1)
 80138f6:	f107 0310 	add.w	r3, r7, #16
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	3302      	adds	r3, #2
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d125      	bne.n	8013950 <reoprt_sysex+0x994>
										CT=AI.xTarget;
 8013904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013908:	689b      	ldr	r3, [r3, #8]
 801390a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 801390e:	e01f      	b.n	8013950 <reoprt_sysex+0x994>
									if(argv[3]==0)
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	3303      	adds	r3, #3
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d105      	bne.n	801392a <reoprt_sysex+0x96e>
										CT=BI.height;
 801391e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013928:	e014      	b.n	8013954 <reoprt_sysex+0x998>
									else if(argv[2]==1)
 801392a:	f107 0310 	add.w	r3, r7, #16
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	3302      	adds	r3, #2
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b01      	cmp	r3, #1
 8013936:	d10d      	bne.n	8013954 <reoprt_sysex+0x998>
										CT=AI.yTarget;
 8013938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801393c:	68db      	ldr	r3, [r3, #12]
 801393e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
									break;
 8013942:	e007      	b.n	8013954 <reoprt_sysex+0x998>
									break;
 8013944:	bf00      	nop
 8013946:	e006      	b.n	8013956 <reoprt_sysex+0x99a>
									break;
 8013948:	bf00      	nop
 801394a:	e004      	b.n	8013956 <reoprt_sysex+0x99a>
									break;
 801394c:	bf00      	nop
 801394e:	e002      	b.n	8013956 <reoprt_sysex+0x99a>
									break;
 8013950:	bf00      	nop
 8013952:	e000      	b.n	8013956 <reoprt_sysex+0x99a>
									break;
 8013954:	bf00      	nop
							txbuffer[4]=(uint8_t)(CT>>24);
 8013956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801395a:	161b      	asrs	r3, r3, #24
 801395c:	b2db      	uxtb	r3, r3
 801395e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
							txbuffer[5]=(uint8_t)(CT>>16);
 8013962:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013966:	141b      	asrs	r3, r3, #16
 8013968:	b2db      	uxtb	r3, r3
 801396a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
							txbuffer[6]=(uint8_t)(CT>>8);
 801396e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013972:	121b      	asrs	r3, r3, #8
 8013974:	b2db      	uxtb	r3, r3
 8013976:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
							txbuffer[7]=(uint8_t)(CT);
 801397a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801397e:	b2db      	uxtb	r3, r3
 8013980:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
							txbuffer[8]=0xf7;
 8013984:	23f7      	movs	r3, #247	; 0xf7
 8013986:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
							DFR_CDC_Transmit_FS(txbuffer,9);
 801398a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801398e:	2109      	movs	r1, #9
 8013990:	4618      	mov	r0, r3
 8013992:	f7fd fe47 	bl	8011624 <DFR_CDC_Transmit_FS>
							break;
 8013996:	e0e3      	b.n	8013b60 <reoprt_sysex+0xba4>
							ID=argv[2];
 8013998:	f107 0310 	add.w	r3, r7, #16
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	789b      	ldrb	r3, [r3, #2]
 80139a0:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
							learnOnece(ID);
 80139a4:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff fa4d 	bl	8012e4a <learnOnece>
							break;
 80139b0:	e0d6      	b.n	8013b60 <reoprt_sysex+0xba4>
							forgetLearn();
 80139b2:	f7ff fa3b 	bl	8012e2c <forgetLearn>
							break;
 80139b6:	e0d3      	b.n	8013b60 <reoprt_sysex+0xba4>
							ID=argv[2];
 80139b8:	f107 0310 	add.w	r3, r7, #16
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	789b      	ldrb	r3, [r3, #2]
 80139c0:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
							color_count=argv[3];
 80139c4:	f107 0310 	add.w	r3, r7, #16
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	78db      	ldrb	r3, [r3, #3]
 80139cc:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
							for(i=0;i<color_count;i++)
 80139d0:	2300      	movs	r3, #0
 80139d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80139d6:	e013      	b.n	8013a00 <reoprt_sysex+0xa44>
								rename[i]=(char)argv[i+4];
 80139d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80139dc:	3304      	adds	r3, #4
 80139de:	f107 0210 	add.w	r2, r7, #16
 80139e2:	6812      	ldr	r2, [r2, #0]
 80139e4:	4413      	add	r3, r2
 80139e6:	7819      	ldrb	r1, [r3, #0]
 80139e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80139ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80139f0:	4413      	add	r3, r2
 80139f2:	460a      	mov	r2, r1
 80139f4:	701a      	strb	r2, [r3, #0]
							for(i=0;i<color_count;i++)
 80139f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80139fa:	3301      	adds	r3, #1
 80139fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013a00:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013a04:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	dbe5      	blt.n	80139d8 <reoprt_sysex+0xa1c>
							rename[i+1]='\0';
 8013a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013a10:	3301      	adds	r3, #1
 8013a12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8013a16:	4413      	add	r3, r2
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f803 2c94 	strb.w	r2, [r3, #-148]
							writeName(rename,ID);
 8013a1e:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8013a22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013a26:	4611      	mov	r1, r2
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff fa2d 	bl	8012e88 <writeName>
							break;
 8013a2e:	e097      	b.n	8013b60 <reoprt_sysex+0xba4>
							x = (argv[2]<<24) | (argv[3]<<16) | (argv[4]<<8) | argv[5];
 8013a30:	f107 0310 	add.w	r3, r7, #16
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3302      	adds	r3, #2
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	061a      	lsls	r2, r3, #24
 8013a3c:	f107 0310 	add.w	r3, r7, #16
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	3303      	adds	r3, #3
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	041b      	lsls	r3, r3, #16
 8013a48:	431a      	orrs	r2, r3
 8013a4a:	f107 0310 	add.w	r3, r7, #16
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	3304      	adds	r3, #4
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	021b      	lsls	r3, r3, #8
 8013a56:	4313      	orrs	r3, r2
 8013a58:	f107 0210 	add.w	r2, r7, #16
 8013a5c:	6812      	ldr	r2, [r2, #0]
 8013a5e:	3205      	adds	r2, #5
 8013a60:	7812      	ldrb	r2, [r2, #0]
 8013a62:	4313      	orrs	r3, r2
 8013a64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
							y = (argv[6]<<24) | (argv[7]<<16) | (argv[8]<<8) | argv[9];
 8013a68:	f107 0310 	add.w	r3, r7, #16
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	3306      	adds	r3, #6
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	061a      	lsls	r2, r3, #24
 8013a74:	f107 0310 	add.w	r3, r7, #16
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3307      	adds	r3, #7
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	041b      	lsls	r3, r3, #16
 8013a80:	431a      	orrs	r2, r3
 8013a82:	f107 0310 	add.w	r3, r7, #16
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	3308      	adds	r3, #8
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	021b      	lsls	r3, r3, #8
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	f107 0210 	add.w	r2, r7, #16
 8013a94:	6812      	ldr	r2, [r2, #0]
 8013a96:	3209      	adds	r2, #9
 8013a98:	7812      	ldrb	r2, [r2, #0]
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
							screen_count=argv[10];
 8013aa0:	f107 0310 	add.w	r3, r7, #16
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	7a9b      	ldrb	r3, [r3, #10]
 8013aa8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
							for(i=0;i<screen_count;i++){
 8013aac:	2300      	movs	r3, #0
 8013aae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013ab2:	e013      	b.n	8013adc <reoprt_sysex+0xb20>
								screen[i]=(char)argv[i+11];
 8013ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ab8:	330b      	adds	r3, #11
 8013aba:	f107 0210 	add.w	r2, r7, #16
 8013abe:	6812      	ldr	r2, [r2, #0]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	7819      	ldrb	r1, [r3, #0]
 8013ac4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8013ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013acc:	4413      	add	r3, r2
 8013ace:	460a      	mov	r2, r1
 8013ad0:	701a      	strb	r2, [r3, #0]
							for(i=0;i<screen_count;i++){
 8013ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013adc:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8013ae0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	dbe5      	blt.n	8013ab4 <reoprt_sysex+0xaf8>
							screen[i]='\0';
 8013ae8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8013aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013af0:	4413      	add	r3, r2
 8013af2:	2200      	movs	r2, #0
 8013af4:	701a      	strb	r2, [r3, #0]
							writeOSD(screen,x,y);
 8013af6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013afa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8013afe:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fe fda0 	bl	8012648 <writeOSD>
							break;
 8013b08:	e02a      	b.n	8013b60 <reoprt_sysex+0xba4>
							clearOSD();
 8013b0a:	f7fe fdf5 	bl	80126f8 <clearOSD>
							break;
 8013b0e:	e027      	b.n	8013b60 <reoprt_sysex+0xba4>
							takePhotoToSDCard();
 8013b10:	f7ff fa0a 	bl	8012f28 <takePhotoToSDCard>
							break;
 8013b14:	e024      	b.n	8013b60 <reoprt_sysex+0xba4>
							if(argv[2]==0)
 8013b16:	f107 0310 	add.w	r3, r7, #16
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	3302      	adds	r3, #2
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d109      	bne.n	8013b38 <reoprt_sysex+0xb7c>
								saveModelToTFCard(argv[3]);
 8013b24:	f107 0310 	add.w	r3, r7, #16
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	3303      	adds	r3, #3
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff fa08 	bl	8012f46 <saveModelToTFCard>
							break;
 8013b36:	e012      	b.n	8013b5e <reoprt_sysex+0xba2>
							else if(argv[2]==1)
 8013b38:	f107 0310 	add.w	r3, r7, #16
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3302      	adds	r3, #2
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d10b      	bne.n	8013b5e <reoprt_sysex+0xba2>
								loadModelFromTFCard(argv[3]);
 8013b46:	f107 0310 	add.w	r3, r7, #16
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	3303      	adds	r3, #3
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7ff fa16 	bl	8012f84 <loadModelFromTFCard>
							break;
 8013b58:	e001      	b.n	8013b5e <reoprt_sysex+0xba2>
							break;
 8013b5a:	bf00      	nop
 8013b5c:	e05d      	b.n	8013c1a <reoprt_sysex+0xc5e>
							break;
 8013b5e:	bf00      	nop
					break;
 8013b60:	e05b      	b.n	8013c1a <reoprt_sysex+0xc5e>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,argv[1]);
 8013b62:	f107 0310 	add.w	r3, r7, #16
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	3301      	adds	r3, #1
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	2140      	movs	r1, #64	; 0x40
 8013b70:	482e      	ldr	r0, [pc, #184]	; (8013c2c <reoprt_sysex+0xc70>)
 8013b72:	f002 fc82 	bl	801647a <HAL_GPIO_WritePin>
					break;
 8013b76:	e050      	b.n	8013c1a <reoprt_sysex+0xc5e>
					if(argv[1]==0x00){
 8013b78:	f107 0310 	add.w	r3, r7, #16
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d11e      	bne.n	8013bc4 <reoprt_sysex+0xc08>
						a_down[2]=0x04;
 8013b86:	4b2a      	ldr	r3, [pc, #168]	; (8013c30 <reoprt_sysex+0xc74>)
 8013b88:	2204      	movs	r2, #4
 8013b8a:	709a      	strb	r2, [r3, #2]
						d_down[2]=0x07;
 8013b8c:	4b29      	ldr	r3, [pc, #164]	; (8013c34 <reoprt_sysex+0xc78>)
 8013b8e:	2207      	movs	r2, #7
 8013b90:	709a      	strb	r2, [r3, #2]
						w_down[2]=0x1a;
 8013b92:	4b29      	ldr	r3, [pc, #164]	; (8013c38 <reoprt_sysex+0xc7c>)
 8013b94:	221a      	movs	r2, #26
 8013b96:	709a      	strb	r2, [r3, #2]
						s_down[2]=0x16;
 8013b98:	4b28      	ldr	r3, [pc, #160]	; (8013c3c <reoprt_sysex+0xc80>)
 8013b9a:	2216      	movs	r2, #22
 8013b9c:	709a      	strb	r2, [r3, #2]
						j_down[2]=0x0d;
 8013b9e:	4b28      	ldr	r3, [pc, #160]	; (8013c40 <reoprt_sysex+0xc84>)
 8013ba0:	220d      	movs	r2, #13
 8013ba2:	709a      	strb	r2, [r3, #2]
						k_down[2]=0x0e;
 8013ba4:	4b27      	ldr	r3, [pc, #156]	; (8013c44 <reoprt_sysex+0xc88>)
 8013ba6:	220e      	movs	r2, #14
 8013ba8:	709a      	strb	r2, [r3, #2]
						l_down[2]=0x0f;
 8013baa:	4b27      	ldr	r3, [pc, #156]	; (8013c48 <reoprt_sysex+0xc8c>)
 8013bac:	220f      	movs	r2, #15
 8013bae:	709a      	strb	r2, [r3, #2]
						i_down[2]=0x0c;
 8013bb0:	4b26      	ldr	r3, [pc, #152]	; (8013c4c <reoprt_sysex+0xc90>)
 8013bb2:	220c      	movs	r2, #12
 8013bb4:	709a      	strb	r2, [r3, #2]
						o_down[2]=0x12;
 8013bb6:	4b26      	ldr	r3, [pc, #152]	; (8013c50 <reoprt_sysex+0xc94>)
 8013bb8:	2212      	movs	r2, #18
 8013bba:	709a      	strb	r2, [r3, #2]
						p_down[2]=0x13;
 8013bbc:	4b25      	ldr	r3, [pc, #148]	; (8013c54 <reoprt_sysex+0xc98>)
 8013bbe:	2213      	movs	r2, #19
 8013bc0:	709a      	strb	r2, [r3, #2]
					break;
 8013bc2:	e029      	b.n	8013c18 <reoprt_sysex+0xc5c>
					}else if(argv[1]==0x01){
 8013bc4:	f107 0310 	add.w	r3, r7, #16
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d122      	bne.n	8013c18 <reoprt_sysex+0xc5c>
						a_down[2]=0x50;
 8013bd2:	4b17      	ldr	r3, [pc, #92]	; (8013c30 <reoprt_sysex+0xc74>)
 8013bd4:	2250      	movs	r2, #80	; 0x50
 8013bd6:	709a      	strb	r2, [r3, #2]
						d_down[2]=0x4f;
 8013bd8:	4b16      	ldr	r3, [pc, #88]	; (8013c34 <reoprt_sysex+0xc78>)
 8013bda:	224f      	movs	r2, #79	; 0x4f
 8013bdc:	709a      	strb	r2, [r3, #2]
						w_down[2]=0x52;
 8013bde:	4b16      	ldr	r3, [pc, #88]	; (8013c38 <reoprt_sysex+0xc7c>)
 8013be0:	2252      	movs	r2, #82	; 0x52
 8013be2:	709a      	strb	r2, [r3, #2]
						s_down[2]=0x51;
 8013be4:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <reoprt_sysex+0xc80>)
 8013be6:	2251      	movs	r2, #81	; 0x51
 8013be8:	709a      	strb	r2, [r3, #2]
						j_down[2]=0x27;
 8013bea:	4b15      	ldr	r3, [pc, #84]	; (8013c40 <reoprt_sysex+0xc84>)
 8013bec:	2227      	movs	r2, #39	; 0x27
 8013bee:	709a      	strb	r2, [r3, #2]
						k_down[2]=0x1e;
 8013bf0:	4b14      	ldr	r3, [pc, #80]	; (8013c44 <reoprt_sysex+0xc88>)
 8013bf2:	221e      	movs	r2, #30
 8013bf4:	709a      	strb	r2, [r3, #2]
						l_down[2]=0x1f;
 8013bf6:	4b14      	ldr	r3, [pc, #80]	; (8013c48 <reoprt_sysex+0xc8c>)
 8013bf8:	221f      	movs	r2, #31
 8013bfa:	709a      	strb	r2, [r3, #2]
						i_down[2]=0x20;
 8013bfc:	4b13      	ldr	r3, [pc, #76]	; (8013c4c <reoprt_sysex+0xc90>)
 8013bfe:	2220      	movs	r2, #32
 8013c00:	709a      	strb	r2, [r3, #2]
						o_down[2]=0x21;
 8013c02:	4b13      	ldr	r3, [pc, #76]	; (8013c50 <reoprt_sysex+0xc94>)
 8013c04:	2221      	movs	r2, #33	; 0x21
 8013c06:	709a      	strb	r2, [r3, #2]
						p_down[2]=0x22;
 8013c08:	4b12      	ldr	r3, [pc, #72]	; (8013c54 <reoprt_sysex+0xc98>)
 8013c0a:	2222      	movs	r2, #34	; 0x22
 8013c0c:	709a      	strb	r2, [r3, #2]
					break;
 8013c0e:	e003      	b.n	8013c18 <reoprt_sysex+0xc5c>
					break;
 8013c10:	bf00      	nop
 8013c12:	e006      	b.n	8013c22 <reoprt_sysex+0xc66>
					break;
 8013c14:	bf00      	nop
 8013c16:	e004      	b.n	8013c22 <reoprt_sysex+0xc66>
					break;
 8013c18:	bf00      	nop
			break;
 8013c1a:	e002      	b.n	8013c22 <reoprt_sysex+0xc66>
			break;
 8013c1c:	bf00      	nop
 8013c1e:	e000      	b.n	8013c22 <reoprt_sysex+0xc66>
			break;
 8013c20:	bf00      	nop
	}
}
 8013c22:	bf00      	nop
 8013c24:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd90      	pop	{r4, r7, pc}
 8013c2c:	40011000 	.word	0x40011000
 8013c30:	20000304 	.word	0x20000304
 8013c34:	2000030c 	.word	0x2000030c
 8013c38:	20000314 	.word	0x20000314
 8013c3c:	2000031c 	.word	0x2000031c
 8013c40:	20000324 	.word	0x20000324
 8013c44:	2000032c 	.word	0x2000032c
 8013c48:	20000334 	.word	0x20000334
 8013c4c:	2000033c 	.word	0x2000033c
 8013c50:	20000344 	.word	0x20000344
 8013c54:	2000034c 	.word	0x2000034c

08013c58 <sendFirmwareVersion>:

void sendFirmwareVersion(uint8_t major, uint8_t minor, size_t bytec, uint8_t *bytev){
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b086      	sub	sp, #24
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60ba      	str	r2, [r7, #8]
 8013c60:	607b      	str	r3, [r7, #4]
 8013c62:	4603      	mov	r3, r0
 8013c64:	73fb      	strb	r3, [r7, #15]
 8013c66:	460b      	mov	r3, r1
 8013c68:	73bb      	strb	r3, [r7, #14]
	uint8_t msg[5]={START_SYSEX,REPORT_FIRMWARE,major,minor,END_SYSEX};
 8013c6a:	23f0      	movs	r3, #240	; 0xf0
 8013c6c:	743b      	strb	r3, [r7, #16]
 8013c6e:	2379      	movs	r3, #121	; 0x79
 8013c70:	747b      	strb	r3, [r7, #17]
 8013c72:	7bfb      	ldrb	r3, [r7, #15]
 8013c74:	74bb      	strb	r3, [r7, #18]
 8013c76:	7bbb      	ldrb	r3, [r7, #14]
 8013c78:	74fb      	strb	r3, [r7, #19]
 8013c7a:	23f7      	movs	r3, #247	; 0xf7
 8013c7c:	753b      	strb	r3, [r7, #20]
	DFR_CDC_Transmit_FS(msg,5);
 8013c7e:	f107 0310 	add.w	r3, r7, #16
 8013c82:	2105      	movs	r1, #5
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fd fccd 	bl	8011624 <DFR_CDC_Transmit_FS>
}
 8013c8a:	bf00      	nop
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
	...

08013c94 <reoprt_firmware>:

/**
 * 上报版本信息
 */
static void reoprt_firmware(){
 8013c94:	b580      	push	{r7, lr}
 8013c96:	af00      	add	r7, sp, #0
//	const size_t major_version_offset = 1;
//	const size_t minor_version_offset = 2;
//	const size_t string_offset = 3;
	if(sysexBytesRead < 3){/*错误格式，用于Firmata V3.0.0 */
 8013c98:	4b08      	ldr	r3, [pc, #32]	; (8013cbc <reoprt_firmware+0x28>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b02      	cmp	r3, #2
 8013c9e:	d80b      	bhi.n	8013cb8 <reoprt_firmware+0x24>
		sendFirmwareVersion(FIRMATA_MAJOR, FIRMATA_MINOR, strlen(myname), (uint8_t *)myname);
 8013ca0:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <reoprt_firmware+0x2c>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7fa fabf 	bl	800e228 <strlen>
 8013caa:	4602      	mov	r2, r0
 8013cac:	4b04      	ldr	r3, [pc, #16]	; (8013cc0 <reoprt_firmware+0x2c>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	2106      	movs	r1, #6
 8013cb2:	2002      	movs	r0, #2
 8013cb4:	f7ff ffd0 	bl	8013c58 <sendFirmwareVersion>
	}
}
 8013cb8:	bf00      	nop
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	200011d8 	.word	0x200011d8
 8013cc0:	20000300 	.word	0x20000300

08013cc4 <getPinMode>:

uint8_t getPinMode(uint8_t pin){
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	71fb      	strb	r3, [r7, #7]
	if((pin<6) || (pin>7))
 8013cce:	79fb      	ldrb	r3, [r7, #7]
 8013cd0:	2b05      	cmp	r3, #5
 8013cd2:	d902      	bls.n	8013cda <getPinMode+0x16>
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	2b07      	cmp	r3, #7
 8013cd8:	d901      	bls.n	8013cde <getPinMode+0x1a>
		return 255;
 8013cda:	23ff      	movs	r3, #255	; 0xff
 8013cdc:	e003      	b.n	8013ce6 <getPinMode+0x22>
	return pinConfig[pin-6];
 8013cde:	79fb      	ldrb	r3, [r7, #7]
 8013ce0:	3b06      	subs	r3, #6
 8013ce2:	4a03      	ldr	r2, [pc, #12]	; (8013cf0 <getPinMode+0x2c>)
 8013ce4:	5cd3      	ldrb	r3, [r2, r3]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bc80      	pop	{r7}
 8013cee:	4770      	bx	lr
 8013cf0:	200011e0 	.word	0x200011e0

08013cf4 <firmata_setPinMode>:

/**
 * 根据命令设置IO口的模式
 */
static void firmata_setPinMode(uint8_t pin, int mode){
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	6039      	str	r1, [r7, #0]
 8013cfe:	71fb      	strb	r3, [r7, #7]
	if(getPinMode(pin) == PIN_MODE_IGNORE){
 8013d00:	79fb      	ldrb	r3, [r7, #7]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff ffde 	bl	8013cc4 <getPinMode>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8013d0c:	d00c      	beq.n	8013d28 <firmata_setPinMode+0x34>
		return;
	}
	if((pin<6) || (pin>7))
 8013d0e:	79fb      	ldrb	r3, [r7, #7]
 8013d10:	2b05      	cmp	r3, #5
 8013d12:	d90b      	bls.n	8013d2c <firmata_setPinMode+0x38>
 8013d14:	79fb      	ldrb	r3, [r7, #7]
 8013d16:	2b07      	cmp	r3, #7
 8013d18:	d808      	bhi.n	8013d2c <firmata_setPinMode+0x38>
		return ;
	pinConfig[pin-6]=mode;
 8013d1a:	79fb      	ldrb	r3, [r7, #7]
 8013d1c:	3b06      	subs	r3, #6
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	b2d1      	uxtb	r1, r2
 8013d22:	4a04      	ldr	r2, [pc, #16]	; (8013d34 <firmata_setPinMode+0x40>)
 8013d24:	54d1      	strb	r1, [r2, r3]
 8013d26:	e002      	b.n	8013d2e <firmata_setPinMode+0x3a>
		return;
 8013d28:	bf00      	nop
 8013d2a:	e000      	b.n	8013d2e <firmata_setPinMode+0x3a>
		return ;
 8013d2c:	bf00      	nop
}
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	200011e0 	.word	0x200011e0

08013d38 <firmata_setDigitalPinValue>:
 */

/**
 * 解析处理firmata协议包里的数字口的操作，对应pymata4的digital_pin_write
 */
static void firmata_setDigitalPinValue(uint8_t pin, int value){
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	4603      	mov	r3, r0
 8013d40:	6039      	str	r1, [r7, #0]
 8013d42:	71fb      	strb	r3, [r7, #7]
	if(getPinMode(pin) == PIN_MODE_OUTPUT){
 8013d44:	79fb      	ldrb	r3, [r7, #7]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7ff ffbc 	bl	8013cc4 <getPinMode>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d115      	bne.n	8013d7e <firmata_setDigitalPinValue+0x46>
		switch(pin){
 8013d52:	79fb      	ldrb	r3, [r7, #7]
 8013d54:	2b06      	cmp	r3, #6
 8013d56:	d002      	beq.n	8013d5e <firmata_setDigitalPinValue+0x26>
 8013d58:	2b07      	cmp	r3, #7
 8013d5a:	d008      	beq.n	8013d6e <firmata_setDigitalPinValue+0x36>
				break;
			case 7:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,value);
				break;
			default:
				break;
 8013d5c:	e010      	b.n	8013d80 <firmata_setDigitalPinValue+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,value);
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	461a      	mov	r2, r3
 8013d64:	2140      	movs	r1, #64	; 0x40
 8013d66:	4808      	ldr	r0, [pc, #32]	; (8013d88 <firmata_setDigitalPinValue+0x50>)
 8013d68:	f002 fb87 	bl	801647a <HAL_GPIO_WritePin>
				break;
 8013d6c:	e008      	b.n	8013d80 <firmata_setDigitalPinValue+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,value);
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	461a      	mov	r2, r3
 8013d74:	2180      	movs	r1, #128	; 0x80
 8013d76:	4804      	ldr	r0, [pc, #16]	; (8013d88 <firmata_setDigitalPinValue+0x50>)
 8013d78:	f002 fb7f 	bl	801647a <HAL_GPIO_WritePin>
				break;
 8013d7c:	e000      	b.n	8013d80 <firmata_setDigitalPinValue+0x48>
		}

	}
 8013d7e:	bf00      	nop
}
 8013d80:	bf00      	nop
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	40010800 	.word	0x40010800

08013d8c <firmata_processSysexMessage>:
/**
 * 从dataBuffer中解析接收到的完整数据包
 */
void firmata_processSysexMessage(void){
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
	switch(dataBuffer[0]){ /*第一位是命令位*/
 8013d90:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <firmata_processSysexMessage+0x34>)
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	2b71      	cmp	r3, #113	; 0x71
 8013d96:	d010      	beq.n	8013dba <firmata_processSysexMessage+0x2e>
 8013d98:	2b79      	cmp	r3, #121	; 0x79
 8013d9a:	d102      	bne.n	8013da2 <firmata_processSysexMessage+0x16>
		case REPORT_FIRMWARE:
			reoprt_firmware();
 8013d9c:	f7ff ff7a 	bl	8013c94 <reoprt_firmware>
			break;
 8013da0:	e00c      	b.n	8013dbc <firmata_processSysexMessage+0x30>
		case STRING_DATA:
			break;
		default:
			reoprt_sysex(dataBuffer[0], sysexBytesRead - 1, dataBuffer + 1);
 8013da2:	4b07      	ldr	r3, [pc, #28]	; (8013dc0 <firmata_processSysexMessage+0x34>)
 8013da4:	7818      	ldrb	r0, [r3, #0]
 8013da6:	4b07      	ldr	r3, [pc, #28]	; (8013dc4 <firmata_processSysexMessage+0x38>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	b2db      	uxtb	r3, r3
 8013dac:	3b01      	subs	r3, #1
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	4a05      	ldr	r2, [pc, #20]	; (8013dc8 <firmata_processSysexMessage+0x3c>)
 8013db2:	4619      	mov	r1, r3
 8013db4:	f7ff f902 	bl	8012fbc <reoprt_sysex>
			break;
 8013db8:	e000      	b.n	8013dbc <firmata_processSysexMessage+0x30>
			break;
 8013dba:	bf00      	nop
	}
}
 8013dbc:	bf00      	nop
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	200011e8 	.word	0x200011e8
 8013dc4:	200011d8 	.word	0x200011d8
 8013dc8:	200011e9 	.word	0x200011e9

08013dcc <firmata_parse>:

void firmata_parse(uint8_t* inputData,uint8_t datalen){
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	70fb      	strb	r3, [r7, #3]
	uint8_t command;
	if(inputData[0] < 0xF0){
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	2bef      	cmp	r3, #239	; 0xef
 8013dde:	d80c      	bhi.n	8013dfa <firmata_parse+0x2e>
		command = inputData[0] & 0xF0;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	f023 030f 	bic.w	r3, r3, #15
 8013de8:	73fb      	strb	r3, [r7, #15]
		multiByteChannel = inputData[0] & 0x0F;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	f003 030f 	and.w	r3, r3, #15
 8013df2:	b2da      	uxtb	r2, r3
 8013df4:	4b30      	ldr	r3, [pc, #192]	; (8013eb8 <firmata_parse+0xec>)
 8013df6:	701a      	strb	r2, [r3, #0]
 8013df8:	e002      	b.n	8013e00 <firmata_parse+0x34>
	}else{
		command = inputData[0];
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	73fb      	strb	r3, [r7, #15]
	}
	switch(command){
 8013e00:	7bfb      	ldrb	r3, [r7, #15]
 8013e02:	2bf0      	cmp	r3, #240	; 0xf0
 8013e04:	d02e      	beq.n	8013e64 <firmata_parse+0x98>
 8013e06:	2bf0      	cmp	r3, #240	; 0xf0
 8013e08:	dc0b      	bgt.n	8013e22 <firmata_parse+0x56>
 8013e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8013e0c:	d04c      	beq.n	8013ea8 <firmata_parse+0xdc>
 8013e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8013e10:	dc02      	bgt.n	8013e18 <firmata_parse+0x4c>
 8013e12:	2b90      	cmp	r3, #144	; 0x90
 8013e14:	d010      	beq.n	8013e38 <firmata_parse+0x6c>
 8013e16:	e04c      	b.n	8013eb2 <firmata_parse+0xe6>
 8013e18:	2bd0      	cmp	r3, #208	; 0xd0
 8013e1a:	d045      	beq.n	8013ea8 <firmata_parse+0xdc>
 8013e1c:	2be0      	cmp	r3, #224	; 0xe0
 8013e1e:	d00b      	beq.n	8013e38 <firmata_parse+0x6c>
 8013e20:	e047      	b.n	8013eb2 <firmata_parse+0xe6>
 8013e22:	2bf5      	cmp	r3, #245	; 0xf5
 8013e24:	d013      	beq.n	8013e4e <firmata_parse+0x82>
 8013e26:	2bf5      	cmp	r3, #245	; 0xf5
 8013e28:	dc02      	bgt.n	8013e30 <firmata_parse+0x64>
 8013e2a:	2bf4      	cmp	r3, #244	; 0xf4
 8013e2c:	d004      	beq.n	8013e38 <firmata_parse+0x6c>
 8013e2e:	e040      	b.n	8013eb2 <firmata_parse+0xe6>
 8013e30:	2bf9      	cmp	r3, #249	; 0xf9
 8013e32:	d03b      	beq.n	8013eac <firmata_parse+0xe0>
 8013e34:	2bff      	cmp	r3, #255	; 0xff
				dataBuffer[i-1]=inputData[i];
			sysexBytesRead=datalen-2;
			firmata_processSysexMessage();
			break;
		case SYSTEM_RESET:
			break;
 8013e36:	e03c      	b.n	8013eb2 <firmata_parse+0xe6>
			firmata_setPinMode(inputData[1],inputData[2]);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	781a      	ldrb	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	3302      	adds	r3, #2
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	4619      	mov	r1, r3
 8013e46:	4610      	mov	r0, r2
 8013e48:	f7ff ff54 	bl	8013cf4 <firmata_setPinMode>
			break;
 8013e4c:	e031      	b.n	8013eb2 <firmata_parse+0xe6>
			firmata_setDigitalPinValue(inputData[1],inputData[2]);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	3301      	adds	r3, #1
 8013e52:	781a      	ldrb	r2, [r3, #0]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	3302      	adds	r3, #2
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	f7ff ff6b 	bl	8013d38 <firmata_setDigitalPinValue>
			break;
 8013e62:	e026      	b.n	8013eb2 <firmata_parse+0xe6>
			if(END_SYSEX!=inputData[datalen-1])
 8013e64:	78fb      	ldrb	r3, [r7, #3]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	2bf7      	cmp	r3, #247	; 0xf7
 8013e70:	d11e      	bne.n	8013eb0 <firmata_parse+0xe4>
			for(int i=1;i<datalen-1;i++)
 8013e72:	2301      	movs	r3, #1
 8013e74:	60bb      	str	r3, [r7, #8]
 8013e76:	e00a      	b.n	8013e8e <firmata_parse+0xc2>
				dataBuffer[i-1]=inputData[i];
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	441a      	add	r2, r3
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	7811      	ldrb	r1, [r2, #0]
 8013e84:	4a0d      	ldr	r2, [pc, #52]	; (8013ebc <firmata_parse+0xf0>)
 8013e86:	54d1      	strb	r1, [r2, r3]
			for(int i=1;i<datalen-1;i++)
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	60bb      	str	r3, [r7, #8]
 8013e8e:	78fb      	ldrb	r3, [r7, #3]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	dbef      	blt.n	8013e78 <firmata_parse+0xac>
			sysexBytesRead=datalen-2;
 8013e98:	78fb      	ldrb	r3, [r7, #3]
 8013e9a:	3b02      	subs	r3, #2
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	4b08      	ldr	r3, [pc, #32]	; (8013ec0 <firmata_parse+0xf4>)
 8013ea0:	601a      	str	r2, [r3, #0]
			firmata_processSysexMessage();
 8013ea2:	f7ff ff73 	bl	8013d8c <firmata_processSysexMessage>
			break;
 8013ea6:	e004      	b.n	8013eb2 <firmata_parse+0xe6>
			break;
 8013ea8:	bf00      	nop
 8013eaa:	e002      	b.n	8013eb2 <firmata_parse+0xe6>
		case REPORT_VERSION:
			break;
 8013eac:	bf00      	nop
 8013eae:	e000      	b.n	8013eb2 <firmata_parse+0xe6>
				return ;
 8013eb0:	bf00      	nop
	}
}
 8013eb2:	3710      	adds	r7, #16
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	200011dc 	.word	0x200011dc
 8013ebc:	200011e8 	.word	0x200011e8
 8013ec0:	200011d8 	.word	0x200011d8

08013ec4 <__io_putchar>:



PUTCHAR_PROTOTYPE

{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]

//同样USART2改为你的串口

HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8013ecc:	1d39      	adds	r1, r7, #4
 8013ece:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	4803      	ldr	r0, [pc, #12]	; (8013ee4 <__io_putchar+0x20>)
 8013ed6:	f006 f860 	bl	8019f9a <HAL_UART_Transmit>

    return ch;
 8013eda:	687b      	ldr	r3, [r7, #4]

}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	20001444 	.word	0x20001444

08013ee8 <HAL_GPIO_EXTI_Callback>:
uint8_t pause_down[8]={0x01,0x00,0x3f,0x00,0x00,0x00,0x00,0x00};
uint8_t full_screem_down[8]={0x01,0x00,0x45,0x00,0x00,0x00,0x00,0x00};

float ad0,ad1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	4603      	mov	r3, r0
 8013ef0:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == GPIO_PIN_3){
 8013ef2:	88fb      	ldrh	r3, [r7, #6]
 8013ef4:	2b08      	cmp	r3, #8
 8013ef6:	d11f      	bne.n	8013f38 <HAL_GPIO_EXTI_Callback+0x50>
		 if(1==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))
 8013ef8:	2108      	movs	r1, #8
 8013efa:	48b1      	ldr	r0, [pc, #708]	; (80141c0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8013efc:	f002 faa6 	bl	801644c <HAL_GPIO_ReadPin>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d10a      	bne.n	8013f1c <HAL_GPIO_EXTI_Callback+0x34>
		 {
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8013f06:	2208      	movs	r2, #8
 8013f08:	49ae      	ldr	r1, [pc, #696]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8013f0a:	48af      	ldr	r0, [pc, #700]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013f0c:	f7fd fed2 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8013f10:	2200      	movs	r2, #0
 8013f12:	2101      	movs	r1, #1
 8013f14:	48ad      	ldr	r0, [pc, #692]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013f16:	f002 fab0 	bl	801647a <HAL_GPIO_WritePin>
 8013f1a:	e009      	b.n	8013f30 <HAL_GPIO_EXTI_Callback+0x48>
		 }else{
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,j_down,8);
 8013f1c:	2208      	movs	r2, #8
 8013f1e:	49ac      	ldr	r1, [pc, #688]	; (80141d0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8013f20:	48a9      	ldr	r0, [pc, #676]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013f22:	f7fd fec7 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8013f26:	2201      	movs	r2, #1
 8013f28:	2101      	movs	r1, #1
 8013f2a:	48a8      	ldr	r0, [pc, #672]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013f2c:	f002 faa5 	bl	801647a <HAL_GPIO_WritePin>
		 }
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8013f30:	4ba8      	ldr	r3, [pc, #672]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8013f32:	2208      	movs	r2, #8
 8013f34:	615a      	str	r2, [r3, #20]
		 }
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
	 }else{
		 ;
	 }
}
 8013f36:	e13f      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_2){
 8013f38:	88fb      	ldrh	r3, [r7, #6]
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	d11f      	bne.n	8013f7e <HAL_GPIO_EXTI_Callback+0x96>
		 if(1==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8013f3e:	2104      	movs	r1, #4
 8013f40:	489f      	ldr	r0, [pc, #636]	; (80141c0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8013f42:	f002 fa83 	bl	801644c <HAL_GPIO_ReadPin>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d10a      	bne.n	8013f62 <HAL_GPIO_EXTI_Callback+0x7a>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8013f4c:	2208      	movs	r2, #8
 8013f4e:	499d      	ldr	r1, [pc, #628]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8013f50:	489d      	ldr	r0, [pc, #628]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013f52:	f7fd feaf 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8013f56:	2200      	movs	r2, #0
 8013f58:	2101      	movs	r1, #1
 8013f5a:	489c      	ldr	r0, [pc, #624]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013f5c:	f002 fa8d 	bl	801647a <HAL_GPIO_WritePin>
 8013f60:	e009      	b.n	8013f76 <HAL_GPIO_EXTI_Callback+0x8e>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,k_down,8);
 8013f62:	2208      	movs	r2, #8
 8013f64:	499c      	ldr	r1, [pc, #624]	; (80141d8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8013f66:	4898      	ldr	r0, [pc, #608]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013f68:	f7fd fea4 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	2101      	movs	r1, #1
 8013f70:	4896      	ldr	r0, [pc, #600]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013f72:	f002 fa82 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8013f76:	4b97      	ldr	r3, [pc, #604]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8013f78:	2204      	movs	r2, #4
 8013f7a:	615a      	str	r2, [r3, #20]
}
 8013f7c:	e11c      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_1){
 8013f7e:	88fb      	ldrh	r3, [r7, #6]
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d11f      	bne.n	8013fc4 <HAL_GPIO_EXTI_Callback+0xdc>
		 if(1==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8013f84:	2102      	movs	r1, #2
 8013f86:	488e      	ldr	r0, [pc, #568]	; (80141c0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8013f88:	f002 fa60 	bl	801644c <HAL_GPIO_ReadPin>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	d10a      	bne.n	8013fa8 <HAL_GPIO_EXTI_Callback+0xc0>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8013f92:	2208      	movs	r2, #8
 8013f94:	498b      	ldr	r1, [pc, #556]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8013f96:	488c      	ldr	r0, [pc, #560]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013f98:	f7fd fe8c 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	2101      	movs	r1, #1
 8013fa0:	488a      	ldr	r0, [pc, #552]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013fa2:	f002 fa6a 	bl	801647a <HAL_GPIO_WritePin>
 8013fa6:	e009      	b.n	8013fbc <HAL_GPIO_EXTI_Callback+0xd4>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,l_down,8);
 8013fa8:	2208      	movs	r2, #8
 8013faa:	498c      	ldr	r1, [pc, #560]	; (80141dc <HAL_GPIO_EXTI_Callback+0x2f4>)
 8013fac:	4886      	ldr	r0, [pc, #536]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013fae:	f7fd fe81 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8013fb2:	2201      	movs	r2, #1
 8013fb4:	2101      	movs	r1, #1
 8013fb6:	4885      	ldr	r0, [pc, #532]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013fb8:	f002 fa5f 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8013fbc:	4b85      	ldr	r3, [pc, #532]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8013fbe:	2202      	movs	r2, #2
 8013fc0:	615a      	str	r2, [r3, #20]
}
 8013fc2:	e0f9      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_0){
 8013fc4:	88fb      	ldrh	r3, [r7, #6]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d11f      	bne.n	801400a <HAL_GPIO_EXTI_Callback+0x122>
		 if(1==HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8013fca:	2101      	movs	r1, #1
 8013fcc:	487c      	ldr	r0, [pc, #496]	; (80141c0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8013fce:	f002 fa3d 	bl	801644c <HAL_GPIO_ReadPin>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	d10a      	bne.n	8013fee <HAL_GPIO_EXTI_Callback+0x106>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8013fd8:	2208      	movs	r2, #8
 8013fda:	497a      	ldr	r1, [pc, #488]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8013fdc:	487a      	ldr	r0, [pc, #488]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013fde:	f7fd fe69 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	2101      	movs	r1, #1
 8013fe6:	4879      	ldr	r0, [pc, #484]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013fe8:	f002 fa47 	bl	801647a <HAL_GPIO_WritePin>
 8013fec:	e009      	b.n	8014002 <HAL_GPIO_EXTI_Callback+0x11a>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,i_down,8);
 8013fee:	2208      	movs	r2, #8
 8013ff0:	497b      	ldr	r1, [pc, #492]	; (80141e0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8013ff2:	4875      	ldr	r0, [pc, #468]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8013ff4:	f7fd fe5e 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	2101      	movs	r1, #1
 8013ffc:	4873      	ldr	r0, [pc, #460]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8013ffe:	f002 fa3c 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8014002:	4b74      	ldr	r3, [pc, #464]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8014004:	2201      	movs	r2, #1
 8014006:	615a      	str	r2, [r3, #20]
}
 8014008:	e0d6      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_9){
 801400a:	88fb      	ldrh	r3, [r7, #6]
 801400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014010:	d121      	bne.n	8014056 <HAL_GPIO_EXTI_Callback+0x16e>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8014012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014016:	486d      	ldr	r0, [pc, #436]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014018:	f002 fa18 	bl	801644c <HAL_GPIO_ReadPin>
 801401c:	4603      	mov	r3, r0
 801401e:	2b01      	cmp	r3, #1
 8014020:	d10a      	bne.n	8014038 <HAL_GPIO_EXTI_Callback+0x150>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8014022:	2208      	movs	r2, #8
 8014024:	4967      	ldr	r1, [pc, #412]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8014026:	4868      	ldr	r0, [pc, #416]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8014028:	f7fd fe44 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 801402c:	2200      	movs	r2, #0
 801402e:	2101      	movs	r1, #1
 8014030:	4866      	ldr	r0, [pc, #408]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014032:	f002 fa22 	bl	801647a <HAL_GPIO_WritePin>
 8014036:	e009      	b.n	801404c <HAL_GPIO_EXTI_Callback+0x164>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,o_down,8);
 8014038:	2208      	movs	r2, #8
 801403a:	496a      	ldr	r1, [pc, #424]	; (80141e4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 801403c:	4862      	ldr	r0, [pc, #392]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 801403e:	f7fd fe39 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8014042:	2201      	movs	r2, #1
 8014044:	2101      	movs	r1, #1
 8014046:	4861      	ldr	r0, [pc, #388]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014048:	f002 fa17 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 801404c:	4b61      	ldr	r3, [pc, #388]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 801404e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014052:	615a      	str	r2, [r3, #20]
}
 8014054:	e0b0      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_8){
 8014056:	88fb      	ldrh	r3, [r7, #6]
 8014058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801405c:	d121      	bne.n	80140a2 <HAL_GPIO_EXTI_Callback+0x1ba>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 801405e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014062:	485a      	ldr	r0, [pc, #360]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014064:	f002 f9f2 	bl	801644c <HAL_GPIO_ReadPin>
 8014068:	4603      	mov	r3, r0
 801406a:	2b01      	cmp	r3, #1
 801406c:	d10a      	bne.n	8014084 <HAL_GPIO_EXTI_Callback+0x19c>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 801406e:	2208      	movs	r2, #8
 8014070:	4954      	ldr	r1, [pc, #336]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8014072:	4855      	ldr	r0, [pc, #340]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8014074:	f7fd fe1e 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8014078:	2200      	movs	r2, #0
 801407a:	2101      	movs	r1, #1
 801407c:	4853      	ldr	r0, [pc, #332]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 801407e:	f002 f9fc 	bl	801647a <HAL_GPIO_WritePin>
 8014082:	e009      	b.n	8014098 <HAL_GPIO_EXTI_Callback+0x1b0>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,p_down,8);
 8014084:	2208      	movs	r2, #8
 8014086:	4958      	ldr	r1, [pc, #352]	; (80141e8 <HAL_GPIO_EXTI_Callback+0x300>)
 8014088:	484f      	ldr	r0, [pc, #316]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 801408a:	f7fd fe13 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 801408e:	2201      	movs	r2, #1
 8014090:	2101      	movs	r1, #1
 8014092:	484e      	ldr	r0, [pc, #312]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014094:	f002 f9f1 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8014098:	4b4e      	ldr	r3, [pc, #312]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 801409a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801409e:	615a      	str	r2, [r3, #20]
}
 80140a0:	e08a      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_7){
 80140a2:	88fb      	ldrh	r3, [r7, #6]
 80140a4:	2b80      	cmp	r3, #128	; 0x80
 80140a6:	d11f      	bne.n	80140e8 <HAL_GPIO_EXTI_Callback+0x200>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80140a8:	2180      	movs	r1, #128	; 0x80
 80140aa:	4848      	ldr	r0, [pc, #288]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80140ac:	f002 f9ce 	bl	801644c <HAL_GPIO_ReadPin>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d10a      	bne.n	80140cc <HAL_GPIO_EXTI_Callback+0x1e4>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 80140b6:	2208      	movs	r2, #8
 80140b8:	4942      	ldr	r1, [pc, #264]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80140ba:	4843      	ldr	r0, [pc, #268]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80140bc:	f7fd fdfa 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80140c0:	2200      	movs	r2, #0
 80140c2:	2101      	movs	r1, #1
 80140c4:	4841      	ldr	r0, [pc, #260]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80140c6:	f002 f9d8 	bl	801647a <HAL_GPIO_WritePin>
 80140ca:	e009      	b.n	80140e0 <HAL_GPIO_EXTI_Callback+0x1f8>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,space_down,8);
 80140cc:	2208      	movs	r2, #8
 80140ce:	4947      	ldr	r1, [pc, #284]	; (80141ec <HAL_GPIO_EXTI_Callback+0x304>)
 80140d0:	483d      	ldr	r0, [pc, #244]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80140d2:	f7fd fdef 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80140d6:	2201      	movs	r2, #1
 80140d8:	2101      	movs	r1, #1
 80140da:	483c      	ldr	r0, [pc, #240]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80140dc:	f002 f9cd 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 80140e0:	4b3c      	ldr	r3, [pc, #240]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80140e2:	2280      	movs	r2, #128	; 0x80
 80140e4:	615a      	str	r2, [r3, #20]
}
 80140e6:	e067      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_4){
 80140e8:	88fb      	ldrh	r3, [r7, #6]
 80140ea:	2b10      	cmp	r3, #16
 80140ec:	d11f      	bne.n	801412e <HAL_GPIO_EXTI_Callback+0x246>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80140ee:	2110      	movs	r1, #16
 80140f0:	4836      	ldr	r0, [pc, #216]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80140f2:	f002 f9ab 	bl	801644c <HAL_GPIO_ReadPin>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d10a      	bne.n	8014112 <HAL_GPIO_EXTI_Callback+0x22a>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 80140fc:	2208      	movs	r2, #8
 80140fe:	4931      	ldr	r1, [pc, #196]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8014100:	4831      	ldr	r0, [pc, #196]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8014102:	f7fd fdd7 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8014106:	2200      	movs	r2, #0
 8014108:	2101      	movs	r1, #1
 801410a:	4830      	ldr	r0, [pc, #192]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 801410c:	f002 f9b5 	bl	801647a <HAL_GPIO_WritePin>
 8014110:	e009      	b.n	8014126 <HAL_GPIO_EXTI_Callback+0x23e>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,start_down,8);
 8014112:	2208      	movs	r2, #8
 8014114:	4936      	ldr	r1, [pc, #216]	; (80141f0 <HAL_GPIO_EXTI_Callback+0x308>)
 8014116:	482c      	ldr	r0, [pc, #176]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8014118:	f7fd fdcc 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 801411c:	2201      	movs	r2, #1
 801411e:	2101      	movs	r1, #1
 8014120:	482a      	ldr	r0, [pc, #168]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014122:	f002 f9aa 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8014126:	4b2b      	ldr	r3, [pc, #172]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8014128:	2210      	movs	r2, #16
 801412a:	615a      	str	r2, [r3, #20]
}
 801412c:	e044      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_5){
 801412e:	88fb      	ldrh	r3, [r7, #6]
 8014130:	2b20      	cmp	r3, #32
 8014132:	d11f      	bne.n	8014174 <HAL_GPIO_EXTI_Callback+0x28c>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8014134:	2120      	movs	r1, #32
 8014136:	4825      	ldr	r0, [pc, #148]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014138:	f002 f988 	bl	801644c <HAL_GPIO_ReadPin>
 801413c:	4603      	mov	r3, r0
 801413e:	2b01      	cmp	r3, #1
 8014140:	d10a      	bne.n	8014158 <HAL_GPIO_EXTI_Callback+0x270>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8014142:	2208      	movs	r2, #8
 8014144:	491f      	ldr	r1, [pc, #124]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8014146:	4820      	ldr	r0, [pc, #128]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8014148:	f7fd fdb4 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 801414c:	2200      	movs	r2, #0
 801414e:	2101      	movs	r1, #1
 8014150:	481e      	ldr	r0, [pc, #120]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014152:	f002 f992 	bl	801647a <HAL_GPIO_WritePin>
 8014156:	e009      	b.n	801416c <HAL_GPIO_EXTI_Callback+0x284>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,pause_down,8);
 8014158:	2208      	movs	r2, #8
 801415a:	4926      	ldr	r1, [pc, #152]	; (80141f4 <HAL_GPIO_EXTI_Callback+0x30c>)
 801415c:	481a      	ldr	r0, [pc, #104]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 801415e:	f7fd fda9 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8014162:	2201      	movs	r2, #1
 8014164:	2101      	movs	r1, #1
 8014166:	4819      	ldr	r0, [pc, #100]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014168:	f002 f987 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 801416c:	4b19      	ldr	r3, [pc, #100]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 801416e:	2220      	movs	r2, #32
 8014170:	615a      	str	r2, [r3, #20]
}
 8014172:	e021      	b.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
	 }else if(GPIO_Pin == GPIO_PIN_6){
 8014174:	88fb      	ldrh	r3, [r7, #6]
 8014176:	2b40      	cmp	r3, #64	; 0x40
 8014178:	d11e      	bne.n	80141b8 <HAL_GPIO_EXTI_Callback+0x2d0>
		 if(1==HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 801417a:	2140      	movs	r1, #64	; 0x40
 801417c:	4813      	ldr	r0, [pc, #76]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 801417e:	f002 f965 	bl	801644c <HAL_GPIO_ReadPin>
 8014182:	4603      	mov	r3, r0
 8014184:	2b01      	cmp	r3, #1
 8014186:	d10a      	bne.n	801419e <HAL_GPIO_EXTI_Callback+0x2b6>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8014188:	2208      	movs	r2, #8
 801418a:	490e      	ldr	r1, [pc, #56]	; (80141c4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 801418c:	480e      	ldr	r0, [pc, #56]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 801418e:	f7fd fd91 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8014192:	2200      	movs	r2, #0
 8014194:	2101      	movs	r1, #1
 8014196:	480d      	ldr	r0, [pc, #52]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8014198:	f002 f96f 	bl	801647a <HAL_GPIO_WritePin>
 801419c:	e009      	b.n	80141b2 <HAL_GPIO_EXTI_Callback+0x2ca>
			 DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,full_screem_down,8);
 801419e:	2208      	movs	r2, #8
 80141a0:	4915      	ldr	r1, [pc, #84]	; (80141f8 <HAL_GPIO_EXTI_Callback+0x310>)
 80141a2:	4809      	ldr	r0, [pc, #36]	; (80141c8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80141a4:	f7fd fd86 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80141a8:	2201      	movs	r2, #1
 80141aa:	2101      	movs	r1, #1
 80141ac:	4807      	ldr	r0, [pc, #28]	; (80141cc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80141ae:	f002 f964 	bl	801647a <HAL_GPIO_WritePin>
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 80141b2:	4b08      	ldr	r3, [pc, #32]	; (80141d4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80141b4:	2240      	movs	r2, #64	; 0x40
 80141b6:	615a      	str	r2, [r3, #20]
}
 80141b8:	bf00      	nop
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	40011000 	.word	0x40011000
 80141c4:	200006e0 	.word	0x200006e0
 80141c8:	20001514 	.word	0x20001514
 80141cc:	40010c00 	.word	0x40010c00
 80141d0:	20000324 	.word	0x20000324
 80141d4:	40010400 	.word	0x40010400
 80141d8:	2000032c 	.word	0x2000032c
 80141dc:	20000334 	.word	0x20000334
 80141e0:	2000033c 	.word	0x2000033c
 80141e4:	20000344 	.word	0x20000344
 80141e8:	2000034c 	.word	0x2000034c
 80141ec:	20000354 	.word	0x20000354
 80141f0:	20000364 	.word	0x20000364
 80141f4:	2000036c 	.word	0x2000036c
 80141f8:	20000374 	.word	0x20000374
 80141fc:	00000000 	.word	0x00000000

08014200 <reportAnalogstick>:

void reportAnalogstick(){
 8014200:	b598      	push	{r3, r4, r7, lr}
 8014202:	af00      	add	r7, sp, #0
	if(fabs(old_x-ad0)>=1){
 8014204:	4b66      	ldr	r3, [pc, #408]	; (80143a0 <reportAnalogstick+0x1a0>)
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	4b66      	ldr	r3, [pc, #408]	; (80143a4 <reportAnalogstick+0x1a4>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	4619      	mov	r1, r3
 801420e:	4610      	mov	r0, r2
 8014210:	f7fa fd1a 	bl	800ec48 <__aeabi_fsub>
 8014214:	4603      	mov	r3, r0
 8014216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801421a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801421e:	4618      	mov	r0, r3
 8014220:	f7fa ffce 	bl	800f1c0 <__aeabi_fcmpge>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d04d      	beq.n	80142c6 <reportAnalogstick+0xc6>
//		HAL_Delay(1);
		printf("old_x==%f\n",old_x);
 801422a:	4b5d      	ldr	r3, [pc, #372]	; (80143a0 <reportAnalogstick+0x1a0>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	4618      	mov	r0, r3
 8014230:	f7fa f966 	bl	800e500 <__aeabi_f2d>
 8014234:	4603      	mov	r3, r0
 8014236:	460c      	mov	r4, r1
 8014238:	461a      	mov	r2, r3
 801423a:	4623      	mov	r3, r4
 801423c:	485a      	ldr	r0, [pc, #360]	; (80143a8 <reportAnalogstick+0x1a8>)
 801423e:	f00a fa89 	bl	801e754 <iprintf>
		printf("ad0==%f\n",ad0);
 8014242:	4b58      	ldr	r3, [pc, #352]	; (80143a4 <reportAnalogstick+0x1a4>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4618      	mov	r0, r3
 8014248:	f7fa f95a 	bl	800e500 <__aeabi_f2d>
 801424c:	4603      	mov	r3, r0
 801424e:	460c      	mov	r4, r1
 8014250:	461a      	mov	r2, r3
 8014252:	4623      	mov	r3, r4
 8014254:	4855      	ldr	r0, [pc, #340]	; (80143ac <reportAnalogstick+0x1ac>)
 8014256:	f00a fa7d 	bl	801e754 <iprintf>
		if(ad0<0.6){
 801425a:	4b52      	ldr	r3, [pc, #328]	; (80143a4 <reportAnalogstick+0x1a4>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	4618      	mov	r0, r3
 8014260:	f7fa f94e 	bl	800e500 <__aeabi_f2d>
 8014264:	a34a      	add	r3, pc, #296	; (adr r3, 8014390 <reportAnalogstick+0x190>)
 8014266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426a:	f7fa fc13 	bl	800ea94 <__aeabi_dcmplt>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d009      	beq.n	8014288 <reportAnalogstick+0x88>
			old_x=ad0;
 8014274:	4b4b      	ldr	r3, [pc, #300]	; (80143a4 <reportAnalogstick+0x1a4>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4a49      	ldr	r2, [pc, #292]	; (80143a0 <reportAnalogstick+0x1a0>)
 801427a:	6013      	str	r3, [r2, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,a_down,8);
 801427c:	2208      	movs	r2, #8
 801427e:	494c      	ldr	r1, [pc, #304]	; (80143b0 <reportAnalogstick+0x1b0>)
 8014280:	484c      	ldr	r0, [pc, #304]	; (80143b4 <reportAnalogstick+0x1b4>)
 8014282:	f7fd fd17 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
 8014286:	e01e      	b.n	80142c6 <reportAnalogstick+0xc6>
		}else if(ad0>2.6){
 8014288:	4b46      	ldr	r3, [pc, #280]	; (80143a4 <reportAnalogstick+0x1a4>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	4618      	mov	r0, r3
 801428e:	f7fa f937 	bl	800e500 <__aeabi_f2d>
 8014292:	a341      	add	r3, pc, #260	; (adr r3, 8014398 <reportAnalogstick+0x198>)
 8014294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014298:	f7fa fc1a 	bl	800ead0 <__aeabi_dcmpgt>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d009      	beq.n	80142b6 <reportAnalogstick+0xb6>
			old_x=ad0;
 80142a2:	4b40      	ldr	r3, [pc, #256]	; (80143a4 <reportAnalogstick+0x1a4>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	4a3e      	ldr	r2, [pc, #248]	; (80143a0 <reportAnalogstick+0x1a0>)
 80142a8:	6013      	str	r3, [r2, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,d_down,8);
 80142aa:	2208      	movs	r2, #8
 80142ac:	4942      	ldr	r1, [pc, #264]	; (80143b8 <reportAnalogstick+0x1b8>)
 80142ae:	4841      	ldr	r0, [pc, #260]	; (80143b4 <reportAnalogstick+0x1b4>)
 80142b0:	f7fd fd00 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
 80142b4:	e007      	b.n	80142c6 <reportAnalogstick+0xc6>
		}else{
			old_x=1.6;
 80142b6:	4b3a      	ldr	r3, [pc, #232]	; (80143a0 <reportAnalogstick+0x1a0>)
 80142b8:	4a40      	ldr	r2, [pc, #256]	; (80143bc <reportAnalogstick+0x1bc>)
 80142ba:	601a      	str	r2, [r3, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 80142bc:	2208      	movs	r2, #8
 80142be:	4940      	ldr	r1, [pc, #256]	; (80143c0 <reportAnalogstick+0x1c0>)
 80142c0:	483c      	ldr	r0, [pc, #240]	; (80143b4 <reportAnalogstick+0x1b4>)
 80142c2:	f7fd fcf7 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
		}

	}

	if(fabs(old_y-ad1)>=1){
 80142c6:	4b3f      	ldr	r3, [pc, #252]	; (80143c4 <reportAnalogstick+0x1c4>)
 80142c8:	681a      	ldr	r2, [r3, #0]
 80142ca:	4b3f      	ldr	r3, [pc, #252]	; (80143c8 <reportAnalogstick+0x1c8>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4619      	mov	r1, r3
 80142d0:	4610      	mov	r0, r2
 80142d2:	f7fa fcb9 	bl	800ec48 <__aeabi_fsub>
 80142d6:	4603      	mov	r3, r0
 80142d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fa ff6d 	bl	800f1c0 <__aeabi_fcmpge>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d100      	bne.n	80142ee <reportAnalogstick+0xee>
			old_y=1.6;
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
		}

	}
}
 80142ec:	e04d      	b.n	801438a <reportAnalogstick+0x18a>
		printf("old_y==%f\n",old_y);
 80142ee:	4b35      	ldr	r3, [pc, #212]	; (80143c4 <reportAnalogstick+0x1c4>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fa f904 	bl	800e500 <__aeabi_f2d>
 80142f8:	4603      	mov	r3, r0
 80142fa:	460c      	mov	r4, r1
 80142fc:	461a      	mov	r2, r3
 80142fe:	4623      	mov	r3, r4
 8014300:	4832      	ldr	r0, [pc, #200]	; (80143cc <reportAnalogstick+0x1cc>)
 8014302:	f00a fa27 	bl	801e754 <iprintf>
		printf("ad1==%f\n",ad1);
 8014306:	4b30      	ldr	r3, [pc, #192]	; (80143c8 <reportAnalogstick+0x1c8>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4618      	mov	r0, r3
 801430c:	f7fa f8f8 	bl	800e500 <__aeabi_f2d>
 8014310:	4603      	mov	r3, r0
 8014312:	460c      	mov	r4, r1
 8014314:	461a      	mov	r2, r3
 8014316:	4623      	mov	r3, r4
 8014318:	482d      	ldr	r0, [pc, #180]	; (80143d0 <reportAnalogstick+0x1d0>)
 801431a:	f00a fa1b 	bl	801e754 <iprintf>
		if(ad1<0.6){
 801431e:	4b2a      	ldr	r3, [pc, #168]	; (80143c8 <reportAnalogstick+0x1c8>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4618      	mov	r0, r3
 8014324:	f7fa f8ec 	bl	800e500 <__aeabi_f2d>
 8014328:	a319      	add	r3, pc, #100	; (adr r3, 8014390 <reportAnalogstick+0x190>)
 801432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432e:	f7fa fbb1 	bl	800ea94 <__aeabi_dcmplt>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d009      	beq.n	801434c <reportAnalogstick+0x14c>
			old_y=ad1;
 8014338:	4b23      	ldr	r3, [pc, #140]	; (80143c8 <reportAnalogstick+0x1c8>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4a21      	ldr	r2, [pc, #132]	; (80143c4 <reportAnalogstick+0x1c4>)
 801433e:	6013      	str	r3, [r2, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,s_down,8);
 8014340:	2208      	movs	r2, #8
 8014342:	4924      	ldr	r1, [pc, #144]	; (80143d4 <reportAnalogstick+0x1d4>)
 8014344:	481b      	ldr	r0, [pc, #108]	; (80143b4 <reportAnalogstick+0x1b4>)
 8014346:	f7fd fcb5 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
}
 801434a:	e01e      	b.n	801438a <reportAnalogstick+0x18a>
		}else if(ad1>2.6){
 801434c:	4b1e      	ldr	r3, [pc, #120]	; (80143c8 <reportAnalogstick+0x1c8>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	4618      	mov	r0, r3
 8014352:	f7fa f8d5 	bl	800e500 <__aeabi_f2d>
 8014356:	a310      	add	r3, pc, #64	; (adr r3, 8014398 <reportAnalogstick+0x198>)
 8014358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435c:	f7fa fbb8 	bl	800ead0 <__aeabi_dcmpgt>
 8014360:	4603      	mov	r3, r0
 8014362:	2b00      	cmp	r3, #0
 8014364:	d009      	beq.n	801437a <reportAnalogstick+0x17a>
			old_y=ad1;
 8014366:	4b18      	ldr	r3, [pc, #96]	; (80143c8 <reportAnalogstick+0x1c8>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	4a16      	ldr	r2, [pc, #88]	; (80143c4 <reportAnalogstick+0x1c4>)
 801436c:	6013      	str	r3, [r2, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,w_down,8);
 801436e:	2208      	movs	r2, #8
 8014370:	4919      	ldr	r1, [pc, #100]	; (80143d8 <reportAnalogstick+0x1d8>)
 8014372:	4810      	ldr	r0, [pc, #64]	; (80143b4 <reportAnalogstick+0x1b4>)
 8014374:	f7fd fc9e 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
}
 8014378:	e007      	b.n	801438a <reportAnalogstick+0x18a>
			old_y=1.6;
 801437a:	4b12      	ldr	r3, [pc, #72]	; (80143c4 <reportAnalogstick+0x1c4>)
 801437c:	4a0f      	ldr	r2, [pc, #60]	; (80143bc <reportAnalogstick+0x1bc>)
 801437e:	601a      	str	r2, [r3, #0]
			DFR_USBD_KEYBOARD_HID_SendReport(&hUsbDeviceFS,key_up,8);
 8014380:	2208      	movs	r2, #8
 8014382:	490f      	ldr	r1, [pc, #60]	; (80143c0 <reportAnalogstick+0x1c0>)
 8014384:	480b      	ldr	r0, [pc, #44]	; (80143b4 <reportAnalogstick+0x1b4>)
 8014386:	f7fd fc95 	bl	8011cb4 <DFR_USBD_KEYBOARD_HID_SendReport>
}
 801438a:	bf00      	nop
 801438c:	bd98      	pop	{r3, r4, r7, pc}
 801438e:	bf00      	nop
 8014390:	33333333 	.word	0x33333333
 8014394:	3fe33333 	.word	0x3fe33333
 8014398:	cccccccd 	.word	0xcccccccd
 801439c:	4004cccc 	.word	0x4004cccc
 80143a0:	2000035c 	.word	0x2000035c
 80143a4:	20001234 	.word	0x20001234
 80143a8:	0802042c 	.word	0x0802042c
 80143ac:	08020438 	.word	0x08020438
 80143b0:	20000304 	.word	0x20000304
 80143b4:	20001514 	.word	0x20001514
 80143b8:	2000030c 	.word	0x2000030c
 80143bc:	3fcccccd 	.word	0x3fcccccd
 80143c0:	200006e0 	.word	0x200006e0
 80143c4:	20000360 	.word	0x20000360
 80143c8:	20001410 	.word	0x20001410
 80143cc:	08020444 	.word	0x08020444
 80143d0:	08020450 	.word	0x08020450
 80143d4:	2000031c 	.word	0x2000031c
 80143d8:	20000314 	.word	0x20000314
 80143dc:	00000000 	.word	0x00000000

080143e0 <HAL_ADC_ConvCpltCallback>:


uint32_t ADC_Value[100];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80143e0:	b590      	push	{r4, r7, lr}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  ad0 = (float)ADC_Value[0] / 4096 * 3.3;
 80143e8:	4b21      	ldr	r3, [pc, #132]	; (8014470 <HAL_ADC_ConvCpltCallback+0x90>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fa fcdd 	bl	800edac <__aeabi_ui2f>
 80143f2:	4603      	mov	r3, r0
 80143f4:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fa fde3 	bl	800efc4 <__aeabi_fdiv>
 80143fe:	4603      	mov	r3, r0
 8014400:	4618      	mov	r0, r3
 8014402:	f7fa f87d 	bl	800e500 <__aeabi_f2d>
 8014406:	a318      	add	r3, pc, #96	; (adr r3, 8014468 <HAL_ADC_ConvCpltCallback+0x88>)
 8014408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440c:	f7fa f8d0 	bl	800e5b0 <__aeabi_dmul>
 8014410:	4603      	mov	r3, r0
 8014412:	460c      	mov	r4, r1
 8014414:	4618      	mov	r0, r3
 8014416:	4621      	mov	r1, r4
 8014418:	f7fa fbc2 	bl	800eba0 <__aeabi_d2f>
 801441c:	4602      	mov	r2, r0
 801441e:	4b15      	ldr	r3, [pc, #84]	; (8014474 <HAL_ADC_ConvCpltCallback+0x94>)
 8014420:	601a      	str	r2, [r3, #0]
  ad1 = (float)ADC_Value[1] / 4096 * 3.3;
 8014422:	4b13      	ldr	r3, [pc, #76]	; (8014470 <HAL_ADC_ConvCpltCallback+0x90>)
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	f7fa fcc0 	bl	800edac <__aeabi_ui2f>
 801442c:	4603      	mov	r3, r0
 801442e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8014432:	4618      	mov	r0, r3
 8014434:	f7fa fdc6 	bl	800efc4 <__aeabi_fdiv>
 8014438:	4603      	mov	r3, r0
 801443a:	4618      	mov	r0, r3
 801443c:	f7fa f860 	bl	800e500 <__aeabi_f2d>
 8014440:	a309      	add	r3, pc, #36	; (adr r3, 8014468 <HAL_ADC_ConvCpltCallback+0x88>)
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	f7fa f8b3 	bl	800e5b0 <__aeabi_dmul>
 801444a:	4603      	mov	r3, r0
 801444c:	460c      	mov	r4, r1
 801444e:	4618      	mov	r0, r3
 8014450:	4621      	mov	r1, r4
 8014452:	f7fa fba5 	bl	800eba0 <__aeabi_d2f>
 8014456:	4602      	mov	r2, r0
 8014458:	4b07      	ldr	r3, [pc, #28]	; (8014478 <HAL_ADC_ConvCpltCallback+0x98>)
 801445a:	601a      	str	r2, [r3, #0]
}
 801445c:	bf00      	nop
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	bd90      	pop	{r4, r7, pc}
 8014464:	f3af 8000 	nop.w
 8014468:	66666666 	.word	0x66666666
 801446c:	400a6666 	.word	0x400a6666
 8014470:	20001280 	.word	0x20001280
 8014474:	20001234 	.word	0x20001234
 8014478:	20001410 	.word	0x20001410

0801447c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{
//		reportAnalogstick();
	}

}
 8014484:	bf00      	nop
 8014486:	370c      	adds	r7, #12
 8014488:	46bd      	mov	sp, r7
 801448a:	bc80      	pop	{r7}
 801448c:	4770      	bx	lr
	...

08014490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR=0x0800e000;
 8014494:	4b1f      	ldr	r3, [pc, #124]	; (8014514 <main+0x84>)
 8014496:	4a20      	ldr	r2, [pc, #128]	; (8014518 <main+0x88>)
 8014498:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801449a:	f000 fdd7 	bl	801504c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 801449e:	2100      	movs	r1, #0
 80144a0:	481e      	ldr	r0, [pc, #120]	; (801451c <main+0x8c>)
 80144a2:	f005 f8dd 	bl	8019660 <HAL_TIM_PWM_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80144a6:	f000 f849 	bl	801453c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,0);
 80144aa:	2200      	movs	r2, #0
 80144ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80144b0:	481b      	ldr	r0, [pc, #108]	; (8014520 <main+0x90>)
 80144b2:	f001 ffe2 	bl	801647a <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80144b6:	f000 fa05 	bl	80148c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80144ba:	f000 f9e5 	bl	8014888 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80144be:	f009 f81d 	bl	801d4fc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80144c2:	f000 f969 	bl	8014798 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80144c6:	f000 f9b5 	bl	8014834 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80144ca:	f000 f897 	bl	80145fc <MX_ADC1_Init>
  MX_I2C2_Init();
 80144ce:	f000 f8e3 	bl	8014698 <MX_I2C2_Init>
  MX_TIM1_Init();
 80144d2:	f000 f90f 	bl	80146f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim1);
 80144d6:	4813      	ldr	r0, [pc, #76]	; (8014524 <main+0x94>)
 80144d8:	f005 f862 	bl	80195a0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,1);
 80144dc:	2201      	movs	r2, #1
 80144de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80144e2:	480f      	ldr	r0, [pc, #60]	; (8014520 <main+0x90>)
 80144e4:	f001 ffc9 	bl	801647a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1,ADC_Value,100);
 80144e8:	2264      	movs	r2, #100	; 0x64
 80144ea:	490f      	ldr	r1, [pc, #60]	; (8014528 <main+0x98>)
 80144ec:	480f      	ldr	r0, [pc, #60]	; (801452c <main+0x9c>)
 80144ee:	f000 ff1b 	bl	8015328 <HAL_ADC_Start_DMA>
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  reportAnalogstick();
 80144f2:	f7ff fe85 	bl	8014200 <reportAnalogstick>
	  if(flag2==1){
 80144f6:	4b0e      	ldr	r3, [pc, #56]	; (8014530 <main+0xa0>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d1f9      	bne.n	80144f2 <main+0x62>
		  firmata_parse(my_RxBuf,my_RxLength);
 80144fe:	4b0d      	ldr	r3, [pc, #52]	; (8014534 <main+0xa4>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	4619      	mov	r1, r3
 8014504:	480c      	ldr	r0, [pc, #48]	; (8014538 <main+0xa8>)
 8014506:	f7ff fc61 	bl	8013dcc <firmata_parse>
		  flag2=0;
 801450a:	4b09      	ldr	r3, [pc, #36]	; (8014530 <main+0xa0>)
 801450c:	2200      	movs	r2, #0
 801450e:	701a      	strb	r2, [r3, #0]
	  reportAnalogstick();
 8014510:	e7ef      	b.n	80144f2 <main+0x62>
 8014512:	bf00      	nop
 8014514:	e000ed00 	.word	0xe000ed00
 8014518:	0800e000 	.word	0x0800e000
 801451c:	20001238 	.word	0x20001238
 8014520:	40011000 	.word	0x40011000
 8014524:	200014c8 	.word	0x200014c8
 8014528:	20001280 	.word	0x20001280
 801452c:	20001414 	.word	0x20001414
 8014530:	20000d60 	.word	0x20000d60
 8014534:	2000114c 	.word	0x2000114c
 8014538:	20001150 	.word	0x20001150

0801453c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 801453c:	b580      	push	{r7, lr}
 801453e:	b096      	sub	sp, #88	; 0x58
 8014540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014546:	2228      	movs	r2, #40	; 0x28
 8014548:	2100      	movs	r1, #0
 801454a:	4618      	mov	r0, r3
 801454c:	f009 fc03 	bl	801dd56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014550:	f107 031c 	add.w	r3, r7, #28
 8014554:	2200      	movs	r2, #0
 8014556:	601a      	str	r2, [r3, #0]
 8014558:	605a      	str	r2, [r3, #4]
 801455a:	609a      	str	r2, [r3, #8]
 801455c:	60da      	str	r2, [r3, #12]
 801455e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8014560:	1d3b      	adds	r3, r7, #4
 8014562:	2200      	movs	r2, #0
 8014564:	601a      	str	r2, [r3, #0]
 8014566:	605a      	str	r2, [r3, #4]
 8014568:	609a      	str	r2, [r3, #8]
 801456a:	60da      	str	r2, [r3, #12]
 801456c:	611a      	str	r2, [r3, #16]
 801456e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8014570:	2301      	movs	r3, #1
 8014572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 801457a:	2300      	movs	r3, #0
 801457c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801457e:	2301      	movs	r3, #1
 8014580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014582:	2302      	movs	r3, #2
 8014584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8014586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801458a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 801458c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014596:	4618      	mov	r0, r3
 8014598:	f004 fae0 	bl	8018b5c <HAL_RCC_OscConfig>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d001      	beq.n	80145a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80145a2:	f000 fa83 	bl	8014aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80145a6:	230f      	movs	r3, #15
 80145a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80145aa:	2302      	movs	r3, #2
 80145ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80145ae:	2300      	movs	r3, #0
 80145b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80145b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80145b8:	2300      	movs	r3, #0
 80145ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80145bc:	f107 031c 	add.w	r3, r7, #28
 80145c0:	2101      	movs	r1, #1
 80145c2:	4618      	mov	r0, r3
 80145c4:	f004 fd4a 	bl	801905c <HAL_RCC_ClockConfig>
 80145c8:	4603      	mov	r3, r0
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d001      	beq.n	80145d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80145ce:	f000 fa6d 	bl	8014aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80145d2:	2312      	movs	r3, #18
 80145d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80145d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80145da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80145dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80145e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80145e2:	1d3b      	adds	r3, r7, #4
 80145e4:	4618      	mov	r0, r3
 80145e6:	f004 fed5 	bl	8019394 <HAL_RCCEx_PeriphCLKConfig>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d001      	beq.n	80145f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80145f0:	f000 fa5c 	bl	8014aac <Error_Handler>
  }
}
 80145f4:	bf00      	nop
 80145f6:	3758      	adds	r7, #88	; 0x58
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8014602:	1d3b      	adds	r3, r7, #4
 8014604:	2200      	movs	r2, #0
 8014606:	601a      	str	r2, [r3, #0]
 8014608:	605a      	str	r2, [r3, #4]
 801460a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 801460c:	4b20      	ldr	r3, [pc, #128]	; (8014690 <MX_ADC1_Init+0x94>)
 801460e:	4a21      	ldr	r2, [pc, #132]	; (8014694 <MX_ADC1_Init+0x98>)
 8014610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8014612:	4b1f      	ldr	r3, [pc, #124]	; (8014690 <MX_ADC1_Init+0x94>)
 8014614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801461a:	4b1d      	ldr	r3, [pc, #116]	; (8014690 <MX_ADC1_Init+0x94>)
 801461c:	2201      	movs	r2, #1
 801461e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014620:	4b1b      	ldr	r3, [pc, #108]	; (8014690 <MX_ADC1_Init+0x94>)
 8014622:	2200      	movs	r2, #0
 8014624:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8014626:	4b1a      	ldr	r3, [pc, #104]	; (8014690 <MX_ADC1_Init+0x94>)
 8014628:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 801462c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801462e:	4b18      	ldr	r3, [pc, #96]	; (8014690 <MX_ADC1_Init+0x94>)
 8014630:	2200      	movs	r2, #0
 8014632:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8014634:	4b16      	ldr	r3, [pc, #88]	; (8014690 <MX_ADC1_Init+0x94>)
 8014636:	2202      	movs	r2, #2
 8014638:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801463a:	4815      	ldr	r0, [pc, #84]	; (8014690 <MX_ADC1_Init+0x94>)
 801463c:	f000 fd8a 	bl	8015154 <HAL_ADC_Init>
 8014640:	4603      	mov	r3, r0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d001      	beq.n	801464a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8014646:	f000 fa31 	bl	8014aac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 801464a:	2300      	movs	r3, #0
 801464c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801464e:	2301      	movs	r3, #1
 8014650:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8014652:	2300      	movs	r3, #0
 8014654:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014656:	1d3b      	adds	r3, r7, #4
 8014658:	4619      	mov	r1, r3
 801465a:	480d      	ldr	r0, [pc, #52]	; (8014690 <MX_ADC1_Init+0x94>)
 801465c:	f000 ff54 	bl	8015508 <HAL_ADC_ConfigChannel>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d001      	beq.n	801466a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8014666:	f000 fa21 	bl	8014aac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 801466a:	2301      	movs	r3, #1
 801466c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801466e:	2302      	movs	r3, #2
 8014670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014672:	1d3b      	adds	r3, r7, #4
 8014674:	4619      	mov	r1, r3
 8014676:	4806      	ldr	r0, [pc, #24]	; (8014690 <MX_ADC1_Init+0x94>)
 8014678:	f000 ff46 	bl	8015508 <HAL_ADC_ConfigChannel>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d001      	beq.n	8014686 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8014682:	f000 fa13 	bl	8014aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8014686:	bf00      	nop
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	20001414 	.word	0x20001414
 8014694:	40012400 	.word	0x40012400

08014698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 801469c:	4b12      	ldr	r3, [pc, #72]	; (80146e8 <MX_I2C2_Init+0x50>)
 801469e:	4a13      	ldr	r2, [pc, #76]	; (80146ec <MX_I2C2_Init+0x54>)
 80146a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80146a2:	4b11      	ldr	r3, [pc, #68]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146a4:	4a12      	ldr	r2, [pc, #72]	; (80146f0 <MX_I2C2_Init+0x58>)
 80146a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80146a8:	4b0f      	ldr	r3, [pc, #60]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146aa:	2200      	movs	r2, #0
 80146ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80146ae:	4b0e      	ldr	r3, [pc, #56]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146b0:	2200      	movs	r2, #0
 80146b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80146b4:	4b0c      	ldr	r3, [pc, #48]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80146ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80146bc:	4b0a      	ldr	r3, [pc, #40]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146be:	2200      	movs	r2, #0
 80146c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80146c2:	4b09      	ldr	r3, [pc, #36]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146c4:	2200      	movs	r2, #0
 80146c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80146c8:	4b07      	ldr	r3, [pc, #28]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146ca:	2200      	movs	r2, #0
 80146cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80146ce:	4b06      	ldr	r3, [pc, #24]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146d0:	2200      	movs	r2, #0
 80146d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80146d4:	4804      	ldr	r0, [pc, #16]	; (80146e8 <MX_I2C2_Init+0x50>)
 80146d6:	f001 ff01 	bl	80164dc <HAL_I2C_Init>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80146e0:	f000 f9e4 	bl	8014aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80146e4:	bf00      	nop
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	20000918 	.word	0x20000918
 80146ec:	40005800 	.word	0x40005800
 80146f0:	000186a0 	.word	0x000186a0

080146f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b086      	sub	sp, #24
 80146f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80146fa:	f107 0308 	add.w	r3, r7, #8
 80146fe:	2200      	movs	r2, #0
 8014700:	601a      	str	r2, [r3, #0]
 8014702:	605a      	str	r2, [r3, #4]
 8014704:	609a      	str	r2, [r3, #8]
 8014706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014708:	463b      	mov	r3, r7
 801470a:	2200      	movs	r2, #0
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8014710:	4b1f      	ldr	r3, [pc, #124]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014712:	4a20      	ldr	r2, [pc, #128]	; (8014794 <MX_TIM1_Init+0xa0>)
 8014714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8014716:	4b1e      	ldr	r3, [pc, #120]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014718:	f241 22bf 	movw	r2, #4799	; 0x12bf
 801471c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801471e:	4b1c      	ldr	r3, [pc, #112]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014720:	2200      	movs	r2, #0
 8014722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8014724:	4b1a      	ldr	r3, [pc, #104]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014726:	f242 720f 	movw	r2, #9999	; 0x270f
 801472a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801472c:	4b18      	ldr	r3, [pc, #96]	; (8014790 <MX_TIM1_Init+0x9c>)
 801472e:	2200      	movs	r2, #0
 8014730:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8014732:	4b17      	ldr	r3, [pc, #92]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014734:	2200      	movs	r2, #0
 8014736:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014738:	4b15      	ldr	r3, [pc, #84]	; (8014790 <MX_TIM1_Init+0x9c>)
 801473a:	2200      	movs	r2, #0
 801473c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801473e:	4814      	ldr	r0, [pc, #80]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014740:	f004 fede 	bl	8019500 <HAL_TIM_Base_Init>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d001      	beq.n	801474e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 801474a:	f000 f9af 	bl	8014aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801474e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8014754:	f107 0308 	add.w	r3, r7, #8
 8014758:	4619      	mov	r1, r3
 801475a:	480d      	ldr	r0, [pc, #52]	; (8014790 <MX_TIM1_Init+0x9c>)
 801475c:	f005 f942 	bl	80199e4 <HAL_TIM_ConfigClockSource>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d001      	beq.n	801476a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8014766:	f000 f9a1 	bl	8014aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801476a:	2300      	movs	r3, #0
 801476c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801476e:	2300      	movs	r3, #0
 8014770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8014772:	463b      	mov	r3, r7
 8014774:	4619      	mov	r1, r3
 8014776:	4806      	ldr	r0, [pc, #24]	; (8014790 <MX_TIM1_Init+0x9c>)
 8014778:	f005 fb44 	bl	8019e04 <HAL_TIMEx_MasterConfigSynchronization>
 801477c:	4603      	mov	r3, r0
 801477e:	2b00      	cmp	r3, #0
 8014780:	d001      	beq.n	8014786 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8014782:	f000 f993 	bl	8014aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8014786:	bf00      	nop
 8014788:	3718      	adds	r7, #24
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	200014c8 	.word	0x200014c8
 8014794:	40012c00 	.word	0x40012c00

08014798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801479e:	f107 0308 	add.w	r3, r7, #8
 80147a2:	2200      	movs	r2, #0
 80147a4:	601a      	str	r2, [r3, #0]
 80147a6:	605a      	str	r2, [r3, #4]
 80147a8:	609a      	str	r2, [r3, #8]
 80147aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80147ac:	463b      	mov	r3, r7
 80147ae:	2200      	movs	r2, #0
 80147b0:	601a      	str	r2, [r3, #0]
 80147b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80147b4:	4b1d      	ldr	r3, [pc, #116]	; (801482c <MX_TIM3_Init+0x94>)
 80147b6:	4a1e      	ldr	r2, [pc, #120]	; (8014830 <MX_TIM3_Init+0x98>)
 80147b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80147ba:	4b1c      	ldr	r3, [pc, #112]	; (801482c <MX_TIM3_Init+0x94>)
 80147bc:	f240 4237 	movw	r2, #1079	; 0x437
 80147c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80147c2:	4b1a      	ldr	r3, [pc, #104]	; (801482c <MX_TIM3_Init+0x94>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80147c8:	4b18      	ldr	r3, [pc, #96]	; (801482c <MX_TIM3_Init+0x94>)
 80147ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80147ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80147d0:	4b16      	ldr	r3, [pc, #88]	; (801482c <MX_TIM3_Init+0x94>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80147d6:	4b15      	ldr	r3, [pc, #84]	; (801482c <MX_TIM3_Init+0x94>)
 80147d8:	2280      	movs	r2, #128	; 0x80
 80147da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80147dc:	4813      	ldr	r0, [pc, #76]	; (801482c <MX_TIM3_Init+0x94>)
 80147de:	f004 fe8f 	bl	8019500 <HAL_TIM_Base_Init>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d001      	beq.n	80147ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80147e8:	f000 f960 	bl	8014aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80147ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80147f2:	f107 0308 	add.w	r3, r7, #8
 80147f6:	4619      	mov	r1, r3
 80147f8:	480c      	ldr	r0, [pc, #48]	; (801482c <MX_TIM3_Init+0x94>)
 80147fa:	f005 f8f3 	bl	80199e4 <HAL_TIM_ConfigClockSource>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d001      	beq.n	8014808 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8014804:	f000 f952 	bl	8014aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014808:	2300      	movs	r3, #0
 801480a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801480c:	2300      	movs	r3, #0
 801480e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8014810:	463b      	mov	r3, r7
 8014812:	4619      	mov	r1, r3
 8014814:	4805      	ldr	r0, [pc, #20]	; (801482c <MX_TIM3_Init+0x94>)
 8014816:	f005 faf5 	bl	8019e04 <HAL_TIMEx_MasterConfigSynchronization>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d001      	beq.n	8014824 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8014820:	f000 f944 	bl	8014aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8014824:	bf00      	nop
 8014826:	3718      	adds	r7, #24
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	20001238 	.word	0x20001238
 8014830:	40000400 	.word	0x40000400

08014834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014838:	4b11      	ldr	r3, [pc, #68]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 801483a:	4a12      	ldr	r2, [pc, #72]	; (8014884 <MX_USART1_UART_Init+0x50>)
 801483c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801483e:	4b10      	ldr	r3, [pc, #64]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 8014840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014846:	4b0e      	ldr	r3, [pc, #56]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 8014848:	2200      	movs	r2, #0
 801484a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801484c:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 801484e:	2200      	movs	r2, #0
 8014850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014852:	4b0b      	ldr	r3, [pc, #44]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 8014854:	2200      	movs	r2, #0
 8014856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014858:	4b09      	ldr	r3, [pc, #36]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 801485a:	220c      	movs	r2, #12
 801485c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801485e:	4b08      	ldr	r3, [pc, #32]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 8014860:	2200      	movs	r2, #0
 8014862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014864:	4b06      	ldr	r3, [pc, #24]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 8014866:	2200      	movs	r2, #0
 8014868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801486a:	4805      	ldr	r0, [pc, #20]	; (8014880 <MX_USART1_UART_Init+0x4c>)
 801486c:	f005 fb48 	bl	8019f00 <HAL_UART_Init>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d001      	beq.n	801487a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8014876:	f000 f919 	bl	8014aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801487a:	bf00      	nop
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20001444 	.word	0x20001444
 8014884:	40013800 	.word	0x40013800

08014888 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801488e:	4b0c      	ldr	r3, [pc, #48]	; (80148c0 <MX_DMA_Init+0x38>)
 8014890:	695b      	ldr	r3, [r3, #20]
 8014892:	4a0b      	ldr	r2, [pc, #44]	; (80148c0 <MX_DMA_Init+0x38>)
 8014894:	f043 0301 	orr.w	r3, r3, #1
 8014898:	6153      	str	r3, [r2, #20]
 801489a:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <MX_DMA_Init+0x38>)
 801489c:	695b      	ldr	r3, [r3, #20]
 801489e:	f003 0301 	and.w	r3, r3, #1
 80148a2:	607b      	str	r3, [r7, #4]
 80148a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80148a6:	2200      	movs	r2, #0
 80148a8:	2100      	movs	r1, #0
 80148aa:	200b      	movs	r0, #11
 80148ac:	f001 f8ed 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80148b0:	200b      	movs	r0, #11
 80148b2:	f001 f906 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

}
 80148b6:	bf00      	nop
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	40021000 	.word	0x40021000

080148c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b088      	sub	sp, #32
 80148c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80148ca:	f107 0310 	add.w	r3, r7, #16
 80148ce:	2200      	movs	r2, #0
 80148d0:	601a      	str	r2, [r3, #0]
 80148d2:	605a      	str	r2, [r3, #4]
 80148d4:	609a      	str	r2, [r3, #8]
 80148d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80148d8:	4b6e      	ldr	r3, [pc, #440]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148da:	699b      	ldr	r3, [r3, #24]
 80148dc:	4a6d      	ldr	r2, [pc, #436]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148de:	f043 0320 	orr.w	r3, r3, #32
 80148e2:	6193      	str	r3, [r2, #24]
 80148e4:	4b6b      	ldr	r3, [pc, #428]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148e6:	699b      	ldr	r3, [r3, #24]
 80148e8:	f003 0320 	and.w	r3, r3, #32
 80148ec:	60fb      	str	r3, [r7, #12]
 80148ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80148f0:	4b68      	ldr	r3, [pc, #416]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148f2:	699b      	ldr	r3, [r3, #24]
 80148f4:	4a67      	ldr	r2, [pc, #412]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148f6:	f043 0310 	orr.w	r3, r3, #16
 80148fa:	6193      	str	r3, [r2, #24]
 80148fc:	4b65      	ldr	r3, [pc, #404]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 80148fe:	699b      	ldr	r3, [r3, #24]
 8014900:	f003 0310 	and.w	r3, r3, #16
 8014904:	60bb      	str	r3, [r7, #8]
 8014906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014908:	4b62      	ldr	r3, [pc, #392]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 801490a:	699b      	ldr	r3, [r3, #24]
 801490c:	4a61      	ldr	r2, [pc, #388]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 801490e:	f043 0304 	orr.w	r3, r3, #4
 8014912:	6193      	str	r3, [r2, #24]
 8014914:	4b5f      	ldr	r3, [pc, #380]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 8014916:	699b      	ldr	r3, [r3, #24]
 8014918:	f003 0304 	and.w	r3, r3, #4
 801491c:	607b      	str	r3, [r7, #4]
 801491e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014920:	4b5c      	ldr	r3, [pc, #368]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	4a5b      	ldr	r2, [pc, #364]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 8014926:	f043 0308 	orr.w	r3, r3, #8
 801492a:	6193      	str	r3, [r2, #24]
 801492c:	4b59      	ldr	r3, [pc, #356]	; (8014a94 <MX_GPIO_Init+0x1d0>)
 801492e:	699b      	ldr	r3, [r3, #24]
 8014930:	f003 0308 	and.w	r3, r3, #8
 8014934:	603b      	str	r3, [r7, #0]
 8014936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8014938:	2200      	movs	r2, #0
 801493a:	21c0      	movs	r1, #192	; 0xc0
 801493c:	4856      	ldr	r0, [pc, #344]	; (8014a98 <MX_GPIO_Init+0x1d4>)
 801493e:	f001 fd9c 	bl	801647a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_key_GPIO_Port, led_key_Pin, GPIO_PIN_RESET);
 8014942:	2200      	movs	r2, #0
 8014944:	2101      	movs	r1, #1
 8014946:	4855      	ldr	r0, [pc, #340]	; (8014a9c <MX_GPIO_Init+0x1d8>)
 8014948:	f001 fd97 	bl	801647a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTAR_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 801494c:	2200      	movs	r2, #0
 801494e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8014952:	4853      	ldr	r0, [pc, #332]	; (8014aa0 <MX_GPIO_Init+0x1dc>)
 8014954:	f001 fd91 	bl	801647a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : i3_Pin l2_Pin k1_Pin j0_Pin */
  GPIO_InitStruct.Pin = i3_Pin|l2_Pin|k1_Pin|j0_Pin;
 8014958:	230f      	movs	r3, #15
 801495a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801495c:	4b51      	ldr	r3, [pc, #324]	; (8014aa4 <MX_GPIO_Init+0x1e0>)
 801495e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014960:	2301      	movs	r3, #1
 8014962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014964:	f107 0310 	add.w	r3, r7, #16
 8014968:	4619      	mov	r1, r3
 801496a:	484d      	ldr	r0, [pc, #308]	; (8014aa0 <MX_GPIO_Init+0x1dc>)
 801496c:	f001 fc04 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8014970:	23c0      	movs	r3, #192	; 0xc0
 8014972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014974:	2301      	movs	r3, #1
 8014976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014978:	2300      	movs	r3, #0
 801497a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801497c:	2302      	movs	r3, #2
 801497e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014980:	f107 0310 	add.w	r3, r7, #16
 8014984:	4619      	mov	r1, r3
 8014986:	4844      	ldr	r0, [pc, #272]	; (8014a98 <MX_GPIO_Init+0x1d4>)
 8014988:	f001 fbf6 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_key_Pin */
  GPIO_InitStruct.Pin = led_key_Pin;
 801498c:	2301      	movs	r3, #1
 801498e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014990:	2301      	movs	r3, #1
 8014992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014994:	2300      	movs	r3, #0
 8014996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014998:	2302      	movs	r3, #2
 801499a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_key_GPIO_Port, &GPIO_InitStruct);
 801499c:	f107 0310 	add.w	r3, r7, #16
 80149a0:	4619      	mov	r1, r3
 80149a2:	483e      	ldr	r0, [pc, #248]	; (8014a9c <MX_GPIO_Init+0x1d8>)
 80149a4:	f001 fbe8 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTAR_Pin PC10 */
  GPIO_InitStruct.Pin = MOTAR_Pin|GPIO_PIN_10;
 80149a8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80149ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80149ae:	2301      	movs	r3, #1
 80149b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149b2:	2300      	movs	r3, #0
 80149b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80149b6:	2302      	movs	r3, #2
 80149b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80149ba:	f107 0310 	add.w	r3, r7, #16
 80149be:	4619      	mov	r1, r3
 80149c0:	4837      	ldr	r0, [pc, #220]	; (8014aa0 <MX_GPIO_Init+0x1dc>)
 80149c2:	f001 fbd9 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80149c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80149ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80149cc:	2300      	movs	r3, #0
 80149ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149d0:	2300      	movs	r3, #0
 80149d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80149d4:	f107 0310 	add.w	r3, r7, #16
 80149d8:	4619      	mov	r1, r3
 80149da:	482f      	ldr	r0, [pc, #188]	; (8014a98 <MX_GPIO_Init+0x1d4>)
 80149dc:	f001 fbcc 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80149e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80149e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80149e6:	2300      	movs	r3, #0
 80149e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80149ee:	f107 0310 	add.w	r3, r7, #16
 80149f2:	4619      	mov	r1, r3
 80149f4:	482a      	ldr	r0, [pc, #168]	; (8014aa0 <MX_GPIO_Init+0x1dc>)
 80149f6:	f001 fbbf 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80149fa:	2304      	movs	r3, #4
 80149fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80149fe:	2300      	movs	r3, #0
 8014a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a02:	2300      	movs	r3, #0
 8014a04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a06:	f107 0310 	add.w	r3, r7, #16
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	4826      	ldr	r0, [pc, #152]	; (8014aa8 <MX_GPIO_Init+0x1e4>)
 8014a0e:	f001 fbb3 	bl	8016178 <HAL_GPIO_Init>

  /*Configure GPIO pins : start_Pin pause_Pin full_screem_Pin space_Pin 
                           p5_Pin o4_Pin */
  GPIO_InitStruct.Pin = start_Pin|pause_Pin|full_screem_Pin|space_Pin 
 8014a12:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8014a16:	613b      	str	r3, [r7, #16]
                          |p5_Pin|o4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8014a18:	4b22      	ldr	r3, [pc, #136]	; (8014aa4 <MX_GPIO_Init+0x1e0>)
 8014a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014a20:	f107 0310 	add.w	r3, r7, #16
 8014a24:	4619      	mov	r1, r3
 8014a26:	481d      	ldr	r0, [pc, #116]	; (8014a9c <MX_GPIO_Init+0x1d8>)
 8014a28:	f001 fba6 	bl	8016178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	2100      	movs	r1, #0
 8014a30:	2006      	movs	r0, #6
 8014a32:	f001 f82a 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8014a36:	2006      	movs	r0, #6
 8014a38:	f001 f843 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	2100      	movs	r1, #0
 8014a40:	2007      	movs	r0, #7
 8014a42:	f001 f822 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8014a46:	2007      	movs	r0, #7
 8014a48:	f001 f83b 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	2100      	movs	r1, #0
 8014a50:	2008      	movs	r0, #8
 8014a52:	f001 f81a 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8014a56:	2008      	movs	r0, #8
 8014a58:	f001 f833 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	2100      	movs	r1, #0
 8014a60:	2009      	movs	r0, #9
 8014a62:	f001 f812 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8014a66:	2009      	movs	r0, #9
 8014a68:	f001 f82b 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	2100      	movs	r1, #0
 8014a70:	200a      	movs	r0, #10
 8014a72:	f001 f80a 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8014a76:	200a      	movs	r0, #10
 8014a78:	f001 f823 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	2100      	movs	r1, #0
 8014a80:	2017      	movs	r0, #23
 8014a82:	f001 f802 	bl	8015a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8014a86:	2017      	movs	r0, #23
 8014a88:	f001 f81b 	bl	8015ac2 <HAL_NVIC_EnableIRQ>

}
 8014a8c:	bf00      	nop
 8014a8e:	3720      	adds	r7, #32
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	40021000 	.word	0x40021000
 8014a98:	40010800 	.word	0x40010800
 8014a9c:	40010c00 	.word	0x40010c00
 8014aa0:	40011000 	.word	0x40011000
 8014aa4:	10310000 	.word	0x10310000
 8014aa8:	40011400 	.word	0x40011400

08014aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014aac:	b480      	push	{r7}
 8014aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014ab0:	bf00      	nop
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bc80      	pop	{r7}
 8014ab6:	4770      	bx	lr

08014ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8014abe:	4b15      	ldr	r3, [pc, #84]	; (8014b14 <HAL_MspInit+0x5c>)
 8014ac0:	699b      	ldr	r3, [r3, #24]
 8014ac2:	4a14      	ldr	r2, [pc, #80]	; (8014b14 <HAL_MspInit+0x5c>)
 8014ac4:	f043 0301 	orr.w	r3, r3, #1
 8014ac8:	6193      	str	r3, [r2, #24]
 8014aca:	4b12      	ldr	r3, [pc, #72]	; (8014b14 <HAL_MspInit+0x5c>)
 8014acc:	699b      	ldr	r3, [r3, #24]
 8014ace:	f003 0301 	and.w	r3, r3, #1
 8014ad2:	60bb      	str	r3, [r7, #8]
 8014ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014ad6:	4b0f      	ldr	r3, [pc, #60]	; (8014b14 <HAL_MspInit+0x5c>)
 8014ad8:	69db      	ldr	r3, [r3, #28]
 8014ada:	4a0e      	ldr	r2, [pc, #56]	; (8014b14 <HAL_MspInit+0x5c>)
 8014adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ae0:	61d3      	str	r3, [r2, #28]
 8014ae2:	4b0c      	ldr	r3, [pc, #48]	; (8014b14 <HAL_MspInit+0x5c>)
 8014ae4:	69db      	ldr	r3, [r3, #28]
 8014ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014aea:	607b      	str	r3, [r7, #4]
 8014aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8014aee:	4b0a      	ldr	r3, [pc, #40]	; (8014b18 <HAL_MspInit+0x60>)
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	60fb      	str	r3, [r7, #12]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014b02:	60fb      	str	r3, [r7, #12]
 8014b04:	4a04      	ldr	r2, [pc, #16]	; (8014b18 <HAL_MspInit+0x60>)
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014b0a:	bf00      	nop
 8014b0c:	3714      	adds	r7, #20
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bc80      	pop	{r7}
 8014b12:	4770      	bx	lr
 8014b14:	40021000 	.word	0x40021000
 8014b18:	40010000 	.word	0x40010000

08014b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b088      	sub	sp, #32
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b24:	f107 0310 	add.w	r3, r7, #16
 8014b28:	2200      	movs	r2, #0
 8014b2a:	601a      	str	r2, [r3, #0]
 8014b2c:	605a      	str	r2, [r3, #4]
 8014b2e:	609a      	str	r2, [r3, #8]
 8014b30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	4a29      	ldr	r2, [pc, #164]	; (8014bdc <HAL_ADC_MspInit+0xc0>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d14a      	bne.n	8014bd2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014b3c:	4b28      	ldr	r3, [pc, #160]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b3e:	699b      	ldr	r3, [r3, #24]
 8014b40:	4a27      	ldr	r2, [pc, #156]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014b46:	6193      	str	r3, [r2, #24]
 8014b48:	4b25      	ldr	r3, [pc, #148]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b4a:	699b      	ldr	r3, [r3, #24]
 8014b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014b50:	60fb      	str	r3, [r7, #12]
 8014b52:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b54:	4b22      	ldr	r3, [pc, #136]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	4a21      	ldr	r2, [pc, #132]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b5a:	f043 0304 	orr.w	r3, r3, #4
 8014b5e:	6193      	str	r3, [r2, #24]
 8014b60:	4b1f      	ldr	r3, [pc, #124]	; (8014be0 <HAL_ADC_MspInit+0xc4>)
 8014b62:	699b      	ldr	r3, [r3, #24]
 8014b64:	f003 0304 	and.w	r3, r3, #4
 8014b68:	60bb      	str	r3, [r7, #8]
 8014b6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = x_Pin|y_Pin;
 8014b6c:	2303      	movs	r3, #3
 8014b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b70:	2303      	movs	r3, #3
 8014b72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b74:	f107 0310 	add.w	r3, r7, #16
 8014b78:	4619      	mov	r1, r3
 8014b7a:	481a      	ldr	r0, [pc, #104]	; (8014be4 <HAL_ADC_MspInit+0xc8>)
 8014b7c:	f001 fafc 	bl	8016178 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8014b80:	4b19      	ldr	r3, [pc, #100]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014b82:	4a1a      	ldr	r2, [pc, #104]	; (8014bec <HAL_ADC_MspInit+0xd0>)
 8014b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014b86:	4b18      	ldr	r3, [pc, #96]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014b88:	2200      	movs	r2, #0
 8014b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014b8c:	4b16      	ldr	r3, [pc, #88]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014b8e:	2200      	movs	r2, #0
 8014b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014b92:	4b15      	ldr	r3, [pc, #84]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014b94:	2280      	movs	r2, #128	; 0x80
 8014b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014b98:	4b13      	ldr	r3, [pc, #76]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014ba0:	4b11      	ldr	r3, [pc, #68]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ba6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014ba8:	4b0f      	ldr	r3, [pc, #60]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014baa:	2220      	movs	r2, #32
 8014bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8014bae:	4b0e      	ldr	r3, [pc, #56]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014bb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014bb6:	480c      	ldr	r0, [pc, #48]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014bb8:	f000 ff9e 	bl	8015af8 <HAL_DMA_Init>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d001      	beq.n	8014bc6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8014bc2:	f7ff ff73 	bl	8014aac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	4a07      	ldr	r2, [pc, #28]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014bca:	621a      	str	r2, [r3, #32]
 8014bcc:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <HAL_ADC_MspInit+0xcc>)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014bd2:	bf00      	nop
 8014bd4:	3720      	adds	r7, #32
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	40012400 	.word	0x40012400
 8014be0:	40021000 	.word	0x40021000
 8014be4:	40010800 	.word	0x40010800
 8014be8:	20001484 	.word	0x20001484
 8014bec:	40020008 	.word	0x40020008

08014bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014bf8:	f107 0310 	add.w	r3, r7, #16
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	601a      	str	r2, [r3, #0]
 8014c00:	605a      	str	r2, [r3, #4]
 8014c02:	609a      	str	r2, [r3, #8]
 8014c04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a16      	ldr	r2, [pc, #88]	; (8014c64 <HAL_I2C_MspInit+0x74>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d124      	bne.n	8014c5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014c10:	4b15      	ldr	r3, [pc, #84]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	4a14      	ldr	r2, [pc, #80]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c16:	f043 0308 	orr.w	r3, r3, #8
 8014c1a:	6193      	str	r3, [r2, #24]
 8014c1c:	4b12      	ldr	r3, [pc, #72]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c1e:	699b      	ldr	r3, [r3, #24]
 8014c20:	f003 0308 	and.w	r3, r3, #8
 8014c24:	60fb      	str	r3, [r7, #12]
 8014c26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8014c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014c2e:	2312      	movs	r3, #18
 8014c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014c32:	2303      	movs	r3, #3
 8014c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014c36:	f107 0310 	add.w	r3, r7, #16
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	480b      	ldr	r0, [pc, #44]	; (8014c6c <HAL_I2C_MspInit+0x7c>)
 8014c3e:	f001 fa9b 	bl	8016178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014c42:	4b09      	ldr	r3, [pc, #36]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c44:	69db      	ldr	r3, [r3, #28]
 8014c46:	4a08      	ldr	r2, [pc, #32]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014c4c:	61d3      	str	r3, [r2, #28]
 8014c4e:	4b06      	ldr	r3, [pc, #24]	; (8014c68 <HAL_I2C_MspInit+0x78>)
 8014c50:	69db      	ldr	r3, [r3, #28]
 8014c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014c56:	60bb      	str	r3, [r7, #8]
 8014c58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8014c5a:	bf00      	nop
 8014c5c:	3720      	adds	r7, #32
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	40005800 	.word	0x40005800
 8014c68:	40021000 	.word	0x40021000
 8014c6c:	40010c00 	.word	0x40010c00

08014c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4a1e      	ldr	r2, [pc, #120]	; (8014cf8 <HAL_TIM_Base_MspInit+0x88>)
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	d11c      	bne.n	8014cbc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014c82:	4b1e      	ldr	r3, [pc, #120]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014c84:	699b      	ldr	r3, [r3, #24]
 8014c86:	4a1d      	ldr	r2, [pc, #116]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014c8c:	6193      	str	r3, [r2, #24]
 8014c8e:	4b1b      	ldr	r3, [pc, #108]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c96:	60fb      	str	r3, [r7, #12]
 8014c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	2018      	movs	r0, #24
 8014ca0:	f000 fef3 	bl	8015a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8014ca4:	2018      	movs	r0, #24
 8014ca6:	f000 ff0c 	bl	8015ac2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8014caa:	2200      	movs	r2, #0
 8014cac:	2100      	movs	r1, #0
 8014cae:	2019      	movs	r0, #25
 8014cb0:	f000 feeb 	bl	8015a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8014cb4:	2019      	movs	r0, #25
 8014cb6:	f000 ff04 	bl	8015ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8014cba:	e018      	b.n	8014cee <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a0f      	ldr	r2, [pc, #60]	; (8014d00 <HAL_TIM_Base_MspInit+0x90>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d113      	bne.n	8014cee <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014cc6:	4b0d      	ldr	r3, [pc, #52]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014cc8:	69db      	ldr	r3, [r3, #28]
 8014cca:	4a0c      	ldr	r2, [pc, #48]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014ccc:	f043 0302 	orr.w	r3, r3, #2
 8014cd0:	61d3      	str	r3, [r2, #28]
 8014cd2:	4b0a      	ldr	r3, [pc, #40]	; (8014cfc <HAL_TIM_Base_MspInit+0x8c>)
 8014cd4:	69db      	ldr	r3, [r3, #28]
 8014cd6:	f003 0302 	and.w	r3, r3, #2
 8014cda:	60bb      	str	r3, [r7, #8]
 8014cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8014cde:	2200      	movs	r2, #0
 8014ce0:	2100      	movs	r1, #0
 8014ce2:	201d      	movs	r0, #29
 8014ce4:	f000 fed1 	bl	8015a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8014ce8:	201d      	movs	r0, #29
 8014cea:	f000 feea 	bl	8015ac2 <HAL_NVIC_EnableIRQ>
}
 8014cee:	bf00      	nop
 8014cf0:	3710      	adds	r7, #16
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	40012c00 	.word	0x40012c00
 8014cfc:	40021000 	.word	0x40021000
 8014d00:	40000400 	.word	0x40000400

08014d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b088      	sub	sp, #32
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d0c:	f107 0310 	add.w	r3, r7, #16
 8014d10:	2200      	movs	r2, #0
 8014d12:	601a      	str	r2, [r3, #0]
 8014d14:	605a      	str	r2, [r3, #4]
 8014d16:	609a      	str	r2, [r3, #8]
 8014d18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4a1c      	ldr	r2, [pc, #112]	; (8014d90 <HAL_UART_MspInit+0x8c>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d131      	bne.n	8014d88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014d24:	4b1b      	ldr	r3, [pc, #108]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d26:	699b      	ldr	r3, [r3, #24]
 8014d28:	4a1a      	ldr	r2, [pc, #104]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014d2e:	6193      	str	r3, [r2, #24]
 8014d30:	4b18      	ldr	r3, [pc, #96]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d32:	699b      	ldr	r3, [r3, #24]
 8014d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d3c:	4b15      	ldr	r3, [pc, #84]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d3e:	699b      	ldr	r3, [r3, #24]
 8014d40:	4a14      	ldr	r2, [pc, #80]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d42:	f043 0304 	orr.w	r3, r3, #4
 8014d46:	6193      	str	r3, [r2, #24]
 8014d48:	4b12      	ldr	r3, [pc, #72]	; (8014d94 <HAL_UART_MspInit+0x90>)
 8014d4a:	699b      	ldr	r3, [r3, #24]
 8014d4c:	f003 0304 	and.w	r3, r3, #4
 8014d50:	60bb      	str	r3, [r7, #8]
 8014d52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d5a:	2302      	movs	r3, #2
 8014d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014d5e:	2303      	movs	r3, #3
 8014d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d62:	f107 0310 	add.w	r3, r7, #16
 8014d66:	4619      	mov	r1, r3
 8014d68:	480b      	ldr	r0, [pc, #44]	; (8014d98 <HAL_UART_MspInit+0x94>)
 8014d6a:	f001 fa05 	bl	8016178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8014d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014d74:	2300      	movs	r3, #0
 8014d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d7c:	f107 0310 	add.w	r3, r7, #16
 8014d80:	4619      	mov	r1, r3
 8014d82:	4805      	ldr	r0, [pc, #20]	; (8014d98 <HAL_UART_MspInit+0x94>)
 8014d84:	f001 f9f8 	bl	8016178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8014d88:	bf00      	nop
 8014d8a:	3720      	adds	r7, #32
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	40013800 	.word	0x40013800
 8014d94:	40021000 	.word	0x40021000
 8014d98:	40010800 	.word	0x40010800

08014d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014da0:	bf00      	nop
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bc80      	pop	{r7}
 8014da6:	4770      	bx	lr

08014da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014da8:	b480      	push	{r7}
 8014daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014dac:	e7fe      	b.n	8014dac <HardFault_Handler+0x4>

08014dae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014dae:	b480      	push	{r7}
 8014db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014db2:	e7fe      	b.n	8014db2 <MemManage_Handler+0x4>

08014db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014db4:	b480      	push	{r7}
 8014db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014db8:	e7fe      	b.n	8014db8 <BusFault_Handler+0x4>

08014dba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014dba:	b480      	push	{r7}
 8014dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014dbe:	e7fe      	b.n	8014dbe <UsageFault_Handler+0x4>

08014dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014dc4:	bf00      	nop
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bc80      	pop	{r7}
 8014dca:	4770      	bx	lr

08014dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014dd0:	bf00      	nop
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bc80      	pop	{r7}
 8014dd6:	4770      	bx	lr

08014dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014ddc:	bf00      	nop
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bc80      	pop	{r7}
 8014de2:	4770      	bx	lr

08014de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014de8:	f000 f976 	bl	80150d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014dec:	bf00      	nop
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8014df4:	2001      	movs	r0, #1
 8014df6:	f001 fb59 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014dfa:	bf00      	nop
 8014dfc:	bd80      	pop	{r7, pc}

08014dfe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014dfe:	b580      	push	{r7, lr}
 8014e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8014e02:	2002      	movs	r0, #2
 8014e04:	f001 fb52 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8014e08:	bf00      	nop
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8014e10:	2004      	movs	r0, #4
 8014e12:	f001 fb4b 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8014e16:	bf00      	nop
 8014e18:	bd80      	pop	{r7, pc}

08014e1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8014e1a:	b580      	push	{r7, lr}
 8014e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8014e1e:	2008      	movs	r0, #8
 8014e20:	f001 fb44 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8014e24:	bf00      	nop
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8014e2c:	2010      	movs	r0, #16
 8014e2e:	f001 fb3d 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8014e32:	bf00      	nop
 8014e34:	bd80      	pop	{r7, pc}
	...

08014e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014e3c:	4802      	ldr	r0, [pc, #8]	; (8014e48 <DMA1_Channel1_IRQHandler+0x10>)
 8014e3e:	f000 ff31 	bl	8015ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8014e42:	bf00      	nop
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop
 8014e48:	20001484 	.word	0x20001484

08014e4c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8014e50:	4802      	ldr	r0, [pc, #8]	; (8014e5c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8014e52:	f002 fc30 	bl	80176b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8014e56:	bf00      	nop
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	200019d8 	.word	0x200019d8

08014e60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8014e64:	2020      	movs	r0, #32
 8014e66:	f001 fb21 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8014e6a:	2040      	movs	r0, #64	; 0x40
 8014e6c:	f001 fb1e 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8014e70:	2080      	movs	r0, #128	; 0x80
 8014e72:	f001 fb1b 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8014e76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014e7a:	f001 fb17 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8014e7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e82:	f001 fb13 	bl	80164ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8014e86:	bf00      	nop
 8014e88:	bd80      	pop	{r7, pc}
	...

08014e8c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014e90:	4802      	ldr	r0, [pc, #8]	; (8014e9c <TIM1_BRK_IRQHandler+0x10>)
 8014e92:	f004 fc9f 	bl	80197d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8014e96:	bf00      	nop
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	200014c8 	.word	0x200014c8

08014ea0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014ea4:	4802      	ldr	r0, [pc, #8]	; (8014eb0 <TIM1_UP_IRQHandler+0x10>)
 8014ea6:	f004 fc95 	bl	80197d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8014eaa:	bf00      	nop
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	200014c8 	.word	0x200014c8

08014eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014eb8:	4802      	ldr	r0, [pc, #8]	; (8014ec4 <TIM3_IRQHandler+0x10>)
 8014eba:	f004 fc8b 	bl	80197d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014ebe:	bf00      	nop
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	20001238 	.word	0x20001238

08014ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	617b      	str	r3, [r7, #20]
 8014ed8:	e00a      	b.n	8014ef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8014eda:	f3af 8000 	nop.w
 8014ede:	4601      	mov	r1, r0
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	1c5a      	adds	r2, r3, #1
 8014ee4:	60ba      	str	r2, [r7, #8]
 8014ee6:	b2ca      	uxtb	r2, r1
 8014ee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	3301      	adds	r3, #1
 8014eee:	617b      	str	r3, [r7, #20]
 8014ef0:	697a      	ldr	r2, [r7, #20]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	dbf0      	blt.n	8014eda <_read+0x12>
	}

return len;
 8014ef8:	687b      	ldr	r3, [r7, #4]
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3718      	adds	r7, #24
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}

08014f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014f02:	b580      	push	{r7, lr}
 8014f04:	b086      	sub	sp, #24
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	60f8      	str	r0, [r7, #12]
 8014f0a:	60b9      	str	r1, [r7, #8]
 8014f0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014f0e:	2300      	movs	r3, #0
 8014f10:	617b      	str	r3, [r7, #20]
 8014f12:	e009      	b.n	8014f28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	60ba      	str	r2, [r7, #8]
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7fe ffd1 	bl	8013ec4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	3301      	adds	r3, #1
 8014f26:	617b      	str	r3, [r7, #20]
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	dbf1      	blt.n	8014f14 <_write+0x12>
	}
	return len;
 8014f30:	687b      	ldr	r3, [r7, #4]
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3718      	adds	r7, #24
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <_close>:

int _close(int file)
{
 8014f3a:	b480      	push	{r7}
 8014f3c:	b083      	sub	sp, #12
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	6078      	str	r0, [r7, #4]
	return -1;
 8014f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	370c      	adds	r7, #12
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bc80      	pop	{r7}
 8014f4e:	4770      	bx	lr

08014f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014f60:	605a      	str	r2, [r3, #4]
	return 0;
 8014f62:	2300      	movs	r3, #0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bc80      	pop	{r7}
 8014f6c:	4770      	bx	lr

08014f6e <_isatty>:

int _isatty(int file)
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
	return 1;
 8014f76:	2301      	movs	r3, #1
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bc80      	pop	{r7}
 8014f80:	4770      	bx	lr

08014f82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014f82:	b480      	push	{r7}
 8014f84:	b085      	sub	sp, #20
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	60f8      	str	r0, [r7, #12]
 8014f8a:	60b9      	str	r1, [r7, #8]
 8014f8c:	607a      	str	r2, [r7, #4]
	return 0;
 8014f8e:	2300      	movs	r3, #0
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3714      	adds	r7, #20
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bc80      	pop	{r7}
 8014f98:	4770      	bx	lr
	...

08014f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8014fa4:	4b11      	ldr	r3, [pc, #68]	; (8014fec <_sbrk+0x50>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d102      	bne.n	8014fb2 <_sbrk+0x16>
		heap_end = &end;
 8014fac:	4b0f      	ldr	r3, [pc, #60]	; (8014fec <_sbrk+0x50>)
 8014fae:	4a10      	ldr	r2, [pc, #64]	; (8014ff0 <_sbrk+0x54>)
 8014fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014fb2:	4b0e      	ldr	r3, [pc, #56]	; (8014fec <_sbrk+0x50>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014fb8:	4b0c      	ldr	r3, [pc, #48]	; (8014fec <_sbrk+0x50>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4413      	add	r3, r2
 8014fc0:	466a      	mov	r2, sp
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	d907      	bls.n	8014fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8014fc6:	f008 fe89 	bl	801dcdc <__errno>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	230c      	movs	r3, #12
 8014fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	e006      	b.n	8014fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8014fd6:	4b05      	ldr	r3, [pc, #20]	; (8014fec <_sbrk+0x50>)
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4413      	add	r3, r2
 8014fde:	4a03      	ldr	r2, [pc, #12]	; (8014fec <_sbrk+0x50>)
 8014fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	200006e8 	.word	0x200006e8
 8014ff0:	20001cc8 	.word	0x20001cc8

08014ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014ff8:	bf00      	nop
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bc80      	pop	{r7}
 8014ffe:	4770      	bx	lr

08015000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8015000:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8015002:	e003      	b.n	801500c <LoopCopyDataInit>

08015004 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8015004:	4b0b      	ldr	r3, [pc, #44]	; (8015034 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8015006:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8015008:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 801500a:	3104      	adds	r1, #4

0801500c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 801500c:	480a      	ldr	r0, [pc, #40]	; (8015038 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 801500e:	4b0b      	ldr	r3, [pc, #44]	; (801503c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8015010:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8015012:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8015014:	d3f6      	bcc.n	8015004 <CopyDataInit>
  ldr r2, =_sbss
 8015016:	4a0a      	ldr	r2, [pc, #40]	; (8015040 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8015018:	e002      	b.n	8015020 <LoopFillZerobss>

0801501a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 801501a:	2300      	movs	r3, #0
  str r3, [r2], #4
 801501c:	f842 3b04 	str.w	r3, [r2], #4

08015020 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8015020:	4b08      	ldr	r3, [pc, #32]	; (8015044 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8015022:	429a      	cmp	r2, r3
  bcc FillZerobss
 8015024:	d3f9      	bcc.n	801501a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8015026:	f7ff ffe5 	bl	8014ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801502a:	f008 fe5d 	bl	801dce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801502e:	f7ff fa2f 	bl	8014490 <main>
  bx lr
 8015032:	4770      	bx	lr
  ldr r3, =_sidata
 8015034:	080207c0 	.word	0x080207c0
  ldr r0, =_sdata
 8015038:	20000000 	.word	0x20000000
  ldr r3, =_edata
 801503c:	200005a8 	.word	0x200005a8
  ldr r2, =_sbss
 8015040:	200005a8 	.word	0x200005a8
  ldr r3, = _ebss
 8015044:	20001cc8 	.word	0x20001cc8

08015048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8015048:	e7fe      	b.n	8015048 <ADC1_2_IRQHandler>
	...

0801504c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015050:	4b08      	ldr	r3, [pc, #32]	; (8015074 <HAL_Init+0x28>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	4a07      	ldr	r2, [pc, #28]	; (8015074 <HAL_Init+0x28>)
 8015056:	f043 0310 	orr.w	r3, r3, #16
 801505a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801505c:	2003      	movs	r0, #3
 801505e:	f000 fd09 	bl	8015a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015062:	2000      	movs	r0, #0
 8015064:	f000 f808 	bl	8015078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015068:	f7ff fd26 	bl	8014ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	4618      	mov	r0, r3
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	40022000 	.word	0x40022000

08015078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015080:	4b12      	ldr	r3, [pc, #72]	; (80150cc <HAL_InitTick+0x54>)
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	4b12      	ldr	r3, [pc, #72]	; (80150d0 <HAL_InitTick+0x58>)
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	4619      	mov	r1, r3
 801508a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801508e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015092:	fbb2 f3f3 	udiv	r3, r2, r3
 8015096:	4618      	mov	r0, r3
 8015098:	f000 fd21 	bl	8015ade <HAL_SYSTICK_Config>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d001      	beq.n	80150a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80150a2:	2301      	movs	r3, #1
 80150a4:	e00e      	b.n	80150c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2b0f      	cmp	r3, #15
 80150aa:	d80a      	bhi.n	80150c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80150ac:	2200      	movs	r2, #0
 80150ae:	6879      	ldr	r1, [r7, #4]
 80150b0:	f04f 30ff 	mov.w	r0, #4294967295
 80150b4:	f000 fce9 	bl	8015a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80150b8:	4a06      	ldr	r2, [pc, #24]	; (80150d4 <HAL_InitTick+0x5c>)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	e000      	b.n	80150c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	2000037c 	.word	0x2000037c
 80150d0:	20000384 	.word	0x20000384
 80150d4:	20000380 	.word	0x20000380

080150d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80150d8:	b480      	push	{r7}
 80150da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80150dc:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <HAL_IncTick+0x1c>)
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	461a      	mov	r2, r3
 80150e2:	4b05      	ldr	r3, [pc, #20]	; (80150f8 <HAL_IncTick+0x20>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4413      	add	r3, r2
 80150e8:	4a03      	ldr	r2, [pc, #12]	; (80150f8 <HAL_IncTick+0x20>)
 80150ea:	6013      	str	r3, [r2, #0]
}
 80150ec:	bf00      	nop
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bc80      	pop	{r7}
 80150f2:	4770      	bx	lr
 80150f4:	20000384 	.word	0x20000384
 80150f8:	20001510 	.word	0x20001510

080150fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80150fc:	b480      	push	{r7}
 80150fe:	af00      	add	r7, sp, #0
  return uwTick;
 8015100:	4b02      	ldr	r3, [pc, #8]	; (801510c <HAL_GetTick+0x10>)
 8015102:	681b      	ldr	r3, [r3, #0]
}
 8015104:	4618      	mov	r0, r3
 8015106:	46bd      	mov	sp, r7
 8015108:	bc80      	pop	{r7}
 801510a:	4770      	bx	lr
 801510c:	20001510 	.word	0x20001510

08015110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015118:	f7ff fff0 	bl	80150fc <HAL_GetTick>
 801511c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015128:	d005      	beq.n	8015136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801512a:	4b09      	ldr	r3, [pc, #36]	; (8015150 <HAL_Delay+0x40>)
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	461a      	mov	r2, r3
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	4413      	add	r3, r2
 8015134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8015136:	bf00      	nop
 8015138:	f7ff ffe0 	bl	80150fc <HAL_GetTick>
 801513c:	4602      	mov	r2, r0
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	429a      	cmp	r2, r3
 8015146:	d8f7      	bhi.n	8015138 <HAL_Delay+0x28>
  {
  }
}
 8015148:	bf00      	nop
 801514a:	3710      	adds	r7, #16
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	20000384 	.word	0x20000384

08015154 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801515c:	2300      	movs	r3, #0
 801515e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8015160:	2300      	movs	r3, #0
 8015162:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8015164:	2300      	movs	r3, #0
 8015166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8015168:	2300      	movs	r3, #0
 801516a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d101      	bne.n	8015176 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8015172:	2301      	movs	r3, #1
 8015174:	e0ce      	b.n	8015314 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	689b      	ldr	r3, [r3, #8]
 801517a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015180:	2b00      	cmp	r3, #0
 8015182:	d109      	bne.n	8015198 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2200      	movs	r2, #0
 8015188:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2200      	movs	r2, #0
 801518e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7ff fcc2 	bl	8014b1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f000 faff 	bl	801579c <ADC_ConversionStop_Disable>
 801519e:	4603      	mov	r3, r0
 80151a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151a6:	f003 0310 	and.w	r3, r3, #16
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	f040 80a9 	bne.w	8015302 <HAL_ADC_Init+0x1ae>
 80151b0:	7dfb      	ldrb	r3, [r7, #23]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	f040 80a5 	bne.w	8015302 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80151c0:	f023 0302 	bic.w	r3, r3, #2
 80151c4:	f043 0202 	orr.w	r2, r3, #2
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	4951      	ldr	r1, [pc, #324]	; (801531c <HAL_ADC_Init+0x1c8>)
 80151d6:	428b      	cmp	r3, r1
 80151d8:	d10a      	bne.n	80151f0 <HAL_ADC_Init+0x9c>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	69db      	ldr	r3, [r3, #28]
 80151de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80151e2:	d002      	beq.n	80151ea <HAL_ADC_Init+0x96>
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	69db      	ldr	r3, [r3, #28]
 80151e8:	e004      	b.n	80151f4 <HAL_ADC_Init+0xa0>
 80151ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80151ee:	e001      	b.n	80151f4 <HAL_ADC_Init+0xa0>
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80151f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	7b1b      	ldrb	r3, [r3, #12]
 80151fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80151fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80151fe:	68ba      	ldr	r2, [r7, #8]
 8015200:	4313      	orrs	r3, r2
 8015202:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	689b      	ldr	r3, [r3, #8]
 8015208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801520c:	d003      	beq.n	8015216 <HAL_ADC_Init+0xc2>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	689b      	ldr	r3, [r3, #8]
 8015212:	2b01      	cmp	r3, #1
 8015214:	d102      	bne.n	801521c <HAL_ADC_Init+0xc8>
 8015216:	f44f 7380 	mov.w	r3, #256	; 0x100
 801521a:	e000      	b.n	801521e <HAL_ADC_Init+0xca>
 801521c:	2300      	movs	r3, #0
 801521e:	693a      	ldr	r2, [r7, #16]
 8015220:	4313      	orrs	r3, r2
 8015222:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	7d1b      	ldrb	r3, [r3, #20]
 8015228:	2b01      	cmp	r3, #1
 801522a:	d119      	bne.n	8015260 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	7b1b      	ldrb	r3, [r3, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d109      	bne.n	8015248 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	699b      	ldr	r3, [r3, #24]
 8015238:	3b01      	subs	r3, #1
 801523a:	035a      	lsls	r2, r3, #13
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	4313      	orrs	r3, r2
 8015240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015244:	613b      	str	r3, [r7, #16]
 8015246:	e00b      	b.n	8015260 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801524c:	f043 0220 	orr.w	r2, r3, #32
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015258:	f043 0201 	orr.w	r2, r3, #1
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	693a      	ldr	r2, [r7, #16]
 8015270:	430a      	orrs	r2, r1
 8015272:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	689a      	ldr	r2, [r3, #8]
 801527a:	4b29      	ldr	r3, [pc, #164]	; (8015320 <HAL_ADC_Init+0x1cc>)
 801527c:	4013      	ands	r3, r2
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	6812      	ldr	r2, [r2, #0]
 8015282:	68b9      	ldr	r1, [r7, #8]
 8015284:	430b      	orrs	r3, r1
 8015286:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	689b      	ldr	r3, [r3, #8]
 801528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015290:	d003      	beq.n	801529a <HAL_ADC_Init+0x146>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d104      	bne.n	80152a4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	3b01      	subs	r3, #1
 80152a0:	051b      	lsls	r3, r3, #20
 80152a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	68fa      	ldr	r2, [r7, #12]
 80152b4:	430a      	orrs	r2, r1
 80152b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	689a      	ldr	r2, [r3, #8]
 80152be:	4b19      	ldr	r3, [pc, #100]	; (8015324 <HAL_ADC_Init+0x1d0>)
 80152c0:	4013      	ands	r3, r2
 80152c2:	68ba      	ldr	r2, [r7, #8]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d10b      	bne.n	80152e0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2200      	movs	r2, #0
 80152cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152d2:	f023 0303 	bic.w	r3, r3, #3
 80152d6:	f043 0201 	orr.w	r2, r3, #1
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80152de:	e018      	b.n	8015312 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152e4:	f023 0312 	bic.w	r3, r3, #18
 80152e8:	f043 0210 	orr.w	r2, r3, #16
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f4:	f043 0201 	orr.w	r2, r3, #1
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80152fc:	2301      	movs	r3, #1
 80152fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8015300:	e007      	b.n	8015312 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015306:	f043 0210 	orr.w	r2, r3, #16
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 801530e:	2301      	movs	r3, #1
 8015310:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8015312:	7dfb      	ldrb	r3, [r7, #23]
}
 8015314:	4618      	mov	r0, r3
 8015316:	3718      	adds	r7, #24
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	40013c00 	.word	0x40013c00
 8015320:	ffe1f7fd 	.word	0xffe1f7fd
 8015324:	ff1f0efe 	.word	0xff1f0efe

08015328 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015334:	2300      	movs	r3, #0
 8015336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	4a64      	ldr	r2, [pc, #400]	; (80154d0 <HAL_ADC_Start_DMA+0x1a8>)
 801533e:	4293      	cmp	r3, r2
 8015340:	d004      	beq.n	801534c <HAL_ADC_Start_DMA+0x24>
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a63      	ldr	r2, [pc, #396]	; (80154d4 <HAL_ADC_Start_DMA+0x1ac>)
 8015348:	4293      	cmp	r3, r2
 801534a:	d106      	bne.n	801535a <HAL_ADC_Start_DMA+0x32>
 801534c:	4b60      	ldr	r3, [pc, #384]	; (80154d0 <HAL_ADC_Start_DMA+0x1a8>)
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8015354:	2b00      	cmp	r3, #0
 8015356:	f040 80b3 	bne.w	80154c0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015360:	2b01      	cmp	r3, #1
 8015362:	d101      	bne.n	8015368 <HAL_ADC_Start_DMA+0x40>
 8015364:	2302      	movs	r3, #2
 8015366:	e0ae      	b.n	80154c6 <HAL_ADC_Start_DMA+0x19e>
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2201      	movs	r2, #1
 801536c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	f000 f9c1 	bl	80156f8 <ADC_Enable>
 8015376:	4603      	mov	r3, r0
 8015378:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801537a:	7dfb      	ldrb	r3, [r7, #23]
 801537c:	2b00      	cmp	r3, #0
 801537e:	f040 809a 	bne.w	80154b6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015386:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801538a:	f023 0301 	bic.w	r3, r3, #1
 801538e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	4a4e      	ldr	r2, [pc, #312]	; (80154d4 <HAL_ADC_Start_DMA+0x1ac>)
 801539c:	4293      	cmp	r3, r2
 801539e:	d105      	bne.n	80153ac <HAL_ADC_Start_DMA+0x84>
 80153a0:	4b4b      	ldr	r3, [pc, #300]	; (80154d0 <HAL_ADC_Start_DMA+0x1a8>)
 80153a2:	685b      	ldr	r3, [r3, #4]
 80153a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d115      	bne.n	80153d8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d026      	beq.n	8015414 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80153ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80153d6:	e01d      	b.n	8015414 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4a39      	ldr	r2, [pc, #228]	; (80154d0 <HAL_ADC_Start_DMA+0x1a8>)
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d004      	beq.n	80153f8 <HAL_ADC_Start_DMA+0xd0>
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	4a38      	ldr	r2, [pc, #224]	; (80154d4 <HAL_ADC_Start_DMA+0x1ac>)
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d10d      	bne.n	8015414 <HAL_ADC_Start_DMA+0xec>
 80153f8:	4b35      	ldr	r3, [pc, #212]	; (80154d0 <HAL_ADC_Start_DMA+0x1a8>)
 80153fa:	685b      	ldr	r3, [r3, #4]
 80153fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015400:	2b00      	cmp	r3, #0
 8015402:	d007      	beq.n	8015414 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801540c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801541c:	2b00      	cmp	r3, #0
 801541e:	d006      	beq.n	801542e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015424:	f023 0206 	bic.w	r2, r3, #6
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	62da      	str	r2, [r3, #44]	; 0x2c
 801542c:	e002      	b.n	8015434 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2200      	movs	r2, #0
 8015432:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2200      	movs	r2, #0
 8015438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	6a1b      	ldr	r3, [r3, #32]
 8015440:	4a25      	ldr	r2, [pc, #148]	; (80154d8 <HAL_ADC_Start_DMA+0x1b0>)
 8015442:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	6a1b      	ldr	r3, [r3, #32]
 8015448:	4a24      	ldr	r2, [pc, #144]	; (80154dc <HAL_ADC_Start_DMA+0x1b4>)
 801544a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6a1b      	ldr	r3, [r3, #32]
 8015450:	4a23      	ldr	r2, [pc, #140]	; (80154e0 <HAL_ADC_Start_DMA+0x1b8>)
 8015452:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f06f 0202 	mvn.w	r2, #2
 801545c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	689a      	ldr	r2, [r3, #8]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801546c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	6a18      	ldr	r0, [r3, #32]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	334c      	adds	r3, #76	; 0x4c
 8015478:	4619      	mov	r1, r3
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f000 fbb1 	bl	8015be4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 801548c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8015490:	d108      	bne.n	80154a4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	689a      	ldr	r2, [r3, #8]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80154a0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80154a2:	e00f      	b.n	80154c4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	689a      	ldr	r2, [r3, #8]
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80154b2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80154b4:	e006      	b.n	80154c4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2200      	movs	r2, #0
 80154ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80154be:	e001      	b.n	80154c4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80154c0:	2301      	movs	r3, #1
 80154c2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80154c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3718      	adds	r7, #24
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	40012400 	.word	0x40012400
 80154d4:	40012800 	.word	0x40012800
 80154d8:	08015811 	.word	0x08015811
 80154dc:	0801588d 	.word	0x0801588d
 80154e0:	080158a9 	.word	0x080158a9

080154e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80154ec:	bf00      	nop
 80154ee:	370c      	adds	r7, #12
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bc80      	pop	{r7}
 80154f4:	4770      	bx	lr

080154f6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80154f6:	b480      	push	{r7}
 80154f8:	b083      	sub	sp, #12
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80154fe:	bf00      	nop
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	bc80      	pop	{r7}
 8015506:	4770      	bx	lr

08015508 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015512:	2300      	movs	r3, #0
 8015514:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8015516:	2300      	movs	r3, #0
 8015518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015520:	2b01      	cmp	r3, #1
 8015522:	d101      	bne.n	8015528 <HAL_ADC_ConfigChannel+0x20>
 8015524:	2302      	movs	r3, #2
 8015526:	e0dc      	b.n	80156e2 <HAL_ADC_ConfigChannel+0x1da>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2201      	movs	r2, #1
 801552c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	2b06      	cmp	r3, #6
 8015536:	d81c      	bhi.n	8015572 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	685a      	ldr	r2, [r3, #4]
 8015542:	4613      	mov	r3, r2
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	4413      	add	r3, r2
 8015548:	3b05      	subs	r3, #5
 801554a:	221f      	movs	r2, #31
 801554c:	fa02 f303 	lsl.w	r3, r2, r3
 8015550:	43db      	mvns	r3, r3
 8015552:	4019      	ands	r1, r3
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	6818      	ldr	r0, [r3, #0]
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	685a      	ldr	r2, [r3, #4]
 801555c:	4613      	mov	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	4413      	add	r3, r2
 8015562:	3b05      	subs	r3, #5
 8015564:	fa00 f203 	lsl.w	r2, r0, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	430a      	orrs	r2, r1
 801556e:	635a      	str	r2, [r3, #52]	; 0x34
 8015570:	e03c      	b.n	80155ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	2b0c      	cmp	r3, #12
 8015578:	d81c      	bhi.n	80155b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	685a      	ldr	r2, [r3, #4]
 8015584:	4613      	mov	r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	4413      	add	r3, r2
 801558a:	3b23      	subs	r3, #35	; 0x23
 801558c:	221f      	movs	r2, #31
 801558e:	fa02 f303 	lsl.w	r3, r2, r3
 8015592:	43db      	mvns	r3, r3
 8015594:	4019      	ands	r1, r3
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	6818      	ldr	r0, [r3, #0]
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	685a      	ldr	r2, [r3, #4]
 801559e:	4613      	mov	r3, r2
 80155a0:	009b      	lsls	r3, r3, #2
 80155a2:	4413      	add	r3, r2
 80155a4:	3b23      	subs	r3, #35	; 0x23
 80155a6:	fa00 f203 	lsl.w	r2, r0, r3
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	430a      	orrs	r2, r1
 80155b0:	631a      	str	r2, [r3, #48]	; 0x30
 80155b2:	e01b      	b.n	80155ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	4613      	mov	r3, r2
 80155c0:	009b      	lsls	r3, r3, #2
 80155c2:	4413      	add	r3, r2
 80155c4:	3b41      	subs	r3, #65	; 0x41
 80155c6:	221f      	movs	r2, #31
 80155c8:	fa02 f303 	lsl.w	r3, r2, r3
 80155cc:	43db      	mvns	r3, r3
 80155ce:	4019      	ands	r1, r3
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	6818      	ldr	r0, [r3, #0]
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	685a      	ldr	r2, [r3, #4]
 80155d8:	4613      	mov	r3, r2
 80155da:	009b      	lsls	r3, r3, #2
 80155dc:	4413      	add	r3, r2
 80155de:	3b41      	subs	r3, #65	; 0x41
 80155e0:	fa00 f203 	lsl.w	r2, r0, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	430a      	orrs	r2, r1
 80155ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	2b09      	cmp	r3, #9
 80155f2:	d91c      	bls.n	801562e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	68d9      	ldr	r1, [r3, #12]
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	3b1e      	subs	r3, #30
 8015606:	2207      	movs	r2, #7
 8015608:	fa02 f303 	lsl.w	r3, r2, r3
 801560c:	43db      	mvns	r3, r3
 801560e:	4019      	ands	r1, r3
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	6898      	ldr	r0, [r3, #8]
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	4613      	mov	r3, r2
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4413      	add	r3, r2
 801561e:	3b1e      	subs	r3, #30
 8015620:	fa00 f203 	lsl.w	r2, r0, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	430a      	orrs	r2, r1
 801562a:	60da      	str	r2, [r3, #12]
 801562c:	e019      	b.n	8015662 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	6919      	ldr	r1, [r3, #16]
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	4613      	mov	r3, r2
 801563a:	005b      	lsls	r3, r3, #1
 801563c:	4413      	add	r3, r2
 801563e:	2207      	movs	r2, #7
 8015640:	fa02 f303 	lsl.w	r3, r2, r3
 8015644:	43db      	mvns	r3, r3
 8015646:	4019      	ands	r1, r3
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	6898      	ldr	r0, [r3, #8]
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	4613      	mov	r3, r2
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4413      	add	r3, r2
 8015656:	fa00 f203 	lsl.w	r2, r0, r3
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	430a      	orrs	r2, r1
 8015660:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b10      	cmp	r3, #16
 8015668:	d003      	beq.n	8015672 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 801566e:	2b11      	cmp	r3, #17
 8015670:	d132      	bne.n	80156d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	4a1d      	ldr	r2, [pc, #116]	; (80156ec <HAL_ADC_ConfigChannel+0x1e4>)
 8015678:	4293      	cmp	r3, r2
 801567a:	d125      	bne.n	80156c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	689b      	ldr	r3, [r3, #8]
 8015682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015686:	2b00      	cmp	r3, #0
 8015688:	d126      	bne.n	80156d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	689a      	ldr	r2, [r3, #8]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8015698:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b10      	cmp	r3, #16
 80156a0:	d11a      	bne.n	80156d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80156a2:	4b13      	ldr	r3, [pc, #76]	; (80156f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4a13      	ldr	r2, [pc, #76]	; (80156f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80156a8:	fba2 2303 	umull	r2, r3, r2, r3
 80156ac:	0c9a      	lsrs	r2, r3, #18
 80156ae:	4613      	mov	r3, r2
 80156b0:	009b      	lsls	r3, r3, #2
 80156b2:	4413      	add	r3, r2
 80156b4:	005b      	lsls	r3, r3, #1
 80156b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80156b8:	e002      	b.n	80156c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	3b01      	subs	r3, #1
 80156be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d1f9      	bne.n	80156ba <HAL_ADC_ConfigChannel+0x1b2>
 80156c6:	e007      	b.n	80156d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156cc:	f043 0220 	orr.w	r2, r3, #32
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80156d4:	2301      	movs	r3, #1
 80156d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2200      	movs	r2, #0
 80156dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3714      	adds	r7, #20
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bc80      	pop	{r7}
 80156ea:	4770      	bx	lr
 80156ec:	40012400 	.word	0x40012400
 80156f0:	2000037c 	.word	0x2000037c
 80156f4:	431bde83 	.word	0x431bde83

080156f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015700:	2300      	movs	r3, #0
 8015702:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8015704:	2300      	movs	r3, #0
 8015706:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	689b      	ldr	r3, [r3, #8]
 801570e:	f003 0301 	and.w	r3, r3, #1
 8015712:	2b01      	cmp	r3, #1
 8015714:	d039      	beq.n	801578a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	689a      	ldr	r2, [r3, #8]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f042 0201 	orr.w	r2, r2, #1
 8015724:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8015726:	4b1b      	ldr	r3, [pc, #108]	; (8015794 <ADC_Enable+0x9c>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4a1b      	ldr	r2, [pc, #108]	; (8015798 <ADC_Enable+0xa0>)
 801572c:	fba2 2303 	umull	r2, r3, r2, r3
 8015730:	0c9b      	lsrs	r3, r3, #18
 8015732:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8015734:	e002      	b.n	801573c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	3b01      	subs	r3, #1
 801573a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d1f9      	bne.n	8015736 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8015742:	f7ff fcdb 	bl	80150fc <HAL_GetTick>
 8015746:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8015748:	e018      	b.n	801577c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801574a:	f7ff fcd7 	bl	80150fc <HAL_GetTick>
 801574e:	4602      	mov	r2, r0
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	2b02      	cmp	r3, #2
 8015756:	d911      	bls.n	801577c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801575c:	f043 0210 	orr.w	r2, r3, #16
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015768:	f043 0201 	orr.w	r2, r3, #1
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2200      	movs	r2, #0
 8015774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8015778:	2301      	movs	r3, #1
 801577a:	e007      	b.n	801578c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	f003 0301 	and.w	r3, r3, #1
 8015786:	2b01      	cmp	r3, #1
 8015788:	d1df      	bne.n	801574a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3710      	adds	r7, #16
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	2000037c 	.word	0x2000037c
 8015798:	431bde83 	.word	0x431bde83

0801579c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80157a4:	2300      	movs	r3, #0
 80157a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	689b      	ldr	r3, [r3, #8]
 80157ae:	f003 0301 	and.w	r3, r3, #1
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d127      	bne.n	8015806 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	689a      	ldr	r2, [r3, #8]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f022 0201 	bic.w	r2, r2, #1
 80157c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80157c6:	f7ff fc99 	bl	80150fc <HAL_GetTick>
 80157ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80157cc:	e014      	b.n	80157f8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80157ce:	f7ff fc95 	bl	80150fc <HAL_GetTick>
 80157d2:	4602      	mov	r2, r0
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	1ad3      	subs	r3, r2, r3
 80157d8:	2b02      	cmp	r3, #2
 80157da:	d90d      	bls.n	80157f8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157e0:	f043 0210 	orr.w	r2, r3, #16
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157ec:	f043 0201 	orr.w	r2, r3, #1
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80157f4:	2301      	movs	r3, #1
 80157f6:	e007      	b.n	8015808 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	689b      	ldr	r3, [r3, #8]
 80157fe:	f003 0301 	and.w	r3, r3, #1
 8015802:	2b01      	cmp	r3, #1
 8015804:	d0e3      	beq.n	80157ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8015806:	2300      	movs	r3, #0
}
 8015808:	4618      	mov	r0, r3
 801580a:	3710      	adds	r7, #16
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b084      	sub	sp, #16
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801581c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015822:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015826:	2b00      	cmp	r3, #0
 8015828:	d127      	bne.n	801587a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801582e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	689b      	ldr	r3, [r3, #8]
 801583c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8015840:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8015844:	d115      	bne.n	8015872 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 801584a:	2b00      	cmp	r3, #0
 801584c:	d111      	bne.n	8015872 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801585e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015862:	2b00      	cmp	r3, #0
 8015864:	d105      	bne.n	8015872 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801586a:	f043 0201 	orr.w	r2, r3, #1
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015872:	68f8      	ldr	r0, [r7, #12]
 8015874:	f7fe fdb4 	bl	80143e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8015878:	e004      	b.n	8015884 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	6a1b      	ldr	r3, [r3, #32]
 801587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	4798      	blx	r3
}
 8015884:	bf00      	nop
 8015886:	3710      	adds	r7, #16
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}

0801588c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015898:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801589a:	68f8      	ldr	r0, [r7, #12]
 801589c:	f7ff fe22 	bl	80154e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80158a0:	bf00      	nop
 80158a2:	3710      	adds	r7, #16
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c6:	f043 0204 	orr.w	r2, r3, #4
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80158ce:	68f8      	ldr	r0, [r7, #12]
 80158d0:	f7ff fe11 	bl	80154f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80158d4:	bf00      	nop
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <__NVIC_SetPriorityGrouping>:
{
 80158dc:	b480      	push	{r7}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f003 0307 	and.w	r3, r3, #7
 80158ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80158ec:	4b0c      	ldr	r3, [pc, #48]	; (8015920 <__NVIC_SetPriorityGrouping+0x44>)
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80158f2:	68ba      	ldr	r2, [r7, #8]
 80158f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80158f8:	4013      	ands	r3, r2
 80158fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801590c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801590e:	4a04      	ldr	r2, [pc, #16]	; (8015920 <__NVIC_SetPriorityGrouping+0x44>)
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	60d3      	str	r3, [r2, #12]
}
 8015914:	bf00      	nop
 8015916:	3714      	adds	r7, #20
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop
 8015920:	e000ed00 	.word	0xe000ed00

08015924 <__NVIC_GetPriorityGrouping>:
{
 8015924:	b480      	push	{r7}
 8015926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015928:	4b04      	ldr	r3, [pc, #16]	; (801593c <__NVIC_GetPriorityGrouping+0x18>)
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	0a1b      	lsrs	r3, r3, #8
 801592e:	f003 0307 	and.w	r3, r3, #7
}
 8015932:	4618      	mov	r0, r3
 8015934:	46bd      	mov	sp, r7
 8015936:	bc80      	pop	{r7}
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop
 801593c:	e000ed00 	.word	0xe000ed00

08015940 <__NVIC_EnableIRQ>:
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	4603      	mov	r3, r0
 8015948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801594a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801594e:	2b00      	cmp	r3, #0
 8015950:	db0b      	blt.n	801596a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015952:	79fb      	ldrb	r3, [r7, #7]
 8015954:	f003 021f 	and.w	r2, r3, #31
 8015958:	4906      	ldr	r1, [pc, #24]	; (8015974 <__NVIC_EnableIRQ+0x34>)
 801595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801595e:	095b      	lsrs	r3, r3, #5
 8015960:	2001      	movs	r0, #1
 8015962:	fa00 f202 	lsl.w	r2, r0, r2
 8015966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801596a:	bf00      	nop
 801596c:	370c      	adds	r7, #12
 801596e:	46bd      	mov	sp, r7
 8015970:	bc80      	pop	{r7}
 8015972:	4770      	bx	lr
 8015974:	e000e100 	.word	0xe000e100

08015978 <__NVIC_SetPriority>:
{
 8015978:	b480      	push	{r7}
 801597a:	b083      	sub	sp, #12
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	6039      	str	r1, [r7, #0]
 8015982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015988:	2b00      	cmp	r3, #0
 801598a:	db0a      	blt.n	80159a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	b2da      	uxtb	r2, r3
 8015990:	490c      	ldr	r1, [pc, #48]	; (80159c4 <__NVIC_SetPriority+0x4c>)
 8015992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015996:	0112      	lsls	r2, r2, #4
 8015998:	b2d2      	uxtb	r2, r2
 801599a:	440b      	add	r3, r1
 801599c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80159a0:	e00a      	b.n	80159b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	b2da      	uxtb	r2, r3
 80159a6:	4908      	ldr	r1, [pc, #32]	; (80159c8 <__NVIC_SetPriority+0x50>)
 80159a8:	79fb      	ldrb	r3, [r7, #7]
 80159aa:	f003 030f 	and.w	r3, r3, #15
 80159ae:	3b04      	subs	r3, #4
 80159b0:	0112      	lsls	r2, r2, #4
 80159b2:	b2d2      	uxtb	r2, r2
 80159b4:	440b      	add	r3, r1
 80159b6:	761a      	strb	r2, [r3, #24]
}
 80159b8:	bf00      	nop
 80159ba:	370c      	adds	r7, #12
 80159bc:	46bd      	mov	sp, r7
 80159be:	bc80      	pop	{r7}
 80159c0:	4770      	bx	lr
 80159c2:	bf00      	nop
 80159c4:	e000e100 	.word	0xe000e100
 80159c8:	e000ed00 	.word	0xe000ed00

080159cc <NVIC_EncodePriority>:
{
 80159cc:	b480      	push	{r7}
 80159ce:	b089      	sub	sp, #36	; 0x24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f003 0307 	and.w	r3, r3, #7
 80159de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	f1c3 0307 	rsb	r3, r3, #7
 80159e6:	2b04      	cmp	r3, #4
 80159e8:	bf28      	it	cs
 80159ea:	2304      	movcs	r3, #4
 80159ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	3304      	adds	r3, #4
 80159f2:	2b06      	cmp	r3, #6
 80159f4:	d902      	bls.n	80159fc <NVIC_EncodePriority+0x30>
 80159f6:	69fb      	ldr	r3, [r7, #28]
 80159f8:	3b03      	subs	r3, #3
 80159fa:	e000      	b.n	80159fe <NVIC_EncodePriority+0x32>
 80159fc:	2300      	movs	r3, #0
 80159fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015a00:	f04f 32ff 	mov.w	r2, #4294967295
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	fa02 f303 	lsl.w	r3, r2, r3
 8015a0a:	43da      	mvns	r2, r3
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	401a      	ands	r2, r3
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015a14:	f04f 31ff 	mov.w	r1, #4294967295
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8015a1e:	43d9      	mvns	r1, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015a24:	4313      	orrs	r3, r2
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3724      	adds	r7, #36	; 0x24
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bc80      	pop	{r7}
 8015a2e:	4770      	bx	lr

08015a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	3b01      	subs	r3, #1
 8015a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015a40:	d301      	bcc.n	8015a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015a42:	2301      	movs	r3, #1
 8015a44:	e00f      	b.n	8015a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015a46:	4a0a      	ldr	r2, [pc, #40]	; (8015a70 <SysTick_Config+0x40>)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015a4e:	210f      	movs	r1, #15
 8015a50:	f04f 30ff 	mov.w	r0, #4294967295
 8015a54:	f7ff ff90 	bl	8015978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015a58:	4b05      	ldr	r3, [pc, #20]	; (8015a70 <SysTick_Config+0x40>)
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015a5e:	4b04      	ldr	r3, [pc, #16]	; (8015a70 <SysTick_Config+0x40>)
 8015a60:	2207      	movs	r2, #7
 8015a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	e000e010 	.word	0xe000e010

08015a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f7ff ff2d 	bl	80158dc <__NVIC_SetPriorityGrouping>
}
 8015a82:	bf00      	nop
 8015a84:	3708      	adds	r7, #8
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b086      	sub	sp, #24
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	4603      	mov	r3, r0
 8015a92:	60b9      	str	r1, [r7, #8]
 8015a94:	607a      	str	r2, [r7, #4]
 8015a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015a9c:	f7ff ff42 	bl	8015924 <__NVIC_GetPriorityGrouping>
 8015aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	68b9      	ldr	r1, [r7, #8]
 8015aa6:	6978      	ldr	r0, [r7, #20]
 8015aa8:	f7ff ff90 	bl	80159cc <NVIC_EncodePriority>
 8015aac:	4602      	mov	r2, r0
 8015aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ab2:	4611      	mov	r1, r2
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff ff5f 	bl	8015978 <__NVIC_SetPriority>
}
 8015aba:	bf00      	nop
 8015abc:	3718      	adds	r7, #24
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}

08015ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015ac2:	b580      	push	{r7, lr}
 8015ac4:	b082      	sub	sp, #8
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	4603      	mov	r3, r0
 8015aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7ff ff35 	bl	8015940 <__NVIC_EnableIRQ>
}
 8015ad6:	bf00      	nop
 8015ad8:	3708      	adds	r7, #8
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}

08015ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8015ade:	b580      	push	{r7, lr}
 8015ae0:	b082      	sub	sp, #8
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7ff ffa2 	bl	8015a30 <SysTick_Config>
 8015aec:	4603      	mov	r3, r0
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
	...

08015af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015af8:	b480      	push	{r7}
 8015afa:	b085      	sub	sp, #20
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015b00:	2300      	movs	r3, #0
 8015b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d101      	bne.n	8015b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	e059      	b.n	8015bc2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	461a      	mov	r2, r3
 8015b14:	4b2d      	ldr	r3, [pc, #180]	; (8015bcc <HAL_DMA_Init+0xd4>)
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d80f      	bhi.n	8015b3a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	4b2b      	ldr	r3, [pc, #172]	; (8015bd0 <HAL_DMA_Init+0xd8>)
 8015b22:	4413      	add	r3, r2
 8015b24:	4a2b      	ldr	r2, [pc, #172]	; (8015bd4 <HAL_DMA_Init+0xdc>)
 8015b26:	fba2 2303 	umull	r2, r3, r2, r3
 8015b2a:	091b      	lsrs	r3, r3, #4
 8015b2c:	009a      	lsls	r2, r3, #2
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	4a28      	ldr	r2, [pc, #160]	; (8015bd8 <HAL_DMA_Init+0xe0>)
 8015b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8015b38:	e00e      	b.n	8015b58 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	461a      	mov	r2, r3
 8015b40:	4b26      	ldr	r3, [pc, #152]	; (8015bdc <HAL_DMA_Init+0xe4>)
 8015b42:	4413      	add	r3, r2
 8015b44:	4a23      	ldr	r2, [pc, #140]	; (8015bd4 <HAL_DMA_Init+0xdc>)
 8015b46:	fba2 2303 	umull	r2, r3, r2, r3
 8015b4a:	091b      	lsrs	r3, r3, #4
 8015b4c:	009a      	lsls	r2, r3, #2
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4a22      	ldr	r2, [pc, #136]	; (8015be0 <HAL_DMA_Init+0xe8>)
 8015b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2202      	movs	r2, #2
 8015b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8015b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8015b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8015b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	68db      	ldr	r3, [r3, #12]
 8015b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	695b      	ldr	r3, [r3, #20]
 8015b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	69db      	ldr	r3, [r3, #28]
 8015b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015b9c:	68fa      	ldr	r2, [r7, #12]
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2200      	movs	r2, #0
 8015bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8015bc0:	2300      	movs	r3, #0
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3714      	adds	r7, #20
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bc80      	pop	{r7}
 8015bca:	4770      	bx	lr
 8015bcc:	40020407 	.word	0x40020407
 8015bd0:	bffdfff8 	.word	0xbffdfff8
 8015bd4:	cccccccd 	.word	0xcccccccd
 8015bd8:	40020000 	.word	0x40020000
 8015bdc:	bffdfbf8 	.word	0xbffdfbf8
 8015be0:	40020400 	.word	0x40020400

08015be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	60b9      	str	r1, [r7, #8]
 8015bee:	607a      	str	r2, [r7, #4]
 8015bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bfc:	2b01      	cmp	r3, #1
 8015bfe:	d101      	bne.n	8015c04 <HAL_DMA_Start_IT+0x20>
 8015c00:	2302      	movs	r3, #2
 8015c02:	e04a      	b.n	8015c9a <HAL_DMA_Start_IT+0xb6>
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	2201      	movs	r2, #1
 8015c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d13a      	bne.n	8015c8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2202      	movs	r2, #2
 8015c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	2200      	movs	r2, #0
 8015c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	f022 0201 	bic.w	r2, r2, #1
 8015c32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	68b9      	ldr	r1, [r7, #8]
 8015c3a:	68f8      	ldr	r0, [r7, #12]
 8015c3c:	f000 fa6e 	bl	801611c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d008      	beq.n	8015c5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f042 020e 	orr.w	r2, r2, #14
 8015c56:	601a      	str	r2, [r3, #0]
 8015c58:	e00f      	b.n	8015c7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	681a      	ldr	r2, [r3, #0]
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	f022 0204 	bic.w	r2, r2, #4
 8015c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	f042 020a 	orr.w	r2, r2, #10
 8015c78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f042 0201 	orr.w	r2, r2, #1
 8015c88:	601a      	str	r2, [r3, #0]
 8015c8a:	e005      	b.n	8015c98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8015c94:	2302      	movs	r3, #2
 8015c96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8015c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3718      	adds	r7, #24
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
	...

08015ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cc0:	2204      	movs	r2, #4
 8015cc2:	409a      	lsls	r2, r3
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	4013      	ands	r3, r2
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 80d6 	beq.w	8015e7a <HAL_DMA_IRQHandler+0x1d6>
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	f003 0304 	and.w	r3, r3, #4
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f000 80d0 	beq.w	8015e7a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f003 0320 	and.w	r3, r3, #32
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d107      	bne.n	8015cf8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	f022 0204 	bic.w	r2, r2, #4
 8015cf6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	461a      	mov	r2, r3
 8015cfe:	4b9b      	ldr	r3, [pc, #620]	; (8015f6c <HAL_DMA_IRQHandler+0x2c8>)
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d958      	bls.n	8015db6 <HAL_DMA_IRQHandler+0x112>
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	4a99      	ldr	r2, [pc, #612]	; (8015f70 <HAL_DMA_IRQHandler+0x2cc>)
 8015d0a:	4293      	cmp	r3, r2
 8015d0c:	d04f      	beq.n	8015dae <HAL_DMA_IRQHandler+0x10a>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	4a98      	ldr	r2, [pc, #608]	; (8015f74 <HAL_DMA_IRQHandler+0x2d0>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d048      	beq.n	8015daa <HAL_DMA_IRQHandler+0x106>
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	4a96      	ldr	r2, [pc, #600]	; (8015f78 <HAL_DMA_IRQHandler+0x2d4>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	d040      	beq.n	8015da4 <HAL_DMA_IRQHandler+0x100>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4a95      	ldr	r2, [pc, #596]	; (8015f7c <HAL_DMA_IRQHandler+0x2d8>)
 8015d28:	4293      	cmp	r3, r2
 8015d2a:	d038      	beq.n	8015d9e <HAL_DMA_IRQHandler+0xfa>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4a93      	ldr	r2, [pc, #588]	; (8015f80 <HAL_DMA_IRQHandler+0x2dc>)
 8015d32:	4293      	cmp	r3, r2
 8015d34:	d030      	beq.n	8015d98 <HAL_DMA_IRQHandler+0xf4>
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4a92      	ldr	r2, [pc, #584]	; (8015f84 <HAL_DMA_IRQHandler+0x2e0>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d028      	beq.n	8015d92 <HAL_DMA_IRQHandler+0xee>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4a89      	ldr	r2, [pc, #548]	; (8015f6c <HAL_DMA_IRQHandler+0x2c8>)
 8015d46:	4293      	cmp	r3, r2
 8015d48:	d020      	beq.n	8015d8c <HAL_DMA_IRQHandler+0xe8>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4a8e      	ldr	r2, [pc, #568]	; (8015f88 <HAL_DMA_IRQHandler+0x2e4>)
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d019      	beq.n	8015d88 <HAL_DMA_IRQHandler+0xe4>
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	4a8c      	ldr	r2, [pc, #560]	; (8015f8c <HAL_DMA_IRQHandler+0x2e8>)
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	d012      	beq.n	8015d84 <HAL_DMA_IRQHandler+0xe0>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	4a8b      	ldr	r2, [pc, #556]	; (8015f90 <HAL_DMA_IRQHandler+0x2ec>)
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d00a      	beq.n	8015d7e <HAL_DMA_IRQHandler+0xda>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4a89      	ldr	r2, [pc, #548]	; (8015f94 <HAL_DMA_IRQHandler+0x2f0>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d102      	bne.n	8015d78 <HAL_DMA_IRQHandler+0xd4>
 8015d72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015d76:	e01b      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015d7c:	e018      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d82:	e015      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d84:	2340      	movs	r3, #64	; 0x40
 8015d86:	e013      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d88:	2304      	movs	r3, #4
 8015d8a:	e011      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8015d90:	e00e      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015d96:	e00b      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015d9c:	e008      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015d9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015da2:	e005      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015da8:	e002      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015daa:	2340      	movs	r3, #64	; 0x40
 8015dac:	e000      	b.n	8015db0 <HAL_DMA_IRQHandler+0x10c>
 8015dae:	2304      	movs	r3, #4
 8015db0:	4a79      	ldr	r2, [pc, #484]	; (8015f98 <HAL_DMA_IRQHandler+0x2f4>)
 8015db2:	6053      	str	r3, [r2, #4]
 8015db4:	e057      	b.n	8015e66 <HAL_DMA_IRQHandler+0x1c2>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	4a6d      	ldr	r2, [pc, #436]	; (8015f70 <HAL_DMA_IRQHandler+0x2cc>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d04f      	beq.n	8015e60 <HAL_DMA_IRQHandler+0x1bc>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4a6b      	ldr	r2, [pc, #428]	; (8015f74 <HAL_DMA_IRQHandler+0x2d0>)
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d048      	beq.n	8015e5c <HAL_DMA_IRQHandler+0x1b8>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	4a6a      	ldr	r2, [pc, #424]	; (8015f78 <HAL_DMA_IRQHandler+0x2d4>)
 8015dd0:	4293      	cmp	r3, r2
 8015dd2:	d040      	beq.n	8015e56 <HAL_DMA_IRQHandler+0x1b2>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4a68      	ldr	r2, [pc, #416]	; (8015f7c <HAL_DMA_IRQHandler+0x2d8>)
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d038      	beq.n	8015e50 <HAL_DMA_IRQHandler+0x1ac>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	4a67      	ldr	r2, [pc, #412]	; (8015f80 <HAL_DMA_IRQHandler+0x2dc>)
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d030      	beq.n	8015e4a <HAL_DMA_IRQHandler+0x1a6>
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	4a65      	ldr	r2, [pc, #404]	; (8015f84 <HAL_DMA_IRQHandler+0x2e0>)
 8015dee:	4293      	cmp	r3, r2
 8015df0:	d028      	beq.n	8015e44 <HAL_DMA_IRQHandler+0x1a0>
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	4a5d      	ldr	r2, [pc, #372]	; (8015f6c <HAL_DMA_IRQHandler+0x2c8>)
 8015df8:	4293      	cmp	r3, r2
 8015dfa:	d020      	beq.n	8015e3e <HAL_DMA_IRQHandler+0x19a>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4a61      	ldr	r2, [pc, #388]	; (8015f88 <HAL_DMA_IRQHandler+0x2e4>)
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d019      	beq.n	8015e3a <HAL_DMA_IRQHandler+0x196>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a60      	ldr	r2, [pc, #384]	; (8015f8c <HAL_DMA_IRQHandler+0x2e8>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d012      	beq.n	8015e36 <HAL_DMA_IRQHandler+0x192>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	4a5e      	ldr	r2, [pc, #376]	; (8015f90 <HAL_DMA_IRQHandler+0x2ec>)
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d00a      	beq.n	8015e30 <HAL_DMA_IRQHandler+0x18c>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	4a5d      	ldr	r2, [pc, #372]	; (8015f94 <HAL_DMA_IRQHandler+0x2f0>)
 8015e20:	4293      	cmp	r3, r2
 8015e22:	d102      	bne.n	8015e2a <HAL_DMA_IRQHandler+0x186>
 8015e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015e28:	e01b      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015e2e:	e018      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e34:	e015      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e36:	2340      	movs	r3, #64	; 0x40
 8015e38:	e013      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e3a:	2304      	movs	r3, #4
 8015e3c:	e011      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8015e42:	e00e      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015e48:	e00b      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015e4e:	e008      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015e54:	e005      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e5a:	e002      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e5c:	2340      	movs	r3, #64	; 0x40
 8015e5e:	e000      	b.n	8015e62 <HAL_DMA_IRQHandler+0x1be>
 8015e60:	2304      	movs	r3, #4
 8015e62:	4a4e      	ldr	r2, [pc, #312]	; (8015f9c <HAL_DMA_IRQHandler+0x2f8>)
 8015e64:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f000 8136 	beq.w	80160dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8015e78:	e130      	b.n	80160dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e7e:	2202      	movs	r2, #2
 8015e80:	409a      	lsls	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	4013      	ands	r3, r2
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 80f8 	beq.w	801607c <HAL_DMA_IRQHandler+0x3d8>
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	f003 0302 	and.w	r3, r3, #2
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	f000 80f2 	beq.w	801607c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f003 0320 	and.w	r3, r3, #32
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d10b      	bne.n	8015ebe <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	f022 020a 	bic.w	r2, r2, #10
 8015eb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	4b29      	ldr	r3, [pc, #164]	; (8015f6c <HAL_DMA_IRQHandler+0x2c8>)
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d973      	bls.n	8015fb2 <HAL_DMA_IRQHandler+0x30e>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a28      	ldr	r2, [pc, #160]	; (8015f70 <HAL_DMA_IRQHandler+0x2cc>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d06a      	beq.n	8015faa <HAL_DMA_IRQHandler+0x306>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4a26      	ldr	r2, [pc, #152]	; (8015f74 <HAL_DMA_IRQHandler+0x2d0>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d063      	beq.n	8015fa6 <HAL_DMA_IRQHandler+0x302>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a25      	ldr	r2, [pc, #148]	; (8015f78 <HAL_DMA_IRQHandler+0x2d4>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d05b      	beq.n	8015fa0 <HAL_DMA_IRQHandler+0x2fc>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4a23      	ldr	r2, [pc, #140]	; (8015f7c <HAL_DMA_IRQHandler+0x2d8>)
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d038      	beq.n	8015f64 <HAL_DMA_IRQHandler+0x2c0>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a22      	ldr	r2, [pc, #136]	; (8015f80 <HAL_DMA_IRQHandler+0x2dc>)
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	d030      	beq.n	8015f5e <HAL_DMA_IRQHandler+0x2ba>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	4a20      	ldr	r2, [pc, #128]	; (8015f84 <HAL_DMA_IRQHandler+0x2e0>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d028      	beq.n	8015f58 <HAL_DMA_IRQHandler+0x2b4>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a18      	ldr	r2, [pc, #96]	; (8015f6c <HAL_DMA_IRQHandler+0x2c8>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d020      	beq.n	8015f52 <HAL_DMA_IRQHandler+0x2ae>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4a1c      	ldr	r2, [pc, #112]	; (8015f88 <HAL_DMA_IRQHandler+0x2e4>)
 8015f16:	4293      	cmp	r3, r2
 8015f18:	d019      	beq.n	8015f4e <HAL_DMA_IRQHandler+0x2aa>
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4a1b      	ldr	r2, [pc, #108]	; (8015f8c <HAL_DMA_IRQHandler+0x2e8>)
 8015f20:	4293      	cmp	r3, r2
 8015f22:	d012      	beq.n	8015f4a <HAL_DMA_IRQHandler+0x2a6>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4a19      	ldr	r2, [pc, #100]	; (8015f90 <HAL_DMA_IRQHandler+0x2ec>)
 8015f2a:	4293      	cmp	r3, r2
 8015f2c:	d00a      	beq.n	8015f44 <HAL_DMA_IRQHandler+0x2a0>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4a18      	ldr	r2, [pc, #96]	; (8015f94 <HAL_DMA_IRQHandler+0x2f0>)
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d102      	bne.n	8015f3e <HAL_DMA_IRQHandler+0x29a>
 8015f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015f3c:	e036      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015f42:	e033      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015f48:	e030      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f4a:	2320      	movs	r3, #32
 8015f4c:	e02e      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f4e:	2302      	movs	r3, #2
 8015f50:	e02c      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015f56:	e029      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015f5c:	e026      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015f62:	e023      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015f68:	e020      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015f6a:	bf00      	nop
 8015f6c:	40020080 	.word	0x40020080
 8015f70:	40020008 	.word	0x40020008
 8015f74:	4002001c 	.word	0x4002001c
 8015f78:	40020030 	.word	0x40020030
 8015f7c:	40020044 	.word	0x40020044
 8015f80:	40020058 	.word	0x40020058
 8015f84:	4002006c 	.word	0x4002006c
 8015f88:	40020408 	.word	0x40020408
 8015f8c:	4002041c 	.word	0x4002041c
 8015f90:	40020430 	.word	0x40020430
 8015f94:	40020444 	.word	0x40020444
 8015f98:	40020400 	.word	0x40020400
 8015f9c:	40020000 	.word	0x40020000
 8015fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fa4:	e002      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015fa6:	2320      	movs	r3, #32
 8015fa8:	e000      	b.n	8015fac <HAL_DMA_IRQHandler+0x308>
 8015faa:	2302      	movs	r3, #2
 8015fac:	4a4e      	ldr	r2, [pc, #312]	; (80160e8 <HAL_DMA_IRQHandler+0x444>)
 8015fae:	6053      	str	r3, [r2, #4]
 8015fb0:	e057      	b.n	8016062 <HAL_DMA_IRQHandler+0x3be>
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	4a4d      	ldr	r2, [pc, #308]	; (80160ec <HAL_DMA_IRQHandler+0x448>)
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d04f      	beq.n	801605c <HAL_DMA_IRQHandler+0x3b8>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4a4b      	ldr	r2, [pc, #300]	; (80160f0 <HAL_DMA_IRQHandler+0x44c>)
 8015fc2:	4293      	cmp	r3, r2
 8015fc4:	d048      	beq.n	8016058 <HAL_DMA_IRQHandler+0x3b4>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4a4a      	ldr	r2, [pc, #296]	; (80160f4 <HAL_DMA_IRQHandler+0x450>)
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	d040      	beq.n	8016052 <HAL_DMA_IRQHandler+0x3ae>
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4a48      	ldr	r2, [pc, #288]	; (80160f8 <HAL_DMA_IRQHandler+0x454>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d038      	beq.n	801604c <HAL_DMA_IRQHandler+0x3a8>
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	4a47      	ldr	r2, [pc, #284]	; (80160fc <HAL_DMA_IRQHandler+0x458>)
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	d030      	beq.n	8016046 <HAL_DMA_IRQHandler+0x3a2>
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4a45      	ldr	r2, [pc, #276]	; (8016100 <HAL_DMA_IRQHandler+0x45c>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d028      	beq.n	8016040 <HAL_DMA_IRQHandler+0x39c>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4a44      	ldr	r2, [pc, #272]	; (8016104 <HAL_DMA_IRQHandler+0x460>)
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	d020      	beq.n	801603a <HAL_DMA_IRQHandler+0x396>
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a42      	ldr	r2, [pc, #264]	; (8016108 <HAL_DMA_IRQHandler+0x464>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d019      	beq.n	8016036 <HAL_DMA_IRQHandler+0x392>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4a41      	ldr	r2, [pc, #260]	; (801610c <HAL_DMA_IRQHandler+0x468>)
 8016008:	4293      	cmp	r3, r2
 801600a:	d012      	beq.n	8016032 <HAL_DMA_IRQHandler+0x38e>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4a3f      	ldr	r2, [pc, #252]	; (8016110 <HAL_DMA_IRQHandler+0x46c>)
 8016012:	4293      	cmp	r3, r2
 8016014:	d00a      	beq.n	801602c <HAL_DMA_IRQHandler+0x388>
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4a3e      	ldr	r2, [pc, #248]	; (8016114 <HAL_DMA_IRQHandler+0x470>)
 801601c:	4293      	cmp	r3, r2
 801601e:	d102      	bne.n	8016026 <HAL_DMA_IRQHandler+0x382>
 8016020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016024:	e01b      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801602a:	e018      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 801602c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016030:	e015      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016032:	2320      	movs	r3, #32
 8016034:	e013      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016036:	2302      	movs	r3, #2
 8016038:	e011      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 801603a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801603e:	e00e      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016044:	e00b      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801604a:	e008      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 801604c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016050:	e005      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016056:	e002      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 8016058:	2320      	movs	r3, #32
 801605a:	e000      	b.n	801605e <HAL_DMA_IRQHandler+0x3ba>
 801605c:	2302      	movs	r3, #2
 801605e:	4a2e      	ldr	r2, [pc, #184]	; (8016118 <HAL_DMA_IRQHandler+0x474>)
 8016060:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2200      	movs	r2, #0
 8016066:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801606e:	2b00      	cmp	r3, #0
 8016070:	d034      	beq.n	80160dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 801607a:	e02f      	b.n	80160dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016080:	2208      	movs	r2, #8
 8016082:	409a      	lsls	r2, r3
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	4013      	ands	r3, r2
 8016088:	2b00      	cmp	r3, #0
 801608a:	d028      	beq.n	80160de <HAL_DMA_IRQHandler+0x43a>
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	f003 0308 	and.w	r3, r3, #8
 8016092:	2b00      	cmp	r3, #0
 8016094:	d023      	beq.n	80160de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f022 020e 	bic.w	r2, r2, #14
 80160a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160ae:	2101      	movs	r1, #1
 80160b0:	fa01 f202 	lsl.w	r2, r1, r2
 80160b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2201      	movs	r2, #1
 80160ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2201      	movs	r2, #1
 80160c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d004      	beq.n	80160de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	4798      	blx	r3
    }
  }
  return;
 80160dc:	bf00      	nop
 80160de:	bf00      	nop
}
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	40020400 	.word	0x40020400
 80160ec:	40020008 	.word	0x40020008
 80160f0:	4002001c 	.word	0x4002001c
 80160f4:	40020030 	.word	0x40020030
 80160f8:	40020044 	.word	0x40020044
 80160fc:	40020058 	.word	0x40020058
 8016100:	4002006c 	.word	0x4002006c
 8016104:	40020080 	.word	0x40020080
 8016108:	40020408 	.word	0x40020408
 801610c:	4002041c 	.word	0x4002041c
 8016110:	40020430 	.word	0x40020430
 8016114:	40020444 	.word	0x40020444
 8016118:	40020000 	.word	0x40020000

0801611c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801611c:	b480      	push	{r7}
 801611e:	b085      	sub	sp, #20
 8016120:	af00      	add	r7, sp, #0
 8016122:	60f8      	str	r0, [r7, #12]
 8016124:	60b9      	str	r1, [r7, #8]
 8016126:	607a      	str	r2, [r7, #4]
 8016128:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016132:	2101      	movs	r1, #1
 8016134:	fa01 f202 	lsl.w	r2, r1, r2
 8016138:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	683a      	ldr	r2, [r7, #0]
 8016140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	2b10      	cmp	r3, #16
 8016148:	d108      	bne.n	801615c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	68ba      	ldr	r2, [r7, #8]
 8016158:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801615a:	e007      	b.n	801616c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	60da      	str	r2, [r3, #12]
}
 801616c:	bf00      	nop
 801616e:	3714      	adds	r7, #20
 8016170:	46bd      	mov	sp, r7
 8016172:	bc80      	pop	{r7}
 8016174:	4770      	bx	lr
	...

08016178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016178:	b480      	push	{r7}
 801617a:	b08b      	sub	sp, #44	; 0x2c
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016182:	2300      	movs	r3, #0
 8016184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8016186:	2300      	movs	r3, #0
 8016188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801618a:	e133      	b.n	80163f4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 801618c:	2201      	movs	r2, #1
 801618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016190:	fa02 f303 	lsl.w	r3, r2, r3
 8016194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	69fa      	ldr	r2, [r7, #28]
 801619c:	4013      	ands	r3, r2
 801619e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80161a0:	69ba      	ldr	r2, [r7, #24]
 80161a2:	69fb      	ldr	r3, [r7, #28]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	f040 8122 	bne.w	80163ee <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	685b      	ldr	r3, [r3, #4]
 80161ae:	2b12      	cmp	r3, #18
 80161b0:	d034      	beq.n	801621c <HAL_GPIO_Init+0xa4>
 80161b2:	2b12      	cmp	r3, #18
 80161b4:	d80d      	bhi.n	80161d2 <HAL_GPIO_Init+0x5a>
 80161b6:	2b02      	cmp	r3, #2
 80161b8:	d02b      	beq.n	8016212 <HAL_GPIO_Init+0x9a>
 80161ba:	2b02      	cmp	r3, #2
 80161bc:	d804      	bhi.n	80161c8 <HAL_GPIO_Init+0x50>
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d031      	beq.n	8016226 <HAL_GPIO_Init+0xae>
 80161c2:	2b01      	cmp	r3, #1
 80161c4:	d01c      	beq.n	8016200 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80161c6:	e048      	b.n	801625a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80161c8:	2b03      	cmp	r3, #3
 80161ca:	d043      	beq.n	8016254 <HAL_GPIO_Init+0xdc>
 80161cc:	2b11      	cmp	r3, #17
 80161ce:	d01b      	beq.n	8016208 <HAL_GPIO_Init+0x90>
          break;
 80161d0:	e043      	b.n	801625a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80161d2:	4a8f      	ldr	r2, [pc, #572]	; (8016410 <HAL_GPIO_Init+0x298>)
 80161d4:	4293      	cmp	r3, r2
 80161d6:	d026      	beq.n	8016226 <HAL_GPIO_Init+0xae>
 80161d8:	4a8d      	ldr	r2, [pc, #564]	; (8016410 <HAL_GPIO_Init+0x298>)
 80161da:	4293      	cmp	r3, r2
 80161dc:	d806      	bhi.n	80161ec <HAL_GPIO_Init+0x74>
 80161de:	4a8d      	ldr	r2, [pc, #564]	; (8016414 <HAL_GPIO_Init+0x29c>)
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d020      	beq.n	8016226 <HAL_GPIO_Init+0xae>
 80161e4:	4a8c      	ldr	r2, [pc, #560]	; (8016418 <HAL_GPIO_Init+0x2a0>)
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d01d      	beq.n	8016226 <HAL_GPIO_Init+0xae>
          break;
 80161ea:	e036      	b.n	801625a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80161ec:	4a8b      	ldr	r2, [pc, #556]	; (801641c <HAL_GPIO_Init+0x2a4>)
 80161ee:	4293      	cmp	r3, r2
 80161f0:	d019      	beq.n	8016226 <HAL_GPIO_Init+0xae>
 80161f2:	4a8b      	ldr	r2, [pc, #556]	; (8016420 <HAL_GPIO_Init+0x2a8>)
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d016      	beq.n	8016226 <HAL_GPIO_Init+0xae>
 80161f8:	4a8a      	ldr	r2, [pc, #552]	; (8016424 <HAL_GPIO_Init+0x2ac>)
 80161fa:	4293      	cmp	r3, r2
 80161fc:	d013      	beq.n	8016226 <HAL_GPIO_Init+0xae>
          break;
 80161fe:	e02c      	b.n	801625a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8016200:	683b      	ldr	r3, [r7, #0]
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	623b      	str	r3, [r7, #32]
          break;
 8016206:	e028      	b.n	801625a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	3304      	adds	r3, #4
 801620e:	623b      	str	r3, [r7, #32]
          break;
 8016210:	e023      	b.n	801625a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	68db      	ldr	r3, [r3, #12]
 8016216:	3308      	adds	r3, #8
 8016218:	623b      	str	r3, [r7, #32]
          break;
 801621a:	e01e      	b.n	801625a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	330c      	adds	r3, #12
 8016222:	623b      	str	r3, [r7, #32]
          break;
 8016224:	e019      	b.n	801625a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	689b      	ldr	r3, [r3, #8]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d102      	bne.n	8016234 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 801622e:	2304      	movs	r3, #4
 8016230:	623b      	str	r3, [r7, #32]
          break;
 8016232:	e012      	b.n	801625a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	689b      	ldr	r3, [r3, #8]
 8016238:	2b01      	cmp	r3, #1
 801623a:	d105      	bne.n	8016248 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 801623c:	2308      	movs	r3, #8
 801623e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	69fa      	ldr	r2, [r7, #28]
 8016244:	611a      	str	r2, [r3, #16]
          break;
 8016246:	e008      	b.n	801625a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8016248:	2308      	movs	r3, #8
 801624a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	69fa      	ldr	r2, [r7, #28]
 8016250:	615a      	str	r2, [r3, #20]
          break;
 8016252:	e002      	b.n	801625a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8016254:	2300      	movs	r3, #0
 8016256:	623b      	str	r3, [r7, #32]
          break;
 8016258:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 801625a:	69bb      	ldr	r3, [r7, #24]
 801625c:	2bff      	cmp	r3, #255	; 0xff
 801625e:	d801      	bhi.n	8016264 <HAL_GPIO_Init+0xec>
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	e001      	b.n	8016268 <HAL_GPIO_Init+0xf0>
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	3304      	adds	r3, #4
 8016268:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	2bff      	cmp	r3, #255	; 0xff
 801626e:	d802      	bhi.n	8016276 <HAL_GPIO_Init+0xfe>
 8016270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	e002      	b.n	801627c <HAL_GPIO_Init+0x104>
 8016276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016278:	3b08      	subs	r3, #8
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	210f      	movs	r1, #15
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	fa01 f303 	lsl.w	r3, r1, r3
 801628a:	43db      	mvns	r3, r3
 801628c:	401a      	ands	r2, r3
 801628e:	6a39      	ldr	r1, [r7, #32]
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	fa01 f303 	lsl.w	r3, r1, r3
 8016296:	431a      	orrs	r2, r3
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801629c:	683b      	ldr	r3, [r7, #0]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	f000 80a2 	beq.w	80163ee <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80162aa:	4b5f      	ldr	r3, [pc, #380]	; (8016428 <HAL_GPIO_Init+0x2b0>)
 80162ac:	699b      	ldr	r3, [r3, #24]
 80162ae:	4a5e      	ldr	r2, [pc, #376]	; (8016428 <HAL_GPIO_Init+0x2b0>)
 80162b0:	f043 0301 	orr.w	r3, r3, #1
 80162b4:	6193      	str	r3, [r2, #24]
 80162b6:	4b5c      	ldr	r3, [pc, #368]	; (8016428 <HAL_GPIO_Init+0x2b0>)
 80162b8:	699b      	ldr	r3, [r3, #24]
 80162ba:	f003 0301 	and.w	r3, r3, #1
 80162be:	60bb      	str	r3, [r7, #8]
 80162c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80162c2:	4a5a      	ldr	r2, [pc, #360]	; (801642c <HAL_GPIO_Init+0x2b4>)
 80162c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c6:	089b      	lsrs	r3, r3, #2
 80162c8:	3302      	adds	r3, #2
 80162ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80162d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d2:	f003 0303 	and.w	r3, r3, #3
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	220f      	movs	r2, #15
 80162da:	fa02 f303 	lsl.w	r3, r2, r3
 80162de:	43db      	mvns	r3, r3
 80162e0:	68fa      	ldr	r2, [r7, #12]
 80162e2:	4013      	ands	r3, r2
 80162e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	4a51      	ldr	r2, [pc, #324]	; (8016430 <HAL_GPIO_Init+0x2b8>)
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d01f      	beq.n	801632e <HAL_GPIO_Init+0x1b6>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	4a50      	ldr	r2, [pc, #320]	; (8016434 <HAL_GPIO_Init+0x2bc>)
 80162f2:	4293      	cmp	r3, r2
 80162f4:	d019      	beq.n	801632a <HAL_GPIO_Init+0x1b2>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4a4f      	ldr	r2, [pc, #316]	; (8016438 <HAL_GPIO_Init+0x2c0>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d013      	beq.n	8016326 <HAL_GPIO_Init+0x1ae>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4a4e      	ldr	r2, [pc, #312]	; (801643c <HAL_GPIO_Init+0x2c4>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d00d      	beq.n	8016322 <HAL_GPIO_Init+0x1aa>
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	4a4d      	ldr	r2, [pc, #308]	; (8016440 <HAL_GPIO_Init+0x2c8>)
 801630a:	4293      	cmp	r3, r2
 801630c:	d007      	beq.n	801631e <HAL_GPIO_Init+0x1a6>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	4a4c      	ldr	r2, [pc, #304]	; (8016444 <HAL_GPIO_Init+0x2cc>)
 8016312:	4293      	cmp	r3, r2
 8016314:	d101      	bne.n	801631a <HAL_GPIO_Init+0x1a2>
 8016316:	2305      	movs	r3, #5
 8016318:	e00a      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 801631a:	2306      	movs	r3, #6
 801631c:	e008      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 801631e:	2304      	movs	r3, #4
 8016320:	e006      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 8016322:	2303      	movs	r3, #3
 8016324:	e004      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 8016326:	2302      	movs	r3, #2
 8016328:	e002      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 801632a:	2301      	movs	r3, #1
 801632c:	e000      	b.n	8016330 <HAL_GPIO_Init+0x1b8>
 801632e:	2300      	movs	r3, #0
 8016330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016332:	f002 0203 	and.w	r2, r2, #3
 8016336:	0092      	lsls	r2, r2, #2
 8016338:	4093      	lsls	r3, r2
 801633a:	68fa      	ldr	r2, [r7, #12]
 801633c:	4313      	orrs	r3, r2
 801633e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8016340:	493a      	ldr	r1, [pc, #232]	; (801642c <HAL_GPIO_Init+0x2b4>)
 8016342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016344:	089b      	lsrs	r3, r3, #2
 8016346:	3302      	adds	r3, #2
 8016348:	68fa      	ldr	r2, [r7, #12]
 801634a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016356:	2b00      	cmp	r3, #0
 8016358:	d006      	beq.n	8016368 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 801635a:	4b3b      	ldr	r3, [pc, #236]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	493a      	ldr	r1, [pc, #232]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	4313      	orrs	r3, r2
 8016364:	600b      	str	r3, [r1, #0]
 8016366:	e006      	b.n	8016376 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8016368:	4b37      	ldr	r3, [pc, #220]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 801636a:	681a      	ldr	r2, [r3, #0]
 801636c:	69bb      	ldr	r3, [r7, #24]
 801636e:	43db      	mvns	r3, r3
 8016370:	4935      	ldr	r1, [pc, #212]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 8016372:	4013      	ands	r3, r2
 8016374:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801637e:	2b00      	cmp	r3, #0
 8016380:	d006      	beq.n	8016390 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8016382:	4b31      	ldr	r3, [pc, #196]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 8016384:	685a      	ldr	r2, [r3, #4]
 8016386:	4930      	ldr	r1, [pc, #192]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	4313      	orrs	r3, r2
 801638c:	604b      	str	r3, [r1, #4]
 801638e:	e006      	b.n	801639e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8016390:	4b2d      	ldr	r3, [pc, #180]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 8016392:	685a      	ldr	r2, [r3, #4]
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	43db      	mvns	r3, r3
 8016398:	492b      	ldr	r1, [pc, #172]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 801639a:	4013      	ands	r3, r2
 801639c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d006      	beq.n	80163b8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80163aa:	4b27      	ldr	r3, [pc, #156]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163ac:	689a      	ldr	r2, [r3, #8]
 80163ae:	4926      	ldr	r1, [pc, #152]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163b0:	69bb      	ldr	r3, [r7, #24]
 80163b2:	4313      	orrs	r3, r2
 80163b4:	608b      	str	r3, [r1, #8]
 80163b6:	e006      	b.n	80163c6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80163b8:	4b23      	ldr	r3, [pc, #140]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163ba:	689a      	ldr	r2, [r3, #8]
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	43db      	mvns	r3, r3
 80163c0:	4921      	ldr	r1, [pc, #132]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163c2:	4013      	ands	r3, r2
 80163c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d006      	beq.n	80163e0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80163d2:	4b1d      	ldr	r3, [pc, #116]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163d4:	68da      	ldr	r2, [r3, #12]
 80163d6:	491c      	ldr	r1, [pc, #112]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163d8:	69bb      	ldr	r3, [r7, #24]
 80163da:	4313      	orrs	r3, r2
 80163dc:	60cb      	str	r3, [r1, #12]
 80163de:	e006      	b.n	80163ee <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80163e0:	4b19      	ldr	r3, [pc, #100]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163e2:	68da      	ldr	r2, [r3, #12]
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	43db      	mvns	r3, r3
 80163e8:	4917      	ldr	r1, [pc, #92]	; (8016448 <HAL_GPIO_Init+0x2d0>)
 80163ea:	4013      	ands	r3, r2
 80163ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80163ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f0:	3301      	adds	r3, #1
 80163f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	fa22 f303 	lsr.w	r3, r2, r3
 80163fe:	2b00      	cmp	r3, #0
 8016400:	f47f aec4 	bne.w	801618c <HAL_GPIO_Init+0x14>
  }
}
 8016404:	bf00      	nop
 8016406:	372c      	adds	r7, #44	; 0x2c
 8016408:	46bd      	mov	sp, r7
 801640a:	bc80      	pop	{r7}
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	10210000 	.word	0x10210000
 8016414:	10110000 	.word	0x10110000
 8016418:	10120000 	.word	0x10120000
 801641c:	10310000 	.word	0x10310000
 8016420:	10320000 	.word	0x10320000
 8016424:	10220000 	.word	0x10220000
 8016428:	40021000 	.word	0x40021000
 801642c:	40010000 	.word	0x40010000
 8016430:	40010800 	.word	0x40010800
 8016434:	40010c00 	.word	0x40010c00
 8016438:	40011000 	.word	0x40011000
 801643c:	40011400 	.word	0x40011400
 8016440:	40011800 	.word	0x40011800
 8016444:	40011c00 	.word	0x40011c00
 8016448:	40010400 	.word	0x40010400

0801644c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	460b      	mov	r3, r1
 8016456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	689a      	ldr	r2, [r3, #8]
 801645c:	887b      	ldrh	r3, [r7, #2]
 801645e:	4013      	ands	r3, r2
 8016460:	2b00      	cmp	r3, #0
 8016462:	d002      	beq.n	801646a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016464:	2301      	movs	r3, #1
 8016466:	73fb      	strb	r3, [r7, #15]
 8016468:	e001      	b.n	801646e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801646a:	2300      	movs	r3, #0
 801646c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016470:	4618      	mov	r0, r3
 8016472:	3714      	adds	r7, #20
 8016474:	46bd      	mov	sp, r7
 8016476:	bc80      	pop	{r7}
 8016478:	4770      	bx	lr

0801647a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801647a:	b480      	push	{r7}
 801647c:	b083      	sub	sp, #12
 801647e:	af00      	add	r7, sp, #0
 8016480:	6078      	str	r0, [r7, #4]
 8016482:	460b      	mov	r3, r1
 8016484:	807b      	strh	r3, [r7, #2]
 8016486:	4613      	mov	r3, r2
 8016488:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801648a:	787b      	ldrb	r3, [r7, #1]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d003      	beq.n	8016498 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016490:	887a      	ldrh	r2, [r7, #2]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8016496:	e003      	b.n	80164a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8016498:	887b      	ldrh	r3, [r7, #2]
 801649a:	041a      	lsls	r2, r3, #16
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	611a      	str	r2, [r3, #16]
}
 80164a0:	bf00      	nop
 80164a2:	370c      	adds	r7, #12
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bc80      	pop	{r7}
 80164a8:	4770      	bx	lr
	...

080164ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	4603      	mov	r3, r0
 80164b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80164b6:	4b08      	ldr	r3, [pc, #32]	; (80164d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80164b8:	695a      	ldr	r2, [r3, #20]
 80164ba:	88fb      	ldrh	r3, [r7, #6]
 80164bc:	4013      	ands	r3, r2
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d006      	beq.n	80164d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80164c2:	4a05      	ldr	r2, [pc, #20]	; (80164d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80164c4:	88fb      	ldrh	r3, [r7, #6]
 80164c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80164c8:	88fb      	ldrh	r3, [r7, #6]
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fd fd0c 	bl	8013ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	40010400 	.word	0x40010400

080164dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d101      	bne.n	80164ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80164ea:	2301      	movs	r3, #1
 80164ec:	e11f      	b.n	801672e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d106      	bne.n	8016508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2200      	movs	r2, #0
 80164fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7fe fb74 	bl	8014bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2224      	movs	r2, #36	; 0x24
 801650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	f022 0201 	bic.w	r2, r2, #1
 801651e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801652e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	681a      	ldr	r2, [r3, #0]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801653e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016540:	f002 fee2 	bl	8019308 <HAL_RCC_GetPCLK1Freq>
 8016544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	4a7b      	ldr	r2, [pc, #492]	; (8016738 <HAL_I2C_Init+0x25c>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d807      	bhi.n	8016560 <HAL_I2C_Init+0x84>
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	4a7a      	ldr	r2, [pc, #488]	; (801673c <HAL_I2C_Init+0x260>)
 8016554:	4293      	cmp	r3, r2
 8016556:	bf94      	ite	ls
 8016558:	2301      	movls	r3, #1
 801655a:	2300      	movhi	r3, #0
 801655c:	b2db      	uxtb	r3, r3
 801655e:	e006      	b.n	801656e <HAL_I2C_Init+0x92>
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	4a77      	ldr	r2, [pc, #476]	; (8016740 <HAL_I2C_Init+0x264>)
 8016564:	4293      	cmp	r3, r2
 8016566:	bf94      	ite	ls
 8016568:	2301      	movls	r3, #1
 801656a:	2300      	movhi	r3, #0
 801656c:	b2db      	uxtb	r3, r3
 801656e:	2b00      	cmp	r3, #0
 8016570:	d001      	beq.n	8016576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016572:	2301      	movs	r3, #1
 8016574:	e0db      	b.n	801672e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	4a72      	ldr	r2, [pc, #456]	; (8016744 <HAL_I2C_Init+0x268>)
 801657a:	fba2 2303 	umull	r2, r3, r2, r3
 801657e:	0c9b      	lsrs	r3, r3, #18
 8016580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	685b      	ldr	r3, [r3, #4]
 8016588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	68ba      	ldr	r2, [r7, #8]
 8016592:	430a      	orrs	r2, r1
 8016594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	6a1b      	ldr	r3, [r3, #32]
 801659c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	4a64      	ldr	r2, [pc, #400]	; (8016738 <HAL_I2C_Init+0x25c>)
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d802      	bhi.n	80165b0 <HAL_I2C_Init+0xd4>
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	3301      	adds	r3, #1
 80165ae:	e009      	b.n	80165c4 <HAL_I2C_Init+0xe8>
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80165b6:	fb02 f303 	mul.w	r3, r2, r3
 80165ba:	4a63      	ldr	r2, [pc, #396]	; (8016748 <HAL_I2C_Init+0x26c>)
 80165bc:	fba2 2303 	umull	r2, r3, r2, r3
 80165c0:	099b      	lsrs	r3, r3, #6
 80165c2:	3301      	adds	r3, #1
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	6812      	ldr	r2, [r2, #0]
 80165c8:	430b      	orrs	r3, r1
 80165ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	69db      	ldr	r3, [r3, #28]
 80165d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80165d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	4956      	ldr	r1, [pc, #344]	; (8016738 <HAL_I2C_Init+0x25c>)
 80165e0:	428b      	cmp	r3, r1
 80165e2:	d80d      	bhi.n	8016600 <HAL_I2C_Init+0x124>
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	1e59      	subs	r1, r3, #1
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80165f2:	3301      	adds	r3, #1
 80165f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80165f8:	2b04      	cmp	r3, #4
 80165fa:	bf38      	it	cc
 80165fc:	2304      	movcc	r3, #4
 80165fe:	e04f      	b.n	80166a0 <HAL_I2C_Init+0x1c4>
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d111      	bne.n	801662c <HAL_I2C_Init+0x150>
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	1e58      	subs	r0, r3, #1
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6859      	ldr	r1, [r3, #4]
 8016610:	460b      	mov	r3, r1
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	440b      	add	r3, r1
 8016616:	fbb0 f3f3 	udiv	r3, r0, r3
 801661a:	3301      	adds	r3, #1
 801661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016620:	2b00      	cmp	r3, #0
 8016622:	bf0c      	ite	eq
 8016624:	2301      	moveq	r3, #1
 8016626:	2300      	movne	r3, #0
 8016628:	b2db      	uxtb	r3, r3
 801662a:	e012      	b.n	8016652 <HAL_I2C_Init+0x176>
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	1e58      	subs	r0, r3, #1
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6859      	ldr	r1, [r3, #4]
 8016634:	460b      	mov	r3, r1
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	440b      	add	r3, r1
 801663a:	0099      	lsls	r1, r3, #2
 801663c:	440b      	add	r3, r1
 801663e:	fbb0 f3f3 	udiv	r3, r0, r3
 8016642:	3301      	adds	r3, #1
 8016644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016648:	2b00      	cmp	r3, #0
 801664a:	bf0c      	ite	eq
 801664c:	2301      	moveq	r3, #1
 801664e:	2300      	movne	r3, #0
 8016650:	b2db      	uxtb	r3, r3
 8016652:	2b00      	cmp	r3, #0
 8016654:	d001      	beq.n	801665a <HAL_I2C_Init+0x17e>
 8016656:	2301      	movs	r3, #1
 8016658:	e022      	b.n	80166a0 <HAL_I2C_Init+0x1c4>
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	689b      	ldr	r3, [r3, #8]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d10e      	bne.n	8016680 <HAL_I2C_Init+0x1a4>
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	1e58      	subs	r0, r3, #1
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6859      	ldr	r1, [r3, #4]
 801666a:	460b      	mov	r3, r1
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	440b      	add	r3, r1
 8016670:	fbb0 f3f3 	udiv	r3, r0, r3
 8016674:	3301      	adds	r3, #1
 8016676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801667a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801667e:	e00f      	b.n	80166a0 <HAL_I2C_Init+0x1c4>
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	1e58      	subs	r0, r3, #1
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	6859      	ldr	r1, [r3, #4]
 8016688:	460b      	mov	r3, r1
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	440b      	add	r3, r1
 801668e:	0099      	lsls	r1, r3, #2
 8016690:	440b      	add	r3, r1
 8016692:	fbb0 f3f3 	udiv	r3, r0, r3
 8016696:	3301      	adds	r3, #1
 8016698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801669c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80166a0:	6879      	ldr	r1, [r7, #4]
 80166a2:	6809      	ldr	r1, [r1, #0]
 80166a4:	4313      	orrs	r3, r2
 80166a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	69da      	ldr	r2, [r3, #28]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6a1b      	ldr	r3, [r3, #32]
 80166ba:	431a      	orrs	r2, r3
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	430a      	orrs	r2, r1
 80166c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	689b      	ldr	r3, [r3, #8]
 80166ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80166ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	6911      	ldr	r1, [r2, #16]
 80166d6:	687a      	ldr	r2, [r7, #4]
 80166d8:	68d2      	ldr	r2, [r2, #12]
 80166da:	4311      	orrs	r1, r2
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	6812      	ldr	r2, [r2, #0]
 80166e0:	430b      	orrs	r3, r1
 80166e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	695a      	ldr	r2, [r3, #20]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	699b      	ldr	r3, [r3, #24]
 80166f6:	431a      	orrs	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	430a      	orrs	r2, r1
 80166fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f042 0201 	orr.w	r2, r2, #1
 801670e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2200      	movs	r2, #0
 8016714:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2220      	movs	r2, #32
 801671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2200      	movs	r2, #0
 8016722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801672c:	2300      	movs	r3, #0
}
 801672e:	4618      	mov	r0, r3
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	000186a0 	.word	0x000186a0
 801673c:	001e847f 	.word	0x001e847f
 8016740:	003d08ff 	.word	0x003d08ff
 8016744:	431bde83 	.word	0x431bde83
 8016748:	10624dd3 	.word	0x10624dd3

0801674c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b088      	sub	sp, #32
 8016750:	af02      	add	r7, sp, #8
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	607a      	str	r2, [r7, #4]
 8016756:	461a      	mov	r2, r3
 8016758:	460b      	mov	r3, r1
 801675a:	817b      	strh	r3, [r7, #10]
 801675c:	4613      	mov	r3, r2
 801675e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016760:	f7fe fccc 	bl	80150fc <HAL_GetTick>
 8016764:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801676c:	b2db      	uxtb	r3, r3
 801676e:	2b20      	cmp	r3, #32
 8016770:	f040 80e0 	bne.w	8016934 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	9300      	str	r3, [sp, #0]
 8016778:	2319      	movs	r3, #25
 801677a:	2201      	movs	r2, #1
 801677c:	4970      	ldr	r1, [pc, #448]	; (8016940 <HAL_I2C_Master_Transmit+0x1f4>)
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f000 fc8c 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d001      	beq.n	801678e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801678a:	2302      	movs	r3, #2
 801678c:	e0d3      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016794:	2b01      	cmp	r3, #1
 8016796:	d101      	bne.n	801679c <HAL_I2C_Master_Transmit+0x50>
 8016798:	2302      	movs	r3, #2
 801679a:	e0cc      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2201      	movs	r2, #1
 80167a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f003 0301 	and.w	r3, r3, #1
 80167ae:	2b01      	cmp	r3, #1
 80167b0:	d007      	beq.n	80167c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	f042 0201 	orr.w	r2, r2, #1
 80167c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80167d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2221      	movs	r2, #33	; 0x21
 80167d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	2210      	movs	r2, #16
 80167de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2200      	movs	r2, #0
 80167e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	893a      	ldrh	r2, [r7, #8]
 80167f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	4a50      	ldr	r2, [pc, #320]	; (8016944 <HAL_I2C_Master_Transmit+0x1f8>)
 8016802:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016804:	8979      	ldrh	r1, [r7, #10]
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	6a3a      	ldr	r2, [r7, #32]
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f000 faf6 	bl	8016dfc <I2C_MasterRequestWrite>
 8016810:	4603      	mov	r3, r0
 8016812:	2b00      	cmp	r3, #0
 8016814:	d001      	beq.n	801681a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8016816:	2301      	movs	r3, #1
 8016818:	e08d      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801681a:	2300      	movs	r3, #0
 801681c:	613b      	str	r3, [r7, #16]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	695b      	ldr	r3, [r3, #20]
 8016824:	613b      	str	r3, [r7, #16]
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	699b      	ldr	r3, [r3, #24]
 801682c:	613b      	str	r3, [r7, #16]
 801682e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8016830:	e066      	b.n	8016900 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016832:	697a      	ldr	r2, [r7, #20]
 8016834:	6a39      	ldr	r1, [r7, #32]
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f000 fd06 	bl	8017248 <I2C_WaitOnTXEFlagUntilTimeout>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	d00d      	beq.n	801685e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016846:	2b04      	cmp	r3, #4
 8016848:	d107      	bne.n	801685a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	e06b      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016862:	781a      	ldrb	r2, [r3, #0]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801686e:	1c5a      	adds	r2, r3, #1
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016878:	b29b      	uxth	r3, r3
 801687a:	3b01      	subs	r3, #1
 801687c:	b29a      	uxth	r2, r3
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016886:	3b01      	subs	r3, #1
 8016888:	b29a      	uxth	r2, r3
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	695b      	ldr	r3, [r3, #20]
 8016894:	f003 0304 	and.w	r3, r3, #4
 8016898:	2b04      	cmp	r3, #4
 801689a:	d11b      	bne.n	80168d4 <HAL_I2C_Master_Transmit+0x188>
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d017      	beq.n	80168d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168a8:	781a      	ldrb	r2, [r3, #0]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b4:	1c5a      	adds	r2, r3, #1
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168be:	b29b      	uxth	r3, r3
 80168c0:	3b01      	subs	r3, #1
 80168c2:	b29a      	uxth	r2, r3
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168cc:	3b01      	subs	r3, #1
 80168ce:	b29a      	uxth	r2, r3
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80168d4:	697a      	ldr	r2, [r7, #20]
 80168d6:	6a39      	ldr	r1, [r7, #32]
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f000 fcf6 	bl	80172ca <I2C_WaitOnBTFFlagUntilTimeout>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00d      	beq.n	8016900 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168e8:	2b04      	cmp	r3, #4
 80168ea:	d107      	bne.n	80168fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	681a      	ldr	r2, [r3, #0]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80168fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80168fc:	2301      	movs	r3, #1
 80168fe:	e01a      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016904:	2b00      	cmp	r3, #0
 8016906:	d194      	bne.n	8016832 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	681a      	ldr	r2, [r3, #0]
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2220      	movs	r2, #32
 801691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	2200      	movs	r2, #0
 8016924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2200      	movs	r2, #0
 801692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8016930:	2300      	movs	r3, #0
 8016932:	e000      	b.n	8016936 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016934:	2302      	movs	r3, #2
  }
}
 8016936:	4618      	mov	r0, r3
 8016938:	3718      	adds	r7, #24
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop
 8016940:	00100002 	.word	0x00100002
 8016944:	ffff0000 	.word	0xffff0000

08016948 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08c      	sub	sp, #48	; 0x30
 801694c:	af02      	add	r7, sp, #8
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	607a      	str	r2, [r7, #4]
 8016952:	461a      	mov	r2, r3
 8016954:	460b      	mov	r3, r1
 8016956:	817b      	strh	r3, [r7, #10]
 8016958:	4613      	mov	r3, r2
 801695a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801695c:	2300      	movs	r3, #0
 801695e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016960:	f7fe fbcc 	bl	80150fc <HAL_GetTick>
 8016964:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801696c:	b2db      	uxtb	r3, r3
 801696e:	2b20      	cmp	r3, #32
 8016970:	f040 8238 	bne.w	8016de4 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	9300      	str	r3, [sp, #0]
 8016978:	2319      	movs	r3, #25
 801697a:	2201      	movs	r2, #1
 801697c:	497e      	ldr	r1, [pc, #504]	; (8016b78 <HAL_I2C_Master_Receive+0x230>)
 801697e:	68f8      	ldr	r0, [r7, #12]
 8016980:	f000 fb8c 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016984:	4603      	mov	r3, r0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d001      	beq.n	801698e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 801698a:	2302      	movs	r3, #2
 801698c:	e22b      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016994:	2b01      	cmp	r3, #1
 8016996:	d101      	bne.n	801699c <HAL_I2C_Master_Receive+0x54>
 8016998:	2302      	movs	r3, #2
 801699a:	e224      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2201      	movs	r2, #1
 80169a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	f003 0301 	and.w	r3, r3, #1
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d007      	beq.n	80169c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	681a      	ldr	r2, [r3, #0]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	f042 0201 	orr.w	r2, r2, #1
 80169c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80169d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	2222      	movs	r2, #34	; 0x22
 80169d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2210      	movs	r2, #16
 80169de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	2200      	movs	r2, #0
 80169e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	893a      	ldrh	r2, [r7, #8]
 80169f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	4a5e      	ldr	r2, [pc, #376]	; (8016b7c <HAL_I2C_Master_Receive+0x234>)
 8016a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016a04:	8979      	ldrh	r1, [r7, #10]
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	f000 fa78 	bl	8016f00 <I2C_MasterRequestRead>
 8016a10:	4603      	mov	r3, r0
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d001      	beq.n	8016a1a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8016a16:	2301      	movs	r3, #1
 8016a18:	e1e5      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d113      	bne.n	8016a4a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016a22:	2300      	movs	r3, #0
 8016a24:	61fb      	str	r3, [r7, #28]
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	695b      	ldr	r3, [r3, #20]
 8016a2c:	61fb      	str	r3, [r7, #28]
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	699b      	ldr	r3, [r3, #24]
 8016a34:	61fb      	str	r3, [r7, #28]
 8016a36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a46:	601a      	str	r2, [r3, #0]
 8016a48:	e1b9      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a4e:	2b01      	cmp	r3, #1
 8016a50:	d11d      	bne.n	8016a8e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016a60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a62:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016a64:	2300      	movs	r3, #0
 8016a66:	61bb      	str	r3, [r7, #24]
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	695b      	ldr	r3, [r3, #20]
 8016a6e:	61bb      	str	r3, [r7, #24]
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	699b      	ldr	r3, [r3, #24]
 8016a76:	61bb      	str	r3, [r7, #24]
 8016a78:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8016a8a:	b662      	cpsie	i
 8016a8c:	e197      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d11d      	bne.n	8016ad2 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016aa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8016aa6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	617b      	str	r3, [r7, #20]
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	695b      	ldr	r3, [r3, #20]
 8016ab2:	617b      	str	r3, [r7, #20]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	699b      	ldr	r3, [r3, #24]
 8016aba:	617b      	str	r3, [r7, #20]
 8016abc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	681a      	ldr	r2, [r3, #0]
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016acc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8016ace:	b662      	cpsie	i
 8016ad0:	e175      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	681a      	ldr	r2, [r3, #0]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	613b      	str	r3, [r7, #16]
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	695b      	ldr	r3, [r3, #20]
 8016aec:	613b      	str	r3, [r7, #16]
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	699b      	ldr	r3, [r3, #24]
 8016af4:	613b      	str	r3, [r7, #16]
 8016af6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8016af8:	e161      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016afe:	2b03      	cmp	r3, #3
 8016b00:	f200 811a 	bhi.w	8016d38 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b08:	2b01      	cmp	r3, #1
 8016b0a:	d123      	bne.n	8016b54 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	f000 fc1b 	bl	801734c <I2C_WaitOnRXNEFlagUntilTimeout>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d001      	beq.n	8016b20 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	e162      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	691a      	ldr	r2, [r3, #16]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b2a:	b2d2      	uxtb	r2, r2
 8016b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b32:	1c5a      	adds	r2, r3, #1
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b3c:	3b01      	subs	r3, #1
 8016b3e:	b29a      	uxth	r2, r3
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b48:	b29b      	uxth	r3, r3
 8016b4a:	3b01      	subs	r3, #1
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016b52:	e134      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d150      	bne.n	8016bfe <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b62:	2200      	movs	r2, #0
 8016b64:	4906      	ldr	r1, [pc, #24]	; (8016b80 <HAL_I2C_Master_Receive+0x238>)
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	f000 fa98 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d008      	beq.n	8016b84 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8016b72:	2301      	movs	r3, #1
 8016b74:	e137      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
 8016b76:	bf00      	nop
 8016b78:	00100002 	.word	0x00100002
 8016b7c:	ffff0000 	.word	0xffff0000
 8016b80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8016b84:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	681a      	ldr	r2, [r3, #0]
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b94:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	691a      	ldr	r2, [r3, #16]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba0:	b2d2      	uxtb	r2, r2
 8016ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba8:	1c5a      	adds	r2, r3, #1
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bb2:	3b01      	subs	r3, #1
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	b29a      	uxth	r2, r3
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8016bc8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	691a      	ldr	r2, [r3, #16]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd4:	b2d2      	uxtb	r2, r2
 8016bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bdc:	1c5a      	adds	r2, r3, #1
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016be6:	3b01      	subs	r3, #1
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016bfc:	e0df      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c04:	2200      	movs	r2, #0
 8016c06:	497a      	ldr	r1, [pc, #488]	; (8016df0 <HAL_I2C_Master_Receive+0x4a8>)
 8016c08:	68f8      	ldr	r0, [r7, #12]
 8016c0a:	f000 fa47 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d001      	beq.n	8016c18 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8016c14:	2301      	movs	r3, #1
 8016c16:	e0e6      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c28:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	691a      	ldr	r2, [r3, #16]
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c34:	b2d2      	uxtb	r2, r2
 8016c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c3c:	1c5a      	adds	r2, r3, #1
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c46:	3b01      	subs	r3, #1
 8016c48:	b29a      	uxth	r2, r3
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	3b01      	subs	r3, #1
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8016c5c:	4b65      	ldr	r3, [pc, #404]	; (8016df4 <HAL_I2C_Master_Receive+0x4ac>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	08db      	lsrs	r3, r3, #3
 8016c62:	4a65      	ldr	r2, [pc, #404]	; (8016df8 <HAL_I2C_Master_Receive+0x4b0>)
 8016c64:	fba2 2303 	umull	r2, r3, r2, r3
 8016c68:	0a1a      	lsrs	r2, r3, #8
 8016c6a:	4613      	mov	r3, r2
 8016c6c:	009b      	lsls	r3, r3, #2
 8016c6e:	4413      	add	r3, r2
 8016c70:	00da      	lsls	r2, r3, #3
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	3b01      	subs	r3, #1
 8016c7a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8016c7c:	6a3b      	ldr	r3, [r7, #32]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d117      	bne.n	8016cb2 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	2200      	movs	r2, #0
 8016c86:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2220      	movs	r2, #32
 8016c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	2200      	movs	r2, #0
 8016c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c9c:	f043 0220 	orr.w	r2, r3, #32
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8016ca4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2200      	movs	r2, #0
 8016caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8016cae:	2301      	movs	r3, #1
 8016cb0:	e099      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	695b      	ldr	r3, [r3, #20]
 8016cb8:	f003 0304 	and.w	r3, r3, #4
 8016cbc:	2b04      	cmp	r3, #4
 8016cbe:	d1da      	bne.n	8016c76 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	691a      	ldr	r2, [r3, #16]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cda:	b2d2      	uxtb	r2, r2
 8016cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce2:	1c5a      	adds	r2, r3, #1
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cec:	3b01      	subs	r3, #1
 8016cee:	b29a      	uxth	r2, r3
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	3b01      	subs	r3, #1
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016d02:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	691a      	ldr	r2, [r3, #16]
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d0e:	b2d2      	uxtb	r2, r2
 8016d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d16:	1c5a      	adds	r2, r3, #1
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d20:	3b01      	subs	r3, #1
 8016d22:	b29a      	uxth	r2, r3
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	3b01      	subs	r3, #1
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016d36:	e042      	b.n	8016dbe <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016d3c:	68f8      	ldr	r0, [r7, #12]
 8016d3e:	f000 fb05 	bl	801734c <I2C_WaitOnRXNEFlagUntilTimeout>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d001      	beq.n	8016d4c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8016d48:	2301      	movs	r3, #1
 8016d4a:	e04c      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	691a      	ldr	r2, [r3, #16]
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d56:	b2d2      	uxtb	r2, r2
 8016d58:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d5e:	1c5a      	adds	r2, r3, #1
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d68:	3b01      	subs	r3, #1
 8016d6a:	b29a      	uxth	r2, r3
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	3b01      	subs	r3, #1
 8016d78:	b29a      	uxth	r2, r3
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	695b      	ldr	r3, [r3, #20]
 8016d84:	f003 0304 	and.w	r3, r3, #4
 8016d88:	2b04      	cmp	r3, #4
 8016d8a:	d118      	bne.n	8016dbe <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	691a      	ldr	r2, [r3, #16]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d96:	b2d2      	uxtb	r2, r2
 8016d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d9e:	1c5a      	adds	r2, r3, #1
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016da8:	3b01      	subs	r3, #1
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	3b01      	subs	r3, #1
 8016db8:	b29a      	uxth	r2, r3
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f47f ae99 	bne.w	8016afa <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2220      	movs	r2, #32
 8016dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8016de0:	2300      	movs	r3, #0
 8016de2:	e000      	b.n	8016de6 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8016de4:	2302      	movs	r3, #2
  }
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3728      	adds	r7, #40	; 0x28
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	00010004 	.word	0x00010004
 8016df4:	2000037c 	.word	0x2000037c
 8016df8:	14f8b589 	.word	0x14f8b589

08016dfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b088      	sub	sp, #32
 8016e00:	af02      	add	r7, sp, #8
 8016e02:	60f8      	str	r0, [r7, #12]
 8016e04:	607a      	str	r2, [r7, #4]
 8016e06:	603b      	str	r3, [r7, #0]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	2b08      	cmp	r3, #8
 8016e16:	d006      	beq.n	8016e26 <I2C_MasterRequestWrite+0x2a>
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	d003      	beq.n	8016e26 <I2C_MasterRequestWrite+0x2a>
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016e24:	d108      	bne.n	8016e38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016e34:	601a      	str	r2, [r3, #0]
 8016e36:	e00b      	b.n	8016e50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e3c:	2b12      	cmp	r3, #18
 8016e3e:	d107      	bne.n	8016e50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	681a      	ldr	r2, [r3, #0]
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2200      	movs	r2, #0
 8016e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f000 f91d 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d00d      	beq.n	8016e84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e76:	d103      	bne.n	8016e80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8016e80:	2303      	movs	r3, #3
 8016e82:	e035      	b.n	8016ef0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	691b      	ldr	r3, [r3, #16]
 8016e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016e8c:	d108      	bne.n	8016ea0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016e8e:	897b      	ldrh	r3, [r7, #10]
 8016e90:	b2db      	uxtb	r3, r3
 8016e92:	461a      	mov	r2, r3
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8016e9c:	611a      	str	r2, [r3, #16]
 8016e9e:	e01b      	b.n	8016ed8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016ea0:	897b      	ldrh	r3, [r7, #10]
 8016ea2:	11db      	asrs	r3, r3, #7
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	f003 0306 	and.w	r3, r3, #6
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	f063 030f 	orn	r3, r3, #15
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	490e      	ldr	r1, [pc, #56]	; (8016ef8 <I2C_MasterRequestWrite+0xfc>)
 8016ebe:	68f8      	ldr	r0, [r7, #12]
 8016ec0:	f000 f943 	bl	801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d001      	beq.n	8016ece <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8016eca:	2301      	movs	r3, #1
 8016ecc:	e010      	b.n	8016ef0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016ece:	897b      	ldrh	r3, [r7, #10]
 8016ed0:	b2da      	uxtb	r2, r3
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	4907      	ldr	r1, [pc, #28]	; (8016efc <I2C_MasterRequestWrite+0x100>)
 8016ede:	68f8      	ldr	r0, [r7, #12]
 8016ee0:	f000 f933 	bl	801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d001      	beq.n	8016eee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8016eea:	2301      	movs	r3, #1
 8016eec:	e000      	b.n	8016ef0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8016eee:	2300      	movs	r3, #0
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3718      	adds	r7, #24
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}
 8016ef8:	00010008 	.word	0x00010008
 8016efc:	00010002 	.word	0x00010002

08016f00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b088      	sub	sp, #32
 8016f04:	af02      	add	r7, sp, #8
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	607a      	str	r2, [r7, #4]
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	681a      	ldr	r2, [r3, #0]
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016f24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	2b08      	cmp	r3, #8
 8016f2a:	d006      	beq.n	8016f3a <I2C_MasterRequestRead+0x3a>
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	2b01      	cmp	r3, #1
 8016f30:	d003      	beq.n	8016f3a <I2C_MasterRequestRead+0x3a>
 8016f32:	697b      	ldr	r3, [r7, #20]
 8016f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016f38:	d108      	bne.n	8016f4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016f48:	601a      	str	r2, [r3, #0]
 8016f4a:	e00b      	b.n	8016f64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f50:	2b11      	cmp	r3, #17
 8016f52:	d107      	bne.n	8016f64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	681a      	ldr	r2, [r3, #0]
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8016f70:	68f8      	ldr	r0, [r7, #12]
 8016f72:	f000 f893 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00d      	beq.n	8016f98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f8a:	d103      	bne.n	8016f94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8016f94:	2303      	movs	r3, #3
 8016f96:	e079      	b.n	801708c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	691b      	ldr	r3, [r3, #16]
 8016f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016fa0:	d108      	bne.n	8016fb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8016fa2:	897b      	ldrh	r3, [r7, #10]
 8016fa4:	b2db      	uxtb	r3, r3
 8016fa6:	f043 0301 	orr.w	r3, r3, #1
 8016faa:	b2da      	uxtb	r2, r3
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	611a      	str	r2, [r3, #16]
 8016fb2:	e05f      	b.n	8017074 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016fb4:	897b      	ldrh	r3, [r7, #10]
 8016fb6:	11db      	asrs	r3, r3, #7
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	f003 0306 	and.w	r3, r3, #6
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	f063 030f 	orn	r3, r3, #15
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	4930      	ldr	r1, [pc, #192]	; (8017094 <I2C_MasterRequestRead+0x194>)
 8016fd2:	68f8      	ldr	r0, [r7, #12]
 8016fd4:	f000 f8b9 	bl	801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d001      	beq.n	8016fe2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	e054      	b.n	801708c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016fe2:	897b      	ldrh	r3, [r7, #10]
 8016fe4:	b2da      	uxtb	r2, r3
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	4929      	ldr	r1, [pc, #164]	; (8017098 <I2C_MasterRequestRead+0x198>)
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	f000 f8a9 	bl	801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d001      	beq.n	8017002 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8016ffe:	2301      	movs	r3, #1
 8017000:	e044      	b.n	801708c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017002:	2300      	movs	r3, #0
 8017004:	613b      	str	r3, [r7, #16]
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	695b      	ldr	r3, [r3, #20]
 801700c:	613b      	str	r3, [r7, #16]
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	699b      	ldr	r3, [r3, #24]
 8017014:	613b      	str	r3, [r7, #16]
 8017016:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017026:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	9300      	str	r3, [sp, #0]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2200      	movs	r2, #0
 8017030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017034:	68f8      	ldr	r0, [r7, #12]
 8017036:	f000 f831 	bl	801709c <I2C_WaitOnFlagUntilTimeout>
 801703a:	4603      	mov	r3, r0
 801703c:	2b00      	cmp	r3, #0
 801703e:	d00d      	beq.n	801705c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801704a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801704e:	d103      	bne.n	8017058 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017056:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8017058:	2303      	movs	r3, #3
 801705a:	e017      	b.n	801708c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 801705c:	897b      	ldrh	r3, [r7, #10]
 801705e:	11db      	asrs	r3, r3, #7
 8017060:	b2db      	uxtb	r3, r3
 8017062:	f003 0306 	and.w	r3, r3, #6
 8017066:	b2db      	uxtb	r3, r3
 8017068:	f063 030e 	orn	r3, r3, #14
 801706c:	b2da      	uxtb	r2, r3
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	4907      	ldr	r1, [pc, #28]	; (8017098 <I2C_MasterRequestRead+0x198>)
 801707a:	68f8      	ldr	r0, [r7, #12]
 801707c:	f000 f865 	bl	801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d001      	beq.n	801708a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8017086:	2301      	movs	r3, #1
 8017088:	e000      	b.n	801708c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801708a:	2300      	movs	r3, #0
}
 801708c:	4618      	mov	r0, r3
 801708e:	3718      	adds	r7, #24
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	00010008 	.word	0x00010008
 8017098:	00010002 	.word	0x00010002

0801709c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	603b      	str	r3, [r7, #0]
 80170a8:	4613      	mov	r3, r2
 80170aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80170ac:	e025      	b.n	80170fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b4:	d021      	beq.n	80170fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80170b6:	f7fe f821 	bl	80150fc <HAL_GetTick>
 80170ba:	4602      	mov	r2, r0
 80170bc:	69bb      	ldr	r3, [r7, #24]
 80170be:	1ad3      	subs	r3, r2, r3
 80170c0:	683a      	ldr	r2, [r7, #0]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d302      	bcc.n	80170cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d116      	bne.n	80170fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	2200      	movs	r2, #0
 80170d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	2220      	movs	r2, #32
 80170d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	2200      	movs	r2, #0
 80170de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170e6:	f043 0220 	orr.w	r2, r3, #32
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	2200      	movs	r2, #0
 80170f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80170f6:	2301      	movs	r3, #1
 80170f8:	e023      	b.n	8017142 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	0c1b      	lsrs	r3, r3, #16
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	2b01      	cmp	r3, #1
 8017102:	d10d      	bne.n	8017120 <I2C_WaitOnFlagUntilTimeout+0x84>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	695b      	ldr	r3, [r3, #20]
 801710a:	43da      	mvns	r2, r3
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	4013      	ands	r3, r2
 8017110:	b29b      	uxth	r3, r3
 8017112:	2b00      	cmp	r3, #0
 8017114:	bf0c      	ite	eq
 8017116:	2301      	moveq	r3, #1
 8017118:	2300      	movne	r3, #0
 801711a:	b2db      	uxtb	r3, r3
 801711c:	461a      	mov	r2, r3
 801711e:	e00c      	b.n	801713a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	699b      	ldr	r3, [r3, #24]
 8017126:	43da      	mvns	r2, r3
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	4013      	ands	r3, r2
 801712c:	b29b      	uxth	r3, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	bf0c      	ite	eq
 8017132:	2301      	moveq	r3, #1
 8017134:	2300      	movne	r3, #0
 8017136:	b2db      	uxtb	r3, r3
 8017138:	461a      	mov	r2, r3
 801713a:	79fb      	ldrb	r3, [r7, #7]
 801713c:	429a      	cmp	r2, r3
 801713e:	d0b6      	beq.n	80170ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017140:	2300      	movs	r3, #0
}
 8017142:	4618      	mov	r0, r3
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}

0801714a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b084      	sub	sp, #16
 801714e:	af00      	add	r7, sp, #0
 8017150:	60f8      	str	r0, [r7, #12]
 8017152:	60b9      	str	r1, [r7, #8]
 8017154:	607a      	str	r2, [r7, #4]
 8017156:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017158:	e051      	b.n	80171fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	695b      	ldr	r3, [r3, #20]
 8017160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017168:	d123      	bne.n	80171b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	681a      	ldr	r2, [r3, #0]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017178:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017182:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	2200      	movs	r2, #0
 8017188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	2220      	movs	r2, #32
 801718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2200      	movs	r2, #0
 8017196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801719e:	f043 0204 	orr.w	r2, r3, #4
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	2200      	movs	r2, #0
 80171aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80171ae:	2301      	movs	r3, #1
 80171b0:	e046      	b.n	8017240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171b8:	d021      	beq.n	80171fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80171ba:	f7fd ff9f 	bl	80150fc <HAL_GetTick>
 80171be:	4602      	mov	r2, r0
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	1ad3      	subs	r3, r2, r3
 80171c4:	687a      	ldr	r2, [r7, #4]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d302      	bcc.n	80171d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d116      	bne.n	80171fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	2200      	movs	r2, #0
 80171d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	2220      	movs	r2, #32
 80171da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	2200      	movs	r2, #0
 80171e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ea:	f043 0220 	orr.w	r2, r3, #32
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2200      	movs	r2, #0
 80171f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80171fa:	2301      	movs	r3, #1
 80171fc:	e020      	b.n	8017240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	0c1b      	lsrs	r3, r3, #16
 8017202:	b2db      	uxtb	r3, r3
 8017204:	2b01      	cmp	r3, #1
 8017206:	d10c      	bne.n	8017222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	695b      	ldr	r3, [r3, #20]
 801720e:	43da      	mvns	r2, r3
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	4013      	ands	r3, r2
 8017214:	b29b      	uxth	r3, r3
 8017216:	2b00      	cmp	r3, #0
 8017218:	bf14      	ite	ne
 801721a:	2301      	movne	r3, #1
 801721c:	2300      	moveq	r3, #0
 801721e:	b2db      	uxtb	r3, r3
 8017220:	e00b      	b.n	801723a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	699b      	ldr	r3, [r3, #24]
 8017228:	43da      	mvns	r2, r3
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	4013      	ands	r3, r2
 801722e:	b29b      	uxth	r3, r3
 8017230:	2b00      	cmp	r3, #0
 8017232:	bf14      	ite	ne
 8017234:	2301      	movne	r3, #1
 8017236:	2300      	moveq	r3, #0
 8017238:	b2db      	uxtb	r3, r3
 801723a:	2b00      	cmp	r3, #0
 801723c:	d18d      	bne.n	801715a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801723e:	2300      	movs	r3, #0
}
 8017240:	4618      	mov	r0, r3
 8017242:	3710      	adds	r7, #16
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}

08017248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017254:	e02d      	b.n	80172b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f000 f8ce 	bl	80173f8 <I2C_IsAcknowledgeFailed>
 801725c:	4603      	mov	r3, r0
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8017262:	2301      	movs	r3, #1
 8017264:	e02d      	b.n	80172c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801726c:	d021      	beq.n	80172b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801726e:	f7fd ff45 	bl	80150fc <HAL_GetTick>
 8017272:	4602      	mov	r2, r0
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	68ba      	ldr	r2, [r7, #8]
 801727a:	429a      	cmp	r2, r3
 801727c:	d302      	bcc.n	8017284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801727e:	68bb      	ldr	r3, [r7, #8]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d116      	bne.n	80172b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	2200      	movs	r2, #0
 8017288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2220      	movs	r2, #32
 801728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	2200      	movs	r2, #0
 8017296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801729e:	f043 0220 	orr.w	r2, r3, #32
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	2200      	movs	r2, #0
 80172aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80172ae:	2301      	movs	r3, #1
 80172b0:	e007      	b.n	80172c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	695b      	ldr	r3, [r3, #20]
 80172b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80172bc:	2b80      	cmp	r3, #128	; 0x80
 80172be:	d1ca      	bne.n	8017256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80172c0:	2300      	movs	r3, #0
}
 80172c2:	4618      	mov	r0, r3
 80172c4:	3710      	adds	r7, #16
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}

080172ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80172ca:	b580      	push	{r7, lr}
 80172cc:	b084      	sub	sp, #16
 80172ce:	af00      	add	r7, sp, #0
 80172d0:	60f8      	str	r0, [r7, #12]
 80172d2:	60b9      	str	r1, [r7, #8]
 80172d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80172d6:	e02d      	b.n	8017334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80172d8:	68f8      	ldr	r0, [r7, #12]
 80172da:	f000 f88d 	bl	80173f8 <I2C_IsAcknowledgeFailed>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d001      	beq.n	80172e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80172e4:	2301      	movs	r3, #1
 80172e6:	e02d      	b.n	8017344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ee:	d021      	beq.n	8017334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80172f0:	f7fd ff04 	bl	80150fc <HAL_GetTick>
 80172f4:	4602      	mov	r2, r0
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	1ad3      	subs	r3, r2, r3
 80172fa:	68ba      	ldr	r2, [r7, #8]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d302      	bcc.n	8017306 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d116      	bne.n	8017334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	2200      	movs	r2, #0
 801730a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2220      	movs	r2, #32
 8017310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2200      	movs	r2, #0
 8017318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017320:	f043 0220 	orr.w	r2, r3, #32
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2200      	movs	r2, #0
 801732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017330:	2301      	movs	r3, #1
 8017332:	e007      	b.n	8017344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	695b      	ldr	r3, [r3, #20]
 801733a:	f003 0304 	and.w	r3, r3, #4
 801733e:	2b04      	cmp	r3, #4
 8017340:	d1ca      	bne.n	80172d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017342:	2300      	movs	r3, #0
}
 8017344:	4618      	mov	r0, r3
 8017346:	3710      	adds	r7, #16
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	60f8      	str	r0, [r7, #12]
 8017354:	60b9      	str	r1, [r7, #8]
 8017356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017358:	e042      	b.n	80173e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	695b      	ldr	r3, [r3, #20]
 8017360:	f003 0310 	and.w	r3, r3, #16
 8017364:	2b10      	cmp	r3, #16
 8017366:	d119      	bne.n	801739c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f06f 0210 	mvn.w	r2, #16
 8017370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	2200      	movs	r2, #0
 8017376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	2220      	movs	r2, #32
 801737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2200      	movs	r2, #0
 8017384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2200      	movs	r2, #0
 8017394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8017398:	2301      	movs	r3, #1
 801739a:	e029      	b.n	80173f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801739c:	f7fd feae 	bl	80150fc <HAL_GetTick>
 80173a0:	4602      	mov	r2, r0
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d302      	bcc.n	80173b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d116      	bne.n	80173e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2220      	movs	r2, #32
 80173bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2200      	movs	r2, #0
 80173c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173cc:	f043 0220 	orr.w	r2, r3, #32
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2200      	movs	r2, #0
 80173d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80173dc:	2301      	movs	r3, #1
 80173de:	e007      	b.n	80173f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	695b      	ldr	r3, [r3, #20]
 80173e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173ea:	2b40      	cmp	r3, #64	; 0x40
 80173ec:	d1b5      	bne.n	801735a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80173ee:	2300      	movs	r3, #0
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	695b      	ldr	r3, [r3, #20]
 8017406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801740a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801740e:	d11b      	bne.n	8017448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2200      	movs	r2, #0
 801741e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2220      	movs	r2, #32
 8017424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2200      	movs	r2, #0
 801742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017434:	f043 0204 	orr.w	r2, r3, #4
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2200      	movs	r2, #0
 8017440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8017444:	2301      	movs	r3, #1
 8017446:	e000      	b.n	801744a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8017448:	2300      	movs	r3, #0
}
 801744a:	4618      	mov	r0, r3
 801744c:	370c      	adds	r7, #12
 801744e:	46bd      	mov	sp, r7
 8017450:	bc80      	pop	{r7}
 8017452:	4770      	bx	lr

08017454 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017456:	b08b      	sub	sp, #44	; 0x2c
 8017458:	af06      	add	r7, sp, #24
 801745a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d101      	bne.n	8017466 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017462:	2301      	movs	r3, #1
 8017464:	e0fd      	b.n	8017662 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801746c:	b2db      	uxtb	r3, r3
 801746e:	2b00      	cmp	r3, #0
 8017470:	d106      	bne.n	8017480 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f006 f972 	bl	801d764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2203      	movs	r2, #3
 8017484:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4618      	mov	r0, r3
 801748e:	f002 ff15 	bl	801a2bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	603b      	str	r3, [r7, #0]
 8017498:	687e      	ldr	r6, [r7, #4]
 801749a:	466d      	mov	r5, sp
 801749c:	f106 0410 	add.w	r4, r6, #16
 80174a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	602b      	str	r3, [r5, #0]
 80174a8:	1d33      	adds	r3, r6, #4
 80174aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80174ac:	6838      	ldr	r0, [r7, #0]
 80174ae:	f002 fedf 	bl	801a270 <USB_CoreInit>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d005      	beq.n	80174c4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2202      	movs	r2, #2
 80174bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80174c0:	2301      	movs	r3, #1
 80174c2:	e0ce      	b.n	8017662 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	2100      	movs	r1, #0
 80174ca:	4618      	mov	r0, r3
 80174cc:	f002 ff10 	bl	801a2f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80174d0:	2300      	movs	r3, #0
 80174d2:	73fb      	strb	r3, [r7, #15]
 80174d4:	e04c      	b.n	8017570 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80174d6:	7bfb      	ldrb	r3, [r7, #15]
 80174d8:	6879      	ldr	r1, [r7, #4]
 80174da:	1c5a      	adds	r2, r3, #1
 80174dc:	4613      	mov	r3, r2
 80174de:	009b      	lsls	r3, r3, #2
 80174e0:	4413      	add	r3, r2
 80174e2:	00db      	lsls	r3, r3, #3
 80174e4:	440b      	add	r3, r1
 80174e6:	3301      	adds	r3, #1
 80174e8:	2201      	movs	r2, #1
 80174ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80174ec:	7bfb      	ldrb	r3, [r7, #15]
 80174ee:	6879      	ldr	r1, [r7, #4]
 80174f0:	1c5a      	adds	r2, r3, #1
 80174f2:	4613      	mov	r3, r2
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	4413      	add	r3, r2
 80174f8:	00db      	lsls	r3, r3, #3
 80174fa:	440b      	add	r3, r1
 80174fc:	7bfa      	ldrb	r2, [r7, #15]
 80174fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8017500:	7bfa      	ldrb	r2, [r7, #15]
 8017502:	7bfb      	ldrb	r3, [r7, #15]
 8017504:	b298      	uxth	r0, r3
 8017506:	6879      	ldr	r1, [r7, #4]
 8017508:	4613      	mov	r3, r2
 801750a:	009b      	lsls	r3, r3, #2
 801750c:	4413      	add	r3, r2
 801750e:	00db      	lsls	r3, r3, #3
 8017510:	440b      	add	r3, r1
 8017512:	3336      	adds	r3, #54	; 0x36
 8017514:	4602      	mov	r2, r0
 8017516:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017518:	7bfb      	ldrb	r3, [r7, #15]
 801751a:	6879      	ldr	r1, [r7, #4]
 801751c:	1c5a      	adds	r2, r3, #1
 801751e:	4613      	mov	r3, r2
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	4413      	add	r3, r2
 8017524:	00db      	lsls	r3, r3, #3
 8017526:	440b      	add	r3, r1
 8017528:	3303      	adds	r3, #3
 801752a:	2200      	movs	r2, #0
 801752c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801752e:	7bfa      	ldrb	r2, [r7, #15]
 8017530:	6879      	ldr	r1, [r7, #4]
 8017532:	4613      	mov	r3, r2
 8017534:	009b      	lsls	r3, r3, #2
 8017536:	4413      	add	r3, r2
 8017538:	00db      	lsls	r3, r3, #3
 801753a:	440b      	add	r3, r1
 801753c:	3338      	adds	r3, #56	; 0x38
 801753e:	2200      	movs	r2, #0
 8017540:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017542:	7bfa      	ldrb	r2, [r7, #15]
 8017544:	6879      	ldr	r1, [r7, #4]
 8017546:	4613      	mov	r3, r2
 8017548:	009b      	lsls	r3, r3, #2
 801754a:	4413      	add	r3, r2
 801754c:	00db      	lsls	r3, r3, #3
 801754e:	440b      	add	r3, r1
 8017550:	333c      	adds	r3, #60	; 0x3c
 8017552:	2200      	movs	r2, #0
 8017554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017556:	7bfa      	ldrb	r2, [r7, #15]
 8017558:	6879      	ldr	r1, [r7, #4]
 801755a:	4613      	mov	r3, r2
 801755c:	009b      	lsls	r3, r3, #2
 801755e:	4413      	add	r3, r2
 8017560:	00db      	lsls	r3, r3, #3
 8017562:	440b      	add	r3, r1
 8017564:	3340      	adds	r3, #64	; 0x40
 8017566:	2200      	movs	r2, #0
 8017568:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801756a:	7bfb      	ldrb	r3, [r7, #15]
 801756c:	3301      	adds	r3, #1
 801756e:	73fb      	strb	r3, [r7, #15]
 8017570:	7bfa      	ldrb	r2, [r7, #15]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	429a      	cmp	r2, r3
 8017578:	d3ad      	bcc.n	80174d6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801757a:	2300      	movs	r3, #0
 801757c:	73fb      	strb	r3, [r7, #15]
 801757e:	e044      	b.n	801760a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017580:	7bfa      	ldrb	r2, [r7, #15]
 8017582:	6879      	ldr	r1, [r7, #4]
 8017584:	4613      	mov	r3, r2
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	4413      	add	r3, r2
 801758a:	00db      	lsls	r3, r3, #3
 801758c:	440b      	add	r3, r1
 801758e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8017592:	2200      	movs	r2, #0
 8017594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017596:	7bfa      	ldrb	r2, [r7, #15]
 8017598:	6879      	ldr	r1, [r7, #4]
 801759a:	4613      	mov	r3, r2
 801759c:	009b      	lsls	r3, r3, #2
 801759e:	4413      	add	r3, r2
 80175a0:	00db      	lsls	r3, r3, #3
 80175a2:	440b      	add	r3, r1
 80175a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80175a8:	7bfa      	ldrb	r2, [r7, #15]
 80175aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80175ac:	7bfa      	ldrb	r2, [r7, #15]
 80175ae:	6879      	ldr	r1, [r7, #4]
 80175b0:	4613      	mov	r3, r2
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	4413      	add	r3, r2
 80175b6:	00db      	lsls	r3, r3, #3
 80175b8:	440b      	add	r3, r1
 80175ba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80175be:	2200      	movs	r2, #0
 80175c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80175c2:	7bfa      	ldrb	r2, [r7, #15]
 80175c4:	6879      	ldr	r1, [r7, #4]
 80175c6:	4613      	mov	r3, r2
 80175c8:	009b      	lsls	r3, r3, #2
 80175ca:	4413      	add	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	440b      	add	r3, r1
 80175d0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80175d4:	2200      	movs	r2, #0
 80175d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80175d8:	7bfa      	ldrb	r2, [r7, #15]
 80175da:	6879      	ldr	r1, [r7, #4]
 80175dc:	4613      	mov	r3, r2
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	440b      	add	r3, r1
 80175e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80175ea:	2200      	movs	r2, #0
 80175ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80175ee:	7bfa      	ldrb	r2, [r7, #15]
 80175f0:	6879      	ldr	r1, [r7, #4]
 80175f2:	4613      	mov	r3, r2
 80175f4:	009b      	lsls	r3, r3, #2
 80175f6:	4413      	add	r3, r2
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	440b      	add	r3, r1
 80175fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8017600:	2200      	movs	r2, #0
 8017602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017604:	7bfb      	ldrb	r3, [r7, #15]
 8017606:	3301      	adds	r3, #1
 8017608:	73fb      	strb	r3, [r7, #15]
 801760a:	7bfa      	ldrb	r2, [r7, #15]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	685b      	ldr	r3, [r3, #4]
 8017610:	429a      	cmp	r2, r3
 8017612:	d3b5      	bcc.n	8017580 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	603b      	str	r3, [r7, #0]
 801761a:	687e      	ldr	r6, [r7, #4]
 801761c:	466d      	mov	r5, sp
 801761e:	f106 0410 	add.w	r4, r6, #16
 8017622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017626:	6823      	ldr	r3, [r4, #0]
 8017628:	602b      	str	r3, [r5, #0]
 801762a:	1d33      	adds	r3, r6, #4
 801762c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801762e:	6838      	ldr	r0, [r7, #0]
 8017630:	f002 fe6a 	bl	801a308 <USB_DevInit>
 8017634:	4603      	mov	r3, r0
 8017636:	2b00      	cmp	r3, #0
 8017638:	d005      	beq.n	8017646 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	2202      	movs	r2, #2
 801763e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8017642:	2301      	movs	r3, #1
 8017644:	e00d      	b.n	8017662 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2200      	movs	r2, #0
 801764a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2201      	movs	r2, #1
 8017652:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	4618      	mov	r0, r3
 801765c:	f004 fe0b 	bl	801c276 <USB_DevDisconnect>

  return HAL_OK;
 8017660:	2300      	movs	r3, #0
}
 8017662:	4618      	mov	r0, r3
 8017664:	3714      	adds	r7, #20
 8017666:	46bd      	mov	sp, r7
 8017668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801766a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801766a:	b580      	push	{r7, lr}
 801766c:	b082      	sub	sp, #8
 801766e:	af00      	add	r7, sp, #0
 8017670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017678:	2b01      	cmp	r3, #1
 801767a:	d101      	bne.n	8017680 <HAL_PCD_Start+0x16>
 801767c:	2302      	movs	r3, #2
 801767e:	e016      	b.n	80176ae <HAL_PCD_Start+0x44>
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2201      	movs	r2, #1
 8017684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4618      	mov	r0, r3
 801768e:	f002 fdff 	bl	801a290 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8017692:	2101      	movs	r1, #1
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f006 faea 	bl	801dc6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	4618      	mov	r0, r3
 80176a0:	f004 fddf 	bl	801c262 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2200      	movs	r2, #0
 80176a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80176ac:	2300      	movs	r3, #0
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3708      	adds	r7, #8
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}

080176b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80176b6:	b580      	push	{r7, lr}
 80176b8:	b088      	sub	sp, #32
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	4618      	mov	r0, r3
 80176c4:	f004 fde1 	bl	801c28a <USB_ReadInterrupts>
 80176c8:	4603      	mov	r3, r0
 80176ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80176ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80176d2:	d102      	bne.n	80176da <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f000 fb61 	bl	8017d9c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	4618      	mov	r0, r3
 80176e0:	f004 fdd3 	bl	801c28a <USB_ReadInterrupts>
 80176e4:	4603      	mov	r3, r0
 80176e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80176ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80176ee:	d112      	bne.n	8017716 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017702:	b292      	uxth	r2, r2
 8017704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f006 f8a6 	bl	801d85a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801770e:	2100      	movs	r1, #0
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f000 f925 	bl	8017960 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	4618      	mov	r0, r3
 801771c:	f004 fdb5 	bl	801c28a <USB_ReadInterrupts>
 8017720:	4603      	mov	r3, r0
 8017722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801772a:	d10b      	bne.n	8017744 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017734:	b29a      	uxth	r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801773e:	b292      	uxth	r2, r2
 8017740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	4618      	mov	r0, r3
 801774a:	f004 fd9e 	bl	801c28a <USB_ReadInterrupts>
 801774e:	4603      	mov	r3, r0
 8017750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017758:	d10b      	bne.n	8017772 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017762:	b29a      	uxth	r2, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801776c:	b292      	uxth	r2, r2
 801776e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4618      	mov	r0, r3
 8017778:	f004 fd87 	bl	801c28a <USB_ReadInterrupts>
 801777c:	4603      	mov	r3, r0
 801777e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017786:	d126      	bne.n	80177d6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8017790:	b29a      	uxth	r2, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	f022 0204 	bic.w	r2, r2, #4
 801779a:	b292      	uxth	r2, r2
 801779c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f022 0208 	bic.w	r2, r2, #8
 80177b2:	b292      	uxth	r2, r2
 80177b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f006 f887 	bl	801d8cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80177d0:	b292      	uxth	r2, r2
 80177d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	4618      	mov	r0, r3
 80177dc:	f004 fd55 	bl	801c28a <USB_ReadInterrupts>
 80177e0:	4603      	mov	r3, r0
 80177e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80177e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80177ea:	f040 8084 	bne.w	80178f6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80177ee:	2300      	movs	r3, #0
 80177f0:	77fb      	strb	r3, [r7, #31]
 80177f2:	e011      	b.n	8017818 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	461a      	mov	r2, r3
 80177fa:	7ffb      	ldrb	r3, [r7, #31]
 80177fc:	009b      	lsls	r3, r3, #2
 80177fe:	441a      	add	r2, r3
 8017800:	7ffb      	ldrb	r3, [r7, #31]
 8017802:	8812      	ldrh	r2, [r2, #0]
 8017804:	b292      	uxth	r2, r2
 8017806:	005b      	lsls	r3, r3, #1
 8017808:	f107 0120 	add.w	r1, r7, #32
 801780c:	440b      	add	r3, r1
 801780e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8017812:	7ffb      	ldrb	r3, [r7, #31]
 8017814:	3301      	adds	r3, #1
 8017816:	77fb      	strb	r3, [r7, #31]
 8017818:	7ffb      	ldrb	r3, [r7, #31]
 801781a:	2b07      	cmp	r3, #7
 801781c:	d9ea      	bls.n	80177f4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8017826:	b29a      	uxth	r2, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	f042 0201 	orr.w	r2, r2, #1
 8017830:	b292      	uxth	r2, r2
 8017832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801783e:	b29a      	uxth	r2, r3
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	f022 0201 	bic.w	r2, r2, #1
 8017848:	b292      	uxth	r2, r2
 801784a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 801784e:	bf00      	nop
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017858:	b29b      	uxth	r3, r3
 801785a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801785e:	2b00      	cmp	r3, #0
 8017860:	d0f6      	beq.n	8017850 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801786a:	b29a      	uxth	r2, r3
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017874:	b292      	uxth	r2, r2
 8017876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 801787a:	2300      	movs	r3, #0
 801787c:	77fb      	strb	r3, [r7, #31]
 801787e:	e010      	b.n	80178a2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8017880:	7ffb      	ldrb	r3, [r7, #31]
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	6812      	ldr	r2, [r2, #0]
 8017886:	4611      	mov	r1, r2
 8017888:	7ffa      	ldrb	r2, [r7, #31]
 801788a:	0092      	lsls	r2, r2, #2
 801788c:	440a      	add	r2, r1
 801788e:	005b      	lsls	r3, r3, #1
 8017890:	f107 0120 	add.w	r1, r7, #32
 8017894:	440b      	add	r3, r1
 8017896:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 801789a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 801789c:	7ffb      	ldrb	r3, [r7, #31]
 801789e:	3301      	adds	r3, #1
 80178a0:	77fb      	strb	r3, [r7, #31]
 80178a2:	7ffb      	ldrb	r3, [r7, #31]
 80178a4:	2b07      	cmp	r3, #7
 80178a6:	d9eb      	bls.n	8017880 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f042 0208 	orr.w	r2, r2, #8
 80178ba:	b292      	uxth	r2, r2
 80178bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80178c8:	b29a      	uxth	r2, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80178d2:	b292      	uxth	r2, r2
 80178d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	f042 0204 	orr.w	r2, r2, #4
 80178ea:	b292      	uxth	r2, r2
 80178ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f005 ffd1 	bl	801d898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	4618      	mov	r0, r3
 80178fc:	f004 fcc5 	bl	801c28a <USB_ReadInterrupts>
 8017900:	4603      	mov	r3, r0
 8017902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801790a:	d10e      	bne.n	801792a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017914:	b29a      	uxth	r2, r3
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801791e:	b292      	uxth	r2, r2
 8017920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f005 ff8a 	bl	801d83e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	4618      	mov	r0, r3
 8017930:	f004 fcab 	bl	801c28a <USB_ReadInterrupts>
 8017934:	4603      	mov	r3, r0
 8017936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801793a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801793e:	d10b      	bne.n	8017958 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017948:	b29a      	uxth	r2, r3
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017952:	b292      	uxth	r2, r2
 8017954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8017958:	bf00      	nop
 801795a:	3720      	adds	r7, #32
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	460b      	mov	r3, r1
 801796a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017972:	2b01      	cmp	r3, #1
 8017974:	d101      	bne.n	801797a <HAL_PCD_SetAddress+0x1a>
 8017976:	2302      	movs	r3, #2
 8017978:	e013      	b.n	80179a2 <HAL_PCD_SetAddress+0x42>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2201      	movs	r2, #1
 801797e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	78fa      	ldrb	r2, [r7, #3]
 8017986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	78fa      	ldrb	r2, [r7, #3]
 8017990:	4611      	mov	r1, r2
 8017992:	4618      	mov	r0, r3
 8017994:	f004 fc52 	bl	801c23c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2200      	movs	r2, #0
 801799c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80179a0:	2300      	movs	r3, #0
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3708      	adds	r7, #8
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}

080179aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b084      	sub	sp, #16
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
 80179b2:	4608      	mov	r0, r1
 80179b4:	4611      	mov	r1, r2
 80179b6:	461a      	mov	r2, r3
 80179b8:	4603      	mov	r3, r0
 80179ba:	70fb      	strb	r3, [r7, #3]
 80179bc:	460b      	mov	r3, r1
 80179be:	803b      	strh	r3, [r7, #0]
 80179c0:	4613      	mov	r3, r2
 80179c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80179c4:	2300      	movs	r3, #0
 80179c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80179c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	da0e      	bge.n	80179ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80179d0:	78fb      	ldrb	r3, [r7, #3]
 80179d2:	f003 0307 	and.w	r3, r3, #7
 80179d6:	1c5a      	adds	r2, r3, #1
 80179d8:	4613      	mov	r3, r2
 80179da:	009b      	lsls	r3, r3, #2
 80179dc:	4413      	add	r3, r2
 80179de:	00db      	lsls	r3, r3, #3
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	4413      	add	r3, r2
 80179e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	2201      	movs	r2, #1
 80179ea:	705a      	strb	r2, [r3, #1]
 80179ec:	e00e      	b.n	8017a0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80179ee:	78fb      	ldrb	r3, [r7, #3]
 80179f0:	f003 0207 	and.w	r2, r3, #7
 80179f4:	4613      	mov	r3, r2
 80179f6:	009b      	lsls	r3, r3, #2
 80179f8:	4413      	add	r3, r2
 80179fa:	00db      	lsls	r3, r3, #3
 80179fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	4413      	add	r3, r2
 8017a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8017a0c:	78fb      	ldrb	r3, [r7, #3]
 8017a0e:	f003 0307 	and.w	r3, r3, #7
 8017a12:	b2da      	uxtb	r2, r3
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8017a18:	883a      	ldrh	r2, [r7, #0]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	78ba      	ldrb	r2, [r7, #2]
 8017a22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	785b      	ldrb	r3, [r3, #1]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d004      	beq.n	8017a36 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8017a36:	78bb      	ldrb	r3, [r7, #2]
 8017a38:	2b02      	cmp	r3, #2
 8017a3a:	d102      	bne.n	8017a42 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d101      	bne.n	8017a50 <HAL_PCD_EP_Open+0xa6>
 8017a4c:	2302      	movs	r3, #2
 8017a4e:	e00e      	b.n	8017a6e <HAL_PCD_EP_Open+0xc4>
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	2201      	movs	r2, #1
 8017a54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	68f9      	ldr	r1, [r7, #12]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f002 fc72 	bl	801a348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2200      	movs	r2, #0
 8017a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8017a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017a76:	b580      	push	{r7, lr}
 8017a78:	b084      	sub	sp, #16
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
 8017a7e:	460b      	mov	r3, r1
 8017a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8017a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	da0e      	bge.n	8017aa8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017a8a:	78fb      	ldrb	r3, [r7, #3]
 8017a8c:	f003 0307 	and.w	r3, r3, #7
 8017a90:	1c5a      	adds	r2, r3, #1
 8017a92:	4613      	mov	r3, r2
 8017a94:	009b      	lsls	r3, r3, #2
 8017a96:	4413      	add	r3, r2
 8017a98:	00db      	lsls	r3, r3, #3
 8017a9a:	687a      	ldr	r2, [r7, #4]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	2201      	movs	r2, #1
 8017aa4:	705a      	strb	r2, [r3, #1]
 8017aa6:	e00e      	b.n	8017ac6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017aa8:	78fb      	ldrb	r3, [r7, #3]
 8017aaa:	f003 0207 	and.w	r2, r3, #7
 8017aae:	4613      	mov	r3, r2
 8017ab0:	009b      	lsls	r3, r3, #2
 8017ab2:	4413      	add	r3, r2
 8017ab4:	00db      	lsls	r3, r3, #3
 8017ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	4413      	add	r3, r2
 8017abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8017ac6:	78fb      	ldrb	r3, [r7, #3]
 8017ac8:	f003 0307 	and.w	r3, r3, #7
 8017acc:	b2da      	uxtb	r2, r3
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d101      	bne.n	8017ae0 <HAL_PCD_EP_Close+0x6a>
 8017adc:	2302      	movs	r3, #2
 8017ade:	e00e      	b.n	8017afe <HAL_PCD_EP_Close+0x88>
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	68f9      	ldr	r1, [r7, #12]
 8017aee:	4618      	mov	r0, r3
 8017af0:	f002 ff94 	bl	801aa1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2200      	movs	r2, #0
 8017af8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8017afc:	2300      	movs	r3, #0
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3710      	adds	r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}

08017b06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017b06:	b580      	push	{r7, lr}
 8017b08:	b086      	sub	sp, #24
 8017b0a:	af00      	add	r7, sp, #0
 8017b0c:	60f8      	str	r0, [r7, #12]
 8017b0e:	607a      	str	r2, [r7, #4]
 8017b10:	603b      	str	r3, [r7, #0]
 8017b12:	460b      	mov	r3, r1
 8017b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017b16:	7afb      	ldrb	r3, [r7, #11]
 8017b18:	f003 0207 	and.w	r2, r3, #7
 8017b1c:	4613      	mov	r3, r2
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	4413      	add	r3, r2
 8017b22:	00db      	lsls	r3, r3, #3
 8017b24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017b28:	68fa      	ldr	r2, [r7, #12]
 8017b2a:	4413      	add	r3, r2
 8017b2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	683a      	ldr	r2, [r7, #0]
 8017b38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2200      	movs	r2, #0
 8017b44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017b46:	7afb      	ldrb	r3, [r7, #11]
 8017b48:	f003 0307 	and.w	r3, r3, #7
 8017b4c:	b2da      	uxtb	r2, r3
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8017b52:	7afb      	ldrb	r3, [r7, #11]
 8017b54:	f003 0307 	and.w	r3, r3, #7
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d106      	bne.n	8017b6a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	6979      	ldr	r1, [r7, #20]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f003 f946 	bl	801adf4 <USB_EPStartXfer>
 8017b68:	e005      	b.n	8017b76 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	6979      	ldr	r1, [r7, #20]
 8017b70:	4618      	mov	r0, r3
 8017b72:	f003 f93f 	bl	801adf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8017b76:	2300      	movs	r3, #0
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3718      	adds	r7, #24
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}

08017b80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017b80:	b480      	push	{r7}
 8017b82:	b083      	sub	sp, #12
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	460b      	mov	r3, r1
 8017b8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8017b8c:	78fb      	ldrb	r3, [r7, #3]
 8017b8e:	f003 0207 	and.w	r2, r3, #7
 8017b92:	6879      	ldr	r1, [r7, #4]
 8017b94:	4613      	mov	r3, r2
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	4413      	add	r3, r2
 8017b9a:	00db      	lsls	r3, r3, #3
 8017b9c:	440b      	add	r3, r1
 8017b9e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8017ba2:	681b      	ldr	r3, [r3, #0]
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	370c      	adds	r7, #12
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bc80      	pop	{r7}
 8017bac:	4770      	bx	lr

08017bae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017bae:	b580      	push	{r7, lr}
 8017bb0:	b086      	sub	sp, #24
 8017bb2:	af00      	add	r7, sp, #0
 8017bb4:	60f8      	str	r0, [r7, #12]
 8017bb6:	607a      	str	r2, [r7, #4]
 8017bb8:	603b      	str	r3, [r7, #0]
 8017bba:	460b      	mov	r3, r1
 8017bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017bbe:	7afb      	ldrb	r3, [r7, #11]
 8017bc0:	f003 0307 	and.w	r3, r3, #7
 8017bc4:	1c5a      	adds	r2, r3, #1
 8017bc6:	4613      	mov	r3, r2
 8017bc8:	009b      	lsls	r3, r3, #2
 8017bca:	4413      	add	r3, r2
 8017bcc:	00db      	lsls	r3, r3, #3
 8017bce:	68fa      	ldr	r2, [r7, #12]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	683a      	ldr	r2, [r7, #0]
 8017bde:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	2201      	movs	r2, #1
 8017be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	683a      	ldr	r2, [r7, #0]
 8017bec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017bfa:	7afb      	ldrb	r3, [r7, #11]
 8017bfc:	f003 0307 	and.w	r3, r3, #7
 8017c00:	b2da      	uxtb	r2, r3
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8017c06:	7afb      	ldrb	r3, [r7, #11]
 8017c08:	f003 0307 	and.w	r3, r3, #7
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d106      	bne.n	8017c1e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	6979      	ldr	r1, [r7, #20]
 8017c16:	4618      	mov	r0, r3
 8017c18:	f003 f8ec 	bl	801adf4 <USB_EPStartXfer>
 8017c1c:	e005      	b.n	8017c2a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	6979      	ldr	r1, [r7, #20]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f003 f8e5 	bl	801adf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8017c2a:	2300      	movs	r3, #0
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3718      	adds	r7, #24
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}

08017c34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	460b      	mov	r3, r1
 8017c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8017c40:	78fb      	ldrb	r3, [r7, #3]
 8017c42:	f003 0207 	and.w	r2, r3, #7
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d901      	bls.n	8017c52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8017c4e:	2301      	movs	r3, #1
 8017c50:	e04c      	b.n	8017cec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8017c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	da0e      	bge.n	8017c78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017c5a:	78fb      	ldrb	r3, [r7, #3]
 8017c5c:	f003 0307 	and.w	r3, r3, #7
 8017c60:	1c5a      	adds	r2, r3, #1
 8017c62:	4613      	mov	r3, r2
 8017c64:	009b      	lsls	r3, r3, #2
 8017c66:	4413      	add	r3, r2
 8017c68:	00db      	lsls	r3, r3, #3
 8017c6a:	687a      	ldr	r2, [r7, #4]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2201      	movs	r2, #1
 8017c74:	705a      	strb	r2, [r3, #1]
 8017c76:	e00c      	b.n	8017c92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017c78:	78fa      	ldrb	r2, [r7, #3]
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	4413      	add	r3, r2
 8017c80:	00db      	lsls	r3, r3, #3
 8017c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017c86:	687a      	ldr	r2, [r7, #4]
 8017c88:	4413      	add	r3, r2
 8017c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	2201      	movs	r2, #1
 8017c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017c98:	78fb      	ldrb	r3, [r7, #3]
 8017c9a:	f003 0307 	and.w	r3, r3, #7
 8017c9e:	b2da      	uxtb	r2, r3
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017caa:	2b01      	cmp	r3, #1
 8017cac:	d101      	bne.n	8017cb2 <HAL_PCD_EP_SetStall+0x7e>
 8017cae:	2302      	movs	r3, #2
 8017cb0:	e01c      	b.n	8017cec <HAL_PCD_EP_SetStall+0xb8>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2201      	movs	r2, #1
 8017cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	68f9      	ldr	r1, [r7, #12]
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f004 f9be 	bl	801c042 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8017cc6:	78fb      	ldrb	r3, [r7, #3]
 8017cc8:	f003 0307 	and.w	r3, r3, #7
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d108      	bne.n	8017ce2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8017cda:	4619      	mov	r1, r3
 8017cdc:	4610      	mov	r0, r2
 8017cde:	f004 fae3 	bl	801c2a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8017cea:	2300      	movs	r3, #0
}
 8017cec:	4618      	mov	r0, r3
 8017cee:	3710      	adds	r7, #16
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}

08017cf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017d00:	78fb      	ldrb	r3, [r7, #3]
 8017d02:	f003 020f 	and.w	r2, r3, #15
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d901      	bls.n	8017d12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	e040      	b.n	8017d94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8017d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	da0e      	bge.n	8017d38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017d1a:	78fb      	ldrb	r3, [r7, #3]
 8017d1c:	f003 0307 	and.w	r3, r3, #7
 8017d20:	1c5a      	adds	r2, r3, #1
 8017d22:	4613      	mov	r3, r2
 8017d24:	009b      	lsls	r3, r3, #2
 8017d26:	4413      	add	r3, r2
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	687a      	ldr	r2, [r7, #4]
 8017d2c:	4413      	add	r3, r2
 8017d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	2201      	movs	r2, #1
 8017d34:	705a      	strb	r2, [r3, #1]
 8017d36:	e00e      	b.n	8017d56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017d38:	78fb      	ldrb	r3, [r7, #3]
 8017d3a:	f003 0207 	and.w	r2, r3, #7
 8017d3e:	4613      	mov	r3, r2
 8017d40:	009b      	lsls	r3, r3, #2
 8017d42:	4413      	add	r3, r2
 8017d44:	00db      	lsls	r3, r3, #3
 8017d46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017d4a:	687a      	ldr	r2, [r7, #4]
 8017d4c:	4413      	add	r3, r2
 8017d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	2200      	movs	r2, #0
 8017d54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	2200      	movs	r2, #0
 8017d5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017d5c:	78fb      	ldrb	r3, [r7, #3]
 8017d5e:	f003 0307 	and.w	r3, r3, #7
 8017d62:	b2da      	uxtb	r2, r3
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d101      	bne.n	8017d76 <HAL_PCD_EP_ClrStall+0x82>
 8017d72:	2302      	movs	r3, #2
 8017d74:	e00e      	b.n	8017d94 <HAL_PCD_EP_ClrStall+0xa0>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	2201      	movs	r2, #1
 8017d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	68f9      	ldr	r1, [r7, #12]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f004 f9ac 	bl	801c0e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8017d92:	2300      	movs	r3, #0
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	3710      	adds	r7, #16
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b08e      	sub	sp, #56	; 0x38
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017da4:	e2df      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017dae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8017db0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017db2:	b2db      	uxtb	r3, r3
 8017db4:	f003 030f 	and.w	r3, r3, #15
 8017db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8017dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f040 8158 	bne.w	8018076 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8017dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017dc8:	f003 0310 	and.w	r3, r3, #16
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d152      	bne.n	8017e76 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	881b      	ldrh	r3, [r3, #0]
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8017ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017de0:	81fb      	strh	r3, [r7, #14]
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681a      	ldr	r2, [r3, #0]
 8017de6:	89fb      	ldrh	r3, [r7, #14]
 8017de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	3328      	adds	r3, #40	; 0x28
 8017df8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	461a      	mov	r2, r3
 8017e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	00db      	lsls	r3, r3, #3
 8017e0c:	4413      	add	r3, r2
 8017e0e:	3302      	adds	r3, #2
 8017e10:	005b      	lsls	r3, r3, #1
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	6812      	ldr	r2, [r2, #0]
 8017e16:	4413      	add	r3, r2
 8017e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017e1c:	881b      	ldrh	r3, [r3, #0]
 8017e1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	695a      	ldr	r2, [r3, #20]
 8017e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2c:	69db      	ldr	r3, [r3, #28]
 8017e2e:	441a      	add	r2, r3
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8017e34:	2100      	movs	r1, #0
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f005 fce7 	bl	801d80a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f000 828e 	beq.w	8018366 <PCD_EP_ISR_Handler+0x5ca>
 8017e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4c:	699b      	ldr	r3, [r3, #24]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	f040 8289 	bne.w	8018366 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017e60:	b2da      	uxtb	r2, r3
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	b292      	uxth	r2, r2
 8017e68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8017e74:	e277      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017e7c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	881b      	ldrh	r3, [r3, #0]
 8017e84:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8017e86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d034      	beq.n	8017efa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017e98:	b29b      	uxth	r3, r3
 8017e9a:	461a      	mov	r2, r3
 8017e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	00db      	lsls	r3, r3, #3
 8017ea2:	4413      	add	r3, r2
 8017ea4:	3306      	adds	r3, #6
 8017ea6:	005b      	lsls	r3, r3, #1
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	6812      	ldr	r2, [r2, #0]
 8017eac:	4413      	add	r3, r2
 8017eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017eb2:	881b      	ldrh	r3, [r3, #0]
 8017eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6818      	ldr	r0, [r3, #0]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8017eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ecc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	f004 fa39 	bl	801c346 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	881b      	ldrh	r3, [r3, #0]
 8017eda:	b29a      	uxth	r2, r3
 8017edc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8017ee0:	4013      	ands	r3, r2
 8017ee2:	823b      	strh	r3, [r7, #16]
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	8a3a      	ldrh	r2, [r7, #16]
 8017eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017eee:	b292      	uxth	r2, r2
 8017ef0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8017ef2:	6878      	ldr	r0, [r7, #4]
 8017ef4:	f005 fc5c 	bl	801d7b0 <HAL_PCD_SetupStageCallback>
 8017ef8:	e235      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8017efa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	f280 8231 	bge.w	8018366 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	881b      	ldrh	r3, [r3, #0]
 8017f0a:	b29a      	uxth	r2, r3
 8017f0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8017f10:	4013      	ands	r3, r2
 8017f12:	83bb      	strh	r3, [r7, #28]
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	8bba      	ldrh	r2, [r7, #28]
 8017f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017f1e:	b292      	uxth	r2, r2
 8017f20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017f2a:	b29b      	uxth	r3, r3
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	00db      	lsls	r3, r3, #3
 8017f34:	4413      	add	r3, r2
 8017f36:	3306      	adds	r3, #6
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	687a      	ldr	r2, [r7, #4]
 8017f3c:	6812      	ldr	r2, [r2, #0]
 8017f3e:	4413      	add	r3, r2
 8017f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017f44:	881b      	ldrh	r3, [r3, #0]
 8017f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8017f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f50:	69db      	ldr	r3, [r3, #28]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d019      	beq.n	8017f8a <PCD_EP_ISR_Handler+0x1ee>
 8017f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f58:	695b      	ldr	r3, [r3, #20]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d015      	beq.n	8017f8a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6818      	ldr	r0, [r3, #0]
 8017f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f64:	6959      	ldr	r1, [r3, #20]
 8017f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8017f6e:	b29b      	uxth	r3, r3
 8017f70:	f004 f9e9 	bl	801c346 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	695a      	ldr	r2, [r3, #20]
 8017f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f7a:	69db      	ldr	r3, [r3, #28]
 8017f7c:	441a      	add	r2, r3
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8017f82:	2100      	movs	r1, #0
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f005 fc25 	bl	801d7d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	61bb      	str	r3, [r7, #24]
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	69bb      	ldr	r3, [r7, #24]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	61bb      	str	r3, [r7, #24]
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8017fa8:	617b      	str	r3, [r7, #20]
 8017faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fac:	691b      	ldr	r3, [r3, #16]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d112      	bne.n	8017fd8 <PCD_EP_ISR_Handler+0x23c>
 8017fb2:	697b      	ldr	r3, [r7, #20]
 8017fb4:	881b      	ldrh	r3, [r3, #0]
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	801a      	strh	r2, [r3, #0]
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	881b      	ldrh	r3, [r3, #0]
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017fd0:	b29a      	uxth	r2, r3
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	801a      	strh	r2, [r3, #0]
 8017fd6:	e02f      	b.n	8018038 <PCD_EP_ISR_Handler+0x29c>
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	691b      	ldr	r3, [r3, #16]
 8017fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8017fde:	d813      	bhi.n	8018008 <PCD_EP_ISR_Handler+0x26c>
 8017fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe2:	691b      	ldr	r3, [r3, #16]
 8017fe4:	085b      	lsrs	r3, r3, #1
 8017fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fea:	691b      	ldr	r3, [r3, #16]
 8017fec:	f003 0301 	and.w	r3, r3, #1
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d002      	beq.n	8017ffa <PCD_EP_ISR_Handler+0x25e>
 8017ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8017ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	029b      	lsls	r3, r3, #10
 8018000:	b29a      	uxth	r2, r3
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	801a      	strh	r2, [r3, #0]
 8018006:	e017      	b.n	8018038 <PCD_EP_ISR_Handler+0x29c>
 8018008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800a:	691b      	ldr	r3, [r3, #16]
 801800c:	095b      	lsrs	r3, r3, #5
 801800e:	633b      	str	r3, [r7, #48]	; 0x30
 8018010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018012:	691b      	ldr	r3, [r3, #16]
 8018014:	f003 031f 	and.w	r3, r3, #31
 8018018:	2b00      	cmp	r3, #0
 801801a:	d102      	bne.n	8018022 <PCD_EP_ISR_Handler+0x286>
 801801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801801e:	3b01      	subs	r3, #1
 8018020:	633b      	str	r3, [r7, #48]	; 0x30
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	b29b      	uxth	r3, r3
 8018026:	029b      	lsls	r3, r3, #10
 8018028:	b29b      	uxth	r3, r3
 801802a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801802e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018032:	b29a      	uxth	r2, r3
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	b29b      	uxth	r3, r3
 8018040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018048:	827b      	strh	r3, [r7, #18]
 801804a:	8a7b      	ldrh	r3, [r7, #18]
 801804c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8018050:	827b      	strh	r3, [r7, #18]
 8018052:	8a7b      	ldrh	r3, [r7, #18]
 8018054:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8018058:	827b      	strh	r3, [r7, #18]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681a      	ldr	r2, [r3, #0]
 801805e:	8a7b      	ldrh	r3, [r7, #18]
 8018060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801806c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018070:	b29b      	uxth	r3, r3
 8018072:	8013      	strh	r3, [r2, #0]
 8018074:	e177      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	461a      	mov	r2, r3
 801807c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018080:	009b      	lsls	r3, r3, #2
 8018082:	4413      	add	r3, r2
 8018084:	881b      	ldrh	r3, [r3, #0]
 8018086:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8018088:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801808c:	2b00      	cmp	r3, #0
 801808e:	f280 80ea 	bge.w	8018266 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	461a      	mov	r2, r3
 8018098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801809c:	009b      	lsls	r3, r3, #2
 801809e:	4413      	add	r3, r2
 80180a0:	881b      	ldrh	r3, [r3, #0]
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80180a8:	4013      	ands	r3, r2
 80180aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	461a      	mov	r2, r3
 80180b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80180b6:	009b      	lsls	r3, r3, #2
 80180b8:	4413      	add	r3, r2
 80180ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80180bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80180c0:	b292      	uxth	r2, r2
 80180c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80180c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80180c8:	4613      	mov	r3, r2
 80180ca:	009b      	lsls	r3, r3, #2
 80180cc:	4413      	add	r3, r2
 80180ce:	00db      	lsls	r3, r3, #3
 80180d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80180d4:	687a      	ldr	r2, [r7, #4]
 80180d6:	4413      	add	r3, r2
 80180d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	7b1b      	ldrb	r3, [r3, #12]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d122      	bne.n	8018128 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	461a      	mov	r2, r3
 80180ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f0:	781b      	ldrb	r3, [r3, #0]
 80180f2:	00db      	lsls	r3, r3, #3
 80180f4:	4413      	add	r3, r2
 80180f6:	3306      	adds	r3, #6
 80180f8:	005b      	lsls	r3, r3, #1
 80180fa:	687a      	ldr	r2, [r7, #4]
 80180fc:	6812      	ldr	r2, [r2, #0]
 80180fe:	4413      	add	r3, r2
 8018100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018104:	881b      	ldrh	r3, [r3, #0]
 8018106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801810a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 801810c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801810e:	2b00      	cmp	r3, #0
 8018110:	f000 8087 	beq.w	8018222 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6818      	ldr	r0, [r3, #0]
 8018118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811a:	6959      	ldr	r1, [r3, #20]
 801811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811e:	88da      	ldrh	r2, [r3, #6]
 8018120:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018122:	f004 f910 	bl	801c346 <USB_ReadPMA>
 8018126:	e07c      	b.n	8018222 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8018128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812a:	78db      	ldrb	r3, [r3, #3]
 801812c:	2b02      	cmp	r3, #2
 801812e:	d108      	bne.n	8018142 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8018130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018132:	461a      	mov	r2, r3
 8018134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f000 f923 	bl	8018382 <HAL_PCD_EP_DB_Receive>
 801813c:	4603      	mov	r3, r0
 801813e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8018140:	e06f      	b.n	8018222 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	461a      	mov	r2, r3
 8018148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	009b      	lsls	r3, r3, #2
 801814e:	4413      	add	r3, r2
 8018150:	881b      	ldrh	r3, [r3, #0]
 8018152:	b29b      	uxth	r3, r3
 8018154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801815c:	847b      	strh	r3, [r7, #34]	; 0x22
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	461a      	mov	r2, r3
 8018164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	009b      	lsls	r3, r3, #2
 801816a:	441a      	add	r2, r3
 801816c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801816e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801817a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801817e:	b29b      	uxth	r3, r3
 8018180:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	461a      	mov	r2, r3
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	009b      	lsls	r3, r3, #2
 801818e:	4413      	add	r3, r2
 8018190:	881b      	ldrh	r3, [r3, #0]
 8018192:	b29b      	uxth	r3, r3
 8018194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018198:	2b00      	cmp	r3, #0
 801819a:	d021      	beq.n	80181e0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	461a      	mov	r2, r3
 80181a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	00db      	lsls	r3, r3, #3
 80181ae:	4413      	add	r3, r2
 80181b0:	3302      	adds	r3, #2
 80181b2:	005b      	lsls	r3, r3, #1
 80181b4:	687a      	ldr	r2, [r7, #4]
 80181b6:	6812      	ldr	r2, [r2, #0]
 80181b8:	4413      	add	r3, r2
 80181ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80181be:	881b      	ldrh	r3, [r3, #0]
 80181c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80181c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80181c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d02a      	beq.n	8018222 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	6818      	ldr	r0, [r3, #0]
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	6959      	ldr	r1, [r3, #20]
 80181d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d6:	891a      	ldrh	r2, [r3, #8]
 80181d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80181da:	f004 f8b4 	bl	801c346 <USB_ReadPMA>
 80181de:	e020      	b.n	8018222 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	461a      	mov	r2, r3
 80181ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	00db      	lsls	r3, r3, #3
 80181f2:	4413      	add	r3, r2
 80181f4:	3306      	adds	r3, #6
 80181f6:	005b      	lsls	r3, r3, #1
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	6812      	ldr	r2, [r2, #0]
 80181fc:	4413      	add	r3, r2
 80181fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018202:	881b      	ldrh	r3, [r3, #0]
 8018204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018208:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 801820a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801820c:	2b00      	cmp	r3, #0
 801820e:	d008      	beq.n	8018222 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6818      	ldr	r0, [r3, #0]
 8018214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018216:	6959      	ldr	r1, [r3, #20]
 8018218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801821a:	895a      	ldrh	r2, [r3, #10]
 801821c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801821e:	f004 f892 	bl	801c346 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8018222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018224:	69da      	ldr	r2, [r3, #28]
 8018226:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018228:	441a      	add	r2, r3
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018230:	695a      	ldr	r2, [r3, #20]
 8018232:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018234:	441a      	add	r2, r3
 8018236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018238:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823c:	699b      	ldr	r3, [r3, #24]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d004      	beq.n	801824c <PCD_EP_ISR_Handler+0x4b0>
 8018242:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	691b      	ldr	r3, [r3, #16]
 8018248:	429a      	cmp	r2, r3
 801824a:	d206      	bcs.n	801825a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	4619      	mov	r1, r3
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f005 fabe 	bl	801d7d4 <HAL_PCD_DataOutStageCallback>
 8018258:	e005      	b.n	8018266 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018260:	4618      	mov	r0, r3
 8018262:	f002 fdc7 	bl	801adf4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8018266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801826c:	2b00      	cmp	r3, #0
 801826e:	d07a      	beq.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8018270:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018274:	1c5a      	adds	r2, r3, #1
 8018276:	4613      	mov	r3, r2
 8018278:	009b      	lsls	r3, r3, #2
 801827a:	4413      	add	r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	4413      	add	r3, r2
 8018282:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	461a      	mov	r2, r3
 801828a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801828e:	009b      	lsls	r3, r3, #2
 8018290:	4413      	add	r3, r2
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	b29b      	uxth	r3, r3
 8018296:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 801829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801829e:	843b      	strh	r3, [r7, #32]
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	461a      	mov	r2, r3
 80182a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80182aa:	009b      	lsls	r3, r3, #2
 80182ac:	441a      	add	r2, r3
 80182ae:	8c3b      	ldrh	r3, [r7, #32]
 80182b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80182b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80182b8:	b29b      	uxth	r3, r3
 80182ba:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80182bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182be:	78db      	ldrb	r3, [r3, #3]
 80182c0:	2b02      	cmp	r3, #2
 80182c2:	d108      	bne.n	80182d6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80182c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80182c8:	2b02      	cmp	r3, #2
 80182ca:	d146      	bne.n	801835a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80182cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80182ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d141      	bne.n	801835a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80182de:	b29b      	uxth	r3, r3
 80182e0:	461a      	mov	r2, r3
 80182e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	00db      	lsls	r3, r3, #3
 80182e8:	4413      	add	r3, r2
 80182ea:	3302      	adds	r3, #2
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	6812      	ldr	r2, [r2, #0]
 80182f2:	4413      	add	r3, r2
 80182f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80182f8:	881b      	ldrh	r3, [r3, #0]
 80182fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80182fe:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8018300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018302:	699a      	ldr	r2, [r3, #24]
 8018304:	8bfb      	ldrh	r3, [r7, #30]
 8018306:	429a      	cmp	r2, r3
 8018308:	d906      	bls.n	8018318 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 801830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801830c:	699a      	ldr	r2, [r3, #24]
 801830e:	8bfb      	ldrh	r3, [r7, #30]
 8018310:	1ad2      	subs	r2, r2, r3
 8018312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018314:	619a      	str	r2, [r3, #24]
 8018316:	e002      	b.n	801831e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8018318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831a:	2200      	movs	r2, #0
 801831c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 801831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018320:	699b      	ldr	r3, [r3, #24]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d106      	bne.n	8018334 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	4619      	mov	r1, r3
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f005 fa6c 	bl	801d80a <HAL_PCD_DataInStageCallback>
 8018332:	e018      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8018334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018336:	695a      	ldr	r2, [r3, #20]
 8018338:	8bfb      	ldrh	r3, [r7, #30]
 801833a:	441a      	add	r2, r3
 801833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801833e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8018340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018342:	69da      	ldr	r2, [r3, #28]
 8018344:	8bfb      	ldrh	r3, [r7, #30]
 8018346:	441a      	add	r2, r3
 8018348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801834a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018352:	4618      	mov	r0, r3
 8018354:	f002 fd4e 	bl	801adf4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8018358:	e005      	b.n	8018366 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801835a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801835c:	461a      	mov	r2, r3
 801835e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f000 f91b 	bl	801859c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801836e:	b29b      	uxth	r3, r3
 8018370:	b21b      	sxth	r3, r3
 8018372:	2b00      	cmp	r3, #0
 8018374:	f6ff ad17 	blt.w	8017da6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8018378:	2300      	movs	r3, #0
}
 801837a:	4618      	mov	r0, r3
 801837c:	3738      	adds	r7, #56	; 0x38
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}

08018382 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8018382:	b580      	push	{r7, lr}
 8018384:	b088      	sub	sp, #32
 8018386:	af00      	add	r7, sp, #0
 8018388:	60f8      	str	r0, [r7, #12]
 801838a:	60b9      	str	r1, [r7, #8]
 801838c:	4613      	mov	r3, r2
 801838e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8018390:	88fb      	ldrh	r3, [r7, #6]
 8018392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018396:	2b00      	cmp	r3, #0
 8018398:	d07e      	beq.n	8018498 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	461a      	mov	r2, r3
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	00db      	lsls	r3, r3, #3
 80183ac:	4413      	add	r3, r2
 80183ae:	3302      	adds	r3, #2
 80183b0:	005b      	lsls	r3, r3, #1
 80183b2:	68fa      	ldr	r2, [r7, #12]
 80183b4:	6812      	ldr	r2, [r2, #0]
 80183b6:	4413      	add	r3, r2
 80183b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80183bc:	881b      	ldrh	r3, [r3, #0]
 80183be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80183c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80183c4:	68bb      	ldr	r3, [r7, #8]
 80183c6:	699a      	ldr	r2, [r3, #24]
 80183c8:	8b7b      	ldrh	r3, [r7, #26]
 80183ca:	429a      	cmp	r2, r3
 80183cc:	d306      	bcc.n	80183dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	699a      	ldr	r2, [r3, #24]
 80183d2:	8b7b      	ldrh	r3, [r7, #26]
 80183d4:	1ad2      	subs	r2, r2, r3
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	619a      	str	r2, [r3, #24]
 80183da:	e002      	b.n	80183e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	2200      	movs	r2, #0
 80183e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	699b      	ldr	r3, [r3, #24]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d123      	bne.n	8018432 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	461a      	mov	r2, r3
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	781b      	ldrb	r3, [r3, #0]
 80183f4:	009b      	lsls	r3, r3, #2
 80183f6:	4413      	add	r3, r2
 80183f8:	881b      	ldrh	r3, [r3, #0]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018404:	833b      	strh	r3, [r7, #24]
 8018406:	8b3b      	ldrh	r3, [r7, #24]
 8018408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801840c:	833b      	strh	r3, [r7, #24]
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	461a      	mov	r2, r3
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	009b      	lsls	r3, r3, #2
 801841a:	441a      	add	r2, r3
 801841c:	8b3b      	ldrh	r3, [r7, #24]
 801841e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801842a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801842e:	b29b      	uxth	r3, r3
 8018430:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018432:	88fb      	ldrh	r3, [r7, #6]
 8018434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018438:	2b00      	cmp	r3, #0
 801843a:	d01f      	beq.n	801847c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	461a      	mov	r2, r3
 8018442:	68bb      	ldr	r3, [r7, #8]
 8018444:	781b      	ldrb	r3, [r3, #0]
 8018446:	009b      	lsls	r3, r3, #2
 8018448:	4413      	add	r3, r2
 801844a:	881b      	ldrh	r3, [r3, #0]
 801844c:	b29b      	uxth	r3, r3
 801844e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018456:	82fb      	strh	r3, [r7, #22]
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	461a      	mov	r2, r3
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	781b      	ldrb	r3, [r3, #0]
 8018462:	009b      	lsls	r3, r3, #2
 8018464:	441a      	add	r2, r3
 8018466:	8afb      	ldrh	r3, [r7, #22]
 8018468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801846c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8018478:	b29b      	uxth	r3, r3
 801847a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 801847c:	8b7b      	ldrh	r3, [r7, #26]
 801847e:	2b00      	cmp	r3, #0
 8018480:	f000 8087 	beq.w	8018592 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	6818      	ldr	r0, [r3, #0]
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	6959      	ldr	r1, [r3, #20]
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	891a      	ldrh	r2, [r3, #8]
 8018490:	8b7b      	ldrh	r3, [r7, #26]
 8018492:	f003 ff58 	bl	801c346 <USB_ReadPMA>
 8018496:	e07c      	b.n	8018592 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	461a      	mov	r2, r3
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	00db      	lsls	r3, r3, #3
 80184aa:	4413      	add	r3, r2
 80184ac:	3306      	adds	r3, #6
 80184ae:	005b      	lsls	r3, r3, #1
 80184b0:	68fa      	ldr	r2, [r7, #12]
 80184b2:	6812      	ldr	r2, [r2, #0]
 80184b4:	4413      	add	r3, r2
 80184b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80184ba:	881b      	ldrh	r3, [r3, #0]
 80184bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80184c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	699a      	ldr	r2, [r3, #24]
 80184c6:	8b7b      	ldrh	r3, [r7, #26]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d306      	bcc.n	80184da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	699a      	ldr	r2, [r3, #24]
 80184d0:	8b7b      	ldrh	r3, [r7, #26]
 80184d2:	1ad2      	subs	r2, r2, r3
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	619a      	str	r2, [r3, #24]
 80184d8:	e002      	b.n	80184e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	2200      	movs	r2, #0
 80184de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	699b      	ldr	r3, [r3, #24]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d123      	bne.n	8018530 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	461a      	mov	r2, r3
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	009b      	lsls	r3, r3, #2
 80184f4:	4413      	add	r3, r2
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80184fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018502:	83fb      	strh	r3, [r7, #30]
 8018504:	8bfb      	ldrh	r3, [r7, #30]
 8018506:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801850a:	83fb      	strh	r3, [r7, #30]
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	461a      	mov	r2, r3
 8018512:	68bb      	ldr	r3, [r7, #8]
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	009b      	lsls	r3, r3, #2
 8018518:	441a      	add	r2, r3
 801851a:	8bfb      	ldrh	r3, [r7, #30]
 801851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801852c:	b29b      	uxth	r3, r3
 801852e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8018530:	88fb      	ldrh	r3, [r7, #6]
 8018532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018536:	2b00      	cmp	r3, #0
 8018538:	d11f      	bne.n	801857a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	461a      	mov	r2, r3
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	009b      	lsls	r3, r3, #2
 8018546:	4413      	add	r3, r2
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	b29b      	uxth	r3, r3
 801854c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018554:	83bb      	strh	r3, [r7, #28]
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	461a      	mov	r2, r3
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	009b      	lsls	r3, r3, #2
 8018562:	441a      	add	r2, r3
 8018564:	8bbb      	ldrh	r3, [r7, #28]
 8018566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801856a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801856e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8018576:	b29b      	uxth	r3, r3
 8018578:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 801857a:	8b7b      	ldrh	r3, [r7, #26]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d008      	beq.n	8018592 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	6818      	ldr	r0, [r3, #0]
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	6959      	ldr	r1, [r3, #20]
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	895a      	ldrh	r2, [r3, #10]
 801858c:	8b7b      	ldrh	r3, [r7, #26]
 801858e:	f003 feda 	bl	801c346 <USB_ReadPMA>
    }
  }

  return count;
 8018592:	8b7b      	ldrh	r3, [r7, #26]
}
 8018594:	4618      	mov	r0, r3
 8018596:	3720      	adds	r7, #32
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}

0801859c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b092      	sub	sp, #72	; 0x48
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	4613      	mov	r3, r2
 80185a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80185aa:	88fb      	ldrh	r3, [r7, #6]
 80185ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f000 8132 	beq.w	801881a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80185be:	b29b      	uxth	r3, r3
 80185c0:	461a      	mov	r2, r3
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	00db      	lsls	r3, r3, #3
 80185c8:	4413      	add	r3, r2
 80185ca:	3302      	adds	r3, #2
 80185cc:	005b      	lsls	r3, r3, #1
 80185ce:	68fa      	ldr	r2, [r7, #12]
 80185d0:	6812      	ldr	r2, [r2, #0]
 80185d2:	4413      	add	r3, r2
 80185d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80185d8:	881b      	ldrh	r3, [r3, #0]
 80185da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80185de:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	699a      	ldr	r2, [r3, #24]
 80185e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d906      	bls.n	80185f8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80185ea:	68bb      	ldr	r3, [r7, #8]
 80185ec:	699a      	ldr	r2, [r3, #24]
 80185ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80185f0:	1ad2      	subs	r2, r2, r3
 80185f2:	68bb      	ldr	r3, [r7, #8]
 80185f4:	619a      	str	r2, [r3, #24]
 80185f6:	e002      	b.n	80185fe <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	2200      	movs	r2, #0
 80185fc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	699b      	ldr	r3, [r3, #24]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d12c      	bne.n	8018660 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	4619      	mov	r1, r3
 801860c:	68f8      	ldr	r0, [r7, #12]
 801860e:	f005 f8fc 	bl	801d80a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8018612:	88fb      	ldrh	r3, [r7, #6]
 8018614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 822f 	beq.w	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	461a      	mov	r2, r3
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	009b      	lsls	r3, r3, #2
 801862a:	4413      	add	r3, r2
 801862c:	881b      	ldrh	r3, [r3, #0]
 801862e:	b29b      	uxth	r3, r3
 8018630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018638:	827b      	strh	r3, [r7, #18]
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	461a      	mov	r2, r3
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	009b      	lsls	r3, r3, #2
 8018646:	441a      	add	r2, r3
 8018648:	8a7b      	ldrh	r3, [r7, #18]
 801864a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801864e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8018656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801865a:	b29b      	uxth	r3, r3
 801865c:	8013      	strh	r3, [r2, #0]
 801865e:	e20d      	b.n	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8018660:	88fb      	ldrh	r3, [r7, #6]
 8018662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018666:	2b00      	cmp	r3, #0
 8018668:	d01f      	beq.n	80186aa <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	461a      	mov	r2, r3
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	009b      	lsls	r3, r3, #2
 8018676:	4413      	add	r3, r2
 8018678:	881b      	ldrh	r3, [r3, #0]
 801867a:	b29b      	uxth	r3, r3
 801867c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018684:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	461a      	mov	r2, r3
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	441a      	add	r2, r3
 8018694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801869a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801869e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80186a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80186b0:	2b01      	cmp	r3, #1
 80186b2:	f040 81e3 	bne.w	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	695a      	ldr	r2, [r3, #20]
 80186ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80186bc:	441a      	add	r2, r3
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	69da      	ldr	r2, [r3, #28]
 80186c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80186c8:	441a      	add	r2, r3
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	6a1a      	ldr	r2, [r3, #32]
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	691b      	ldr	r3, [r3, #16]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d309      	bcc.n	80186ee <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	691b      	ldr	r3, [r3, #16]
 80186de:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	6a1a      	ldr	r2, [r3, #32]
 80186e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186e6:	1ad2      	subs	r2, r2, r3
 80186e8:	68bb      	ldr	r3, [r7, #8]
 80186ea:	621a      	str	r2, [r3, #32]
 80186ec:	e014      	b.n	8018718 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	6a1b      	ldr	r3, [r3, #32]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d106      	bne.n	8018704 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80186f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80186f8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80186fa:	68bb      	ldr	r3, [r7, #8]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8018702:	e009      	b.n	8018718 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	2200      	movs	r2, #0
 8018708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	6a1b      	ldr	r3, [r3, #32]
 8018710:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	2200      	movs	r2, #0
 8018716:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	785b      	ldrb	r3, [r3, #1]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d155      	bne.n	80187cc <HAL_PCD_EP_DB_Transmit+0x230>
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	61bb      	str	r3, [r7, #24]
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801872e:	b29b      	uxth	r3, r3
 8018730:	461a      	mov	r2, r3
 8018732:	69bb      	ldr	r3, [r7, #24]
 8018734:	4413      	add	r3, r2
 8018736:	61bb      	str	r3, [r7, #24]
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	011a      	lsls	r2, r3, #4
 801873e:	69bb      	ldr	r3, [r7, #24]
 8018740:	4413      	add	r3, r2
 8018742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8018746:	617b      	str	r3, [r7, #20]
 8018748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874a:	2b00      	cmp	r3, #0
 801874c:	d112      	bne.n	8018774 <HAL_PCD_EP_DB_Transmit+0x1d8>
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	881b      	ldrh	r3, [r3, #0]
 8018752:	b29b      	uxth	r3, r3
 8018754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8018758:	b29a      	uxth	r2, r3
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	801a      	strh	r2, [r3, #0]
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	881b      	ldrh	r3, [r3, #0]
 8018762:	b29b      	uxth	r3, r3
 8018764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801876c:	b29a      	uxth	r2, r3
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	801a      	strh	r2, [r3, #0]
 8018772:	e047      	b.n	8018804 <HAL_PCD_EP_DB_Transmit+0x268>
 8018774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018776:	2b3e      	cmp	r3, #62	; 0x3e
 8018778:	d811      	bhi.n	801879e <HAL_PCD_EP_DB_Transmit+0x202>
 801877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801877c:	085b      	lsrs	r3, r3, #1
 801877e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	2b00      	cmp	r3, #0
 8018788:	d002      	beq.n	8018790 <HAL_PCD_EP_DB_Transmit+0x1f4>
 801878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878c:	3301      	adds	r3, #1
 801878e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018792:	b29b      	uxth	r3, r3
 8018794:	029b      	lsls	r3, r3, #10
 8018796:	b29a      	uxth	r2, r3
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	801a      	strh	r2, [r3, #0]
 801879c:	e032      	b.n	8018804 <HAL_PCD_EP_DB_Transmit+0x268>
 801879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187a0:	095b      	lsrs	r3, r3, #5
 80187a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80187a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187a6:	f003 031f 	and.w	r3, r3, #31
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d102      	bne.n	80187b4 <HAL_PCD_EP_DB_Transmit+0x218>
 80187ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b0:	3b01      	subs	r3, #1
 80187b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80187b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	029b      	lsls	r3, r3, #10
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80187c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80187c4:	b29a      	uxth	r2, r3
 80187c6:	697b      	ldr	r3, [r7, #20]
 80187c8:	801a      	strh	r2, [r3, #0]
 80187ca:	e01b      	b.n	8018804 <HAL_PCD_EP_DB_Transmit+0x268>
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	785b      	ldrb	r3, [r3, #1]
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	d117      	bne.n	8018804 <HAL_PCD_EP_DB_Transmit+0x268>
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	623b      	str	r3, [r7, #32]
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80187e2:	b29b      	uxth	r3, r3
 80187e4:	461a      	mov	r2, r3
 80187e6:	6a3b      	ldr	r3, [r7, #32]
 80187e8:	4413      	add	r3, r2
 80187ea:	623b      	str	r3, [r7, #32]
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	011a      	lsls	r2, r3, #4
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	4413      	add	r3, r2
 80187f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80187fa:	61fb      	str	r3, [r7, #28]
 80187fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187fe:	b29a      	uxth	r2, r3
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	6818      	ldr	r0, [r3, #0]
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	6959      	ldr	r1, [r3, #20]
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	891a      	ldrh	r2, [r3, #8]
 8018810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018812:	b29b      	uxth	r3, r3
 8018814:	f003 fd53 	bl	801c2be <USB_WritePMA>
 8018818:	e130      	b.n	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018822:	b29b      	uxth	r3, r3
 8018824:	461a      	mov	r2, r3
 8018826:	68bb      	ldr	r3, [r7, #8]
 8018828:	781b      	ldrb	r3, [r3, #0]
 801882a:	00db      	lsls	r3, r3, #3
 801882c:	4413      	add	r3, r2
 801882e:	3306      	adds	r3, #6
 8018830:	005b      	lsls	r3, r3, #1
 8018832:	68fa      	ldr	r2, [r7, #12]
 8018834:	6812      	ldr	r2, [r2, #0]
 8018836:	4413      	add	r3, r2
 8018838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801883c:	881b      	ldrh	r3, [r3, #0]
 801883e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018842:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	699a      	ldr	r2, [r3, #24]
 8018848:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801884a:	429a      	cmp	r2, r3
 801884c:	d306      	bcc.n	801885c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	699a      	ldr	r2, [r3, #24]
 8018852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018854:	1ad2      	subs	r2, r2, r3
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	619a      	str	r2, [r3, #24]
 801885a:	e002      	b.n	8018862 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	2200      	movs	r2, #0
 8018860:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	699b      	ldr	r3, [r3, #24]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d12c      	bne.n	80188c4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	781b      	ldrb	r3, [r3, #0]
 801886e:	4619      	mov	r1, r3
 8018870:	68f8      	ldr	r0, [r7, #12]
 8018872:	f004 ffca 	bl	801d80a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8018876:	88fb      	ldrh	r3, [r7, #6]
 8018878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801887c:	2b00      	cmp	r3, #0
 801887e:	f040 80fd 	bne.w	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	461a      	mov	r2, r3
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	009b      	lsls	r3, r3, #2
 801888e:	4413      	add	r3, r2
 8018890:	881b      	ldrh	r3, [r3, #0]
 8018892:	b29b      	uxth	r3, r3
 8018894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801889c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	461a      	mov	r2, r3
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	781b      	ldrb	r3, [r3, #0]
 80188a8:	009b      	lsls	r3, r3, #2
 80188aa:	441a      	add	r2, r3
 80188ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80188ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80188b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80188b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80188ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188be:	b29b      	uxth	r3, r3
 80188c0:	8013      	strh	r3, [r2, #0]
 80188c2:	e0db      	b.n	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80188c4:	88fb      	ldrh	r3, [r7, #6]
 80188c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d11f      	bne.n	801890e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	68bb      	ldr	r3, [r7, #8]
 80188d6:	781b      	ldrb	r3, [r3, #0]
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	4413      	add	r3, r2
 80188dc:	881b      	ldrh	r3, [r3, #0]
 80188de:	b29b      	uxth	r3, r3
 80188e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80188e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80188e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	461a      	mov	r2, r3
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	441a      	add	r2, r3
 80188f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80188fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80188fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8018906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801890a:	b29b      	uxth	r3, r3
 801890c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018914:	2b01      	cmp	r3, #1
 8018916:	f040 80b1 	bne.w	8018a7c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	695a      	ldr	r2, [r3, #20]
 801891e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018920:	441a      	add	r2, r3
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	69da      	ldr	r2, [r3, #28]
 801892a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801892c:	441a      	add	r2, r3
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	6a1a      	ldr	r2, [r3, #32]
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	691b      	ldr	r3, [r3, #16]
 801893a:	429a      	cmp	r2, r3
 801893c:	d309      	bcc.n	8018952 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 801893e:	68bb      	ldr	r3, [r7, #8]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	6a1a      	ldr	r2, [r3, #32]
 8018948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801894a:	1ad2      	subs	r2, r2, r3
 801894c:	68bb      	ldr	r3, [r7, #8]
 801894e:	621a      	str	r2, [r3, #32]
 8018950:	e014      	b.n	801897c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8018952:	68bb      	ldr	r3, [r7, #8]
 8018954:	6a1b      	ldr	r3, [r3, #32]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 801895a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801895c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	2200      	movs	r2, #0
 8018962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8018966:	e009      	b.n	801897c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	6a1b      	ldr	r3, [r3, #32]
 801896c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	2200      	movs	r2, #0
 8018972:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	2200      	movs	r2, #0
 8018978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	637b      	str	r3, [r7, #52]	; 0x34
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	785b      	ldrb	r3, [r3, #1]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d155      	bne.n	8018a36 <HAL_PCD_EP_DB_Transmit+0x49a>
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	647b      	str	r3, [r7, #68]	; 0x44
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018998:	b29b      	uxth	r3, r3
 801899a:	461a      	mov	r2, r3
 801899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801899e:	4413      	add	r3, r2
 80189a0:	647b      	str	r3, [r7, #68]	; 0x44
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	781b      	ldrb	r3, [r3, #0]
 80189a6:	011a      	lsls	r2, r3, #4
 80189a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189aa:	4413      	add	r3, r2
 80189ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80189b0:	643b      	str	r3, [r7, #64]	; 0x40
 80189b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d112      	bne.n	80189de <HAL_PCD_EP_DB_Transmit+0x442>
 80189b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189ba:	881b      	ldrh	r3, [r3, #0]
 80189bc:	b29b      	uxth	r3, r3
 80189be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80189c2:	b29a      	uxth	r2, r3
 80189c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189c6:	801a      	strh	r2, [r3, #0]
 80189c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80189d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80189d6:	b29a      	uxth	r2, r3
 80189d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189da:	801a      	strh	r2, [r3, #0]
 80189dc:	e044      	b.n	8018a68 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80189de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e0:	2b3e      	cmp	r3, #62	; 0x3e
 80189e2:	d811      	bhi.n	8018a08 <HAL_PCD_EP_DB_Transmit+0x46c>
 80189e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e6:	085b      	lsrs	r3, r3, #1
 80189e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80189ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ec:	f003 0301 	and.w	r3, r3, #1
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d002      	beq.n	80189fa <HAL_PCD_EP_DB_Transmit+0x45e>
 80189f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189f6:	3301      	adds	r3, #1
 80189f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80189fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	029b      	lsls	r3, r3, #10
 8018a00:	b29a      	uxth	r2, r3
 8018a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a04:	801a      	strh	r2, [r3, #0]
 8018a06:	e02f      	b.n	8018a68 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8018a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0a:	095b      	lsrs	r3, r3, #5
 8018a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a10:	f003 031f 	and.w	r3, r3, #31
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d102      	bne.n	8018a1e <HAL_PCD_EP_DB_Transmit+0x482>
 8018a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a1a:	3b01      	subs	r3, #1
 8018a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	029b      	lsls	r3, r3, #10
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018a2e:	b29a      	uxth	r2, r3
 8018a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a32:	801a      	strh	r2, [r3, #0]
 8018a34:	e018      	b.n	8018a68 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	785b      	ldrb	r3, [r3, #1]
 8018a3a:	2b01      	cmp	r3, #1
 8018a3c:	d114      	bne.n	8018a68 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	461a      	mov	r2, r3
 8018a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a4c:	4413      	add	r3, r2
 8018a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	011a      	lsls	r2, r3, #4
 8018a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a58:	4413      	add	r3, r2
 8018a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8018a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a66:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	6818      	ldr	r0, [r3, #0]
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	6959      	ldr	r1, [r3, #20]
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	895a      	ldrh	r2, [r3, #10]
 8018a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	f003 fc21 	bl	801c2be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	461a      	mov	r2, r3
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	781b      	ldrb	r3, [r3, #0]
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	4413      	add	r3, r2
 8018a8a:	881b      	ldrh	r3, [r3, #0]
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018a96:	823b      	strh	r3, [r7, #16]
 8018a98:	8a3b      	ldrh	r3, [r7, #16]
 8018a9a:	f083 0310 	eor.w	r3, r3, #16
 8018a9e:	823b      	strh	r3, [r7, #16]
 8018aa0:	8a3b      	ldrh	r3, [r7, #16]
 8018aa2:	f083 0320 	eor.w	r3, r3, #32
 8018aa6:	823b      	strh	r3, [r7, #16]
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	461a      	mov	r2, r3
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	781b      	ldrb	r3, [r3, #0]
 8018ab2:	009b      	lsls	r3, r3, #2
 8018ab4:	441a      	add	r2, r3
 8018ab6:	8a3b      	ldrh	r3, [r7, #16]
 8018ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8018acc:	2300      	movs	r3, #0
}
 8018ace:	4618      	mov	r0, r3
 8018ad0:	3748      	adds	r7, #72	; 0x48
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd80      	pop	{r7, pc}

08018ad6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8018ad6:	b480      	push	{r7}
 8018ad8:	b087      	sub	sp, #28
 8018ada:	af00      	add	r7, sp, #0
 8018adc:	60f8      	str	r0, [r7, #12]
 8018ade:	607b      	str	r3, [r7, #4]
 8018ae0:	460b      	mov	r3, r1
 8018ae2:	817b      	strh	r3, [r7, #10]
 8018ae4:	4613      	mov	r3, r2
 8018ae6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8018ae8:	897b      	ldrh	r3, [r7, #10]
 8018aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d00b      	beq.n	8018b0c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018af4:	897b      	ldrh	r3, [r7, #10]
 8018af6:	f003 0307 	and.w	r3, r3, #7
 8018afa:	1c5a      	adds	r2, r3, #1
 8018afc:	4613      	mov	r3, r2
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	4413      	add	r3, r2
 8018b02:	00db      	lsls	r3, r3, #3
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	4413      	add	r3, r2
 8018b08:	617b      	str	r3, [r7, #20]
 8018b0a:	e009      	b.n	8018b20 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018b0c:	897a      	ldrh	r2, [r7, #10]
 8018b0e:	4613      	mov	r3, r2
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	4413      	add	r3, r2
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018b1a:	68fa      	ldr	r2, [r7, #12]
 8018b1c:	4413      	add	r3, r2
 8018b1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8018b20:	893b      	ldrh	r3, [r7, #8]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d107      	bne.n	8018b36 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	b29a      	uxth	r2, r3
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	80da      	strh	r2, [r3, #6]
 8018b34:	e00b      	b.n	8018b4e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	2201      	movs	r2, #1
 8018b3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	b29a      	uxth	r2, r3
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	0c1b      	lsrs	r3, r3, #16
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	371c      	adds	r7, #28
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bc80      	pop	{r7}
 8018b58:	4770      	bx	lr
	...

08018b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b086      	sub	sp, #24
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d101      	bne.n	8018b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	e26c      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	f003 0301 	and.w	r3, r3, #1
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	f000 8087 	beq.w	8018c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018b7c:	4b92      	ldr	r3, [pc, #584]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018b7e:	685b      	ldr	r3, [r3, #4]
 8018b80:	f003 030c 	and.w	r3, r3, #12
 8018b84:	2b04      	cmp	r3, #4
 8018b86:	d00c      	beq.n	8018ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8018b88:	4b8f      	ldr	r3, [pc, #572]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018b8a:	685b      	ldr	r3, [r3, #4]
 8018b8c:	f003 030c 	and.w	r3, r3, #12
 8018b90:	2b08      	cmp	r3, #8
 8018b92:	d112      	bne.n	8018bba <HAL_RCC_OscConfig+0x5e>
 8018b94:	4b8c      	ldr	r3, [pc, #560]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ba0:	d10b      	bne.n	8018bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018ba2:	4b89      	ldr	r3, [pc, #548]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d06c      	beq.n	8018c88 <HAL_RCC_OscConfig+0x12c>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d168      	bne.n	8018c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	e246      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	685b      	ldr	r3, [r3, #4]
 8018bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018bc2:	d106      	bne.n	8018bd2 <HAL_RCC_OscConfig+0x76>
 8018bc4:	4b80      	ldr	r3, [pc, #512]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4a7f      	ldr	r2, [pc, #508]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018bce:	6013      	str	r3, [r2, #0]
 8018bd0:	e02e      	b.n	8018c30 <HAL_RCC_OscConfig+0xd4>
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d10c      	bne.n	8018bf4 <HAL_RCC_OscConfig+0x98>
 8018bda:	4b7b      	ldr	r3, [pc, #492]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	4a7a      	ldr	r2, [pc, #488]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018be4:	6013      	str	r3, [r2, #0]
 8018be6:	4b78      	ldr	r3, [pc, #480]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	4a77      	ldr	r2, [pc, #476]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018bf0:	6013      	str	r3, [r2, #0]
 8018bf2:	e01d      	b.n	8018c30 <HAL_RCC_OscConfig+0xd4>
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8018bfc:	d10c      	bne.n	8018c18 <HAL_RCC_OscConfig+0xbc>
 8018bfe:	4b72      	ldr	r3, [pc, #456]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	4a71      	ldr	r2, [pc, #452]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018c08:	6013      	str	r3, [r2, #0]
 8018c0a:	4b6f      	ldr	r3, [pc, #444]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	4a6e      	ldr	r2, [pc, #440]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018c14:	6013      	str	r3, [r2, #0]
 8018c16:	e00b      	b.n	8018c30 <HAL_RCC_OscConfig+0xd4>
 8018c18:	4b6b      	ldr	r3, [pc, #428]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	4a6a      	ldr	r2, [pc, #424]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018c22:	6013      	str	r3, [r2, #0]
 8018c24:	4b68      	ldr	r3, [pc, #416]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	4a67      	ldr	r2, [pc, #412]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	685b      	ldr	r3, [r3, #4]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d013      	beq.n	8018c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c38:	f7fc fa60 	bl	80150fc <HAL_GetTick>
 8018c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018c3e:	e008      	b.n	8018c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018c40:	f7fc fa5c 	bl	80150fc <HAL_GetTick>
 8018c44:	4602      	mov	r2, r0
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	1ad3      	subs	r3, r2, r3
 8018c4a:	2b64      	cmp	r3, #100	; 0x64
 8018c4c:	d901      	bls.n	8018c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8018c4e:	2303      	movs	r3, #3
 8018c50:	e1fa      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018c52:	4b5d      	ldr	r3, [pc, #372]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d0f0      	beq.n	8018c40 <HAL_RCC_OscConfig+0xe4>
 8018c5e:	e014      	b.n	8018c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c60:	f7fc fa4c 	bl	80150fc <HAL_GetTick>
 8018c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018c66:	e008      	b.n	8018c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018c68:	f7fc fa48 	bl	80150fc <HAL_GetTick>
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	693b      	ldr	r3, [r7, #16]
 8018c70:	1ad3      	subs	r3, r2, r3
 8018c72:	2b64      	cmp	r3, #100	; 0x64
 8018c74:	d901      	bls.n	8018c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8018c76:	2303      	movs	r3, #3
 8018c78:	e1e6      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018c7a:	4b53      	ldr	r3, [pc, #332]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d1f0      	bne.n	8018c68 <HAL_RCC_OscConfig+0x10c>
 8018c86:	e000      	b.n	8018c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	f003 0302 	and.w	r3, r3, #2
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d063      	beq.n	8018d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018c96:	4b4c      	ldr	r3, [pc, #304]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	f003 030c 	and.w	r3, r3, #12
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d00b      	beq.n	8018cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8018ca2:	4b49      	ldr	r3, [pc, #292]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	f003 030c 	and.w	r3, r3, #12
 8018caa:	2b08      	cmp	r3, #8
 8018cac:	d11c      	bne.n	8018ce8 <HAL_RCC_OscConfig+0x18c>
 8018cae:	4b46      	ldr	r3, [pc, #280]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d116      	bne.n	8018ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018cba:	4b43      	ldr	r3, [pc, #268]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	f003 0302 	and.w	r3, r3, #2
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d005      	beq.n	8018cd2 <HAL_RCC_OscConfig+0x176>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	691b      	ldr	r3, [r3, #16]
 8018cca:	2b01      	cmp	r3, #1
 8018ccc:	d001      	beq.n	8018cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8018cce:	2301      	movs	r3, #1
 8018cd0:	e1ba      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018cd2:	4b3d      	ldr	r3, [pc, #244]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	695b      	ldr	r3, [r3, #20]
 8018cde:	00db      	lsls	r3, r3, #3
 8018ce0:	4939      	ldr	r1, [pc, #228]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018ce2:	4313      	orrs	r3, r2
 8018ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018ce6:	e03a      	b.n	8018d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	691b      	ldr	r3, [r3, #16]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d020      	beq.n	8018d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018cf0:	4b36      	ldr	r3, [pc, #216]	; (8018dcc <HAL_RCC_OscConfig+0x270>)
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018cf6:	f7fc fa01 	bl	80150fc <HAL_GetTick>
 8018cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018cfc:	e008      	b.n	8018d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018cfe:	f7fc f9fd 	bl	80150fc <HAL_GetTick>
 8018d02:	4602      	mov	r2, r0
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	1ad3      	subs	r3, r2, r3
 8018d08:	2b02      	cmp	r3, #2
 8018d0a:	d901      	bls.n	8018d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8018d0c:	2303      	movs	r3, #3
 8018d0e:	e19b      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018d10:	4b2d      	ldr	r3, [pc, #180]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	f003 0302 	and.w	r3, r3, #2
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d0f0      	beq.n	8018cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018d1c:	4b2a      	ldr	r3, [pc, #168]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	695b      	ldr	r3, [r3, #20]
 8018d28:	00db      	lsls	r3, r3, #3
 8018d2a:	4927      	ldr	r1, [pc, #156]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018d2c:	4313      	orrs	r3, r2
 8018d2e:	600b      	str	r3, [r1, #0]
 8018d30:	e015      	b.n	8018d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018d32:	4b26      	ldr	r3, [pc, #152]	; (8018dcc <HAL_RCC_OscConfig+0x270>)
 8018d34:	2200      	movs	r2, #0
 8018d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018d38:	f7fc f9e0 	bl	80150fc <HAL_GetTick>
 8018d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018d3e:	e008      	b.n	8018d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018d40:	f7fc f9dc 	bl	80150fc <HAL_GetTick>
 8018d44:	4602      	mov	r2, r0
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	1ad3      	subs	r3, r2, r3
 8018d4a:	2b02      	cmp	r3, #2
 8018d4c:	d901      	bls.n	8018d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8018d4e:	2303      	movs	r3, #3
 8018d50:	e17a      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018d52:	4b1d      	ldr	r3, [pc, #116]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	f003 0302 	and.w	r3, r3, #2
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d1f0      	bne.n	8018d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f003 0308 	and.w	r3, r3, #8
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d03a      	beq.n	8018de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	699b      	ldr	r3, [r3, #24]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d019      	beq.n	8018da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018d72:	4b17      	ldr	r3, [pc, #92]	; (8018dd0 <HAL_RCC_OscConfig+0x274>)
 8018d74:	2201      	movs	r2, #1
 8018d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018d78:	f7fc f9c0 	bl	80150fc <HAL_GetTick>
 8018d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018d7e:	e008      	b.n	8018d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018d80:	f7fc f9bc 	bl	80150fc <HAL_GetTick>
 8018d84:	4602      	mov	r2, r0
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	1ad3      	subs	r3, r2, r3
 8018d8a:	2b02      	cmp	r3, #2
 8018d8c:	d901      	bls.n	8018d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8018d8e:	2303      	movs	r3, #3
 8018d90:	e15a      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018d92:	4b0d      	ldr	r3, [pc, #52]	; (8018dc8 <HAL_RCC_OscConfig+0x26c>)
 8018d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d96:	f003 0302 	and.w	r3, r3, #2
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d0f0      	beq.n	8018d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8018d9e:	2001      	movs	r0, #1
 8018da0:	f000 fada 	bl	8019358 <RCC_Delay>
 8018da4:	e01c      	b.n	8018de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018da6:	4b0a      	ldr	r3, [pc, #40]	; (8018dd0 <HAL_RCC_OscConfig+0x274>)
 8018da8:	2200      	movs	r2, #0
 8018daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018dac:	f7fc f9a6 	bl	80150fc <HAL_GetTick>
 8018db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018db2:	e00f      	b.n	8018dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018db4:	f7fc f9a2 	bl	80150fc <HAL_GetTick>
 8018db8:	4602      	mov	r2, r0
 8018dba:	693b      	ldr	r3, [r7, #16]
 8018dbc:	1ad3      	subs	r3, r2, r3
 8018dbe:	2b02      	cmp	r3, #2
 8018dc0:	d908      	bls.n	8018dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8018dc2:	2303      	movs	r3, #3
 8018dc4:	e140      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
 8018dc6:	bf00      	nop
 8018dc8:	40021000 	.word	0x40021000
 8018dcc:	42420000 	.word	0x42420000
 8018dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018dd4:	4b9e      	ldr	r3, [pc, #632]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd8:	f003 0302 	and.w	r3, r3, #2
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d1e9      	bne.n	8018db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f003 0304 	and.w	r3, r3, #4
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	f000 80a6 	beq.w	8018f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018dee:	2300      	movs	r3, #0
 8018df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018df2:	4b97      	ldr	r3, [pc, #604]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018df4:	69db      	ldr	r3, [r3, #28]
 8018df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d10d      	bne.n	8018e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018dfe:	4b94      	ldr	r3, [pc, #592]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e00:	69db      	ldr	r3, [r3, #28]
 8018e02:	4a93      	ldr	r2, [pc, #588]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018e08:	61d3      	str	r3, [r2, #28]
 8018e0a:	4b91      	ldr	r3, [pc, #580]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e0c:	69db      	ldr	r3, [r3, #28]
 8018e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018e12:	60bb      	str	r3, [r7, #8]
 8018e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018e16:	2301      	movs	r3, #1
 8018e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018e1a:	4b8e      	ldr	r3, [pc, #568]	; (8019054 <HAL_RCC_OscConfig+0x4f8>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d118      	bne.n	8018e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018e26:	4b8b      	ldr	r3, [pc, #556]	; (8019054 <HAL_RCC_OscConfig+0x4f8>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4a8a      	ldr	r2, [pc, #552]	; (8019054 <HAL_RCC_OscConfig+0x4f8>)
 8018e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018e32:	f7fc f963 	bl	80150fc <HAL_GetTick>
 8018e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018e38:	e008      	b.n	8018e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018e3a:	f7fc f95f 	bl	80150fc <HAL_GetTick>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	693b      	ldr	r3, [r7, #16]
 8018e42:	1ad3      	subs	r3, r2, r3
 8018e44:	2b64      	cmp	r3, #100	; 0x64
 8018e46:	d901      	bls.n	8018e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8018e48:	2303      	movs	r3, #3
 8018e4a:	e0fd      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018e4c:	4b81      	ldr	r3, [pc, #516]	; (8019054 <HAL_RCC_OscConfig+0x4f8>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d0f0      	beq.n	8018e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	2b01      	cmp	r3, #1
 8018e5e:	d106      	bne.n	8018e6e <HAL_RCC_OscConfig+0x312>
 8018e60:	4b7b      	ldr	r3, [pc, #492]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e62:	6a1b      	ldr	r3, [r3, #32]
 8018e64:	4a7a      	ldr	r2, [pc, #488]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e66:	f043 0301 	orr.w	r3, r3, #1
 8018e6a:	6213      	str	r3, [r2, #32]
 8018e6c:	e02d      	b.n	8018eca <HAL_RCC_OscConfig+0x36e>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	68db      	ldr	r3, [r3, #12]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d10c      	bne.n	8018e90 <HAL_RCC_OscConfig+0x334>
 8018e76:	4b76      	ldr	r3, [pc, #472]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e78:	6a1b      	ldr	r3, [r3, #32]
 8018e7a:	4a75      	ldr	r2, [pc, #468]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e7c:	f023 0301 	bic.w	r3, r3, #1
 8018e80:	6213      	str	r3, [r2, #32]
 8018e82:	4b73      	ldr	r3, [pc, #460]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e84:	6a1b      	ldr	r3, [r3, #32]
 8018e86:	4a72      	ldr	r2, [pc, #456]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e88:	f023 0304 	bic.w	r3, r3, #4
 8018e8c:	6213      	str	r3, [r2, #32]
 8018e8e:	e01c      	b.n	8018eca <HAL_RCC_OscConfig+0x36e>
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	68db      	ldr	r3, [r3, #12]
 8018e94:	2b05      	cmp	r3, #5
 8018e96:	d10c      	bne.n	8018eb2 <HAL_RCC_OscConfig+0x356>
 8018e98:	4b6d      	ldr	r3, [pc, #436]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e9a:	6a1b      	ldr	r3, [r3, #32]
 8018e9c:	4a6c      	ldr	r2, [pc, #432]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018e9e:	f043 0304 	orr.w	r3, r3, #4
 8018ea2:	6213      	str	r3, [r2, #32]
 8018ea4:	4b6a      	ldr	r3, [pc, #424]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018ea6:	6a1b      	ldr	r3, [r3, #32]
 8018ea8:	4a69      	ldr	r2, [pc, #420]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018eaa:	f043 0301 	orr.w	r3, r3, #1
 8018eae:	6213      	str	r3, [r2, #32]
 8018eb0:	e00b      	b.n	8018eca <HAL_RCC_OscConfig+0x36e>
 8018eb2:	4b67      	ldr	r3, [pc, #412]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018eb4:	6a1b      	ldr	r3, [r3, #32]
 8018eb6:	4a66      	ldr	r2, [pc, #408]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018eb8:	f023 0301 	bic.w	r3, r3, #1
 8018ebc:	6213      	str	r3, [r2, #32]
 8018ebe:	4b64      	ldr	r3, [pc, #400]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018ec0:	6a1b      	ldr	r3, [r3, #32]
 8018ec2:	4a63      	ldr	r2, [pc, #396]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018ec4:	f023 0304 	bic.w	r3, r3, #4
 8018ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	68db      	ldr	r3, [r3, #12]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d015      	beq.n	8018efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018ed2:	f7fc f913 	bl	80150fc <HAL_GetTick>
 8018ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018ed8:	e00a      	b.n	8018ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018eda:	f7fc f90f 	bl	80150fc <HAL_GetTick>
 8018ede:	4602      	mov	r2, r0
 8018ee0:	693b      	ldr	r3, [r7, #16]
 8018ee2:	1ad3      	subs	r3, r2, r3
 8018ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8018ee8:	4293      	cmp	r3, r2
 8018eea:	d901      	bls.n	8018ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8018eec:	2303      	movs	r3, #3
 8018eee:	e0ab      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018ef0:	4b57      	ldr	r3, [pc, #348]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018ef2:	6a1b      	ldr	r3, [r3, #32]
 8018ef4:	f003 0302 	and.w	r3, r3, #2
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d0ee      	beq.n	8018eda <HAL_RCC_OscConfig+0x37e>
 8018efc:	e014      	b.n	8018f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018efe:	f7fc f8fd 	bl	80150fc <HAL_GetTick>
 8018f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018f04:	e00a      	b.n	8018f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018f06:	f7fc f8f9 	bl	80150fc <HAL_GetTick>
 8018f0a:	4602      	mov	r2, r0
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	1ad3      	subs	r3, r2, r3
 8018f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8018f14:	4293      	cmp	r3, r2
 8018f16:	d901      	bls.n	8018f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8018f18:	2303      	movs	r3, #3
 8018f1a:	e095      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018f1c:	4b4c      	ldr	r3, [pc, #304]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f1e:	6a1b      	ldr	r3, [r3, #32]
 8018f20:	f003 0302 	and.w	r3, r3, #2
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d1ee      	bne.n	8018f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8018f28:	7dfb      	ldrb	r3, [r7, #23]
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d105      	bne.n	8018f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018f2e:	4b48      	ldr	r3, [pc, #288]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f30:	69db      	ldr	r3, [r3, #28]
 8018f32:	4a47      	ldr	r2, [pc, #284]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	69db      	ldr	r3, [r3, #28]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	f000 8081 	beq.w	8019046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018f44:	4b42      	ldr	r3, [pc, #264]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	f003 030c 	and.w	r3, r3, #12
 8018f4c:	2b08      	cmp	r3, #8
 8018f4e:	d061      	beq.n	8019014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	69db      	ldr	r3, [r3, #28]
 8018f54:	2b02      	cmp	r3, #2
 8018f56:	d146      	bne.n	8018fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018f58:	4b3f      	ldr	r3, [pc, #252]	; (8019058 <HAL_RCC_OscConfig+0x4fc>)
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018f5e:	f7fc f8cd 	bl	80150fc <HAL_GetTick>
 8018f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8018f64:	e008      	b.n	8018f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018f66:	f7fc f8c9 	bl	80150fc <HAL_GetTick>
 8018f6a:	4602      	mov	r2, r0
 8018f6c:	693b      	ldr	r3, [r7, #16]
 8018f6e:	1ad3      	subs	r3, r2, r3
 8018f70:	2b02      	cmp	r3, #2
 8018f72:	d901      	bls.n	8018f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8018f74:	2303      	movs	r3, #3
 8018f76:	e067      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8018f78:	4b35      	ldr	r3, [pc, #212]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1f0      	bne.n	8018f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6a1b      	ldr	r3, [r3, #32]
 8018f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f8c:	d108      	bne.n	8018fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8018f8e:	4b30      	ldr	r3, [pc, #192]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f90:	685b      	ldr	r3, [r3, #4]
 8018f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	689b      	ldr	r3, [r3, #8]
 8018f9a:	492d      	ldr	r1, [pc, #180]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018f9c:	4313      	orrs	r3, r2
 8018f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018fa0:	4b2b      	ldr	r3, [pc, #172]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018fa2:	685b      	ldr	r3, [r3, #4]
 8018fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6a19      	ldr	r1, [r3, #32]
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb0:	430b      	orrs	r3, r1
 8018fb2:	4927      	ldr	r1, [pc, #156]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018fb4:	4313      	orrs	r3, r2
 8018fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018fb8:	4b27      	ldr	r3, [pc, #156]	; (8019058 <HAL_RCC_OscConfig+0x4fc>)
 8018fba:	2201      	movs	r2, #1
 8018fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018fbe:	f7fc f89d 	bl	80150fc <HAL_GetTick>
 8018fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8018fc4:	e008      	b.n	8018fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018fc6:	f7fc f899 	bl	80150fc <HAL_GetTick>
 8018fca:	4602      	mov	r2, r0
 8018fcc:	693b      	ldr	r3, [r7, #16]
 8018fce:	1ad3      	subs	r3, r2, r3
 8018fd0:	2b02      	cmp	r3, #2
 8018fd2:	d901      	bls.n	8018fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8018fd4:	2303      	movs	r3, #3
 8018fd6:	e037      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8018fd8:	4b1d      	ldr	r3, [pc, #116]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d0f0      	beq.n	8018fc6 <HAL_RCC_OscConfig+0x46a>
 8018fe4:	e02f      	b.n	8019046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018fe6:	4b1c      	ldr	r3, [pc, #112]	; (8019058 <HAL_RCC_OscConfig+0x4fc>)
 8018fe8:	2200      	movs	r2, #0
 8018fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018fec:	f7fc f886 	bl	80150fc <HAL_GetTick>
 8018ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8018ff2:	e008      	b.n	8019006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018ff4:	f7fc f882 	bl	80150fc <HAL_GetTick>
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	1ad3      	subs	r3, r2, r3
 8018ffe:	2b02      	cmp	r3, #2
 8019000:	d901      	bls.n	8019006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8019002:	2303      	movs	r3, #3
 8019004:	e020      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8019006:	4b12      	ldr	r3, [pc, #72]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801900e:	2b00      	cmp	r3, #0
 8019010:	d1f0      	bne.n	8018ff4 <HAL_RCC_OscConfig+0x498>
 8019012:	e018      	b.n	8019046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	69db      	ldr	r3, [r3, #28]
 8019018:	2b01      	cmp	r3, #1
 801901a:	d101      	bne.n	8019020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 801901c:	2301      	movs	r3, #1
 801901e:	e013      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8019020:	4b0b      	ldr	r3, [pc, #44]	; (8019050 <HAL_RCC_OscConfig+0x4f4>)
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	6a1b      	ldr	r3, [r3, #32]
 8019030:	429a      	cmp	r2, r3
 8019032:	d106      	bne.n	8019042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801903e:	429a      	cmp	r2, r3
 8019040:	d001      	beq.n	8019046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8019042:	2301      	movs	r3, #1
 8019044:	e000      	b.n	8019048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8019046:	2300      	movs	r3, #0
}
 8019048:	4618      	mov	r0, r3
 801904a:	3718      	adds	r7, #24
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}
 8019050:	40021000 	.word	0x40021000
 8019054:	40007000 	.word	0x40007000
 8019058:	42420060 	.word	0x42420060

0801905c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d101      	bne.n	8019070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801906c:	2301      	movs	r3, #1
 801906e:	e0d0      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8019070:	4b6a      	ldr	r3, [pc, #424]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	f003 0307 	and.w	r3, r3, #7
 8019078:	683a      	ldr	r2, [r7, #0]
 801907a:	429a      	cmp	r2, r3
 801907c:	d910      	bls.n	80190a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801907e:	4b67      	ldr	r3, [pc, #412]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	f023 0207 	bic.w	r2, r3, #7
 8019086:	4965      	ldr	r1, [pc, #404]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 8019088:	683b      	ldr	r3, [r7, #0]
 801908a:	4313      	orrs	r3, r2
 801908c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801908e:	4b63      	ldr	r3, [pc, #396]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f003 0307 	and.w	r3, r3, #7
 8019096:	683a      	ldr	r2, [r7, #0]
 8019098:	429a      	cmp	r2, r3
 801909a:	d001      	beq.n	80190a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 801909c:	2301      	movs	r3, #1
 801909e:	e0b8      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	f003 0302 	and.w	r3, r3, #2
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d020      	beq.n	80190ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	f003 0304 	and.w	r3, r3, #4
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d005      	beq.n	80190c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80190b8:	4b59      	ldr	r3, [pc, #356]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190ba:	685b      	ldr	r3, [r3, #4]
 80190bc:	4a58      	ldr	r2, [pc, #352]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80190c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	f003 0308 	and.w	r3, r3, #8
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d005      	beq.n	80190dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80190d0:	4b53      	ldr	r3, [pc, #332]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	4a52      	ldr	r2, [pc, #328]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80190da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80190dc:	4b50      	ldr	r3, [pc, #320]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	689b      	ldr	r3, [r3, #8]
 80190e8:	494d      	ldr	r1, [pc, #308]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80190ea:	4313      	orrs	r3, r2
 80190ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	f003 0301 	and.w	r3, r3, #1
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d040      	beq.n	801917c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	685b      	ldr	r3, [r3, #4]
 80190fe:	2b01      	cmp	r3, #1
 8019100:	d107      	bne.n	8019112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019102:	4b47      	ldr	r3, [pc, #284]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801910a:	2b00      	cmp	r3, #0
 801910c:	d115      	bne.n	801913a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801910e:	2301      	movs	r3, #1
 8019110:	e07f      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	685b      	ldr	r3, [r3, #4]
 8019116:	2b02      	cmp	r3, #2
 8019118:	d107      	bne.n	801912a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801911a:	4b41      	ldr	r3, [pc, #260]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019122:	2b00      	cmp	r3, #0
 8019124:	d109      	bne.n	801913a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019126:	2301      	movs	r3, #1
 8019128:	e073      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801912a:	4b3d      	ldr	r3, [pc, #244]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f003 0302 	and.w	r3, r3, #2
 8019132:	2b00      	cmp	r3, #0
 8019134:	d101      	bne.n	801913a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019136:	2301      	movs	r3, #1
 8019138:	e06b      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801913a:	4b39      	ldr	r3, [pc, #228]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	f023 0203 	bic.w	r2, r3, #3
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	4936      	ldr	r1, [pc, #216]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 8019148:	4313      	orrs	r3, r2
 801914a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801914c:	f7fb ffd6 	bl	80150fc <HAL_GetTick>
 8019150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019152:	e00a      	b.n	801916a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019154:	f7fb ffd2 	bl	80150fc <HAL_GetTick>
 8019158:	4602      	mov	r2, r0
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	1ad3      	subs	r3, r2, r3
 801915e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019162:	4293      	cmp	r3, r2
 8019164:	d901      	bls.n	801916a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8019166:	2303      	movs	r3, #3
 8019168:	e053      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801916a:	4b2d      	ldr	r3, [pc, #180]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	f003 020c 	and.w	r2, r3, #12
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	685b      	ldr	r3, [r3, #4]
 8019176:	009b      	lsls	r3, r3, #2
 8019178:	429a      	cmp	r2, r3
 801917a:	d1eb      	bne.n	8019154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801917c:	4b27      	ldr	r3, [pc, #156]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f003 0307 	and.w	r3, r3, #7
 8019184:	683a      	ldr	r2, [r7, #0]
 8019186:	429a      	cmp	r2, r3
 8019188:	d210      	bcs.n	80191ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801918a:	4b24      	ldr	r3, [pc, #144]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	f023 0207 	bic.w	r2, r3, #7
 8019192:	4922      	ldr	r1, [pc, #136]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	4313      	orrs	r3, r2
 8019198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801919a:	4b20      	ldr	r3, [pc, #128]	; (801921c <HAL_RCC_ClockConfig+0x1c0>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	f003 0307 	and.w	r3, r3, #7
 80191a2:	683a      	ldr	r2, [r7, #0]
 80191a4:	429a      	cmp	r2, r3
 80191a6:	d001      	beq.n	80191ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80191a8:	2301      	movs	r3, #1
 80191aa:	e032      	b.n	8019212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f003 0304 	and.w	r3, r3, #4
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d008      	beq.n	80191ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80191b8:	4b19      	ldr	r3, [pc, #100]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	4916      	ldr	r1, [pc, #88]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80191c6:	4313      	orrs	r3, r2
 80191c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	f003 0308 	and.w	r3, r3, #8
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d009      	beq.n	80191ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80191d6:	4b12      	ldr	r3, [pc, #72]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80191d8:	685b      	ldr	r3, [r3, #4]
 80191da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	691b      	ldr	r3, [r3, #16]
 80191e2:	00db      	lsls	r3, r3, #3
 80191e4:	490e      	ldr	r1, [pc, #56]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80191e6:	4313      	orrs	r3, r2
 80191e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80191ea:	f000 f821 	bl	8019230 <HAL_RCC_GetSysClockFreq>
 80191ee:	4601      	mov	r1, r0
 80191f0:	4b0b      	ldr	r3, [pc, #44]	; (8019220 <HAL_RCC_ClockConfig+0x1c4>)
 80191f2:	685b      	ldr	r3, [r3, #4]
 80191f4:	091b      	lsrs	r3, r3, #4
 80191f6:	f003 030f 	and.w	r3, r3, #15
 80191fa:	4a0a      	ldr	r2, [pc, #40]	; (8019224 <HAL_RCC_ClockConfig+0x1c8>)
 80191fc:	5cd3      	ldrb	r3, [r2, r3]
 80191fe:	fa21 f303 	lsr.w	r3, r1, r3
 8019202:	4a09      	ldr	r2, [pc, #36]	; (8019228 <HAL_RCC_ClockConfig+0x1cc>)
 8019204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8019206:	4b09      	ldr	r3, [pc, #36]	; (801922c <HAL_RCC_ClockConfig+0x1d0>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	4618      	mov	r0, r3
 801920c:	f7fb ff34 	bl	8015078 <HAL_InitTick>

  return HAL_OK;
 8019210:	2300      	movs	r3, #0
}
 8019212:	4618      	mov	r0, r3
 8019214:	3710      	adds	r7, #16
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	40022000 	.word	0x40022000
 8019220:	40021000 	.word	0x40021000
 8019224:	080204dc 	.word	0x080204dc
 8019228:	2000037c 	.word	0x2000037c
 801922c:	20000380 	.word	0x20000380

08019230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019230:	b490      	push	{r4, r7}
 8019232:	b08a      	sub	sp, #40	; 0x28
 8019234:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8019236:	4b2a      	ldr	r3, [pc, #168]	; (80192e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8019238:	1d3c      	adds	r4, r7, #4
 801923a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801923c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8019240:	4b28      	ldr	r3, [pc, #160]	; (80192e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8019242:	881b      	ldrh	r3, [r3, #0]
 8019244:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8019246:	2300      	movs	r3, #0
 8019248:	61fb      	str	r3, [r7, #28]
 801924a:	2300      	movs	r3, #0
 801924c:	61bb      	str	r3, [r7, #24]
 801924e:	2300      	movs	r3, #0
 8019250:	627b      	str	r3, [r7, #36]	; 0x24
 8019252:	2300      	movs	r3, #0
 8019254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8019256:	2300      	movs	r3, #0
 8019258:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 801925a:	4b23      	ldr	r3, [pc, #140]	; (80192e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8019260:	69fb      	ldr	r3, [r7, #28]
 8019262:	f003 030c 	and.w	r3, r3, #12
 8019266:	2b04      	cmp	r3, #4
 8019268:	d002      	beq.n	8019270 <HAL_RCC_GetSysClockFreq+0x40>
 801926a:	2b08      	cmp	r3, #8
 801926c:	d003      	beq.n	8019276 <HAL_RCC_GetSysClockFreq+0x46>
 801926e:	e02d      	b.n	80192cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8019270:	4b1e      	ldr	r3, [pc, #120]	; (80192ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8019272:	623b      	str	r3, [r7, #32]
      break;
 8019274:	e02d      	b.n	80192d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	0c9b      	lsrs	r3, r3, #18
 801927a:	f003 030f 	and.w	r3, r3, #15
 801927e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019282:	4413      	add	r3, r2
 8019284:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8019288:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 801928a:	69fb      	ldr	r3, [r7, #28]
 801928c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019290:	2b00      	cmp	r3, #0
 8019292:	d013      	beq.n	80192bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8019294:	4b14      	ldr	r3, [pc, #80]	; (80192e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8019296:	685b      	ldr	r3, [r3, #4]
 8019298:	0c5b      	lsrs	r3, r3, #17
 801929a:	f003 0301 	and.w	r3, r3, #1
 801929e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80192a2:	4413      	add	r3, r2
 80192a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80192a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	4a0f      	ldr	r2, [pc, #60]	; (80192ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80192ae:	fb02 f203 	mul.w	r2, r2, r3
 80192b2:	69bb      	ldr	r3, [r7, #24]
 80192b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80192b8:	627b      	str	r3, [r7, #36]	; 0x24
 80192ba:	e004      	b.n	80192c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	4a0c      	ldr	r2, [pc, #48]	; (80192f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80192c0:	fb02 f303 	mul.w	r3, r2, r3
 80192c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80192c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c8:	623b      	str	r3, [r7, #32]
      break;
 80192ca:	e002      	b.n	80192d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80192cc:	4b07      	ldr	r3, [pc, #28]	; (80192ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80192ce:	623b      	str	r3, [r7, #32]
      break;
 80192d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80192d2:	6a3b      	ldr	r3, [r7, #32]
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3728      	adds	r7, #40	; 0x28
 80192d8:	46bd      	mov	sp, r7
 80192da:	bc90      	pop	{r4, r7}
 80192dc:	4770      	bx	lr
 80192de:	bf00      	nop
 80192e0:	0802047c 	.word	0x0802047c
 80192e4:	0802048c 	.word	0x0802048c
 80192e8:	40021000 	.word	0x40021000
 80192ec:	007a1200 	.word	0x007a1200
 80192f0:	003d0900 	.word	0x003d0900

080192f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80192f4:	b480      	push	{r7}
 80192f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80192f8:	4b02      	ldr	r3, [pc, #8]	; (8019304 <HAL_RCC_GetHCLKFreq+0x10>)
 80192fa:	681b      	ldr	r3, [r3, #0]
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	46bd      	mov	sp, r7
 8019300:	bc80      	pop	{r7}
 8019302:	4770      	bx	lr
 8019304:	2000037c 	.word	0x2000037c

08019308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019308:	b580      	push	{r7, lr}
 801930a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801930c:	f7ff fff2 	bl	80192f4 <HAL_RCC_GetHCLKFreq>
 8019310:	4601      	mov	r1, r0
 8019312:	4b05      	ldr	r3, [pc, #20]	; (8019328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019314:	685b      	ldr	r3, [r3, #4]
 8019316:	0a1b      	lsrs	r3, r3, #8
 8019318:	f003 0307 	and.w	r3, r3, #7
 801931c:	4a03      	ldr	r2, [pc, #12]	; (801932c <HAL_RCC_GetPCLK1Freq+0x24>)
 801931e:	5cd3      	ldrb	r3, [r2, r3]
 8019320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8019324:	4618      	mov	r0, r3
 8019326:	bd80      	pop	{r7, pc}
 8019328:	40021000 	.word	0x40021000
 801932c:	080204ec 	.word	0x080204ec

08019330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019334:	f7ff ffde 	bl	80192f4 <HAL_RCC_GetHCLKFreq>
 8019338:	4601      	mov	r1, r0
 801933a:	4b05      	ldr	r3, [pc, #20]	; (8019350 <HAL_RCC_GetPCLK2Freq+0x20>)
 801933c:	685b      	ldr	r3, [r3, #4]
 801933e:	0adb      	lsrs	r3, r3, #11
 8019340:	f003 0307 	and.w	r3, r3, #7
 8019344:	4a03      	ldr	r2, [pc, #12]	; (8019354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019346:	5cd3      	ldrb	r3, [r2, r3]
 8019348:	fa21 f303 	lsr.w	r3, r1, r3
}
 801934c:	4618      	mov	r0, r3
 801934e:	bd80      	pop	{r7, pc}
 8019350:	40021000 	.word	0x40021000
 8019354:	080204ec 	.word	0x080204ec

08019358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8019358:	b480      	push	{r7}
 801935a:	b085      	sub	sp, #20
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8019360:	4b0a      	ldr	r3, [pc, #40]	; (801938c <RCC_Delay+0x34>)
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4a0a      	ldr	r2, [pc, #40]	; (8019390 <RCC_Delay+0x38>)
 8019366:	fba2 2303 	umull	r2, r3, r2, r3
 801936a:	0a5b      	lsrs	r3, r3, #9
 801936c:	687a      	ldr	r2, [r7, #4]
 801936e:	fb02 f303 	mul.w	r3, r2, r3
 8019372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8019374:	bf00      	nop
  }
  while (Delay --);
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	1e5a      	subs	r2, r3, #1
 801937a:	60fa      	str	r2, [r7, #12]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d1f9      	bne.n	8019374 <RCC_Delay+0x1c>
}
 8019380:	bf00      	nop
 8019382:	3714      	adds	r7, #20
 8019384:	46bd      	mov	sp, r7
 8019386:	bc80      	pop	{r7}
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop
 801938c:	2000037c 	.word	0x2000037c
 8019390:	10624dd3 	.word	0x10624dd3

08019394 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b086      	sub	sp, #24
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 801939c:	2300      	movs	r3, #0
 801939e:	613b      	str	r3, [r7, #16]
 80193a0:	2300      	movs	r3, #0
 80193a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f003 0301 	and.w	r3, r3, #1
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d07d      	beq.n	80194ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80193b0:	2300      	movs	r3, #0
 80193b2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80193b4:	4b4f      	ldr	r3, [pc, #316]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80193b6:	69db      	ldr	r3, [r3, #28]
 80193b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d10d      	bne.n	80193dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80193c0:	4b4c      	ldr	r3, [pc, #304]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80193c2:	69db      	ldr	r3, [r3, #28]
 80193c4:	4a4b      	ldr	r2, [pc, #300]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80193c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80193ca:	61d3      	str	r3, [r2, #28]
 80193cc:	4b49      	ldr	r3, [pc, #292]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80193ce:	69db      	ldr	r3, [r3, #28]
 80193d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80193d4:	60bb      	str	r3, [r7, #8]
 80193d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80193d8:	2301      	movs	r3, #1
 80193da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80193dc:	4b46      	ldr	r3, [pc, #280]	; (80194f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d118      	bne.n	801941a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80193e8:	4b43      	ldr	r3, [pc, #268]	; (80194f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a42      	ldr	r2, [pc, #264]	; (80194f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80193ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80193f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80193f4:	f7fb fe82 	bl	80150fc <HAL_GetTick>
 80193f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80193fa:	e008      	b.n	801940e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80193fc:	f7fb fe7e 	bl	80150fc <HAL_GetTick>
 8019400:	4602      	mov	r2, r0
 8019402:	693b      	ldr	r3, [r7, #16]
 8019404:	1ad3      	subs	r3, r2, r3
 8019406:	2b64      	cmp	r3, #100	; 0x64
 8019408:	d901      	bls.n	801940e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 801940a:	2303      	movs	r3, #3
 801940c:	e06d      	b.n	80194ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801940e:	4b3a      	ldr	r3, [pc, #232]	; (80194f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019416:	2b00      	cmp	r3, #0
 8019418:	d0f0      	beq.n	80193fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801941a:	4b36      	ldr	r3, [pc, #216]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801941c:	6a1b      	ldr	r3, [r3, #32]
 801941e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019422:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d02e      	beq.n	8019488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	685b      	ldr	r3, [r3, #4]
 801942e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019432:	68fa      	ldr	r2, [r7, #12]
 8019434:	429a      	cmp	r2, r3
 8019436:	d027      	beq.n	8019488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8019438:	4b2e      	ldr	r3, [pc, #184]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801943a:	6a1b      	ldr	r3, [r3, #32]
 801943c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019440:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019442:	4b2e      	ldr	r3, [pc, #184]	; (80194fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8019444:	2201      	movs	r2, #1
 8019446:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019448:	4b2c      	ldr	r3, [pc, #176]	; (80194fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801944a:	2200      	movs	r2, #0
 801944c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 801944e:	4a29      	ldr	r2, [pc, #164]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	f003 0301 	and.w	r3, r3, #1
 801945a:	2b00      	cmp	r3, #0
 801945c:	d014      	beq.n	8019488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801945e:	f7fb fe4d 	bl	80150fc <HAL_GetTick>
 8019462:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019464:	e00a      	b.n	801947c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019466:	f7fb fe49 	bl	80150fc <HAL_GetTick>
 801946a:	4602      	mov	r2, r0
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	1ad3      	subs	r3, r2, r3
 8019470:	f241 3288 	movw	r2, #5000	; 0x1388
 8019474:	4293      	cmp	r3, r2
 8019476:	d901      	bls.n	801947c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8019478:	2303      	movs	r3, #3
 801947a:	e036      	b.n	80194ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801947c:	4b1d      	ldr	r3, [pc, #116]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801947e:	6a1b      	ldr	r3, [r3, #32]
 8019480:	f003 0302 	and.w	r3, r3, #2
 8019484:	2b00      	cmp	r3, #0
 8019486:	d0ee      	beq.n	8019466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019488:	4b1a      	ldr	r3, [pc, #104]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801948a:	6a1b      	ldr	r3, [r3, #32]
 801948c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	4917      	ldr	r1, [pc, #92]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8019496:	4313      	orrs	r3, r2
 8019498:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 801949a:	7dfb      	ldrb	r3, [r7, #23]
 801949c:	2b01      	cmp	r3, #1
 801949e:	d105      	bne.n	80194ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80194a0:	4b14      	ldr	r3, [pc, #80]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194a2:	69db      	ldr	r3, [r3, #28]
 80194a4:	4a13      	ldr	r2, [pc, #76]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80194aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	f003 0302 	and.w	r3, r3, #2
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d008      	beq.n	80194ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80194b8:	4b0e      	ldr	r3, [pc, #56]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194ba:	685b      	ldr	r3, [r3, #4]
 80194bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	689b      	ldr	r3, [r3, #8]
 80194c4:	490b      	ldr	r1, [pc, #44]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194c6:	4313      	orrs	r3, r2
 80194c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	f003 0310 	and.w	r3, r3, #16
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d008      	beq.n	80194e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80194d6:	4b07      	ldr	r3, [pc, #28]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	695b      	ldr	r3, [r3, #20]
 80194e2:	4904      	ldr	r1, [pc, #16]	; (80194f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80194e4:	4313      	orrs	r3, r2
 80194e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80194e8:	2300      	movs	r3, #0
}
 80194ea:	4618      	mov	r0, r3
 80194ec:	3718      	adds	r7, #24
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	bf00      	nop
 80194f4:	40021000 	.word	0x40021000
 80194f8:	40007000 	.word	0x40007000
 80194fc:	42420440 	.word	0x42420440

08019500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b082      	sub	sp, #8
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d101      	bne.n	8019512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801950e:	2301      	movs	r3, #1
 8019510:	e041      	b.n	8019596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019518:	b2db      	uxtb	r3, r3
 801951a:	2b00      	cmp	r3, #0
 801951c:	d106      	bne.n	801952c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2200      	movs	r2, #0
 8019522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019526:	6878      	ldr	r0, [r7, #4]
 8019528:	f7fb fba2 	bl	8014c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2202      	movs	r2, #2
 8019530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681a      	ldr	r2, [r3, #0]
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	3304      	adds	r3, #4
 801953c:	4619      	mov	r1, r3
 801953e:	4610      	mov	r0, r2
 8019540:	f000 fb2c 	bl	8019b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	2201      	movs	r2, #1
 8019548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2201      	movs	r2, #1
 8019550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	2201      	movs	r2, #1
 8019558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2201      	movs	r2, #1
 8019560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2201      	movs	r2, #1
 8019568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2201      	movs	r2, #1
 8019570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2201      	movs	r2, #1
 8019578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	2201      	movs	r2, #1
 8019580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2201      	movs	r2, #1
 8019588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2201      	movs	r2, #1
 8019590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019594:	2300      	movs	r3, #0
}
 8019596:	4618      	mov	r0, r3
 8019598:	3708      	adds	r7, #8
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
	...

080195a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80195a0:	b480      	push	{r7}
 80195a2:	b085      	sub	sp, #20
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195ae:	b2db      	uxtb	r3, r3
 80195b0:	2b01      	cmp	r3, #1
 80195b2:	d001      	beq.n	80195b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80195b4:	2301      	movs	r3, #1
 80195b6:	e044      	b.n	8019642 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2202      	movs	r2, #2
 80195bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	68da      	ldr	r2, [r3, #12]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	f042 0201 	orr.w	r2, r2, #1
 80195ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	4a1d      	ldr	r2, [pc, #116]	; (801964c <HAL_TIM_Base_Start_IT+0xac>)
 80195d6:	4293      	cmp	r3, r2
 80195d8:	d018      	beq.n	801960c <HAL_TIM_Base_Start_IT+0x6c>
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	4a1c      	ldr	r2, [pc, #112]	; (8019650 <HAL_TIM_Base_Start_IT+0xb0>)
 80195e0:	4293      	cmp	r3, r2
 80195e2:	d013      	beq.n	801960c <HAL_TIM_Base_Start_IT+0x6c>
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80195ec:	d00e      	beq.n	801960c <HAL_TIM_Base_Start_IT+0x6c>
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	4a18      	ldr	r2, [pc, #96]	; (8019654 <HAL_TIM_Base_Start_IT+0xb4>)
 80195f4:	4293      	cmp	r3, r2
 80195f6:	d009      	beq.n	801960c <HAL_TIM_Base_Start_IT+0x6c>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	4a16      	ldr	r2, [pc, #88]	; (8019658 <HAL_TIM_Base_Start_IT+0xb8>)
 80195fe:	4293      	cmp	r3, r2
 8019600:	d004      	beq.n	801960c <HAL_TIM_Base_Start_IT+0x6c>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4a15      	ldr	r2, [pc, #84]	; (801965c <HAL_TIM_Base_Start_IT+0xbc>)
 8019608:	4293      	cmp	r3, r2
 801960a:	d111      	bne.n	8019630 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	689b      	ldr	r3, [r3, #8]
 8019612:	f003 0307 	and.w	r3, r3, #7
 8019616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2b06      	cmp	r3, #6
 801961c:	d010      	beq.n	8019640 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	f042 0201 	orr.w	r2, r2, #1
 801962c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801962e:	e007      	b.n	8019640 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	681a      	ldr	r2, [r3, #0]
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	f042 0201 	orr.w	r2, r2, #1
 801963e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019640:	2300      	movs	r3, #0
}
 8019642:	4618      	mov	r0, r3
 8019644:	3714      	adds	r7, #20
 8019646:	46bd      	mov	sp, r7
 8019648:	bc80      	pop	{r7}
 801964a:	4770      	bx	lr
 801964c:	40012c00 	.word	0x40012c00
 8019650:	40013400 	.word	0x40013400
 8019654:	40000400 	.word	0x40000400
 8019658:	40000800 	.word	0x40000800
 801965c:	40000c00 	.word	0x40000c00

08019660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b084      	sub	sp, #16
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d109      	bne.n	8019684 <HAL_TIM_PWM_Start+0x24>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019676:	b2db      	uxtb	r3, r3
 8019678:	2b01      	cmp	r3, #1
 801967a:	bf14      	ite	ne
 801967c:	2301      	movne	r3, #1
 801967e:	2300      	moveq	r3, #0
 8019680:	b2db      	uxtb	r3, r3
 8019682:	e022      	b.n	80196ca <HAL_TIM_PWM_Start+0x6a>
 8019684:	683b      	ldr	r3, [r7, #0]
 8019686:	2b04      	cmp	r3, #4
 8019688:	d109      	bne.n	801969e <HAL_TIM_PWM_Start+0x3e>
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019690:	b2db      	uxtb	r3, r3
 8019692:	2b01      	cmp	r3, #1
 8019694:	bf14      	ite	ne
 8019696:	2301      	movne	r3, #1
 8019698:	2300      	moveq	r3, #0
 801969a:	b2db      	uxtb	r3, r3
 801969c:	e015      	b.n	80196ca <HAL_TIM_PWM_Start+0x6a>
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	2b08      	cmp	r3, #8
 80196a2:	d109      	bne.n	80196b8 <HAL_TIM_PWM_Start+0x58>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80196aa:	b2db      	uxtb	r3, r3
 80196ac:	2b01      	cmp	r3, #1
 80196ae:	bf14      	ite	ne
 80196b0:	2301      	movne	r3, #1
 80196b2:	2300      	moveq	r3, #0
 80196b4:	b2db      	uxtb	r3, r3
 80196b6:	e008      	b.n	80196ca <HAL_TIM_PWM_Start+0x6a>
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	2b01      	cmp	r3, #1
 80196c2:	bf14      	ite	ne
 80196c4:	2301      	movne	r3, #1
 80196c6:	2300      	moveq	r3, #0
 80196c8:	b2db      	uxtb	r3, r3
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d001      	beq.n	80196d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80196ce:	2301      	movs	r3, #1
 80196d0:	e072      	b.n	80197b8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d104      	bne.n	80196e2 <HAL_TIM_PWM_Start+0x82>
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	2202      	movs	r2, #2
 80196dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80196e0:	e013      	b.n	801970a <HAL_TIM_PWM_Start+0xaa>
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	2b04      	cmp	r3, #4
 80196e6:	d104      	bne.n	80196f2 <HAL_TIM_PWM_Start+0x92>
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2202      	movs	r2, #2
 80196ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80196f0:	e00b      	b.n	801970a <HAL_TIM_PWM_Start+0xaa>
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	2b08      	cmp	r3, #8
 80196f6:	d104      	bne.n	8019702 <HAL_TIM_PWM_Start+0xa2>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2202      	movs	r2, #2
 80196fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019700:	e003      	b.n	801970a <HAL_TIM_PWM_Start+0xaa>
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2202      	movs	r2, #2
 8019706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2201      	movs	r2, #1
 8019710:	6839      	ldr	r1, [r7, #0]
 8019712:	4618      	mov	r0, r3
 8019714:	f000 fb52 	bl	8019dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	4a28      	ldr	r2, [pc, #160]	; (80197c0 <HAL_TIM_PWM_Start+0x160>)
 801971e:	4293      	cmp	r3, r2
 8019720:	d004      	beq.n	801972c <HAL_TIM_PWM_Start+0xcc>
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	4a27      	ldr	r2, [pc, #156]	; (80197c4 <HAL_TIM_PWM_Start+0x164>)
 8019728:	4293      	cmp	r3, r2
 801972a:	d101      	bne.n	8019730 <HAL_TIM_PWM_Start+0xd0>
 801972c:	2301      	movs	r3, #1
 801972e:	e000      	b.n	8019732 <HAL_TIM_PWM_Start+0xd2>
 8019730:	2300      	movs	r3, #0
 8019732:	2b00      	cmp	r3, #0
 8019734:	d007      	beq.n	8019746 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4a1d      	ldr	r2, [pc, #116]	; (80197c0 <HAL_TIM_PWM_Start+0x160>)
 801974c:	4293      	cmp	r3, r2
 801974e:	d018      	beq.n	8019782 <HAL_TIM_PWM_Start+0x122>
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	4a1b      	ldr	r2, [pc, #108]	; (80197c4 <HAL_TIM_PWM_Start+0x164>)
 8019756:	4293      	cmp	r3, r2
 8019758:	d013      	beq.n	8019782 <HAL_TIM_PWM_Start+0x122>
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019762:	d00e      	beq.n	8019782 <HAL_TIM_PWM_Start+0x122>
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4a17      	ldr	r2, [pc, #92]	; (80197c8 <HAL_TIM_PWM_Start+0x168>)
 801976a:	4293      	cmp	r3, r2
 801976c:	d009      	beq.n	8019782 <HAL_TIM_PWM_Start+0x122>
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	4a16      	ldr	r2, [pc, #88]	; (80197cc <HAL_TIM_PWM_Start+0x16c>)
 8019774:	4293      	cmp	r3, r2
 8019776:	d004      	beq.n	8019782 <HAL_TIM_PWM_Start+0x122>
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4a14      	ldr	r2, [pc, #80]	; (80197d0 <HAL_TIM_PWM_Start+0x170>)
 801977e:	4293      	cmp	r3, r2
 8019780:	d111      	bne.n	80197a6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	689b      	ldr	r3, [r3, #8]
 8019788:	f003 0307 	and.w	r3, r3, #7
 801978c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	2b06      	cmp	r3, #6
 8019792:	d010      	beq.n	80197b6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	f042 0201 	orr.w	r2, r2, #1
 80197a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80197a4:	e007      	b.n	80197b6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	681a      	ldr	r2, [r3, #0]
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	f042 0201 	orr.w	r2, r2, #1
 80197b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80197b6:	2300      	movs	r3, #0
}
 80197b8:	4618      	mov	r0, r3
 80197ba:	3710      	adds	r7, #16
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}
 80197c0:	40012c00 	.word	0x40012c00
 80197c4:	40013400 	.word	0x40013400
 80197c8:	40000400 	.word	0x40000400
 80197cc:	40000800 	.word	0x40000800
 80197d0:	40000c00 	.word	0x40000c00

080197d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	f003 0302 	and.w	r3, r3, #2
 80197e6:	2b02      	cmp	r3, #2
 80197e8:	d122      	bne.n	8019830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	f003 0302 	and.w	r3, r3, #2
 80197f4:	2b02      	cmp	r3, #2
 80197f6:	d11b      	bne.n	8019830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	f06f 0202 	mvn.w	r2, #2
 8019800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2201      	movs	r2, #1
 8019806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	699b      	ldr	r3, [r3, #24]
 801980e:	f003 0303 	and.w	r3, r3, #3
 8019812:	2b00      	cmp	r3, #0
 8019814:	d003      	beq.n	801981e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019816:	6878      	ldr	r0, [r7, #4]
 8019818:	f000 f9a4 	bl	8019b64 <HAL_TIM_IC_CaptureCallback>
 801981c:	e005      	b.n	801982a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801981e:	6878      	ldr	r0, [r7, #4]
 8019820:	f000 f997 	bl	8019b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f000 f9a6 	bl	8019b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	2200      	movs	r2, #0
 801982e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	691b      	ldr	r3, [r3, #16]
 8019836:	f003 0304 	and.w	r3, r3, #4
 801983a:	2b04      	cmp	r3, #4
 801983c:	d122      	bne.n	8019884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	68db      	ldr	r3, [r3, #12]
 8019844:	f003 0304 	and.w	r3, r3, #4
 8019848:	2b04      	cmp	r3, #4
 801984a:	d11b      	bne.n	8019884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f06f 0204 	mvn.w	r2, #4
 8019854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2202      	movs	r2, #2
 801985a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	699b      	ldr	r3, [r3, #24]
 8019862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019866:	2b00      	cmp	r3, #0
 8019868:	d003      	beq.n	8019872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	f000 f97a 	bl	8019b64 <HAL_TIM_IC_CaptureCallback>
 8019870:	e005      	b.n	801987e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f000 f96d 	bl	8019b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f000 f97c 	bl	8019b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	f003 0308 	and.w	r3, r3, #8
 801988e:	2b08      	cmp	r3, #8
 8019890:	d122      	bne.n	80198d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	68db      	ldr	r3, [r3, #12]
 8019898:	f003 0308 	and.w	r3, r3, #8
 801989c:	2b08      	cmp	r3, #8
 801989e:	d11b      	bne.n	80198d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	f06f 0208 	mvn.w	r2, #8
 80198a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	2204      	movs	r2, #4
 80198ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	69db      	ldr	r3, [r3, #28]
 80198b6:	f003 0303 	and.w	r3, r3, #3
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d003      	beq.n	80198c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f000 f950 	bl	8019b64 <HAL_TIM_IC_CaptureCallback>
 80198c4:	e005      	b.n	80198d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f000 f943 	bl	8019b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f000 f952 	bl	8019b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	691b      	ldr	r3, [r3, #16]
 80198de:	f003 0310 	and.w	r3, r3, #16
 80198e2:	2b10      	cmp	r3, #16
 80198e4:	d122      	bne.n	801992c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	68db      	ldr	r3, [r3, #12]
 80198ec:	f003 0310 	and.w	r3, r3, #16
 80198f0:	2b10      	cmp	r3, #16
 80198f2:	d11b      	bne.n	801992c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	f06f 0210 	mvn.w	r2, #16
 80198fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	2208      	movs	r2, #8
 8019902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	69db      	ldr	r3, [r3, #28]
 801990a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801990e:	2b00      	cmp	r3, #0
 8019910:	d003      	beq.n	801991a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019912:	6878      	ldr	r0, [r7, #4]
 8019914:	f000 f926 	bl	8019b64 <HAL_TIM_IC_CaptureCallback>
 8019918:	e005      	b.n	8019926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801991a:	6878      	ldr	r0, [r7, #4]
 801991c:	f000 f919 	bl	8019b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	f000 f928 	bl	8019b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	2200      	movs	r2, #0
 801992a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	691b      	ldr	r3, [r3, #16]
 8019932:	f003 0301 	and.w	r3, r3, #1
 8019936:	2b01      	cmp	r3, #1
 8019938:	d10e      	bne.n	8019958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	68db      	ldr	r3, [r3, #12]
 8019940:	f003 0301 	and.w	r3, r3, #1
 8019944:	2b01      	cmp	r3, #1
 8019946:	d107      	bne.n	8019958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	f06f 0201 	mvn.w	r2, #1
 8019950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019952:	6878      	ldr	r0, [r7, #4]
 8019954:	f7fa fd92 	bl	801447c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	691b      	ldr	r3, [r3, #16]
 801995e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019962:	2b80      	cmp	r3, #128	; 0x80
 8019964:	d10e      	bne.n	8019984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	68db      	ldr	r3, [r3, #12]
 801996c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019970:	2b80      	cmp	r3, #128	; 0x80
 8019972:	d107      	bne.n	8019984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801997c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f000 fab5 	bl	8019eee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	691b      	ldr	r3, [r3, #16]
 801998a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801998e:	2b40      	cmp	r3, #64	; 0x40
 8019990:	d10e      	bne.n	80199b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801999c:	2b40      	cmp	r3, #64	; 0x40
 801999e:	d107      	bne.n	80199b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80199a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80199aa:	6878      	ldr	r0, [r7, #4]
 80199ac:	f000 f8ec 	bl	8019b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	691b      	ldr	r3, [r3, #16]
 80199b6:	f003 0320 	and.w	r3, r3, #32
 80199ba:	2b20      	cmp	r3, #32
 80199bc:	d10e      	bne.n	80199dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	68db      	ldr	r3, [r3, #12]
 80199c4:	f003 0320 	and.w	r3, r3, #32
 80199c8:	2b20      	cmp	r3, #32
 80199ca:	d107      	bne.n	80199dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	f06f 0220 	mvn.w	r2, #32
 80199d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	f000 fa80 	bl	8019edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80199dc:	bf00      	nop
 80199de:	3708      	adds	r7, #8
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b084      	sub	sp, #16
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80199f4:	2b01      	cmp	r3, #1
 80199f6:	d101      	bne.n	80199fc <HAL_TIM_ConfigClockSource+0x18>
 80199f8:	2302      	movs	r3, #2
 80199fa:	e0a6      	b.n	8019b4a <HAL_TIM_ConfigClockSource+0x166>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2201      	movs	r2, #1
 8019a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2202      	movs	r2, #2
 8019a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	689b      	ldr	r3, [r3, #8]
 8019a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8019a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019a22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	68fa      	ldr	r2, [r7, #12]
 8019a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2b40      	cmp	r3, #64	; 0x40
 8019a32:	d067      	beq.n	8019b04 <HAL_TIM_ConfigClockSource+0x120>
 8019a34:	2b40      	cmp	r3, #64	; 0x40
 8019a36:	d80b      	bhi.n	8019a50 <HAL_TIM_ConfigClockSource+0x6c>
 8019a38:	2b10      	cmp	r3, #16
 8019a3a:	d073      	beq.n	8019b24 <HAL_TIM_ConfigClockSource+0x140>
 8019a3c:	2b10      	cmp	r3, #16
 8019a3e:	d802      	bhi.n	8019a46 <HAL_TIM_ConfigClockSource+0x62>
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d06f      	beq.n	8019b24 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8019a44:	e078      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8019a46:	2b20      	cmp	r3, #32
 8019a48:	d06c      	beq.n	8019b24 <HAL_TIM_ConfigClockSource+0x140>
 8019a4a:	2b30      	cmp	r3, #48	; 0x30
 8019a4c:	d06a      	beq.n	8019b24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8019a4e:	e073      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8019a50:	2b70      	cmp	r3, #112	; 0x70
 8019a52:	d00d      	beq.n	8019a70 <HAL_TIM_ConfigClockSource+0x8c>
 8019a54:	2b70      	cmp	r3, #112	; 0x70
 8019a56:	d804      	bhi.n	8019a62 <HAL_TIM_ConfigClockSource+0x7e>
 8019a58:	2b50      	cmp	r3, #80	; 0x50
 8019a5a:	d033      	beq.n	8019ac4 <HAL_TIM_ConfigClockSource+0xe0>
 8019a5c:	2b60      	cmp	r3, #96	; 0x60
 8019a5e:	d041      	beq.n	8019ae4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8019a60:	e06a      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8019a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019a66:	d066      	beq.n	8019b36 <HAL_TIM_ConfigClockSource+0x152>
 8019a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019a6c:	d017      	beq.n	8019a9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8019a6e:	e063      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6818      	ldr	r0, [r3, #0]
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	6899      	ldr	r1, [r3, #8]
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	685a      	ldr	r2, [r3, #4]
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	68db      	ldr	r3, [r3, #12]
 8019a80:	f000 f97d 	bl	8019d7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	689b      	ldr	r3, [r3, #8]
 8019a8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8019a92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	68fa      	ldr	r2, [r7, #12]
 8019a9a:	609a      	str	r2, [r3, #8]
      break;
 8019a9c:	e04c      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6818      	ldr	r0, [r3, #0]
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	6899      	ldr	r1, [r3, #8]
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	685a      	ldr	r2, [r3, #4]
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	68db      	ldr	r3, [r3, #12]
 8019aae:	f000 f966 	bl	8019d7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	689a      	ldr	r2, [r3, #8]
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019ac0:	609a      	str	r2, [r3, #8]
      break;
 8019ac2:	e039      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	6818      	ldr	r0, [r3, #0]
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	6859      	ldr	r1, [r3, #4]
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	68db      	ldr	r3, [r3, #12]
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	f000 f8dd 	bl	8019c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2150      	movs	r1, #80	; 0x50
 8019adc:	4618      	mov	r0, r3
 8019ade:	f000 f934 	bl	8019d4a <TIM_ITRx_SetConfig>
      break;
 8019ae2:	e029      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6818      	ldr	r0, [r3, #0]
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	6859      	ldr	r1, [r3, #4]
 8019aec:	683b      	ldr	r3, [r7, #0]
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	461a      	mov	r2, r3
 8019af2:	f000 f8fb 	bl	8019cec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	2160      	movs	r1, #96	; 0x60
 8019afc:	4618      	mov	r0, r3
 8019afe:	f000 f924 	bl	8019d4a <TIM_ITRx_SetConfig>
      break;
 8019b02:	e019      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	6818      	ldr	r0, [r3, #0]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	6859      	ldr	r1, [r3, #4]
 8019b0c:	683b      	ldr	r3, [r7, #0]
 8019b0e:	68db      	ldr	r3, [r3, #12]
 8019b10:	461a      	mov	r2, r3
 8019b12:	f000 f8bd 	bl	8019c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2140      	movs	r1, #64	; 0x40
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f000 f914 	bl	8019d4a <TIM_ITRx_SetConfig>
      break;
 8019b22:	e009      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681a      	ldr	r2, [r3, #0]
 8019b28:	683b      	ldr	r3, [r7, #0]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	4619      	mov	r1, r3
 8019b2e:	4610      	mov	r0, r2
 8019b30:	f000 f90b 	bl	8019d4a <TIM_ITRx_SetConfig>
        break;
 8019b34:	e000      	b.n	8019b38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8019b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2200      	movs	r2, #0
 8019b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019b48:	2300      	movs	r3, #0
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3710      	adds	r7, #16
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}

08019b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019b52:	b480      	push	{r7}
 8019b54:	b083      	sub	sp, #12
 8019b56:	af00      	add	r7, sp, #0
 8019b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019b5a:	bf00      	nop
 8019b5c:	370c      	adds	r7, #12
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bc80      	pop	{r7}
 8019b62:	4770      	bx	lr

08019b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019b64:	b480      	push	{r7}
 8019b66:	b083      	sub	sp, #12
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019b6c:	bf00      	nop
 8019b6e:	370c      	adds	r7, #12
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bc80      	pop	{r7}
 8019b74:	4770      	bx	lr

08019b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019b76:	b480      	push	{r7}
 8019b78:	b083      	sub	sp, #12
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019b7e:	bf00      	nop
 8019b80:	370c      	adds	r7, #12
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bc80      	pop	{r7}
 8019b86:	4770      	bx	lr

08019b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019b90:	bf00      	nop
 8019b92:	370c      	adds	r7, #12
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bc80      	pop	{r7}
 8019b98:	4770      	bx	lr
	...

08019b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8019b9c:	b480      	push	{r7}
 8019b9e:	b085      	sub	sp, #20
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
 8019ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	4a33      	ldr	r2, [pc, #204]	; (8019c7c <TIM_Base_SetConfig+0xe0>)
 8019bb0:	4293      	cmp	r3, r2
 8019bb2:	d013      	beq.n	8019bdc <TIM_Base_SetConfig+0x40>
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	4a32      	ldr	r2, [pc, #200]	; (8019c80 <TIM_Base_SetConfig+0xe4>)
 8019bb8:	4293      	cmp	r3, r2
 8019bba:	d00f      	beq.n	8019bdc <TIM_Base_SetConfig+0x40>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019bc2:	d00b      	beq.n	8019bdc <TIM_Base_SetConfig+0x40>
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	4a2f      	ldr	r2, [pc, #188]	; (8019c84 <TIM_Base_SetConfig+0xe8>)
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d007      	beq.n	8019bdc <TIM_Base_SetConfig+0x40>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	4a2e      	ldr	r2, [pc, #184]	; (8019c88 <TIM_Base_SetConfig+0xec>)
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d003      	beq.n	8019bdc <TIM_Base_SetConfig+0x40>
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	4a2d      	ldr	r2, [pc, #180]	; (8019c8c <TIM_Base_SetConfig+0xf0>)
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	d108      	bne.n	8019bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	68fa      	ldr	r2, [r7, #12]
 8019bea:	4313      	orrs	r3, r2
 8019bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	4a22      	ldr	r2, [pc, #136]	; (8019c7c <TIM_Base_SetConfig+0xe0>)
 8019bf2:	4293      	cmp	r3, r2
 8019bf4:	d013      	beq.n	8019c1e <TIM_Base_SetConfig+0x82>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	4a21      	ldr	r2, [pc, #132]	; (8019c80 <TIM_Base_SetConfig+0xe4>)
 8019bfa:	4293      	cmp	r3, r2
 8019bfc:	d00f      	beq.n	8019c1e <TIM_Base_SetConfig+0x82>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019c04:	d00b      	beq.n	8019c1e <TIM_Base_SetConfig+0x82>
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	4a1e      	ldr	r2, [pc, #120]	; (8019c84 <TIM_Base_SetConfig+0xe8>)
 8019c0a:	4293      	cmp	r3, r2
 8019c0c:	d007      	beq.n	8019c1e <TIM_Base_SetConfig+0x82>
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	4a1d      	ldr	r2, [pc, #116]	; (8019c88 <TIM_Base_SetConfig+0xec>)
 8019c12:	4293      	cmp	r3, r2
 8019c14:	d003      	beq.n	8019c1e <TIM_Base_SetConfig+0x82>
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	4a1c      	ldr	r2, [pc, #112]	; (8019c8c <TIM_Base_SetConfig+0xf0>)
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	d108      	bne.n	8019c30 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	68db      	ldr	r3, [r3, #12]
 8019c2a:	68fa      	ldr	r2, [r7, #12]
 8019c2c:	4313      	orrs	r3, r2
 8019c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	695b      	ldr	r3, [r3, #20]
 8019c3a:	4313      	orrs	r3, r2
 8019c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	68fa      	ldr	r2, [r7, #12]
 8019c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	689a      	ldr	r2, [r3, #8]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	681a      	ldr	r2, [r3, #0]
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	4a09      	ldr	r2, [pc, #36]	; (8019c7c <TIM_Base_SetConfig+0xe0>)
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	d003      	beq.n	8019c64 <TIM_Base_SetConfig+0xc8>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	4a08      	ldr	r2, [pc, #32]	; (8019c80 <TIM_Base_SetConfig+0xe4>)
 8019c60:	4293      	cmp	r3, r2
 8019c62:	d103      	bne.n	8019c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	691a      	ldr	r2, [r3, #16]
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2201      	movs	r2, #1
 8019c70:	615a      	str	r2, [r3, #20]
}
 8019c72:	bf00      	nop
 8019c74:	3714      	adds	r7, #20
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bc80      	pop	{r7}
 8019c7a:	4770      	bx	lr
 8019c7c:	40012c00 	.word	0x40012c00
 8019c80:	40013400 	.word	0x40013400
 8019c84:	40000400 	.word	0x40000400
 8019c88:	40000800 	.word	0x40000800
 8019c8c:	40000c00 	.word	0x40000c00

08019c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019c90:	b480      	push	{r7}
 8019c92:	b087      	sub	sp, #28
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	60b9      	str	r1, [r7, #8]
 8019c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6a1b      	ldr	r3, [r3, #32]
 8019ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	6a1b      	ldr	r3, [r3, #32]
 8019ca6:	f023 0201 	bic.w	r2, r3, #1
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	699b      	ldr	r3, [r3, #24]
 8019cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	011b      	lsls	r3, r3, #4
 8019cc0:	693a      	ldr	r2, [r7, #16]
 8019cc2:	4313      	orrs	r3, r2
 8019cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	f023 030a 	bic.w	r3, r3, #10
 8019ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8019cce:	697a      	ldr	r2, [r7, #20]
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	4313      	orrs	r3, r2
 8019cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	693a      	ldr	r2, [r7, #16]
 8019cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	697a      	ldr	r2, [r7, #20]
 8019ce0:	621a      	str	r2, [r3, #32]
}
 8019ce2:	bf00      	nop
 8019ce4:	371c      	adds	r7, #28
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bc80      	pop	{r7}
 8019cea:	4770      	bx	lr

08019cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019cec:	b480      	push	{r7}
 8019cee:	b087      	sub	sp, #28
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	60f8      	str	r0, [r7, #12]
 8019cf4:	60b9      	str	r1, [r7, #8]
 8019cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	6a1b      	ldr	r3, [r3, #32]
 8019cfc:	f023 0210 	bic.w	r2, r3, #16
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	699b      	ldr	r3, [r3, #24]
 8019d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	6a1b      	ldr	r3, [r3, #32]
 8019d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019d10:	697b      	ldr	r3, [r7, #20]
 8019d12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	031b      	lsls	r3, r3, #12
 8019d1c:	697a      	ldr	r2, [r7, #20]
 8019d1e:	4313      	orrs	r3, r2
 8019d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019d22:	693b      	ldr	r3, [r7, #16]
 8019d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8019d28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	011b      	lsls	r3, r3, #4
 8019d2e:	693a      	ldr	r2, [r7, #16]
 8019d30:	4313      	orrs	r3, r2
 8019d32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	697a      	ldr	r2, [r7, #20]
 8019d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	693a      	ldr	r2, [r7, #16]
 8019d3e:	621a      	str	r2, [r3, #32]
}
 8019d40:	bf00      	nop
 8019d42:	371c      	adds	r7, #28
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bc80      	pop	{r7}
 8019d48:	4770      	bx	lr

08019d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019d4a:	b480      	push	{r7}
 8019d4c:	b085      	sub	sp, #20
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	6078      	str	r0, [r7, #4]
 8019d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	689b      	ldr	r3, [r3, #8]
 8019d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019d62:	683a      	ldr	r2, [r7, #0]
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	4313      	orrs	r3, r2
 8019d68:	f043 0307 	orr.w	r3, r3, #7
 8019d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	68fa      	ldr	r2, [r7, #12]
 8019d72:	609a      	str	r2, [r3, #8]
}
 8019d74:	bf00      	nop
 8019d76:	3714      	adds	r7, #20
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bc80      	pop	{r7}
 8019d7c:	4770      	bx	lr

08019d7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8019d7e:	b480      	push	{r7}
 8019d80:	b087      	sub	sp, #28
 8019d82:	af00      	add	r7, sp, #0
 8019d84:	60f8      	str	r0, [r7, #12]
 8019d86:	60b9      	str	r1, [r7, #8]
 8019d88:	607a      	str	r2, [r7, #4]
 8019d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	689b      	ldr	r3, [r3, #8]
 8019d90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019d98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	021a      	lsls	r2, r3, #8
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	431a      	orrs	r2, r3
 8019da2:	68bb      	ldr	r3, [r7, #8]
 8019da4:	4313      	orrs	r3, r2
 8019da6:	697a      	ldr	r2, [r7, #20]
 8019da8:	4313      	orrs	r3, r2
 8019daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	697a      	ldr	r2, [r7, #20]
 8019db0:	609a      	str	r2, [r3, #8]
}
 8019db2:	bf00      	nop
 8019db4:	371c      	adds	r7, #28
 8019db6:	46bd      	mov	sp, r7
 8019db8:	bc80      	pop	{r7}
 8019dba:	4770      	bx	lr

08019dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019dbc:	b480      	push	{r7}
 8019dbe:	b087      	sub	sp, #28
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	f003 031f 	and.w	r3, r3, #31
 8019dce:	2201      	movs	r2, #1
 8019dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8019dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	6a1a      	ldr	r2, [r3, #32]
 8019dda:	697b      	ldr	r3, [r7, #20]
 8019ddc:	43db      	mvns	r3, r3
 8019dde:	401a      	ands	r2, r3
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	6a1a      	ldr	r2, [r3, #32]
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	f003 031f 	and.w	r3, r3, #31
 8019dee:	6879      	ldr	r1, [r7, #4]
 8019df0:	fa01 f303 	lsl.w	r3, r1, r3
 8019df4:	431a      	orrs	r2, r3
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	621a      	str	r2, [r3, #32]
}
 8019dfa:	bf00      	nop
 8019dfc:	371c      	adds	r7, #28
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bc80      	pop	{r7}
 8019e02:	4770      	bx	lr

08019e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019e04:	b480      	push	{r7}
 8019e06:	b085      	sub	sp, #20
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019e14:	2b01      	cmp	r3, #1
 8019e16:	d101      	bne.n	8019e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019e18:	2302      	movs	r3, #2
 8019e1a:	e050      	b.n	8019ebe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2201      	movs	r2, #1
 8019e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2202      	movs	r2, #2
 8019e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	689b      	ldr	r3, [r3, #8]
 8019e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	68fa      	ldr	r2, [r7, #12]
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	68fa      	ldr	r2, [r7, #12]
 8019e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	4a1b      	ldr	r2, [pc, #108]	; (8019ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8019e5c:	4293      	cmp	r3, r2
 8019e5e:	d018      	beq.n	8019e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4a19      	ldr	r2, [pc, #100]	; (8019ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d013      	beq.n	8019e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019e72:	d00e      	beq.n	8019e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	4a15      	ldr	r2, [pc, #84]	; (8019ed0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	d009      	beq.n	8019e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	4a14      	ldr	r2, [pc, #80]	; (8019ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8019e84:	4293      	cmp	r3, r2
 8019e86:	d004      	beq.n	8019e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	4a12      	ldr	r2, [pc, #72]	; (8019ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8019e8e:	4293      	cmp	r3, r2
 8019e90:	d10c      	bne.n	8019eac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	685b      	ldr	r3, [r3, #4]
 8019e9e:	68ba      	ldr	r2, [r7, #8]
 8019ea0:	4313      	orrs	r3, r2
 8019ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	68ba      	ldr	r2, [r7, #8]
 8019eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2201      	movs	r2, #1
 8019eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019ebc:	2300      	movs	r3, #0
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3714      	adds	r7, #20
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bc80      	pop	{r7}
 8019ec6:	4770      	bx	lr
 8019ec8:	40012c00 	.word	0x40012c00
 8019ecc:	40013400 	.word	0x40013400
 8019ed0:	40000400 	.word	0x40000400
 8019ed4:	40000800 	.word	0x40000800
 8019ed8:	40000c00 	.word	0x40000c00

08019edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8019edc:	b480      	push	{r7}
 8019ede:	b083      	sub	sp, #12
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019ee4:	bf00      	nop
 8019ee6:	370c      	adds	r7, #12
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bc80      	pop	{r7}
 8019eec:	4770      	bx	lr

08019eee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8019eee:	b480      	push	{r7}
 8019ef0:	b083      	sub	sp, #12
 8019ef2:	af00      	add	r7, sp, #0
 8019ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019ef6:	bf00      	nop
 8019ef8:	370c      	adds	r7, #12
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bc80      	pop	{r7}
 8019efe:	4770      	bx	lr

08019f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d101      	bne.n	8019f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019f0e:	2301      	movs	r3, #1
 8019f10:	e03f      	b.n	8019f92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8019f18:	b2db      	uxtb	r3, r3
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d106      	bne.n	8019f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	2200      	movs	r2, #0
 8019f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	f7fa feec 	bl	8014d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2224      	movs	r2, #36	; 0x24
 8019f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	68da      	ldr	r2, [r3, #12]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8019f44:	6878      	ldr	r0, [r7, #4]
 8019f46:	f000 f905 	bl	801a154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	691a      	ldr	r2, [r3, #16]
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8019f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	695a      	ldr	r2, [r3, #20]
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8019f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	68da      	ldr	r2, [r3, #12]
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2220      	movs	r2, #32
 8019f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	2220      	movs	r2, #32
 8019f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8019f90:	2300      	movs	r3, #0
}
 8019f92:	4618      	mov	r0, r3
 8019f94:	3708      	adds	r7, #8
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}

08019f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b08a      	sub	sp, #40	; 0x28
 8019f9e:	af02      	add	r7, sp, #8
 8019fa0:	60f8      	str	r0, [r7, #12]
 8019fa2:	60b9      	str	r1, [r7, #8]
 8019fa4:	603b      	str	r3, [r7, #0]
 8019fa6:	4613      	mov	r3, r2
 8019fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8019faa:	2300      	movs	r3, #0
 8019fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	2b20      	cmp	r3, #32
 8019fb8:	d17c      	bne.n	801a0b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d002      	beq.n	8019fc6 <HAL_UART_Transmit+0x2c>
 8019fc0:	88fb      	ldrh	r3, [r7, #6]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d101      	bne.n	8019fca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	e075      	b.n	801a0b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d101      	bne.n	8019fd8 <HAL_UART_Transmit+0x3e>
 8019fd4:	2302      	movs	r3, #2
 8019fd6:	e06e      	b.n	801a0b6 <HAL_UART_Transmit+0x11c>
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	2201      	movs	r2, #1
 8019fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	2221      	movs	r2, #33	; 0x21
 8019fea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8019fee:	f7fb f885 	bl	80150fc <HAL_GetTick>
 8019ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	88fa      	ldrh	r2, [r7, #6]
 8019ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	88fa      	ldrh	r2, [r7, #6]
 8019ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	689b      	ldr	r3, [r3, #8]
 801a004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a008:	d108      	bne.n	801a01c <HAL_UART_Transmit+0x82>
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	691b      	ldr	r3, [r3, #16]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d104      	bne.n	801a01c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801a012:	2300      	movs	r3, #0
 801a014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	61bb      	str	r3, [r7, #24]
 801a01a:	e003      	b.n	801a024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801a020:	2300      	movs	r3, #0
 801a022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	2200      	movs	r2, #0
 801a028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801a02c:	e02a      	b.n	801a084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	9300      	str	r3, [sp, #0]
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	2200      	movs	r2, #0
 801a036:	2180      	movs	r1, #128	; 0x80
 801a038:	68f8      	ldr	r0, [r7, #12]
 801a03a:	f000 f840 	bl	801a0be <UART_WaitOnFlagUntilTimeout>
 801a03e:	4603      	mov	r3, r0
 801a040:	2b00      	cmp	r3, #0
 801a042:	d001      	beq.n	801a048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801a044:	2303      	movs	r3, #3
 801a046:	e036      	b.n	801a0b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801a048:	69fb      	ldr	r3, [r7, #28]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d10b      	bne.n	801a066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801a04e:	69bb      	ldr	r3, [r7, #24]
 801a050:	881b      	ldrh	r3, [r3, #0]
 801a052:	461a      	mov	r2, r3
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a05c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801a05e:	69bb      	ldr	r3, [r7, #24]
 801a060:	3302      	adds	r3, #2
 801a062:	61bb      	str	r3, [r7, #24]
 801a064:	e007      	b.n	801a076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	781a      	ldrb	r2, [r3, #0]
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801a070:	69fb      	ldr	r3, [r7, #28]
 801a072:	3301      	adds	r3, #1
 801a074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	3b01      	subs	r3, #1
 801a07e:	b29a      	uxth	r2, r3
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a088:	b29b      	uxth	r3, r3
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d1cf      	bne.n	801a02e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801a08e:	683b      	ldr	r3, [r7, #0]
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	697b      	ldr	r3, [r7, #20]
 801a094:	2200      	movs	r2, #0
 801a096:	2140      	movs	r1, #64	; 0x40
 801a098:	68f8      	ldr	r0, [r7, #12]
 801a09a:	f000 f810 	bl	801a0be <UART_WaitOnFlagUntilTimeout>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d001      	beq.n	801a0a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801a0a4:	2303      	movs	r3, #3
 801a0a6:	e006      	b.n	801a0b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	2220      	movs	r2, #32
 801a0ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	e000      	b.n	801a0b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801a0b4:	2302      	movs	r3, #2
  }
}
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	3720      	adds	r7, #32
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}

0801a0be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b084      	sub	sp, #16
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	60f8      	str	r0, [r7, #12]
 801a0c6:	60b9      	str	r1, [r7, #8]
 801a0c8:	603b      	str	r3, [r7, #0]
 801a0ca:	4613      	mov	r3, r2
 801a0cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a0ce:	e02c      	b.n	801a12a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a0d0:	69bb      	ldr	r3, [r7, #24]
 801a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d6:	d028      	beq.n	801a12a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801a0d8:	69bb      	ldr	r3, [r7, #24]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d007      	beq.n	801a0ee <UART_WaitOnFlagUntilTimeout+0x30>
 801a0de:	f7fb f80d 	bl	80150fc <HAL_GetTick>
 801a0e2:	4602      	mov	r2, r0
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	1ad3      	subs	r3, r2, r3
 801a0e8:	69ba      	ldr	r2, [r7, #24]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d21d      	bcs.n	801a12a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	68da      	ldr	r2, [r3, #12]
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a0fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	695a      	ldr	r2, [r3, #20]
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	f022 0201 	bic.w	r2, r2, #1
 801a10c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	2220      	movs	r2, #32
 801a112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	2220      	movs	r2, #32
 801a11a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2200      	movs	r2, #0
 801a122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801a126:	2303      	movs	r3, #3
 801a128:	e00f      	b.n	801a14a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	681a      	ldr	r2, [r3, #0]
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	4013      	ands	r3, r2
 801a134:	68ba      	ldr	r2, [r7, #8]
 801a136:	429a      	cmp	r2, r3
 801a138:	bf0c      	ite	eq
 801a13a:	2301      	moveq	r3, #1
 801a13c:	2300      	movne	r3, #0
 801a13e:	b2db      	uxtb	r3, r3
 801a140:	461a      	mov	r2, r3
 801a142:	79fb      	ldrb	r3, [r7, #7]
 801a144:	429a      	cmp	r2, r3
 801a146:	d0c3      	beq.n	801a0d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a148:	2300      	movs	r3, #0
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	3710      	adds	r7, #16
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}
	...

0801a154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b084      	sub	sp, #16
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	691b      	ldr	r3, [r3, #16]
 801a162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	68da      	ldr	r2, [r3, #12]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	430a      	orrs	r2, r1
 801a170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	689a      	ldr	r2, [r3, #8]
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	691b      	ldr	r3, [r3, #16]
 801a17a:	431a      	orrs	r2, r3
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	695b      	ldr	r3, [r3, #20]
 801a180:	4313      	orrs	r3, r2
 801a182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	68db      	ldr	r3, [r3, #12]
 801a18a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801a18e:	f023 030c 	bic.w	r3, r3, #12
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	6812      	ldr	r2, [r2, #0]
 801a196:	68b9      	ldr	r1, [r7, #8]
 801a198:	430b      	orrs	r3, r1
 801a19a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	695b      	ldr	r3, [r3, #20]
 801a1a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	699a      	ldr	r2, [r3, #24]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	430a      	orrs	r2, r1
 801a1b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	4a2c      	ldr	r2, [pc, #176]	; (801a268 <UART_SetConfig+0x114>)
 801a1b8:	4293      	cmp	r3, r2
 801a1ba:	d103      	bne.n	801a1c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 801a1bc:	f7ff f8b8 	bl	8019330 <HAL_RCC_GetPCLK2Freq>
 801a1c0:	60f8      	str	r0, [r7, #12]
 801a1c2:	e002      	b.n	801a1ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 801a1c4:	f7ff f8a0 	bl	8019308 <HAL_RCC_GetPCLK1Freq>
 801a1c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801a1ca:	68fa      	ldr	r2, [r7, #12]
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	009b      	lsls	r3, r3, #2
 801a1d0:	4413      	add	r3, r2
 801a1d2:	009a      	lsls	r2, r3, #2
 801a1d4:	441a      	add	r2, r3
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	685b      	ldr	r3, [r3, #4]
 801a1da:	009b      	lsls	r3, r3, #2
 801a1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 801a1e0:	4a22      	ldr	r2, [pc, #136]	; (801a26c <UART_SetConfig+0x118>)
 801a1e2:	fba2 2303 	umull	r2, r3, r2, r3
 801a1e6:	095b      	lsrs	r3, r3, #5
 801a1e8:	0119      	lsls	r1, r3, #4
 801a1ea:	68fa      	ldr	r2, [r7, #12]
 801a1ec:	4613      	mov	r3, r2
 801a1ee:	009b      	lsls	r3, r3, #2
 801a1f0:	4413      	add	r3, r2
 801a1f2:	009a      	lsls	r2, r3, #2
 801a1f4:	441a      	add	r2, r3
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	685b      	ldr	r3, [r3, #4]
 801a1fa:	009b      	lsls	r3, r3, #2
 801a1fc:	fbb2 f2f3 	udiv	r2, r2, r3
 801a200:	4b1a      	ldr	r3, [pc, #104]	; (801a26c <UART_SetConfig+0x118>)
 801a202:	fba3 0302 	umull	r0, r3, r3, r2
 801a206:	095b      	lsrs	r3, r3, #5
 801a208:	2064      	movs	r0, #100	; 0x64
 801a20a:	fb00 f303 	mul.w	r3, r0, r3
 801a20e:	1ad3      	subs	r3, r2, r3
 801a210:	011b      	lsls	r3, r3, #4
 801a212:	3332      	adds	r3, #50	; 0x32
 801a214:	4a15      	ldr	r2, [pc, #84]	; (801a26c <UART_SetConfig+0x118>)
 801a216:	fba2 2303 	umull	r2, r3, r2, r3
 801a21a:	095b      	lsrs	r3, r3, #5
 801a21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a220:	4419      	add	r1, r3
 801a222:	68fa      	ldr	r2, [r7, #12]
 801a224:	4613      	mov	r3, r2
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	4413      	add	r3, r2
 801a22a:	009a      	lsls	r2, r3, #2
 801a22c:	441a      	add	r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	009b      	lsls	r3, r3, #2
 801a234:	fbb2 f2f3 	udiv	r2, r2, r3
 801a238:	4b0c      	ldr	r3, [pc, #48]	; (801a26c <UART_SetConfig+0x118>)
 801a23a:	fba3 0302 	umull	r0, r3, r3, r2
 801a23e:	095b      	lsrs	r3, r3, #5
 801a240:	2064      	movs	r0, #100	; 0x64
 801a242:	fb00 f303 	mul.w	r3, r0, r3
 801a246:	1ad3      	subs	r3, r2, r3
 801a248:	011b      	lsls	r3, r3, #4
 801a24a:	3332      	adds	r3, #50	; 0x32
 801a24c:	4a07      	ldr	r2, [pc, #28]	; (801a26c <UART_SetConfig+0x118>)
 801a24e:	fba2 2303 	umull	r2, r3, r2, r3
 801a252:	095b      	lsrs	r3, r3, #5
 801a254:	f003 020f 	and.w	r2, r3, #15
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	440a      	add	r2, r1
 801a25e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 801a260:	bf00      	nop
 801a262:	3710      	adds	r7, #16
 801a264:	46bd      	mov	sp, r7
 801a266:	bd80      	pop	{r7, pc}
 801a268:	40013800 	.word	0x40013800
 801a26c:	51eb851f 	.word	0x51eb851f

0801a270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801a270:	b084      	sub	sp, #16
 801a272:	b480      	push	{r7}
 801a274:	b083      	sub	sp, #12
 801a276:	af00      	add	r7, sp, #0
 801a278:	6078      	str	r0, [r7, #4]
 801a27a:	f107 0014 	add.w	r0, r7, #20
 801a27e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801a282:	2300      	movs	r3, #0
}
 801a284:	4618      	mov	r0, r3
 801a286:	370c      	adds	r7, #12
 801a288:	46bd      	mov	sp, r7
 801a28a:	bc80      	pop	{r7}
 801a28c:	b004      	add	sp, #16
 801a28e:	4770      	bx	lr

0801a290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801a290:	b480      	push	{r7}
 801a292:	b085      	sub	sp, #20
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2200      	movs	r2, #0
 801a29c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801a2a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 801a2a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	b29a      	uxth	r2, r3
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801a2b0:	2300      	movs	r3, #0
}
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	3714      	adds	r7, #20
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bc80      	pop	{r7}
 801a2ba:	4770      	bx	lr

0801a2bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b085      	sub	sp, #20
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801a2c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 801a2c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801a2d0:	b29a      	uxth	r2, r3
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	b29b      	uxth	r3, r3
 801a2d6:	43db      	mvns	r3, r3
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	4013      	ands	r3, r2
 801a2dc:	b29a      	uxth	r2, r3
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801a2e4:	2300      	movs	r3, #0
}
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	3714      	adds	r7, #20
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bc80      	pop	{r7}
 801a2ee:	4770      	bx	lr

0801a2f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 801a2f0:	b480      	push	{r7}
 801a2f2:	b083      	sub	sp, #12
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	460b      	mov	r3, r1
 801a2fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801a2fc:	2300      	movs	r3, #0
}
 801a2fe:	4618      	mov	r0, r3
 801a300:	370c      	adds	r7, #12
 801a302:	46bd      	mov	sp, r7
 801a304:	bc80      	pop	{r7}
 801a306:	4770      	bx	lr

0801a308 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801a308:	b084      	sub	sp, #16
 801a30a:	b480      	push	{r7}
 801a30c:	b083      	sub	sp, #12
 801a30e:	af00      	add	r7, sp, #0
 801a310:	6078      	str	r0, [r7, #4]
 801a312:	f107 0014 	add.w	r0, r7, #20
 801a316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	2201      	movs	r2, #1
 801a31e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	2200      	movs	r2, #0
 801a326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	2200      	movs	r2, #0
 801a32e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2200      	movs	r2, #0
 801a336:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801a33a:	2300      	movs	r3, #0
}
 801a33c:	4618      	mov	r0, r3
 801a33e:	370c      	adds	r7, #12
 801a340:	46bd      	mov	sp, r7
 801a342:	bc80      	pop	{r7}
 801a344:	b004      	add	sp, #16
 801a346:	4770      	bx	lr

0801a348 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a348:	b480      	push	{r7}
 801a34a:	b09b      	sub	sp, #108	; 0x6c
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
 801a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801a352:	2300      	movs	r3, #0
 801a354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801a358:	687a      	ldr	r2, [r7, #4]
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	781b      	ldrb	r3, [r3, #0]
 801a35e:	009b      	lsls	r3, r3, #2
 801a360:	4413      	add	r3, r2
 801a362:	881b      	ldrh	r3, [r3, #0]
 801a364:	b29b      	uxth	r3, r3
 801a366:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 801a36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a36e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	78db      	ldrb	r3, [r3, #3]
 801a376:	2b03      	cmp	r3, #3
 801a378:	d81f      	bhi.n	801a3ba <USB_ActivateEndpoint+0x72>
 801a37a:	a201      	add	r2, pc, #4	; (adr r2, 801a380 <USB_ActivateEndpoint+0x38>)
 801a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a380:	0801a391 	.word	0x0801a391
 801a384:	0801a3ad 	.word	0x0801a3ad
 801a388:	0801a3c3 	.word	0x0801a3c3
 801a38c:	0801a39f 	.word	0x0801a39f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801a390:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a398:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 801a39c:	e012      	b.n	801a3c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801a39e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a3a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 801a3a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 801a3aa:	e00b      	b.n	801a3c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801a3ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a3b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a3b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 801a3b8:	e004      	b.n	801a3c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801a3ba:	2301      	movs	r3, #1
 801a3bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 801a3c0:	e000      	b.n	801a3c4 <USB_ActivateEndpoint+0x7c>
      break;
 801a3c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801a3c4:	687a      	ldr	r2, [r7, #4]
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	009b      	lsls	r3, r3, #2
 801a3cc:	441a      	add	r2, r3
 801a3ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a3d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	781b      	ldrb	r3, [r3, #0]
 801a3ec:	009b      	lsls	r3, r3, #2
 801a3ee:	4413      	add	r3, r2
 801a3f0:	881b      	ldrh	r3, [r3, #0]
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a3fc:	b29a      	uxth	r2, r3
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	781b      	ldrb	r3, [r3, #0]
 801a402:	b29b      	uxth	r3, r3
 801a404:	4313      	orrs	r3, r2
 801a406:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801a40a:	687a      	ldr	r2, [r7, #4]
 801a40c:	683b      	ldr	r3, [r7, #0]
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	441a      	add	r2, r3
 801a414:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a41c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a428:	b29b      	uxth	r3, r3
 801a42a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801a42c:	683b      	ldr	r3, [r7, #0]
 801a42e:	7b1b      	ldrb	r3, [r3, #12]
 801a430:	2b00      	cmp	r3, #0
 801a432:	f040 8149 	bne.w	801a6c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 801a436:	683b      	ldr	r3, [r7, #0]
 801a438:	785b      	ldrb	r3, [r3, #1]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	f000 8084 	beq.w	801a548 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	617b      	str	r3, [r7, #20]
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	461a      	mov	r2, r3
 801a44e:	697b      	ldr	r3, [r7, #20]
 801a450:	4413      	add	r3, r2
 801a452:	617b      	str	r3, [r7, #20]
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	781b      	ldrb	r3, [r3, #0]
 801a458:	011a      	lsls	r2, r3, #4
 801a45a:	697b      	ldr	r3, [r7, #20]
 801a45c:	4413      	add	r3, r2
 801a45e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a462:	613b      	str	r3, [r7, #16]
 801a464:	683b      	ldr	r3, [r7, #0]
 801a466:	88db      	ldrh	r3, [r3, #6]
 801a468:	085b      	lsrs	r3, r3, #1
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	005b      	lsls	r3, r3, #1
 801a46e:	b29a      	uxth	r2, r3
 801a470:	693b      	ldr	r3, [r7, #16]
 801a472:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a474:	687a      	ldr	r2, [r7, #4]
 801a476:	683b      	ldr	r3, [r7, #0]
 801a478:	781b      	ldrb	r3, [r3, #0]
 801a47a:	009b      	lsls	r3, r3, #2
 801a47c:	4413      	add	r3, r2
 801a47e:	881b      	ldrh	r3, [r3, #0]
 801a480:	81fb      	strh	r3, [r7, #14]
 801a482:	89fb      	ldrh	r3, [r7, #14]
 801a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d01b      	beq.n	801a4c4 <USB_ActivateEndpoint+0x17c>
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	009b      	lsls	r3, r3, #2
 801a494:	4413      	add	r3, r2
 801a496:	881b      	ldrh	r3, [r3, #0]
 801a498:	b29b      	uxth	r3, r3
 801a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a4a2:	81bb      	strh	r3, [r7, #12]
 801a4a4:	687a      	ldr	r2, [r7, #4]
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	781b      	ldrb	r3, [r3, #0]
 801a4aa:	009b      	lsls	r3, r3, #2
 801a4ac:	441a      	add	r2, r3
 801a4ae:	89bb      	ldrh	r3, [r7, #12]
 801a4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a4b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a4bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	78db      	ldrb	r3, [r3, #3]
 801a4c8:	2b01      	cmp	r3, #1
 801a4ca:	d020      	beq.n	801a50e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	009b      	lsls	r3, r3, #2
 801a4d4:	4413      	add	r3, r2
 801a4d6:	881b      	ldrh	r3, [r3, #0]
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a4e2:	813b      	strh	r3, [r7, #8]
 801a4e4:	893b      	ldrh	r3, [r7, #8]
 801a4e6:	f083 0320 	eor.w	r3, r3, #32
 801a4ea:	813b      	strh	r3, [r7, #8]
 801a4ec:	687a      	ldr	r2, [r7, #4]
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	009b      	lsls	r3, r3, #2
 801a4f4:	441a      	add	r2, r3
 801a4f6:	893b      	ldrh	r3, [r7, #8]
 801a4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a508:	b29b      	uxth	r3, r3
 801a50a:	8013      	strh	r3, [r2, #0]
 801a50c:	e27f      	b.n	801aa0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a50e:	687a      	ldr	r2, [r7, #4]
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	781b      	ldrb	r3, [r3, #0]
 801a514:	009b      	lsls	r3, r3, #2
 801a516:	4413      	add	r3, r2
 801a518:	881b      	ldrh	r3, [r3, #0]
 801a51a:	b29b      	uxth	r3, r3
 801a51c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a524:	817b      	strh	r3, [r7, #10]
 801a526:	687a      	ldr	r2, [r7, #4]
 801a528:	683b      	ldr	r3, [r7, #0]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	009b      	lsls	r3, r3, #2
 801a52e:	441a      	add	r2, r3
 801a530:	897b      	ldrh	r3, [r7, #10]
 801a532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a542:	b29b      	uxth	r3, r3
 801a544:	8013      	strh	r3, [r2, #0]
 801a546:	e262      	b.n	801aa0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801a552:	b29b      	uxth	r3, r3
 801a554:	461a      	mov	r2, r3
 801a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a558:	4413      	add	r3, r2
 801a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	781b      	ldrb	r3, [r3, #0]
 801a560:	011a      	lsls	r2, r3, #4
 801a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a564:	4413      	add	r3, r2
 801a566:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801a56a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	88db      	ldrh	r3, [r3, #6]
 801a570:	085b      	lsrs	r3, r3, #1
 801a572:	b29b      	uxth	r3, r3
 801a574:	005b      	lsls	r3, r3, #1
 801a576:	b29a      	uxth	r2, r3
 801a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a57a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	627b      	str	r3, [r7, #36]	; 0x24
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801a586:	b29b      	uxth	r3, r3
 801a588:	461a      	mov	r2, r3
 801a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a58c:	4413      	add	r3, r2
 801a58e:	627b      	str	r3, [r7, #36]	; 0x24
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	011a      	lsls	r2, r3, #4
 801a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a598:	4413      	add	r3, r2
 801a59a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801a59e:	623b      	str	r3, [r7, #32]
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	691b      	ldr	r3, [r3, #16]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d112      	bne.n	801a5ce <USB_ActivateEndpoint+0x286>
 801a5a8:	6a3b      	ldr	r3, [r7, #32]
 801a5aa:	881b      	ldrh	r3, [r3, #0]
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801a5b2:	b29a      	uxth	r2, r3
 801a5b4:	6a3b      	ldr	r3, [r7, #32]
 801a5b6:	801a      	strh	r2, [r3, #0]
 801a5b8:	6a3b      	ldr	r3, [r7, #32]
 801a5ba:	881b      	ldrh	r3, [r3, #0]
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801a5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801a5c6:	b29a      	uxth	r2, r3
 801a5c8:	6a3b      	ldr	r3, [r7, #32]
 801a5ca:	801a      	strh	r2, [r3, #0]
 801a5cc:	e02f      	b.n	801a62e <USB_ActivateEndpoint+0x2e6>
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	691b      	ldr	r3, [r3, #16]
 801a5d2:	2b3e      	cmp	r3, #62	; 0x3e
 801a5d4:	d813      	bhi.n	801a5fe <USB_ActivateEndpoint+0x2b6>
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	691b      	ldr	r3, [r3, #16]
 801a5da:	085b      	lsrs	r3, r3, #1
 801a5dc:	663b      	str	r3, [r7, #96]	; 0x60
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	691b      	ldr	r3, [r3, #16]
 801a5e2:	f003 0301 	and.w	r3, r3, #1
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d002      	beq.n	801a5f0 <USB_ActivateEndpoint+0x2a8>
 801a5ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a5ec:	3301      	adds	r3, #1
 801a5ee:	663b      	str	r3, [r7, #96]	; 0x60
 801a5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a5f2:	b29b      	uxth	r3, r3
 801a5f4:	029b      	lsls	r3, r3, #10
 801a5f6:	b29a      	uxth	r2, r3
 801a5f8:	6a3b      	ldr	r3, [r7, #32]
 801a5fa:	801a      	strh	r2, [r3, #0]
 801a5fc:	e017      	b.n	801a62e <USB_ActivateEndpoint+0x2e6>
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	691b      	ldr	r3, [r3, #16]
 801a602:	095b      	lsrs	r3, r3, #5
 801a604:	663b      	str	r3, [r7, #96]	; 0x60
 801a606:	683b      	ldr	r3, [r7, #0]
 801a608:	691b      	ldr	r3, [r3, #16]
 801a60a:	f003 031f 	and.w	r3, r3, #31
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d102      	bne.n	801a618 <USB_ActivateEndpoint+0x2d0>
 801a612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a614:	3b01      	subs	r3, #1
 801a616:	663b      	str	r3, [r7, #96]	; 0x60
 801a618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	029b      	lsls	r3, r3, #10
 801a61e:	b29b      	uxth	r3, r3
 801a620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801a624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801a628:	b29a      	uxth	r2, r3
 801a62a:	6a3b      	ldr	r3, [r7, #32]
 801a62c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a62e:	687a      	ldr	r2, [r7, #4]
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	781b      	ldrb	r3, [r3, #0]
 801a634:	009b      	lsls	r3, r3, #2
 801a636:	4413      	add	r3, r2
 801a638:	881b      	ldrh	r3, [r3, #0]
 801a63a:	83fb      	strh	r3, [r7, #30]
 801a63c:	8bfb      	ldrh	r3, [r7, #30]
 801a63e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a642:	2b00      	cmp	r3, #0
 801a644:	d01b      	beq.n	801a67e <USB_ActivateEndpoint+0x336>
 801a646:	687a      	ldr	r2, [r7, #4]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	009b      	lsls	r3, r3, #2
 801a64e:	4413      	add	r3, r2
 801a650:	881b      	ldrh	r3, [r3, #0]
 801a652:	b29b      	uxth	r3, r3
 801a654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a65c:	83bb      	strh	r3, [r7, #28]
 801a65e:	687a      	ldr	r2, [r7, #4]
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	781b      	ldrb	r3, [r3, #0]
 801a664:	009b      	lsls	r3, r3, #2
 801a666:	441a      	add	r2, r3
 801a668:	8bbb      	ldrh	r3, [r7, #28]
 801a66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801a676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a67e:	687a      	ldr	r2, [r7, #4]
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	009b      	lsls	r3, r3, #2
 801a686:	4413      	add	r3, r2
 801a688:	881b      	ldrh	r3, [r3, #0]
 801a68a:	b29b      	uxth	r3, r3
 801a68c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a694:	837b      	strh	r3, [r7, #26]
 801a696:	8b7b      	ldrh	r3, [r7, #26]
 801a698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801a69c:	837b      	strh	r3, [r7, #26]
 801a69e:	8b7b      	ldrh	r3, [r7, #26]
 801a6a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801a6a4:	837b      	strh	r3, [r7, #26]
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	009b      	lsls	r3, r3, #2
 801a6ae:	441a      	add	r2, r3
 801a6b0:	8b7b      	ldrh	r3, [r7, #26]
 801a6b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a6b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a6ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6c2:	b29b      	uxth	r3, r3
 801a6c4:	8013      	strh	r3, [r2, #0]
 801a6c6:	e1a2      	b.n	801aa0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 801a6c8:	687a      	ldr	r2, [r7, #4]
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	009b      	lsls	r3, r3, #2
 801a6d0:	4413      	add	r3, r2
 801a6d2:	881b      	ldrh	r3, [r3, #0]
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a6de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 801a6e2:	687a      	ldr	r2, [r7, #4]
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	781b      	ldrb	r3, [r3, #0]
 801a6e8:	009b      	lsls	r3, r3, #2
 801a6ea:	441a      	add	r2, r3
 801a6ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a6f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a6f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a6f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801a6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a700:	b29b      	uxth	r3, r3
 801a702:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	65bb      	str	r3, [r7, #88]	; 0x58
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801a70e:	b29b      	uxth	r3, r3
 801a710:	461a      	mov	r2, r3
 801a712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a714:	4413      	add	r3, r2
 801a716:	65bb      	str	r3, [r7, #88]	; 0x58
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	011a      	lsls	r2, r3, #4
 801a71e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a720:	4413      	add	r3, r2
 801a722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a726:	657b      	str	r3, [r7, #84]	; 0x54
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	891b      	ldrh	r3, [r3, #8]
 801a72c:	085b      	lsrs	r3, r3, #1
 801a72e:	b29b      	uxth	r3, r3
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	b29a      	uxth	r2, r3
 801a734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a736:	801a      	strh	r2, [r3, #0]
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	653b      	str	r3, [r7, #80]	; 0x50
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801a742:	b29b      	uxth	r3, r3
 801a744:	461a      	mov	r2, r3
 801a746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a748:	4413      	add	r3, r2
 801a74a:	653b      	str	r3, [r7, #80]	; 0x50
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	781b      	ldrb	r3, [r3, #0]
 801a750:	011a      	lsls	r2, r3, #4
 801a752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a754:	4413      	add	r3, r2
 801a756:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801a75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	895b      	ldrh	r3, [r3, #10]
 801a760:	085b      	lsrs	r3, r3, #1
 801a762:	b29b      	uxth	r3, r3
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	b29a      	uxth	r2, r3
 801a768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a76a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	785b      	ldrb	r3, [r3, #1]
 801a770:	2b00      	cmp	r3, #0
 801a772:	f040 8091 	bne.w	801a898 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a776:	687a      	ldr	r2, [r7, #4]
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	781b      	ldrb	r3, [r3, #0]
 801a77c:	009b      	lsls	r3, r3, #2
 801a77e:	4413      	add	r3, r2
 801a780:	881b      	ldrh	r3, [r3, #0]
 801a782:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d01b      	beq.n	801a7c6 <USB_ActivateEndpoint+0x47e>
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	683b      	ldr	r3, [r7, #0]
 801a792:	781b      	ldrb	r3, [r3, #0]
 801a794:	009b      	lsls	r3, r3, #2
 801a796:	4413      	add	r3, r2
 801a798:	881b      	ldrh	r3, [r3, #0]
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a7a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	781b      	ldrb	r3, [r3, #0]
 801a7ac:	009b      	lsls	r3, r3, #2
 801a7ae:	441a      	add	r2, r3
 801a7b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a7b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a7ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801a7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a7c6:	687a      	ldr	r2, [r7, #4]
 801a7c8:	683b      	ldr	r3, [r7, #0]
 801a7ca:	781b      	ldrb	r3, [r3, #0]
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	4413      	add	r3, r2
 801a7d0:	881b      	ldrh	r3, [r3, #0]
 801a7d2:	873b      	strh	r3, [r7, #56]	; 0x38
 801a7d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d01b      	beq.n	801a816 <USB_ActivateEndpoint+0x4ce>
 801a7de:	687a      	ldr	r2, [r7, #4]
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	781b      	ldrb	r3, [r3, #0]
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	4413      	add	r3, r2
 801a7e8:	881b      	ldrh	r3, [r3, #0]
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a7f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 801a7f6:	687a      	ldr	r2, [r7, #4]
 801a7f8:	683b      	ldr	r3, [r7, #0]
 801a7fa:	781b      	ldrb	r3, [r3, #0]
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	441a      	add	r2, r3
 801a800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a80e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801a812:	b29b      	uxth	r3, r3
 801a814:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a816:	687a      	ldr	r2, [r7, #4]
 801a818:	683b      	ldr	r3, [r7, #0]
 801a81a:	781b      	ldrb	r3, [r3, #0]
 801a81c:	009b      	lsls	r3, r3, #2
 801a81e:	4413      	add	r3, r2
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	b29b      	uxth	r3, r3
 801a824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a82c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801a82e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a830:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801a834:	86bb      	strh	r3, [r7, #52]	; 0x34
 801a836:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801a83c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801a83e:	687a      	ldr	r2, [r7, #4]
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	781b      	ldrb	r3, [r3, #0]
 801a844:	009b      	lsls	r3, r3, #2
 801a846:	441a      	add	r2, r3
 801a848:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a84a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a84e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a85a:	b29b      	uxth	r3, r3
 801a85c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	009b      	lsls	r3, r3, #2
 801a866:	4413      	add	r3, r2
 801a868:	881b      	ldrh	r3, [r3, #0]
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a874:	867b      	strh	r3, [r7, #50]	; 0x32
 801a876:	687a      	ldr	r2, [r7, #4]
 801a878:	683b      	ldr	r3, [r7, #0]
 801a87a:	781b      	ldrb	r3, [r3, #0]
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	441a      	add	r2, r3
 801a880:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a892:	b29b      	uxth	r3, r3
 801a894:	8013      	strh	r3, [r2, #0]
 801a896:	e0ba      	b.n	801aa0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	683b      	ldr	r3, [r7, #0]
 801a89c:	781b      	ldrb	r3, [r3, #0]
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	4413      	add	r3, r2
 801a8a2:	881b      	ldrh	r3, [r3, #0]
 801a8a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801a8a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801a8ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d01d      	beq.n	801a8f0 <USB_ActivateEndpoint+0x5a8>
 801a8b4:	687a      	ldr	r2, [r7, #4]
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	009b      	lsls	r3, r3, #2
 801a8bc:	4413      	add	r3, r2
 801a8be:	881b      	ldrh	r3, [r3, #0]
 801a8c0:	b29b      	uxth	r3, r3
 801a8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a8ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801a8ce:	687a      	ldr	r2, [r7, #4]
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	781b      	ldrb	r3, [r3, #0]
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	441a      	add	r2, r3
 801a8d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a8dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a8e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a8e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801a8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a8f0:	687a      	ldr	r2, [r7, #4]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	781b      	ldrb	r3, [r3, #0]
 801a8f6:	009b      	lsls	r3, r3, #2
 801a8f8:	4413      	add	r3, r2
 801a8fa:	881b      	ldrh	r3, [r3, #0]
 801a8fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801a900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d01d      	beq.n	801a948 <USB_ActivateEndpoint+0x600>
 801a90c:	687a      	ldr	r2, [r7, #4]
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	781b      	ldrb	r3, [r3, #0]
 801a912:	009b      	lsls	r3, r3, #2
 801a914:	4413      	add	r3, r2
 801a916:	881b      	ldrh	r3, [r3, #0]
 801a918:	b29b      	uxth	r3, r3
 801a91a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a922:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801a926:	687a      	ldr	r2, [r7, #4]
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	781b      	ldrb	r3, [r3, #0]
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	441a      	add	r2, r3
 801a930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a93c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801a944:	b29b      	uxth	r3, r3
 801a946:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	78db      	ldrb	r3, [r3, #3]
 801a94c:	2b01      	cmp	r3, #1
 801a94e:	d024      	beq.n	801a99a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a950:	687a      	ldr	r2, [r7, #4]
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	781b      	ldrb	r3, [r3, #0]
 801a956:	009b      	lsls	r3, r3, #2
 801a958:	4413      	add	r3, r2
 801a95a:	881b      	ldrh	r3, [r3, #0]
 801a95c:	b29b      	uxth	r3, r3
 801a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a966:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a96a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a96e:	f083 0320 	eor.w	r3, r3, #32
 801a972:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	683b      	ldr	r3, [r7, #0]
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	009b      	lsls	r3, r3, #2
 801a97e:	441a      	add	r2, r3
 801a980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a98c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a994:	b29b      	uxth	r3, r3
 801a996:	8013      	strh	r3, [r2, #0]
 801a998:	e01d      	b.n	801a9d6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	009b      	lsls	r3, r3, #2
 801a9a2:	4413      	add	r3, r2
 801a9a4:	881b      	ldrh	r3, [r3, #0]
 801a9a6:	b29b      	uxth	r3, r3
 801a9a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a9ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a9b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	683b      	ldr	r3, [r7, #0]
 801a9b8:	781b      	ldrb	r3, [r3, #0]
 801a9ba:	009b      	lsls	r3, r3, #2
 801a9bc:	441a      	add	r2, r3
 801a9be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a9c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a9c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a9ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a9d6:	687a      	ldr	r2, [r7, #4]
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	009b      	lsls	r3, r3, #2
 801a9de:	4413      	add	r3, r2
 801a9e0:	881b      	ldrh	r3, [r3, #0]
 801a9e2:	b29b      	uxth	r3, r3
 801a9e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a9ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801a9ee:	687a      	ldr	r2, [r7, #4]
 801a9f0:	683b      	ldr	r3, [r7, #0]
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	009b      	lsls	r3, r3, #2
 801a9f6:	441a      	add	r2, r3
 801a9f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a9fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a9fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801aa02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801aa06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 801aa0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801aa12:	4618      	mov	r0, r3
 801aa14:	376c      	adds	r7, #108	; 0x6c
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bc80      	pop	{r7}
 801aa1a:	4770      	bx	lr

0801aa1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	b08d      	sub	sp, #52	; 0x34
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801aa26:	683b      	ldr	r3, [r7, #0]
 801aa28:	7b1b      	ldrb	r3, [r3, #12]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	f040 808e 	bne.w	801ab4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	785b      	ldrb	r3, [r3, #1]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d044      	beq.n	801aac2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801aa38:	687a      	ldr	r2, [r7, #4]
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	009b      	lsls	r3, r3, #2
 801aa40:	4413      	add	r3, r2
 801aa42:	881b      	ldrh	r3, [r3, #0]
 801aa44:	81bb      	strh	r3, [r7, #12]
 801aa46:	89bb      	ldrh	r3, [r7, #12]
 801aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d01b      	beq.n	801aa88 <USB_DeactivateEndpoint+0x6c>
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	781b      	ldrb	r3, [r3, #0]
 801aa56:	009b      	lsls	r3, r3, #2
 801aa58:	4413      	add	r3, r2
 801aa5a:	881b      	ldrh	r3, [r3, #0]
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aa66:	817b      	strh	r3, [r7, #10]
 801aa68:	687a      	ldr	r2, [r7, #4]
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	781b      	ldrb	r3, [r3, #0]
 801aa6e:	009b      	lsls	r3, r3, #2
 801aa70:	441a      	add	r2, r3
 801aa72:	897b      	ldrh	r3, [r7, #10]
 801aa74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801aa78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801aa7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801aa80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	781b      	ldrb	r3, [r3, #0]
 801aa8e:	009b      	lsls	r3, r3, #2
 801aa90:	4413      	add	r3, r2
 801aa92:	881b      	ldrh	r3, [r3, #0]
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aa9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aa9e:	813b      	strh	r3, [r7, #8]
 801aaa0:	687a      	ldr	r2, [r7, #4]
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	781b      	ldrb	r3, [r3, #0]
 801aaa6:	009b      	lsls	r3, r3, #2
 801aaa8:	441a      	add	r2, r3
 801aaaa:	893b      	ldrh	r3, [r7, #8]
 801aaac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801aab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801aab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801aab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	8013      	strh	r3, [r2, #0]
 801aac0:	e192      	b.n	801ade8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801aac2:	687a      	ldr	r2, [r7, #4]
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	009b      	lsls	r3, r3, #2
 801aaca:	4413      	add	r3, r2
 801aacc:	881b      	ldrh	r3, [r3, #0]
 801aace:	827b      	strh	r3, [r7, #18]
 801aad0:	8a7b      	ldrh	r3, [r7, #18]
 801aad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d01b      	beq.n	801ab12 <USB_DeactivateEndpoint+0xf6>
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	009b      	lsls	r3, r3, #2
 801aae2:	4413      	add	r3, r2
 801aae4:	881b      	ldrh	r3, [r3, #0]
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aaec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aaf0:	823b      	strh	r3, [r7, #16]
 801aaf2:	687a      	ldr	r2, [r7, #4]
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	009b      	lsls	r3, r3, #2
 801aafa:	441a      	add	r2, r3
 801aafc:	8a3b      	ldrh	r3, [r7, #16]
 801aafe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ab02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ab06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ab0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ab12:	687a      	ldr	r2, [r7, #4]
 801ab14:	683b      	ldr	r3, [r7, #0]
 801ab16:	781b      	ldrb	r3, [r3, #0]
 801ab18:	009b      	lsls	r3, r3, #2
 801ab1a:	4413      	add	r3, r2
 801ab1c:	881b      	ldrh	r3, [r3, #0]
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ab24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ab28:	81fb      	strh	r3, [r7, #14]
 801ab2a:	687a      	ldr	r2, [r7, #4]
 801ab2c:	683b      	ldr	r3, [r7, #0]
 801ab2e:	781b      	ldrb	r3, [r3, #0]
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	441a      	add	r2, r3
 801ab34:	89fb      	ldrh	r3, [r7, #14]
 801ab36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ab3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ab3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ab42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	8013      	strh	r3, [r2, #0]
 801ab4a:	e14d      	b.n	801ade8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	785b      	ldrb	r3, [r3, #1]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	f040 80a5 	bne.w	801aca0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ab56:	687a      	ldr	r2, [r7, #4]
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	009b      	lsls	r3, r3, #2
 801ab5e:	4413      	add	r3, r2
 801ab60:	881b      	ldrh	r3, [r3, #0]
 801ab62:	843b      	strh	r3, [r7, #32]
 801ab64:	8c3b      	ldrh	r3, [r7, #32]
 801ab66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d01b      	beq.n	801aba6 <USB_DeactivateEndpoint+0x18a>
 801ab6e:	687a      	ldr	r2, [r7, #4]
 801ab70:	683b      	ldr	r3, [r7, #0]
 801ab72:	781b      	ldrb	r3, [r3, #0]
 801ab74:	009b      	lsls	r3, r3, #2
 801ab76:	4413      	add	r3, r2
 801ab78:	881b      	ldrh	r3, [r3, #0]
 801ab7a:	b29b      	uxth	r3, r3
 801ab7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ab80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ab84:	83fb      	strh	r3, [r7, #30]
 801ab86:	687a      	ldr	r2, [r7, #4]
 801ab88:	683b      	ldr	r3, [r7, #0]
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	009b      	lsls	r3, r3, #2
 801ab8e:	441a      	add	r2, r3
 801ab90:	8bfb      	ldrh	r3, [r7, #30]
 801ab92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ab96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ab9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ab9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aba2:	b29b      	uxth	r3, r3
 801aba4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801aba6:	687a      	ldr	r2, [r7, #4]
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	781b      	ldrb	r3, [r3, #0]
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	4413      	add	r3, r2
 801abb0:	881b      	ldrh	r3, [r3, #0]
 801abb2:	83bb      	strh	r3, [r7, #28]
 801abb4:	8bbb      	ldrh	r3, [r7, #28]
 801abb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d01b      	beq.n	801abf6 <USB_DeactivateEndpoint+0x1da>
 801abbe:	687a      	ldr	r2, [r7, #4]
 801abc0:	683b      	ldr	r3, [r7, #0]
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	009b      	lsls	r3, r3, #2
 801abc6:	4413      	add	r3, r2
 801abc8:	881b      	ldrh	r3, [r3, #0]
 801abca:	b29b      	uxth	r3, r3
 801abcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801abd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801abd4:	837b      	strh	r3, [r7, #26]
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	009b      	lsls	r3, r3, #2
 801abde:	441a      	add	r2, r3
 801abe0:	8b7b      	ldrh	r3, [r7, #26]
 801abe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801abe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801abea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801abee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801abf2:	b29b      	uxth	r3, r3
 801abf4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801abf6:	687a      	ldr	r2, [r7, #4]
 801abf8:	683b      	ldr	r3, [r7, #0]
 801abfa:	781b      	ldrb	r3, [r3, #0]
 801abfc:	009b      	lsls	r3, r3, #2
 801abfe:	4413      	add	r3, r2
 801ac00:	881b      	ldrh	r3, [r3, #0]
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ac08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ac0c:	833b      	strh	r3, [r7, #24]
 801ac0e:	687a      	ldr	r2, [r7, #4]
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	441a      	add	r2, r3
 801ac18:	8b3b      	ldrh	r3, [r7, #24]
 801ac1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ac1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ac22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ac26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801ac2a:	b29b      	uxth	r3, r3
 801ac2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ac2e:	687a      	ldr	r2, [r7, #4]
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	781b      	ldrb	r3, [r3, #0]
 801ac34:	009b      	lsls	r3, r3, #2
 801ac36:	4413      	add	r3, r2
 801ac38:	881b      	ldrh	r3, [r3, #0]
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ac40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ac44:	82fb      	strh	r3, [r7, #22]
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	009b      	lsls	r3, r3, #2
 801ac4e:	441a      	add	r2, r3
 801ac50:	8afb      	ldrh	r3, [r7, #22]
 801ac52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ac56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ac5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ac66:	687a      	ldr	r2, [r7, #4]
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	781b      	ldrb	r3, [r3, #0]
 801ac6c:	009b      	lsls	r3, r3, #2
 801ac6e:	4413      	add	r3, r2
 801ac70:	881b      	ldrh	r3, [r3, #0]
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ac7c:	82bb      	strh	r3, [r7, #20]
 801ac7e:	687a      	ldr	r2, [r7, #4]
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	009b      	lsls	r3, r3, #2
 801ac86:	441a      	add	r2, r3
 801ac88:	8abb      	ldrh	r3, [r7, #20]
 801ac8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ac8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ac92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ac96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	8013      	strh	r3, [r2, #0]
 801ac9e:	e0a3      	b.n	801ade8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801aca0:	687a      	ldr	r2, [r7, #4]
 801aca2:	683b      	ldr	r3, [r7, #0]
 801aca4:	781b      	ldrb	r3, [r3, #0]
 801aca6:	009b      	lsls	r3, r3, #2
 801aca8:	4413      	add	r3, r2
 801acaa:	881b      	ldrh	r3, [r3, #0]
 801acac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801acae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801acb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d01b      	beq.n	801acf0 <USB_DeactivateEndpoint+0x2d4>
 801acb8:	687a      	ldr	r2, [r7, #4]
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	781b      	ldrb	r3, [r3, #0]
 801acbe:	009b      	lsls	r3, r3, #2
 801acc0:	4413      	add	r3, r2
 801acc2:	881b      	ldrh	r3, [r3, #0]
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801acce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801acd0:	687a      	ldr	r2, [r7, #4]
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	441a      	add	r2, r3
 801acda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801acdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ace0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ace4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ace8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acec:	b29b      	uxth	r3, r3
 801acee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801acf0:	687a      	ldr	r2, [r7, #4]
 801acf2:	683b      	ldr	r3, [r7, #0]
 801acf4:	781b      	ldrb	r3, [r3, #0]
 801acf6:	009b      	lsls	r3, r3, #2
 801acf8:	4413      	add	r3, r2
 801acfa:	881b      	ldrh	r3, [r3, #0]
 801acfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 801acfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d01b      	beq.n	801ad40 <USB_DeactivateEndpoint+0x324>
 801ad08:	687a      	ldr	r2, [r7, #4]
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	781b      	ldrb	r3, [r3, #0]
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	4413      	add	r3, r2
 801ad12:	881b      	ldrh	r3, [r3, #0]
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ad1e:	853b      	strh	r3, [r7, #40]	; 0x28
 801ad20:	687a      	ldr	r2, [r7, #4]
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	781b      	ldrb	r3, [r3, #0]
 801ad26:	009b      	lsls	r3, r3, #2
 801ad28:	441a      	add	r2, r3
 801ad2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ad2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ad30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ad34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ad38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801ad3c:	b29b      	uxth	r3, r3
 801ad3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801ad40:	687a      	ldr	r2, [r7, #4]
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	009b      	lsls	r3, r3, #2
 801ad48:	4413      	add	r3, r2
 801ad4a:	881b      	ldrh	r3, [r3, #0]
 801ad4c:	b29b      	uxth	r3, r3
 801ad4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ad52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ad56:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ad58:	687a      	ldr	r2, [r7, #4]
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	781b      	ldrb	r3, [r3, #0]
 801ad5e:	009b      	lsls	r3, r3, #2
 801ad60:	441a      	add	r2, r3
 801ad62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ad64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ad68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ad6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ad78:	687a      	ldr	r2, [r7, #4]
 801ad7a:	683b      	ldr	r3, [r7, #0]
 801ad7c:	781b      	ldrb	r3, [r3, #0]
 801ad7e:	009b      	lsls	r3, r3, #2
 801ad80:	4413      	add	r3, r2
 801ad82:	881b      	ldrh	r3, [r3, #0]
 801ad84:	b29b      	uxth	r3, r3
 801ad86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ad8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ad8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 801ad90:	687a      	ldr	r2, [r7, #4]
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	781b      	ldrb	r3, [r3, #0]
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	441a      	add	r2, r3
 801ad9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ada0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ada4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ada8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adac:	b29b      	uxth	r3, r3
 801adae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801adb0:	687a      	ldr	r2, [r7, #4]
 801adb2:	683b      	ldr	r3, [r7, #0]
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	009b      	lsls	r3, r3, #2
 801adb8:	4413      	add	r3, r2
 801adba:	881b      	ldrh	r3, [r3, #0]
 801adbc:	b29b      	uxth	r3, r3
 801adbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801adc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801adc6:	847b      	strh	r3, [r7, #34]	; 0x22
 801adc8:	687a      	ldr	r2, [r7, #4]
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	009b      	lsls	r3, r3, #2
 801add0:	441a      	add	r2, r3
 801add2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801add4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801add8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801addc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ade0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ade4:	b29b      	uxth	r3, r3
 801ade6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801ade8:	2300      	movs	r3, #0
}
 801adea:	4618      	mov	r0, r3
 801adec:	3734      	adds	r7, #52	; 0x34
 801adee:	46bd      	mov	sp, r7
 801adf0:	bc80      	pop	{r7}
 801adf2:	4770      	bx	lr

0801adf4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b0c4      	sub	sp, #272	; 0x110
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	1d3b      	adds	r3, r7, #4
 801adfc:	6018      	str	r0, [r3, #0]
 801adfe:	463b      	mov	r3, r7
 801ae00:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;
uint8_t a=0x98;
 801ae02:	2398      	movs	r3, #152	; 0x98
 801ae04:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  /* IN endpoint */
  if (ep->is_in == 1U)
 801ae08:	463b      	mov	r3, r7
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	785b      	ldrb	r3, [r3, #1]
 801ae0e:	2b01      	cmp	r3, #1
 801ae10:	f040 855b 	bne.w	801b8ca <USB_EPStartXfer+0xad6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801ae14:	463b      	mov	r3, r7
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	699a      	ldr	r2, [r3, #24]
 801ae1a:	463b      	mov	r3, r7
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	691b      	ldr	r3, [r3, #16]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d905      	bls.n	801ae30 <USB_EPStartXfer+0x3c>
    {
      len = ep->maxpacket;
 801ae24:	463b      	mov	r3, r7
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	691b      	ldr	r3, [r3, #16]
 801ae2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801ae2e:	e004      	b.n	801ae3a <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 801ae30:	463b      	mov	r3, r7
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	699b      	ldr	r3, [r3, #24]
 801ae36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801ae3a:	463b      	mov	r3, r7
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	7b1b      	ldrb	r3, [r3, #12]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d134      	bne.n	801aeae <USB_EPStartXfer+0xba>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801ae44:	463b      	mov	r3, r7
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	6959      	ldr	r1, [r3, #20]
 801ae4a:	463b      	mov	r3, r7
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	88da      	ldrh	r2, [r3, #6]
 801ae50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ae54:	b29b      	uxth	r3, r3
 801ae56:	1d38      	adds	r0, r7, #4
 801ae58:	6800      	ldr	r0, [r0, #0]
 801ae5a:	f001 fa30 	bl	801c2be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ae5e:	f107 0310 	add.w	r3, r7, #16
 801ae62:	1d3a      	adds	r2, r7, #4
 801ae64:	6812      	ldr	r2, [r2, #0]
 801ae66:	601a      	str	r2, [r3, #0]
 801ae68:	1d3b      	adds	r3, r7, #4
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801ae70:	b29b      	uxth	r3, r3
 801ae72:	4619      	mov	r1, r3
 801ae74:	f107 0310 	add.w	r3, r7, #16
 801ae78:	f107 0210 	add.w	r2, r7, #16
 801ae7c:	6812      	ldr	r2, [r2, #0]
 801ae7e:	440a      	add	r2, r1
 801ae80:	601a      	str	r2, [r3, #0]
 801ae82:	463b      	mov	r3, r7
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	011a      	lsls	r2, r3, #4
 801ae8a:	f107 0310 	add.w	r3, r7, #16
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	4413      	add	r3, r2
 801ae92:	f203 4204 	addw	r2, r3, #1028	; 0x404
 801ae96:	f107 030c 	add.w	r3, r7, #12
 801ae9a:	601a      	str	r2, [r3, #0]
 801ae9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801aea0:	b29a      	uxth	r2, r3
 801aea2:	f107 030c 	add.w	r3, r7, #12
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	801a      	strh	r2, [r3, #0]
 801aeaa:	f000 bcd9 	b.w	801b860 <USB_EPStartXfer+0xa6c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801aeae:	463b      	mov	r3, r7
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	78db      	ldrb	r3, [r3, #3]
 801aeb4:	2b02      	cmp	r3, #2
 801aeb6:	f040 8347 	bne.w	801b548 <USB_EPStartXfer+0x754>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801aeba:	463b      	mov	r3, r7
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	6a1a      	ldr	r2, [r3, #32]
 801aec0:	463b      	mov	r3, r7
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	691b      	ldr	r3, [r3, #16]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	f240 82eb 	bls.w	801b4a2 <USB_EPStartXfer+0x6ae>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 801aecc:	1d3b      	adds	r3, r7, #4
 801aece:	681a      	ldr	r2, [r3, #0]
 801aed0:	463b      	mov	r3, r7
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	009b      	lsls	r3, r3, #2
 801aed8:	4413      	add	r3, r2
 801aeda:	881b      	ldrh	r3, [r3, #0]
 801aedc:	b29b      	uxth	r3, r3
 801aede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aee6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801aeea:	1d3b      	adds	r3, r7, #4
 801aeec:	681a      	ldr	r2, [r3, #0]
 801aeee:	463b      	mov	r3, r7
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	441a      	add	r2, r3
 801aef8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801aefc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801af00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801af04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801af08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af0c:	b29b      	uxth	r3, r3
 801af0e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801af10:	463b      	mov	r3, r7
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	6a1a      	ldr	r2, [r3, #32]
 801af16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801af1a:	1ad2      	subs	r2, r2, r3
 801af1c:	463b      	mov	r3, r7
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801af22:	1d3b      	adds	r3, r7, #4
 801af24:	681a      	ldr	r2, [r3, #0]
 801af26:	463b      	mov	r3, r7
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	781b      	ldrb	r3, [r3, #0]
 801af2c:	009b      	lsls	r3, r3, #2
 801af2e:	4413      	add	r3, r2
 801af30:	881b      	ldrh	r3, [r3, #0]
 801af32:	b29b      	uxth	r3, r3
 801af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801af38:	2b00      	cmp	r3, #0
 801af3a:	f000 8159 	beq.w	801b1f0 <USB_EPStartXfer+0x3fc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801af3e:	1d3b      	adds	r3, r7, #4
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	633b      	str	r3, [r7, #48]	; 0x30
 801af44:	463b      	mov	r3, r7
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	785b      	ldrb	r3, [r3, #1]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d164      	bne.n	801b018 <USB_EPStartXfer+0x224>
 801af4e:	1d3b      	adds	r3, r7, #4
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	62bb      	str	r3, [r7, #40]	; 0x28
 801af54:	1d3b      	adds	r3, r7, #4
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801af5c:	b29b      	uxth	r3, r3
 801af5e:	461a      	mov	r2, r3
 801af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af62:	4413      	add	r3, r2
 801af64:	62bb      	str	r3, [r7, #40]	; 0x28
 801af66:	463b      	mov	r3, r7
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	781b      	ldrb	r3, [r3, #0]
 801af6c:	011a      	lsls	r2, r3, #4
 801af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af70:	4413      	add	r3, r2
 801af72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801af76:	627b      	str	r3, [r7, #36]	; 0x24
 801af78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d112      	bne.n	801afa6 <USB_EPStartXfer+0x1b2>
 801af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af82:	881b      	ldrh	r3, [r3, #0]
 801af84:	b29b      	uxth	r3, r3
 801af86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801af8a:	b29a      	uxth	r2, r3
 801af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af8e:	801a      	strh	r2, [r3, #0]
 801af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af92:	881b      	ldrh	r3, [r3, #0]
 801af94:	b29b      	uxth	r3, r3
 801af96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801af9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801af9e:	b29a      	uxth	r2, r3
 801afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa2:	801a      	strh	r2, [r3, #0]
 801afa4:	e054      	b.n	801b050 <USB_EPStartXfer+0x25c>
 801afa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801afaa:	2b3e      	cmp	r3, #62	; 0x3e
 801afac:	d817      	bhi.n	801afde <USB_EPStartXfer+0x1ea>
 801afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801afb2:	085b      	lsrs	r3, r3, #1
 801afb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801afb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801afbc:	f003 0301 	and.w	r3, r3, #1
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d004      	beq.n	801afce <USB_EPStartXfer+0x1da>
 801afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801afc8:	3301      	adds	r3, #1
 801afca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801afce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801afd2:	b29b      	uxth	r3, r3
 801afd4:	029b      	lsls	r3, r3, #10
 801afd6:	b29a      	uxth	r2, r3
 801afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afda:	801a      	strh	r2, [r3, #0]
 801afdc:	e038      	b.n	801b050 <USB_EPStartXfer+0x25c>
 801afde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801afe2:	095b      	lsrs	r3, r3, #5
 801afe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801afe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801afec:	f003 031f 	and.w	r3, r3, #31
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d104      	bne.n	801affe <USB_EPStartXfer+0x20a>
 801aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801aff8:	3b01      	subs	r3, #1
 801affa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b002:	b29b      	uxth	r3, r3
 801b004:	029b      	lsls	r3, r3, #10
 801b006:	b29b      	uxth	r3, r3
 801b008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b010:	b29a      	uxth	r2, r3
 801b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b014:	801a      	strh	r2, [r3, #0]
 801b016:	e01b      	b.n	801b050 <USB_EPStartXfer+0x25c>
 801b018:	463b      	mov	r3, r7
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	785b      	ldrb	r3, [r3, #1]
 801b01e:	2b01      	cmp	r3, #1
 801b020:	d116      	bne.n	801b050 <USB_EPStartXfer+0x25c>
 801b022:	1d3b      	adds	r3, r7, #4
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b02a:	b29b      	uxth	r3, r3
 801b02c:	461a      	mov	r2, r3
 801b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b030:	4413      	add	r3, r2
 801b032:	633b      	str	r3, [r7, #48]	; 0x30
 801b034:	463b      	mov	r3, r7
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	781b      	ldrb	r3, [r3, #0]
 801b03a:	011a      	lsls	r2, r3, #4
 801b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b03e:	4413      	add	r3, r2
 801b040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b044:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b04a:	b29a      	uxth	r2, r3
 801b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b04e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801b050:	463b      	mov	r3, r7
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	895b      	ldrh	r3, [r3, #10]
 801b056:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b05a:	463b      	mov	r3, r7
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	6959      	ldr	r1, [r3, #20]
 801b060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b064:	b29b      	uxth	r3, r3
 801b066:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b06a:	1d38      	adds	r0, r7, #4
 801b06c:	6800      	ldr	r0, [r0, #0]
 801b06e:	f001 f926 	bl	801c2be <USB_WritePMA>
            ep->xfer_buff += len;
 801b072:	463b      	mov	r3, r7
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	695a      	ldr	r2, [r3, #20]
 801b078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b07c:	441a      	add	r2, r3
 801b07e:	463b      	mov	r3, r7
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801b084:	463b      	mov	r3, r7
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	6a1a      	ldr	r2, [r3, #32]
 801b08a:	463b      	mov	r3, r7
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	691b      	ldr	r3, [r3, #16]
 801b090:	429a      	cmp	r2, r3
 801b092:	d909      	bls.n	801b0a8 <USB_EPStartXfer+0x2b4>
            {
              ep->xfer_len_db -= len;
 801b094:	463b      	mov	r3, r7
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	6a1a      	ldr	r2, [r3, #32]
 801b09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b09e:	1ad2      	subs	r2, r2, r3
 801b0a0:	463b      	mov	r3, r7
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	621a      	str	r2, [r3, #32]
 801b0a6:	e008      	b.n	801b0ba <USB_EPStartXfer+0x2c6>
            }
            else
            {
              len = ep->xfer_len_db;
 801b0a8:	463b      	mov	r3, r7
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	6a1b      	ldr	r3, [r3, #32]
 801b0ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 801b0b2:	463b      	mov	r3, r7
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801b0ba:	463b      	mov	r3, r7
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	785b      	ldrb	r3, [r3, #1]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d164      	bne.n	801b18e <USB_EPStartXfer+0x39a>
 801b0c4:	1d3b      	adds	r3, r7, #4
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	61bb      	str	r3, [r7, #24]
 801b0ca:	1d3b      	adds	r3, r7, #4
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b0d2:	b29b      	uxth	r3, r3
 801b0d4:	461a      	mov	r2, r3
 801b0d6:	69bb      	ldr	r3, [r7, #24]
 801b0d8:	4413      	add	r3, r2
 801b0da:	61bb      	str	r3, [r7, #24]
 801b0dc:	463b      	mov	r3, r7
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	781b      	ldrb	r3, [r3, #0]
 801b0e2:	011a      	lsls	r2, r3, #4
 801b0e4:	69bb      	ldr	r3, [r7, #24]
 801b0e6:	4413      	add	r3, r2
 801b0e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b0ec:	617b      	str	r3, [r7, #20]
 801b0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d112      	bne.n	801b11c <USB_EPStartXfer+0x328>
 801b0f6:	697b      	ldr	r3, [r7, #20]
 801b0f8:	881b      	ldrh	r3, [r3, #0]
 801b0fa:	b29b      	uxth	r3, r3
 801b0fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b100:	b29a      	uxth	r2, r3
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	801a      	strh	r2, [r3, #0]
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	881b      	ldrh	r3, [r3, #0]
 801b10a:	b29b      	uxth	r3, r3
 801b10c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b114:	b29a      	uxth	r2, r3
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	801a      	strh	r2, [r3, #0]
 801b11a:	e057      	b.n	801b1cc <USB_EPStartXfer+0x3d8>
 801b11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b120:	2b3e      	cmp	r3, #62	; 0x3e
 801b122:	d817      	bhi.n	801b154 <USB_EPStartXfer+0x360>
 801b124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b128:	085b      	lsrs	r3, r3, #1
 801b12a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b132:	f003 0301 	and.w	r3, r3, #1
 801b136:	2b00      	cmp	r3, #0
 801b138:	d004      	beq.n	801b144 <USB_EPStartXfer+0x350>
 801b13a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b13e:	3301      	adds	r3, #1
 801b140:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b144:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b148:	b29b      	uxth	r3, r3
 801b14a:	029b      	lsls	r3, r3, #10
 801b14c:	b29a      	uxth	r2, r3
 801b14e:	697b      	ldr	r3, [r7, #20]
 801b150:	801a      	strh	r2, [r3, #0]
 801b152:	e03b      	b.n	801b1cc <USB_EPStartXfer+0x3d8>
 801b154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b158:	095b      	lsrs	r3, r3, #5
 801b15a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b15e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b162:	f003 031f 	and.w	r3, r3, #31
 801b166:	2b00      	cmp	r3, #0
 801b168:	d104      	bne.n	801b174 <USB_EPStartXfer+0x380>
 801b16a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b16e:	3b01      	subs	r3, #1
 801b170:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b174:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b178:	b29b      	uxth	r3, r3
 801b17a:	029b      	lsls	r3, r3, #10
 801b17c:	b29b      	uxth	r3, r3
 801b17e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b186:	b29a      	uxth	r2, r3
 801b188:	697b      	ldr	r3, [r7, #20]
 801b18a:	801a      	strh	r2, [r3, #0]
 801b18c:	e01e      	b.n	801b1cc <USB_EPStartXfer+0x3d8>
 801b18e:	463b      	mov	r3, r7
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	785b      	ldrb	r3, [r3, #1]
 801b194:	2b01      	cmp	r3, #1
 801b196:	d119      	bne.n	801b1cc <USB_EPStartXfer+0x3d8>
 801b198:	1d3b      	adds	r3, r7, #4
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	623b      	str	r3, [r7, #32]
 801b19e:	1d3b      	adds	r3, r7, #4
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b1a6:	b29b      	uxth	r3, r3
 801b1a8:	461a      	mov	r2, r3
 801b1aa:	6a3b      	ldr	r3, [r7, #32]
 801b1ac:	4413      	add	r3, r2
 801b1ae:	623b      	str	r3, [r7, #32]
 801b1b0:	463b      	mov	r3, r7
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	011a      	lsls	r2, r3, #4
 801b1b8:	6a3b      	ldr	r3, [r7, #32]
 801b1ba:	4413      	add	r3, r2
 801b1bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b1c0:	61fb      	str	r3, [r7, #28]
 801b1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b1c6:	b29a      	uxth	r2, r3
 801b1c8:	69fb      	ldr	r3, [r7, #28]
 801b1ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801b1cc:	463b      	mov	r3, r7
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	891b      	ldrh	r3, [r3, #8]
 801b1d2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b1d6:	463b      	mov	r3, r7
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	6959      	ldr	r1, [r3, #20]
 801b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b1e0:	b29b      	uxth	r3, r3
 801b1e2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b1e6:	1d38      	adds	r0, r7, #4
 801b1e8:	6800      	ldr	r0, [r0, #0]
 801b1ea:	f001 f868 	bl	801c2be <USB_WritePMA>
 801b1ee:	e337      	b.n	801b860 <USB_EPStartXfer+0xa6c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801b1f0:	463b      	mov	r3, r7
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	785b      	ldrb	r3, [r3, #1]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d164      	bne.n	801b2c4 <USB_EPStartXfer+0x4d0>
 801b1fa:	1d3b      	adds	r3, r7, #4
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	64bb      	str	r3, [r7, #72]	; 0x48
 801b200:	1d3b      	adds	r3, r7, #4
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b208:	b29b      	uxth	r3, r3
 801b20a:	461a      	mov	r2, r3
 801b20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b20e:	4413      	add	r3, r2
 801b210:	64bb      	str	r3, [r7, #72]	; 0x48
 801b212:	463b      	mov	r3, r7
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	781b      	ldrb	r3, [r3, #0]
 801b218:	011a      	lsls	r2, r3, #4
 801b21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b21c:	4413      	add	r3, r2
 801b21e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b222:	647b      	str	r3, [r7, #68]	; 0x44
 801b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d112      	bne.n	801b252 <USB_EPStartXfer+0x45e>
 801b22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b22e:	881b      	ldrh	r3, [r3, #0]
 801b230:	b29b      	uxth	r3, r3
 801b232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b236:	b29a      	uxth	r2, r3
 801b238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b23a:	801a      	strh	r2, [r3, #0]
 801b23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b23e:	881b      	ldrh	r3, [r3, #0]
 801b240:	b29b      	uxth	r3, r3
 801b242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b24a:	b29a      	uxth	r2, r3
 801b24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b24e:	801a      	strh	r2, [r3, #0]
 801b250:	e057      	b.n	801b302 <USB_EPStartXfer+0x50e>
 801b252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b256:	2b3e      	cmp	r3, #62	; 0x3e
 801b258:	d817      	bhi.n	801b28a <USB_EPStartXfer+0x496>
 801b25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b25e:	085b      	lsrs	r3, r3, #1
 801b260:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b268:	f003 0301 	and.w	r3, r3, #1
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d004      	beq.n	801b27a <USB_EPStartXfer+0x486>
 801b270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b274:	3301      	adds	r3, #1
 801b276:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b27e:	b29b      	uxth	r3, r3
 801b280:	029b      	lsls	r3, r3, #10
 801b282:	b29a      	uxth	r2, r3
 801b284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b286:	801a      	strh	r2, [r3, #0]
 801b288:	e03b      	b.n	801b302 <USB_EPStartXfer+0x50e>
 801b28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b28e:	095b      	lsrs	r3, r3, #5
 801b290:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b298:	f003 031f 	and.w	r3, r3, #31
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d104      	bne.n	801b2aa <USB_EPStartXfer+0x4b6>
 801b2a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b2a4:	3b01      	subs	r3, #1
 801b2a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	029b      	lsls	r3, r3, #10
 801b2b2:	b29b      	uxth	r3, r3
 801b2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b2bc:	b29a      	uxth	r2, r3
 801b2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2c0:	801a      	strh	r2, [r3, #0]
 801b2c2:	e01e      	b.n	801b302 <USB_EPStartXfer+0x50e>
 801b2c4:	463b      	mov	r3, r7
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	785b      	ldrb	r3, [r3, #1]
 801b2ca:	2b01      	cmp	r3, #1
 801b2cc:	d119      	bne.n	801b302 <USB_EPStartXfer+0x50e>
 801b2ce:	1d3b      	adds	r3, r7, #4
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	653b      	str	r3, [r7, #80]	; 0x50
 801b2d4:	1d3b      	adds	r3, r7, #4
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	461a      	mov	r2, r3
 801b2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2e2:	4413      	add	r3, r2
 801b2e4:	653b      	str	r3, [r7, #80]	; 0x50
 801b2e6:	463b      	mov	r3, r7
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	781b      	ldrb	r3, [r3, #0]
 801b2ec:	011a      	lsls	r2, r3, #4
 801b2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2f0:	4413      	add	r3, r2
 801b2f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b2fc:	b29a      	uxth	r2, r3
 801b2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801b302:	463b      	mov	r3, r7
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	891b      	ldrh	r3, [r3, #8]
 801b308:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b30c:	463b      	mov	r3, r7
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	6959      	ldr	r1, [r3, #20]
 801b312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b316:	b29b      	uxth	r3, r3
 801b318:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b31c:	1d38      	adds	r0, r7, #4
 801b31e:	6800      	ldr	r0, [r0, #0]
 801b320:	f000 ffcd 	bl	801c2be <USB_WritePMA>
            ep->xfer_buff += len;
 801b324:	463b      	mov	r3, r7
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	695a      	ldr	r2, [r3, #20]
 801b32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b32e:	441a      	add	r2, r3
 801b330:	463b      	mov	r3, r7
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801b336:	463b      	mov	r3, r7
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	6a1a      	ldr	r2, [r3, #32]
 801b33c:	463b      	mov	r3, r7
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	691b      	ldr	r3, [r3, #16]
 801b342:	429a      	cmp	r2, r3
 801b344:	d909      	bls.n	801b35a <USB_EPStartXfer+0x566>
            {
              ep->xfer_len_db -= len;
 801b346:	463b      	mov	r3, r7
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	6a1a      	ldr	r2, [r3, #32]
 801b34c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b350:	1ad2      	subs	r2, r2, r3
 801b352:	463b      	mov	r3, r7
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	621a      	str	r2, [r3, #32]
 801b358:	e008      	b.n	801b36c <USB_EPStartXfer+0x578>
            }
            else
            {
              len = ep->xfer_len_db;
 801b35a:	463b      	mov	r3, r7
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	6a1b      	ldr	r3, [r3, #32]
 801b360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 801b364:	463b      	mov	r3, r7
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2200      	movs	r2, #0
 801b36a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801b36c:	1d3b      	adds	r3, r7, #4
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	643b      	str	r3, [r7, #64]	; 0x40
 801b372:	463b      	mov	r3, r7
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	785b      	ldrb	r3, [r3, #1]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d164      	bne.n	801b446 <USB_EPStartXfer+0x652>
 801b37c:	1d3b      	adds	r3, r7, #4
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	63bb      	str	r3, [r7, #56]	; 0x38
 801b382:	1d3b      	adds	r3, r7, #4
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b38a:	b29b      	uxth	r3, r3
 801b38c:	461a      	mov	r2, r3
 801b38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b390:	4413      	add	r3, r2
 801b392:	63bb      	str	r3, [r7, #56]	; 0x38
 801b394:	463b      	mov	r3, r7
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	011a      	lsls	r2, r3, #4
 801b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b39e:	4413      	add	r3, r2
 801b3a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b3a4:	637b      	str	r3, [r7, #52]	; 0x34
 801b3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d112      	bne.n	801b3d4 <USB_EPStartXfer+0x5e0>
 801b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3b0:	881b      	ldrh	r3, [r3, #0]
 801b3b2:	b29b      	uxth	r3, r3
 801b3b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b3b8:	b29a      	uxth	r2, r3
 801b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3bc:	801a      	strh	r2, [r3, #0]
 801b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3c0:	881b      	ldrh	r3, [r3, #0]
 801b3c2:	b29b      	uxth	r3, r3
 801b3c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b3c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b3cc:	b29a      	uxth	r2, r3
 801b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3d0:	801a      	strh	r2, [r3, #0]
 801b3d2:	e054      	b.n	801b47e <USB_EPStartXfer+0x68a>
 801b3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3d8:	2b3e      	cmp	r3, #62	; 0x3e
 801b3da:	d817      	bhi.n	801b40c <USB_EPStartXfer+0x618>
 801b3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3e0:	085b      	lsrs	r3, r3, #1
 801b3e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801b3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3ea:	f003 0301 	and.w	r3, r3, #1
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d004      	beq.n	801b3fc <USB_EPStartXfer+0x608>
 801b3f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801b3fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b400:	b29b      	uxth	r3, r3
 801b402:	029b      	lsls	r3, r3, #10
 801b404:	b29a      	uxth	r2, r3
 801b406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b408:	801a      	strh	r2, [r3, #0]
 801b40a:	e038      	b.n	801b47e <USB_EPStartXfer+0x68a>
 801b40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b410:	095b      	lsrs	r3, r3, #5
 801b412:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801b416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b41a:	f003 031f 	and.w	r3, r3, #31
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d104      	bne.n	801b42c <USB_EPStartXfer+0x638>
 801b422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b426:	3b01      	subs	r3, #1
 801b428:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801b42c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b430:	b29b      	uxth	r3, r3
 801b432:	029b      	lsls	r3, r3, #10
 801b434:	b29b      	uxth	r3, r3
 801b436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b43e:	b29a      	uxth	r2, r3
 801b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b442:	801a      	strh	r2, [r3, #0]
 801b444:	e01b      	b.n	801b47e <USB_EPStartXfer+0x68a>
 801b446:	463b      	mov	r3, r7
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	785b      	ldrb	r3, [r3, #1]
 801b44c:	2b01      	cmp	r3, #1
 801b44e:	d116      	bne.n	801b47e <USB_EPStartXfer+0x68a>
 801b450:	1d3b      	adds	r3, r7, #4
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b458:	b29b      	uxth	r3, r3
 801b45a:	461a      	mov	r2, r3
 801b45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b45e:	4413      	add	r3, r2
 801b460:	643b      	str	r3, [r7, #64]	; 0x40
 801b462:	463b      	mov	r3, r7
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	011a      	lsls	r2, r3, #4
 801b46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b46c:	4413      	add	r3, r2
 801b46e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b472:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b478:	b29a      	uxth	r2, r3
 801b47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b47c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801b47e:	463b      	mov	r3, r7
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	895b      	ldrh	r3, [r3, #10]
 801b484:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b488:	463b      	mov	r3, r7
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	6959      	ldr	r1, [r3, #20]
 801b48e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b492:	b29b      	uxth	r3, r3
 801b494:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b498:	1d38      	adds	r0, r7, #4
 801b49a:	6800      	ldr	r0, [r0, #0]
 801b49c:	f000 ff0f 	bl	801c2be <USB_WritePMA>
 801b4a0:	e1de      	b.n	801b860 <USB_EPStartXfer+0xa6c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801b4a2:	463b      	mov	r3, r7
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	6a1b      	ldr	r3, [r3, #32]
 801b4a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 801b4ac:	1d3b      	adds	r3, r7, #4
 801b4ae:	681a      	ldr	r2, [r3, #0]
 801b4b0:	463b      	mov	r3, r7
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	009b      	lsls	r3, r3, #2
 801b4b8:	4413      	add	r3, r2
 801b4ba:	881b      	ldrh	r3, [r3, #0]
 801b4bc:	b29b      	uxth	r3, r3
 801b4be:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801b4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b4c6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801b4ca:	1d3b      	adds	r3, r7, #4
 801b4cc:	681a      	ldr	r2, [r3, #0]
 801b4ce:	463b      	mov	r3, r7
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	441a      	add	r2, r3
 801b4d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801b4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4ec:	b29b      	uxth	r3, r3
 801b4ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801b4f0:	1d3b      	adds	r3, r7, #4
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b4f6:	1d3b      	adds	r3, r7, #4
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b4fe:	b29b      	uxth	r3, r3
 801b500:	461a      	mov	r2, r3
 801b502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b504:	4413      	add	r3, r2
 801b506:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b508:	463b      	mov	r3, r7
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	011a      	lsls	r2, r3, #4
 801b510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b512:	4413      	add	r3, r2
 801b514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b518:	65bb      	str	r3, [r7, #88]	; 0x58
 801b51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b51e:	b29a      	uxth	r2, r3
 801b520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801b524:	463b      	mov	r3, r7
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	891b      	ldrh	r3, [r3, #8]
 801b52a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b52e:	463b      	mov	r3, r7
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	6959      	ldr	r1, [r3, #20]
 801b534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b538:	b29b      	uxth	r3, r3
 801b53a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b53e:	1d38      	adds	r0, r7, #4
 801b540:	6800      	ldr	r0, [r0, #0]
 801b542:	f000 febc 	bl	801c2be <USB_WritePMA>
 801b546:	e18b      	b.n	801b860 <USB_EPStartXfer+0xa6c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801b548:	1d3b      	adds	r3, r7, #4
 801b54a:	681a      	ldr	r2, [r3, #0]
 801b54c:	463b      	mov	r3, r7
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	781b      	ldrb	r3, [r3, #0]
 801b552:	009b      	lsls	r3, r3, #2
 801b554:	4413      	add	r3, r2
 801b556:	881b      	ldrh	r3, [r3, #0]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b55e:	2b00      	cmp	r3, #0
 801b560:	f000 808f 	beq.w	801b682 <USB_EPStartXfer+0x88e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801b564:	1d3b      	adds	r3, r7, #4
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	677b      	str	r3, [r7, #116]	; 0x74
 801b56a:	463b      	mov	r3, r7
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	785b      	ldrb	r3, [r3, #1]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d164      	bne.n	801b63e <USB_EPStartXfer+0x84a>
 801b574:	1d3b      	adds	r3, r7, #4
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b57a:	1d3b      	adds	r3, r7, #4
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b582:	b29b      	uxth	r3, r3
 801b584:	461a      	mov	r2, r3
 801b586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b588:	4413      	add	r3, r2
 801b58a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b58c:	463b      	mov	r3, r7
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	781b      	ldrb	r3, [r3, #0]
 801b592:	011a      	lsls	r2, r3, #4
 801b594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b596:	4413      	add	r3, r2
 801b598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b59c:	66bb      	str	r3, [r7, #104]	; 0x68
 801b59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d112      	bne.n	801b5cc <USB_EPStartXfer+0x7d8>
 801b5a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5a8:	881b      	ldrh	r3, [r3, #0]
 801b5aa:	b29b      	uxth	r3, r3
 801b5ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b5b0:	b29a      	uxth	r2, r3
 801b5b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5b4:	801a      	strh	r2, [r3, #0]
 801b5b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5b8:	881b      	ldrh	r3, [r3, #0]
 801b5ba:	b29b      	uxth	r3, r3
 801b5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b5c4:	b29a      	uxth	r2, r3
 801b5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5c8:	801a      	strh	r2, [r3, #0]
 801b5ca:	e054      	b.n	801b676 <USB_EPStartXfer+0x882>
 801b5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5d0:	2b3e      	cmp	r3, #62	; 0x3e
 801b5d2:	d817      	bhi.n	801b604 <USB_EPStartXfer+0x810>
 801b5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5d8:	085b      	lsrs	r3, r3, #1
 801b5da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5e2:	f003 0301 	and.w	r3, r3, #1
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d004      	beq.n	801b5f4 <USB_EPStartXfer+0x800>
 801b5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b5ee:	3301      	adds	r3, #1
 801b5f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b5f8:	b29b      	uxth	r3, r3
 801b5fa:	029b      	lsls	r3, r3, #10
 801b5fc:	b29a      	uxth	r2, r3
 801b5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b600:	801a      	strh	r2, [r3, #0]
 801b602:	e038      	b.n	801b676 <USB_EPStartXfer+0x882>
 801b604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b608:	095b      	lsrs	r3, r3, #5
 801b60a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b612:	f003 031f 	and.w	r3, r3, #31
 801b616:	2b00      	cmp	r3, #0
 801b618:	d104      	bne.n	801b624 <USB_EPStartXfer+0x830>
 801b61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b61e:	3b01      	subs	r3, #1
 801b620:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b628:	b29b      	uxth	r3, r3
 801b62a:	029b      	lsls	r3, r3, #10
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b636:	b29a      	uxth	r2, r3
 801b638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b63a:	801a      	strh	r2, [r3, #0]
 801b63c:	e01b      	b.n	801b676 <USB_EPStartXfer+0x882>
 801b63e:	463b      	mov	r3, r7
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	785b      	ldrb	r3, [r3, #1]
 801b644:	2b01      	cmp	r3, #1
 801b646:	d116      	bne.n	801b676 <USB_EPStartXfer+0x882>
 801b648:	1d3b      	adds	r3, r7, #4
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b650:	b29b      	uxth	r3, r3
 801b652:	461a      	mov	r2, r3
 801b654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b656:	4413      	add	r3, r2
 801b658:	677b      	str	r3, [r7, #116]	; 0x74
 801b65a:	463b      	mov	r3, r7
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	781b      	ldrb	r3, [r3, #0]
 801b660:	011a      	lsls	r2, r3, #4
 801b662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b664:	4413      	add	r3, r2
 801b666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b66a:	673b      	str	r3, [r7, #112]	; 0x70
 801b66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b670:	b29a      	uxth	r2, r3
 801b672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b674:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801b676:	463b      	mov	r3, r7
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	895b      	ldrh	r3, [r3, #10]
 801b67c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 801b680:	e093      	b.n	801b7aa <USB_EPStartXfer+0x9b6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801b682:	463b      	mov	r3, r7
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	785b      	ldrb	r3, [r3, #1]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d164      	bne.n	801b756 <USB_EPStartXfer+0x962>
 801b68c:	1d3b      	adds	r3, r7, #4
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b692:	1d3b      	adds	r3, r7, #4
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	461a      	mov	r2, r3
 801b69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b6a0:	4413      	add	r3, r2
 801b6a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b6a4:	463b      	mov	r3, r7
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	781b      	ldrb	r3, [r3, #0]
 801b6aa:	011a      	lsls	r2, r3, #4
 801b6ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b6ae:	4413      	add	r3, r2
 801b6b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b6b4:	67bb      	str	r3, [r7, #120]	; 0x78
 801b6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d112      	bne.n	801b6e4 <USB_EPStartXfer+0x8f0>
 801b6be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b6c0:	881b      	ldrh	r3, [r3, #0]
 801b6c2:	b29b      	uxth	r3, r3
 801b6c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b6c8:	b29a      	uxth	r2, r3
 801b6ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b6cc:	801a      	strh	r2, [r3, #0]
 801b6ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b6d0:	881b      	ldrh	r3, [r3, #0]
 801b6d2:	b29b      	uxth	r3, r3
 801b6d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b6d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b6dc:	b29a      	uxth	r2, r3
 801b6de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b6e0:	801a      	strh	r2, [r3, #0]
 801b6e2:	e05d      	b.n	801b7a0 <USB_EPStartXfer+0x9ac>
 801b6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6e8:	2b3e      	cmp	r3, #62	; 0x3e
 801b6ea:	d817      	bhi.n	801b71c <USB_EPStartXfer+0x928>
 801b6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6f0:	085b      	lsrs	r3, r3, #1
 801b6f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801b6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6fa:	f003 0301 	and.w	r3, r3, #1
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d004      	beq.n	801b70c <USB_EPStartXfer+0x918>
 801b702:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b706:	3301      	adds	r3, #1
 801b708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801b70c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b710:	b29b      	uxth	r3, r3
 801b712:	029b      	lsls	r3, r3, #10
 801b714:	b29a      	uxth	r2, r3
 801b716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b718:	801a      	strh	r2, [r3, #0]
 801b71a:	e041      	b.n	801b7a0 <USB_EPStartXfer+0x9ac>
 801b71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b720:	095b      	lsrs	r3, r3, #5
 801b722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801b726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b72a:	f003 031f 	and.w	r3, r3, #31
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d104      	bne.n	801b73c <USB_EPStartXfer+0x948>
 801b732:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b736:	3b01      	subs	r3, #1
 801b738:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801b73c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b740:	b29b      	uxth	r3, r3
 801b742:	029b      	lsls	r3, r3, #10
 801b744:	b29b      	uxth	r3, r3
 801b746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b74e:	b29a      	uxth	r2, r3
 801b750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b752:	801a      	strh	r2, [r3, #0]
 801b754:	e024      	b.n	801b7a0 <USB_EPStartXfer+0x9ac>
 801b756:	463b      	mov	r3, r7
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	785b      	ldrb	r3, [r3, #1]
 801b75c:	2b01      	cmp	r3, #1
 801b75e:	d11f      	bne.n	801b7a0 <USB_EPStartXfer+0x9ac>
 801b760:	1d3b      	adds	r3, r7, #4
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b768:	1d3b      	adds	r3, r7, #4
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b770:	b29b      	uxth	r3, r3
 801b772:	461a      	mov	r2, r3
 801b774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b778:	4413      	add	r3, r2
 801b77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b77e:	463b      	mov	r3, r7
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	781b      	ldrb	r3, [r3, #0]
 801b784:	011a      	lsls	r2, r3, #4
 801b786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b78a:	4413      	add	r3, r2
 801b78c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801b790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b798:	b29a      	uxth	r2, r3
 801b79a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b79e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801b7a0:	463b      	mov	r3, r7
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	891b      	ldrh	r3, [r3, #8]
 801b7a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b7aa:	463b      	mov	r3, r7
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	6959      	ldr	r1, [r3, #20]
 801b7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7b4:	b29b      	uxth	r3, r3
 801b7b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 801b7ba:	1d38      	adds	r0, r7, #4
 801b7bc:	6800      	ldr	r0, [r0, #0]
 801b7be:	f000 fd7e 	bl	801c2be <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 801b7c2:	463b      	mov	r3, r7
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	785b      	ldrb	r3, [r3, #1]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d122      	bne.n	801b812 <USB_EPStartXfer+0xa1e>
 801b7cc:	1d3b      	adds	r3, r7, #4
 801b7ce:	681a      	ldr	r2, [r3, #0]
 801b7d0:	463b      	mov	r3, r7
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	781b      	ldrb	r3, [r3, #0]
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	4413      	add	r3, r2
 801b7da:	881b      	ldrh	r3, [r3, #0]
 801b7dc:	b29b      	uxth	r3, r3
 801b7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801b7ea:	1d3b      	adds	r3, r7, #4
 801b7ec:	681a      	ldr	r2, [r3, #0]
 801b7ee:	463b      	mov	r3, r7
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	009b      	lsls	r3, r3, #2
 801b7f6:	441a      	add	r2, r3
 801b7f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801b7fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	8013      	strh	r3, [r2, #0]
 801b810:	e026      	b.n	801b860 <USB_EPStartXfer+0xa6c>
 801b812:	463b      	mov	r3, r7
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	785b      	ldrb	r3, [r3, #1]
 801b818:	2b01      	cmp	r3, #1
 801b81a:	d121      	bne.n	801b860 <USB_EPStartXfer+0xa6c>
 801b81c:	1d3b      	adds	r3, r7, #4
 801b81e:	681a      	ldr	r2, [r3, #0]
 801b820:	463b      	mov	r3, r7
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	781b      	ldrb	r3, [r3, #0]
 801b826:	009b      	lsls	r3, r3, #2
 801b828:	4413      	add	r3, r2
 801b82a:	881b      	ldrh	r3, [r3, #0]
 801b82c:	b29b      	uxth	r3, r3
 801b82e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b836:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801b83a:	1d3b      	adds	r3, r7, #4
 801b83c:	681a      	ldr	r2, [r3, #0]
 801b83e:	463b      	mov	r3, r7
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	009b      	lsls	r3, r3, #2
 801b846:	441a      	add	r2, r3
 801b848:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801b84c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801b858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b85c:	b29b      	uxth	r3, r3
 801b85e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801b860:	1d3b      	adds	r3, r7, #4
 801b862:	681a      	ldr	r2, [r3, #0]
 801b864:	463b      	mov	r3, r7
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	781b      	ldrb	r3, [r3, #0]
 801b86a:	009b      	lsls	r3, r3, #2
 801b86c:	4413      	add	r3, r2
 801b86e:	881b      	ldrh	r3, [r3, #0]
 801b870:	b29b      	uxth	r3, r3
 801b872:	f107 020a 	add.w	r2, r7, #10
 801b876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b87a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b87e:	8013      	strh	r3, [r2, #0]
 801b880:	f107 030a 	add.w	r3, r7, #10
 801b884:	f107 020a 	add.w	r2, r7, #10
 801b888:	8812      	ldrh	r2, [r2, #0]
 801b88a:	f082 0210 	eor.w	r2, r2, #16
 801b88e:	801a      	strh	r2, [r3, #0]
 801b890:	f107 030a 	add.w	r3, r7, #10
 801b894:	f107 020a 	add.w	r2, r7, #10
 801b898:	8812      	ldrh	r2, [r2, #0]
 801b89a:	f082 0220 	eor.w	r2, r2, #32
 801b89e:	801a      	strh	r2, [r3, #0]
 801b8a0:	1d3b      	adds	r3, r7, #4
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	463b      	mov	r3, r7
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	781b      	ldrb	r3, [r3, #0]
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	441a      	add	r2, r3
 801b8ae:	f107 030a 	add.w	r3, r7, #10
 801b8b2:	881b      	ldrh	r3, [r3, #0]
 801b8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b8c4:	b29b      	uxth	r3, r3
 801b8c6:	8013      	strh	r3, [r2, #0]
 801b8c8:	e3b5      	b.n	801c036 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801b8ca:	463b      	mov	r3, r7
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	7b1b      	ldrb	r3, [r3, #12]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	f040 8090 	bne.w	801b9f6 <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801b8d6:	463b      	mov	r3, r7
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	699a      	ldr	r2, [r3, #24]
 801b8dc:	463b      	mov	r3, r7
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	691b      	ldr	r3, [r3, #16]
 801b8e2:	429a      	cmp	r2, r3
 801b8e4:	d90e      	bls.n	801b904 <USB_EPStartXfer+0xb10>
      {
        len = ep->maxpacket;
 801b8e6:	463b      	mov	r3, r7
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	691b      	ldr	r3, [r3, #16]
 801b8ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 801b8f0:	463b      	mov	r3, r7
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	699a      	ldr	r2, [r3, #24]
 801b8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8fa:	1ad2      	subs	r2, r2, r3
 801b8fc:	463b      	mov	r3, r7
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	619a      	str	r2, [r3, #24]
 801b902:	e008      	b.n	801b916 <USB_EPStartXfer+0xb22>
      }
      else
      {
        len = ep->xfer_len;
 801b904:	463b      	mov	r3, r7
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	699b      	ldr	r3, [r3, #24]
 801b90a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 801b90e:	463b      	mov	r3, r7
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	2200      	movs	r2, #0
 801b914:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801b916:	1d3b      	adds	r3, r7, #4
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b91e:	1d3b      	adds	r3, r7, #4
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801b926:	b29b      	uxth	r3, r3
 801b928:	461a      	mov	r2, r3
 801b92a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b92e:	4413      	add	r3, r2
 801b930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b934:	463b      	mov	r3, r7
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	781b      	ldrb	r3, [r3, #0]
 801b93a:	011a      	lsls	r2, r3, #4
 801b93c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b940:	4413      	add	r3, r2
 801b942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801b946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d116      	bne.n	801b980 <USB_EPStartXfer+0xb8c>
 801b952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b956:	881b      	ldrh	r3, [r3, #0]
 801b958:	b29b      	uxth	r3, r3
 801b95a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801b95e:	b29a      	uxth	r2, r3
 801b960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b964:	801a      	strh	r2, [r3, #0]
 801b966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b96a:	881b      	ldrh	r3, [r3, #0]
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b976:	b29a      	uxth	r2, r3
 801b978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b97c:	801a      	strh	r2, [r3, #0]
 801b97e:	e32c      	b.n	801bfda <USB_EPStartXfer+0x11e6>
 801b980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b984:	2b3e      	cmp	r3, #62	; 0x3e
 801b986:	d818      	bhi.n	801b9ba <USB_EPStartXfer+0xbc6>
 801b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b98c:	085b      	lsrs	r3, r3, #1
 801b98e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b996:	f003 0301 	and.w	r3, r3, #1
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d004      	beq.n	801b9a8 <USB_EPStartXfer+0xbb4>
 801b99e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b9a2:	3301      	adds	r3, #1
 801b9a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b9a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b9ac:	b29b      	uxth	r3, r3
 801b9ae:	029b      	lsls	r3, r3, #10
 801b9b0:	b29a      	uxth	r2, r3
 801b9b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9b6:	801a      	strh	r2, [r3, #0]
 801b9b8:	e30f      	b.n	801bfda <USB_EPStartXfer+0x11e6>
 801b9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9be:	095b      	lsrs	r3, r3, #5
 801b9c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9c8:	f003 031f 	and.w	r3, r3, #31
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d104      	bne.n	801b9da <USB_EPStartXfer+0xbe6>
 801b9d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b9d4:	3b01      	subs	r3, #1
 801b9d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b9da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b9de:	b29b      	uxth	r3, r3
 801b9e0:	029b      	lsls	r3, r3, #10
 801b9e2:	b29b      	uxth	r3, r3
 801b9e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b9e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b9ec:	b29a      	uxth	r2, r3
 801b9ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9f2:	801a      	strh	r2, [r3, #0]
 801b9f4:	e2f1      	b.n	801bfda <USB_EPStartXfer+0x11e6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801b9f6:	463b      	mov	r3, r7
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	78db      	ldrb	r3, [r3, #3]
 801b9fc:	2b02      	cmp	r3, #2
 801b9fe:	f040 818f 	bne.w	801bd20 <USB_EPStartXfer+0xf2c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ba02:	463b      	mov	r3, r7
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	785b      	ldrb	r3, [r3, #1]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d175      	bne.n	801baf8 <USB_EPStartXfer+0xd04>
 801ba0c:	1d3b      	adds	r3, r7, #4
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ba14:	1d3b      	adds	r3, r7, #4
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801ba1c:	b29b      	uxth	r3, r3
 801ba1e:	461a      	mov	r2, r3
 801ba20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba24:	4413      	add	r3, r2
 801ba26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ba2a:	463b      	mov	r3, r7
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	781b      	ldrb	r3, [r3, #0]
 801ba30:	011a      	lsls	r2, r3, #4
 801ba32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba36:	4413      	add	r3, r2
 801ba38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801ba3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801ba40:	463b      	mov	r3, r7
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	691b      	ldr	r3, [r3, #16]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d116      	bne.n	801ba78 <USB_EPStartXfer+0xc84>
 801ba4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ba4e:	881b      	ldrh	r3, [r3, #0]
 801ba50:	b29b      	uxth	r3, r3
 801ba52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801ba56:	b29a      	uxth	r2, r3
 801ba58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ba5c:	801a      	strh	r2, [r3, #0]
 801ba5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ba62:	881b      	ldrh	r3, [r3, #0]
 801ba64:	b29b      	uxth	r3, r3
 801ba66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801ba6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801ba6e:	b29a      	uxth	r2, r3
 801ba70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ba74:	801a      	strh	r2, [r3, #0]
 801ba76:	e065      	b.n	801bb44 <USB_EPStartXfer+0xd50>
 801ba78:	463b      	mov	r3, r7
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	691b      	ldr	r3, [r3, #16]
 801ba7e:	2b3e      	cmp	r3, #62	; 0x3e
 801ba80:	d81a      	bhi.n	801bab8 <USB_EPStartXfer+0xcc4>
 801ba82:	463b      	mov	r3, r7
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	691b      	ldr	r3, [r3, #16]
 801ba88:	085b      	lsrs	r3, r3, #1
 801ba8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801ba8e:	463b      	mov	r3, r7
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	691b      	ldr	r3, [r3, #16]
 801ba94:	f003 0301 	and.w	r3, r3, #1
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d004      	beq.n	801baa6 <USB_EPStartXfer+0xcb2>
 801ba9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801baa0:	3301      	adds	r3, #1
 801baa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801baa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801baaa:	b29b      	uxth	r3, r3
 801baac:	029b      	lsls	r3, r3, #10
 801baae:	b29a      	uxth	r2, r3
 801bab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bab4:	801a      	strh	r2, [r3, #0]
 801bab6:	e045      	b.n	801bb44 <USB_EPStartXfer+0xd50>
 801bab8:	463b      	mov	r3, r7
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	691b      	ldr	r3, [r3, #16]
 801babe:	095b      	lsrs	r3, r3, #5
 801bac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801bac4:	463b      	mov	r3, r7
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	691b      	ldr	r3, [r3, #16]
 801baca:	f003 031f 	and.w	r3, r3, #31
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d104      	bne.n	801badc <USB_EPStartXfer+0xce8>
 801bad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bad6:	3b01      	subs	r3, #1
 801bad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801badc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bae0:	b29b      	uxth	r3, r3
 801bae2:	029b      	lsls	r3, r3, #10
 801bae4:	b29b      	uxth	r3, r3
 801bae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801baea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801baee:	b29a      	uxth	r2, r3
 801baf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801baf4:	801a      	strh	r2, [r3, #0]
 801baf6:	e025      	b.n	801bb44 <USB_EPStartXfer+0xd50>
 801baf8:	463b      	mov	r3, r7
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	785b      	ldrb	r3, [r3, #1]
 801bafe:	2b01      	cmp	r3, #1
 801bb00:	d120      	bne.n	801bb44 <USB_EPStartXfer+0xd50>
 801bb02:	1d3b      	adds	r3, r7, #4
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bb0a:	1d3b      	adds	r3, r7, #4
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bb12:	b29b      	uxth	r3, r3
 801bb14:	461a      	mov	r2, r3
 801bb16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bb1a:	4413      	add	r3, r2
 801bb1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bb20:	463b      	mov	r3, r7
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	781b      	ldrb	r3, [r3, #0]
 801bb26:	011a      	lsls	r2, r3, #4
 801bb28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bb2c:	4413      	add	r3, r2
 801bb2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801bb32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bb36:	463b      	mov	r3, r7
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	691b      	ldr	r3, [r3, #16]
 801bb3c:	b29a      	uxth	r2, r3
 801bb3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801bb42:	801a      	strh	r2, [r3, #0]
 801bb44:	1d3b      	adds	r3, r7, #4
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801bb4c:	463b      	mov	r3, r7
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	785b      	ldrb	r3, [r3, #1]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d175      	bne.n	801bc42 <USB_EPStartXfer+0xe4e>
 801bb56:	1d3b      	adds	r3, r7, #4
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801bb5e:	1d3b      	adds	r3, r7, #4
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bb66:	b29b      	uxth	r3, r3
 801bb68:	461a      	mov	r2, r3
 801bb6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb6e:	4413      	add	r3, r2
 801bb70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801bb74:	463b      	mov	r3, r7
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	781b      	ldrb	r3, [r3, #0]
 801bb7a:	011a      	lsls	r2, r3, #4
 801bb7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb80:	4413      	add	r3, r2
 801bb82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801bb86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801bb8a:	463b      	mov	r3, r7
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	691b      	ldr	r3, [r3, #16]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d116      	bne.n	801bbc2 <USB_EPStartXfer+0xdce>
 801bb94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bb98:	881b      	ldrh	r3, [r3, #0]
 801bb9a:	b29b      	uxth	r3, r3
 801bb9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801bba0:	b29a      	uxth	r2, r3
 801bba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bba6:	801a      	strh	r2, [r3, #0]
 801bba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bbac:	881b      	ldrh	r3, [r3, #0]
 801bbae:	b29b      	uxth	r3, r3
 801bbb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801bbb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801bbb8:	b29a      	uxth	r2, r3
 801bbba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bbbe:	801a      	strh	r2, [r3, #0]
 801bbc0:	e061      	b.n	801bc86 <USB_EPStartXfer+0xe92>
 801bbc2:	463b      	mov	r3, r7
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	691b      	ldr	r3, [r3, #16]
 801bbc8:	2b3e      	cmp	r3, #62	; 0x3e
 801bbca:	d81a      	bhi.n	801bc02 <USB_EPStartXfer+0xe0e>
 801bbcc:	463b      	mov	r3, r7
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	691b      	ldr	r3, [r3, #16]
 801bbd2:	085b      	lsrs	r3, r3, #1
 801bbd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801bbd8:	463b      	mov	r3, r7
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	691b      	ldr	r3, [r3, #16]
 801bbde:	f003 0301 	and.w	r3, r3, #1
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d004      	beq.n	801bbf0 <USB_EPStartXfer+0xdfc>
 801bbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbea:	3301      	adds	r3, #1
 801bbec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801bbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	029b      	lsls	r3, r3, #10
 801bbf8:	b29a      	uxth	r2, r3
 801bbfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bbfe:	801a      	strh	r2, [r3, #0]
 801bc00:	e041      	b.n	801bc86 <USB_EPStartXfer+0xe92>
 801bc02:	463b      	mov	r3, r7
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	691b      	ldr	r3, [r3, #16]
 801bc08:	095b      	lsrs	r3, r3, #5
 801bc0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801bc0e:	463b      	mov	r3, r7
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	691b      	ldr	r3, [r3, #16]
 801bc14:	f003 031f 	and.w	r3, r3, #31
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d104      	bne.n	801bc26 <USB_EPStartXfer+0xe32>
 801bc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc20:	3b01      	subs	r3, #1
 801bc22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801bc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc2a:	b29b      	uxth	r3, r3
 801bc2c:	029b      	lsls	r3, r3, #10
 801bc2e:	b29b      	uxth	r3, r3
 801bc30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801bc34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801bc38:	b29a      	uxth	r2, r3
 801bc3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bc3e:	801a      	strh	r2, [r3, #0]
 801bc40:	e021      	b.n	801bc86 <USB_EPStartXfer+0xe92>
 801bc42:	463b      	mov	r3, r7
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	785b      	ldrb	r3, [r3, #1]
 801bc48:	2b01      	cmp	r3, #1
 801bc4a:	d11c      	bne.n	801bc86 <USB_EPStartXfer+0xe92>
 801bc4c:	1d3b      	adds	r3, r7, #4
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	461a      	mov	r2, r3
 801bc58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bc5c:	4413      	add	r3, r2
 801bc5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801bc62:	463b      	mov	r3, r7
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	011a      	lsls	r2, r3, #4
 801bc6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bc6e:	4413      	add	r3, r2
 801bc70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801bc74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801bc78:	463b      	mov	r3, r7
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	691b      	ldr	r3, [r3, #16]
 801bc7e:	b29a      	uxth	r2, r3
 801bc80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bc84:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801bc86:	463b      	mov	r3, r7
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	69db      	ldr	r3, [r3, #28]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	f000 81a4 	beq.w	801bfda <USB_EPStartXfer+0x11e6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801bc92:	1d3b      	adds	r3, r7, #4
 801bc94:	681a      	ldr	r2, [r3, #0]
 801bc96:	463b      	mov	r3, r7
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	781b      	ldrb	r3, [r3, #0]
 801bc9c:	009b      	lsls	r3, r3, #2
 801bc9e:	4413      	add	r3, r2
 801bca0:	881b      	ldrh	r3, [r3, #0]
 801bca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801bca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801bcaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d005      	beq.n	801bcbe <USB_EPStartXfer+0xeca>
 801bcb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801bcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d10d      	bne.n	801bcda <USB_EPStartXfer+0xee6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801bcbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801bcc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f040 8187 	bne.w	801bfda <USB_EPStartXfer+0x11e6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801bccc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801bcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	f040 8180 	bne.w	801bfda <USB_EPStartXfer+0x11e6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 801bcda:	1d3b      	adds	r3, r7, #4
 801bcdc:	681a      	ldr	r2, [r3, #0]
 801bcde:	463b      	mov	r3, r7
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	781b      	ldrb	r3, [r3, #0]
 801bce4:	009b      	lsls	r3, r3, #2
 801bce6:	4413      	add	r3, r2
 801bce8:	881b      	ldrh	r3, [r3, #0]
 801bcea:	b29b      	uxth	r3, r3
 801bcec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bcf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bcf4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801bcf8:	1d3b      	adds	r3, r7, #4
 801bcfa:	681a      	ldr	r2, [r3, #0]
 801bcfc:	463b      	mov	r3, r7
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	009b      	lsls	r3, r3, #2
 801bd04:	441a      	add	r2, r3
 801bd06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801bd0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801bd0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801bd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801bd16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	8013      	strh	r3, [r2, #0]
 801bd1e:	e15c      	b.n	801bfda <USB_EPStartXfer+0x11e6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801bd20:	463b      	mov	r3, r7
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	78db      	ldrb	r3, [r3, #3]
 801bd26:	2b01      	cmp	r3, #1
 801bd28:	f040 8155 	bne.w	801bfd6 <USB_EPStartXfer+0x11e2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801bd2c:	463b      	mov	r3, r7
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	699a      	ldr	r2, [r3, #24]
 801bd32:	463b      	mov	r3, r7
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	691b      	ldr	r3, [r3, #16]
 801bd38:	429a      	cmp	r2, r3
 801bd3a:	d90e      	bls.n	801bd5a <USB_EPStartXfer+0xf66>
        {
          len = ep->maxpacket;
 801bd3c:	463b      	mov	r3, r7
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	691b      	ldr	r3, [r3, #16]
 801bd42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 801bd46:	463b      	mov	r3, r7
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	699a      	ldr	r2, [r3, #24]
 801bd4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd50:	1ad2      	subs	r2, r2, r3
 801bd52:	463b      	mov	r3, r7
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	619a      	str	r2, [r3, #24]
 801bd58:	e008      	b.n	801bd6c <USB_EPStartXfer+0xf78>
        }
        else
        {
          len = ep->xfer_len;
 801bd5a:	463b      	mov	r3, r7
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	699b      	ldr	r3, [r3, #24]
 801bd60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 801bd64:	463b      	mov	r3, r7
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	2200      	movs	r2, #0
 801bd6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801bd6c:	463b      	mov	r3, r7
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	785b      	ldrb	r3, [r3, #1]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d16f      	bne.n	801be56 <USB_EPStartXfer+0x1062>
 801bd76:	1d3b      	adds	r3, r7, #4
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bd7e:	1d3b      	adds	r3, r7, #4
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bd86:	b29b      	uxth	r3, r3
 801bd88:	461a      	mov	r2, r3
 801bd8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bd8e:	4413      	add	r3, r2
 801bd90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bd94:	463b      	mov	r3, r7
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	781b      	ldrb	r3, [r3, #0]
 801bd9a:	011a      	lsls	r2, r3, #4
 801bd9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bda0:	4413      	add	r3, r2
 801bda2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801bda6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bdaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d116      	bne.n	801bde0 <USB_EPStartXfer+0xfec>
 801bdb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bdb6:	881b      	ldrh	r3, [r3, #0]
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801bdbe:	b29a      	uxth	r2, r3
 801bdc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bdc4:	801a      	strh	r2, [r3, #0]
 801bdc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bdca:	881b      	ldrh	r3, [r3, #0]
 801bdcc:	b29b      	uxth	r3, r3
 801bdce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801bdd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bddc:	801a      	strh	r2, [r3, #0]
 801bdde:	e05f      	b.n	801bea0 <USB_EPStartXfer+0x10ac>
 801bde0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bde4:	2b3e      	cmp	r3, #62	; 0x3e
 801bde6:	d818      	bhi.n	801be1a <USB_EPStartXfer+0x1026>
 801bde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdec:	085b      	lsrs	r3, r3, #1
 801bdee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801bdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdf6:	f003 0301 	and.w	r3, r3, #1
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d004      	beq.n	801be08 <USB_EPStartXfer+0x1014>
 801bdfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be02:	3301      	adds	r3, #1
 801be04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801be08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be0c:	b29b      	uxth	r3, r3
 801be0e:	029b      	lsls	r3, r3, #10
 801be10:	b29a      	uxth	r2, r3
 801be12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801be16:	801a      	strh	r2, [r3, #0]
 801be18:	e042      	b.n	801bea0 <USB_EPStartXfer+0x10ac>
 801be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be1e:	095b      	lsrs	r3, r3, #5
 801be20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801be24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be28:	f003 031f 	and.w	r3, r3, #31
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d104      	bne.n	801be3a <USB_EPStartXfer+0x1046>
 801be30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be34:	3b01      	subs	r3, #1
 801be36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801be3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be3e:	b29b      	uxth	r3, r3
 801be40:	029b      	lsls	r3, r3, #10
 801be42:	b29b      	uxth	r3, r3
 801be44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801be48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801be52:	801a      	strh	r2, [r3, #0]
 801be54:	e024      	b.n	801bea0 <USB_EPStartXfer+0x10ac>
 801be56:	463b      	mov	r3, r7
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	785b      	ldrb	r3, [r3, #1]
 801be5c:	2b01      	cmp	r3, #1
 801be5e:	d11f      	bne.n	801bea0 <USB_EPStartXfer+0x10ac>
 801be60:	1d3b      	adds	r3, r7, #4
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801be68:	1d3b      	adds	r3, r7, #4
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801be70:	b29b      	uxth	r3, r3
 801be72:	461a      	mov	r2, r3
 801be74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801be78:	4413      	add	r3, r2
 801be7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801be7e:	463b      	mov	r3, r7
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	781b      	ldrb	r3, [r3, #0]
 801be84:	011a      	lsls	r2, r3, #4
 801be86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801be8a:	4413      	add	r3, r2
 801be8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801be90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801be94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be98:	b29a      	uxth	r2, r3
 801be9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be9e:	801a      	strh	r2, [r3, #0]
 801bea0:	1d3b      	adds	r3, r7, #4
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bea8:	463b      	mov	r3, r7
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	785b      	ldrb	r3, [r3, #1]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d16f      	bne.n	801bf92 <USB_EPStartXfer+0x119e>
 801beb2:	1d3b      	adds	r3, r7, #4
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801beba:	1d3b      	adds	r3, r7, #4
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bec2:	b29b      	uxth	r3, r3
 801bec4:	461a      	mov	r2, r3
 801bec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801beca:	4413      	add	r3, r2
 801becc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801bed0:	463b      	mov	r3, r7
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	781b      	ldrb	r3, [r3, #0]
 801bed6:	011a      	lsls	r2, r3, #4
 801bed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801bedc:	4413      	add	r3, r2
 801bede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801bee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801beea:	2b00      	cmp	r3, #0
 801beec:	d116      	bne.n	801bf1c <USB_EPStartXfer+0x1128>
 801beee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bef2:	881b      	ldrh	r3, [r3, #0]
 801bef4:	b29b      	uxth	r3, r3
 801bef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801befa:	b29a      	uxth	r2, r3
 801befc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf00:	801a      	strh	r2, [r3, #0]
 801bf02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf06:	881b      	ldrh	r3, [r3, #0]
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801bf0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801bf12:	b29a      	uxth	r2, r3
 801bf14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf18:	801a      	strh	r2, [r3, #0]
 801bf1a:	e05e      	b.n	801bfda <USB_EPStartXfer+0x11e6>
 801bf1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf20:	2b3e      	cmp	r3, #62	; 0x3e
 801bf22:	d818      	bhi.n	801bf56 <USB_EPStartXfer+0x1162>
 801bf24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf28:	085b      	lsrs	r3, r3, #1
 801bf2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bf2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf32:	f003 0301 	and.w	r3, r3, #1
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d004      	beq.n	801bf44 <USB_EPStartXfer+0x1150>
 801bf3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf3e:	3301      	adds	r3, #1
 801bf40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bf44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf48:	b29b      	uxth	r3, r3
 801bf4a:	029b      	lsls	r3, r3, #10
 801bf4c:	b29a      	uxth	r2, r3
 801bf4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf52:	801a      	strh	r2, [r3, #0]
 801bf54:	e041      	b.n	801bfda <USB_EPStartXfer+0x11e6>
 801bf56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf5a:	095b      	lsrs	r3, r3, #5
 801bf5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bf60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf64:	f003 031f 	and.w	r3, r3, #31
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d104      	bne.n	801bf76 <USB_EPStartXfer+0x1182>
 801bf6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf70:	3b01      	subs	r3, #1
 801bf72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bf76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf7a:	b29b      	uxth	r3, r3
 801bf7c:	029b      	lsls	r3, r3, #10
 801bf7e:	b29b      	uxth	r3, r3
 801bf80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801bf84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801bf88:	b29a      	uxth	r2, r3
 801bf8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf8e:	801a      	strh	r2, [r3, #0]
 801bf90:	e023      	b.n	801bfda <USB_EPStartXfer+0x11e6>
 801bf92:	463b      	mov	r3, r7
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	785b      	ldrb	r3, [r3, #1]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d11e      	bne.n	801bfda <USB_EPStartXfer+0x11e6>
 801bf9c:	1d3b      	adds	r3, r7, #4
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801bfa4:	b29b      	uxth	r3, r3
 801bfa6:	461a      	mov	r2, r3
 801bfa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801bfac:	4413      	add	r3, r2
 801bfae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bfb2:	463b      	mov	r3, r7
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	011a      	lsls	r2, r3, #4
 801bfba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801bfbe:	4413      	add	r3, r2
 801bfc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801bfc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bfc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bfcc:	b29a      	uxth	r2, r3
 801bfce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bfd2:	801a      	strh	r2, [r3, #0]
 801bfd4:	e001      	b.n	801bfda <USB_EPStartXfer+0x11e6>
      }
      else
      {
        return HAL_ERROR;
 801bfd6:	2301      	movs	r3, #1
 801bfd8:	e02e      	b.n	801c038 <USB_EPStartXfer+0x1244>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bfda:	1d3b      	adds	r3, r7, #4
 801bfdc:	681a      	ldr	r2, [r3, #0]
 801bfde:	463b      	mov	r3, r7
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	009b      	lsls	r3, r3, #2
 801bfe6:	4413      	add	r3, r2
 801bfe8:	881b      	ldrh	r3, [r3, #0]
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bff4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801bff8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801bffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801c000:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801c004:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801c008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801c00c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801c010:	1d3b      	adds	r3, r7, #4
 801c012:	681a      	ldr	r2, [r3, #0]
 801c014:	463b      	mov	r3, r7
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	009b      	lsls	r3, r3, #2
 801c01c:	441a      	add	r2, r3
 801c01e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801c022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c032:	b29b      	uxth	r3, r3
 801c034:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801c036:	2300      	movs	r3, #0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}

0801c042 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c042:	b480      	push	{r7}
 801c044:	b085      	sub	sp, #20
 801c046:	af00      	add	r7, sp, #0
 801c048:	6078      	str	r0, [r7, #4]
 801c04a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801c04c:	683b      	ldr	r3, [r7, #0]
 801c04e:	785b      	ldrb	r3, [r3, #1]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d020      	beq.n	801c096 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801c054:	687a      	ldr	r2, [r7, #4]
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	009b      	lsls	r3, r3, #2
 801c05c:	4413      	add	r3, r2
 801c05e:	881b      	ldrh	r3, [r3, #0]
 801c060:	b29b      	uxth	r3, r3
 801c062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c06a:	81bb      	strh	r3, [r7, #12]
 801c06c:	89bb      	ldrh	r3, [r7, #12]
 801c06e:	f083 0310 	eor.w	r3, r3, #16
 801c072:	81bb      	strh	r3, [r7, #12]
 801c074:	687a      	ldr	r2, [r7, #4]
 801c076:	683b      	ldr	r3, [r7, #0]
 801c078:	781b      	ldrb	r3, [r3, #0]
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	441a      	add	r2, r3
 801c07e:	89bb      	ldrh	r3, [r7, #12]
 801c080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c090:	b29b      	uxth	r3, r3
 801c092:	8013      	strh	r3, [r2, #0]
 801c094:	e01f      	b.n	801c0d6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801c096:	687a      	ldr	r2, [r7, #4]
 801c098:	683b      	ldr	r3, [r7, #0]
 801c09a:	781b      	ldrb	r3, [r3, #0]
 801c09c:	009b      	lsls	r3, r3, #2
 801c09e:	4413      	add	r3, r2
 801c0a0:	881b      	ldrh	r3, [r3, #0]
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c0ac:	81fb      	strh	r3, [r7, #14]
 801c0ae:	89fb      	ldrh	r3, [r7, #14]
 801c0b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801c0b4:	81fb      	strh	r3, [r7, #14]
 801c0b6:	687a      	ldr	r2, [r7, #4]
 801c0b8:	683b      	ldr	r3, [r7, #0]
 801c0ba:	781b      	ldrb	r3, [r3, #0]
 801c0bc:	009b      	lsls	r3, r3, #2
 801c0be:	441a      	add	r2, r3
 801c0c0:	89fb      	ldrh	r3, [r7, #14]
 801c0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0d2:	b29b      	uxth	r3, r3
 801c0d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801c0d6:	2300      	movs	r3, #0
}
 801c0d8:	4618      	mov	r0, r3
 801c0da:	3714      	adds	r7, #20
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	bc80      	pop	{r7}
 801c0e0:	4770      	bx	lr

0801c0e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c0e2:	b480      	push	{r7}
 801c0e4:	b087      	sub	sp, #28
 801c0e6:	af00      	add	r7, sp, #0
 801c0e8:	6078      	str	r0, [r7, #4]
 801c0ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	7b1b      	ldrb	r3, [r3, #12]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	f040 809d 	bne.w	801c230 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801c0f6:	683b      	ldr	r3, [r7, #0]
 801c0f8:	785b      	ldrb	r3, [r3, #1]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d04c      	beq.n	801c198 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	009b      	lsls	r3, r3, #2
 801c106:	4413      	add	r3, r2
 801c108:	881b      	ldrh	r3, [r3, #0]
 801c10a:	823b      	strh	r3, [r7, #16]
 801c10c:	8a3b      	ldrh	r3, [r7, #16]
 801c10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c112:	2b00      	cmp	r3, #0
 801c114:	d01b      	beq.n	801c14e <USB_EPClearStall+0x6c>
 801c116:	687a      	ldr	r2, [r7, #4]
 801c118:	683b      	ldr	r3, [r7, #0]
 801c11a:	781b      	ldrb	r3, [r3, #0]
 801c11c:	009b      	lsls	r3, r3, #2
 801c11e:	4413      	add	r3, r2
 801c120:	881b      	ldrh	r3, [r3, #0]
 801c122:	b29b      	uxth	r3, r3
 801c124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c12c:	81fb      	strh	r3, [r7, #14]
 801c12e:	687a      	ldr	r2, [r7, #4]
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	781b      	ldrb	r3, [r3, #0]
 801c134:	009b      	lsls	r3, r3, #2
 801c136:	441a      	add	r2, r3
 801c138:	89fb      	ldrh	r3, [r7, #14]
 801c13a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c13e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801c14a:	b29b      	uxth	r3, r3
 801c14c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	78db      	ldrb	r3, [r3, #3]
 801c152:	2b01      	cmp	r3, #1
 801c154:	d06c      	beq.n	801c230 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	4413      	add	r3, r2
 801c160:	881b      	ldrh	r3, [r3, #0]
 801c162:	b29b      	uxth	r3, r3
 801c164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c16c:	81bb      	strh	r3, [r7, #12]
 801c16e:	89bb      	ldrh	r3, [r7, #12]
 801c170:	f083 0320 	eor.w	r3, r3, #32
 801c174:	81bb      	strh	r3, [r7, #12]
 801c176:	687a      	ldr	r2, [r7, #4]
 801c178:	683b      	ldr	r3, [r7, #0]
 801c17a:	781b      	ldrb	r3, [r3, #0]
 801c17c:	009b      	lsls	r3, r3, #2
 801c17e:	441a      	add	r2, r3
 801c180:	89bb      	ldrh	r3, [r7, #12]
 801c182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c18a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c192:	b29b      	uxth	r3, r3
 801c194:	8013      	strh	r3, [r2, #0]
 801c196:	e04b      	b.n	801c230 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	683b      	ldr	r3, [r7, #0]
 801c19c:	781b      	ldrb	r3, [r3, #0]
 801c19e:	009b      	lsls	r3, r3, #2
 801c1a0:	4413      	add	r3, r2
 801c1a2:	881b      	ldrh	r3, [r3, #0]
 801c1a4:	82fb      	strh	r3, [r7, #22]
 801c1a6:	8afb      	ldrh	r3, [r7, #22]
 801c1a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d01b      	beq.n	801c1e8 <USB_EPClearStall+0x106>
 801c1b0:	687a      	ldr	r2, [r7, #4]
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	781b      	ldrb	r3, [r3, #0]
 801c1b6:	009b      	lsls	r3, r3, #2
 801c1b8:	4413      	add	r3, r2
 801c1ba:	881b      	ldrh	r3, [r3, #0]
 801c1bc:	b29b      	uxth	r3, r3
 801c1be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1c6:	82bb      	strh	r3, [r7, #20]
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	009b      	lsls	r3, r3, #2
 801c1d0:	441a      	add	r2, r3
 801c1d2:	8abb      	ldrh	r3, [r7, #20]
 801c1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c1dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1e4:	b29b      	uxth	r3, r3
 801c1e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	683b      	ldr	r3, [r7, #0]
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	009b      	lsls	r3, r3, #2
 801c1f0:	4413      	add	r3, r2
 801c1f2:	881b      	ldrh	r3, [r3, #0]
 801c1f4:	b29b      	uxth	r3, r3
 801c1f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1fe:	827b      	strh	r3, [r7, #18]
 801c200:	8a7b      	ldrh	r3, [r7, #18]
 801c202:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801c206:	827b      	strh	r3, [r7, #18]
 801c208:	8a7b      	ldrh	r3, [r7, #18]
 801c20a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801c20e:	827b      	strh	r3, [r7, #18]
 801c210:	687a      	ldr	r2, [r7, #4]
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	781b      	ldrb	r3, [r3, #0]
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	441a      	add	r2, r3
 801c21a:	8a7b      	ldrh	r3, [r7, #18]
 801c21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801c224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801c230:	2300      	movs	r3, #0
}
 801c232:	4618      	mov	r0, r3
 801c234:	371c      	adds	r7, #28
 801c236:	46bd      	mov	sp, r7
 801c238:	bc80      	pop	{r7}
 801c23a:	4770      	bx	lr

0801c23c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801c23c:	b480      	push	{r7}
 801c23e:	b083      	sub	sp, #12
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
 801c244:	460b      	mov	r3, r1
 801c246:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801c248:	78fb      	ldrb	r3, [r7, #3]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d103      	bne.n	801c256 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2280      	movs	r2, #128	; 0x80
 801c252:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801c256:	2300      	movs	r3, #0
}
 801c258:	4618      	mov	r0, r3
 801c25a:	370c      	adds	r7, #12
 801c25c:	46bd      	mov	sp, r7
 801c25e:	bc80      	pop	{r7}
 801c260:	4770      	bx	lr

0801c262 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801c262:	b480      	push	{r7}
 801c264:	b083      	sub	sp, #12
 801c266:	af00      	add	r7, sp, #0
 801c268:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801c26a:	2300      	movs	r3, #0
}
 801c26c:	4618      	mov	r0, r3
 801c26e:	370c      	adds	r7, #12
 801c270:	46bd      	mov	sp, r7
 801c272:	bc80      	pop	{r7}
 801c274:	4770      	bx	lr

0801c276 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 801c276:	b480      	push	{r7}
 801c278:	b083      	sub	sp, #12
 801c27a:	af00      	add	r7, sp, #0
 801c27c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801c27e:	2300      	movs	r3, #0
}
 801c280:	4618      	mov	r0, r3
 801c282:	370c      	adds	r7, #12
 801c284:	46bd      	mov	sp, r7
 801c286:	bc80      	pop	{r7}
 801c288:	4770      	bx	lr

0801c28a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801c28a:	b480      	push	{r7}
 801c28c:	b085      	sub	sp, #20
 801c28e:	af00      	add	r7, sp, #0
 801c290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801c298:	b29b      	uxth	r3, r3
 801c29a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801c29c:	68fb      	ldr	r3, [r7, #12]
}
 801c29e:	4618      	mov	r0, r3
 801c2a0:	3714      	adds	r7, #20
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	bc80      	pop	{r7}
 801c2a6:	4770      	bx	lr

0801c2a8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 801c2a8:	b480      	push	{r7}
 801c2aa:	b083      	sub	sp, #12
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
 801c2b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801c2b2:	2300      	movs	r3, #0
}
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	370c      	adds	r7, #12
 801c2b8:	46bd      	mov	sp, r7
 801c2ba:	bc80      	pop	{r7}
 801c2bc:	4770      	bx	lr

0801c2be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801c2be:	b480      	push	{r7}
 801c2c0:	b08d      	sub	sp, #52	; 0x34
 801c2c2:	af00      	add	r7, sp, #0
 801c2c4:	60f8      	str	r0, [r7, #12]
 801c2c6:	60b9      	str	r1, [r7, #8]
 801c2c8:	4611      	mov	r1, r2
 801c2ca:	461a      	mov	r2, r3
 801c2cc:	460b      	mov	r3, r1
 801c2ce:	80fb      	strh	r3, [r7, #6]
 801c2d0:	4613      	mov	r3, r2
 801c2d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801c2d4:	88bb      	ldrh	r3, [r7, #4]
 801c2d6:	3301      	adds	r3, #1
 801c2d8:	085b      	lsrs	r3, r3, #1
 801c2da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801c2e0:	68bb      	ldr	r3, [r7, #8]
 801c2e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801c2e4:	88fb      	ldrh	r3, [r7, #6]
 801c2e6:	005a      	lsls	r2, r3, #1
 801c2e8:	69fb      	ldr	r3, [r7, #28]
 801c2ea:	4413      	add	r3, r2
 801c2ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801c2f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 801c2f2:	6a3b      	ldr	r3, [r7, #32]
 801c2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c2f6:	e01e      	b.n	801c336 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 801c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2fa:	781b      	ldrb	r3, [r3, #0]
 801c2fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 801c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c300:	3301      	adds	r3, #1
 801c302:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 801c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c306:	781b      	ldrb	r3, [r3, #0]
 801c308:	b29b      	uxth	r3, r3
 801c30a:	021b      	lsls	r3, r3, #8
 801c30c:	b29b      	uxth	r3, r3
 801c30e:	461a      	mov	r2, r3
 801c310:	69bb      	ldr	r3, [r7, #24]
 801c312:	4313      	orrs	r3, r2
 801c314:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 801c316:	697b      	ldr	r3, [r7, #20]
 801c318:	b29a      	uxth	r2, r3
 801c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c31c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c320:	3302      	adds	r3, #2
 801c322:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 801c324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c326:	3302      	adds	r3, #2
 801c328:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 801c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c32c:	3301      	adds	r3, #1
 801c32e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c332:	3b01      	subs	r3, #1
 801c334:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d1dd      	bne.n	801c2f8 <USB_WritePMA+0x3a>
  }
}
 801c33c:	bf00      	nop
 801c33e:	3734      	adds	r7, #52	; 0x34
 801c340:	46bd      	mov	sp, r7
 801c342:	bc80      	pop	{r7}
 801c344:	4770      	bx	lr

0801c346 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801c346:	b480      	push	{r7}
 801c348:	b08b      	sub	sp, #44	; 0x2c
 801c34a:	af00      	add	r7, sp, #0
 801c34c:	60f8      	str	r0, [r7, #12]
 801c34e:	60b9      	str	r1, [r7, #8]
 801c350:	4611      	mov	r1, r2
 801c352:	461a      	mov	r2, r3
 801c354:	460b      	mov	r3, r1
 801c356:	80fb      	strh	r3, [r7, #6]
 801c358:	4613      	mov	r3, r2
 801c35a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801c35c:	88bb      	ldrh	r3, [r7, #4]
 801c35e:	085b      	lsrs	r3, r3, #1
 801c360:	b29b      	uxth	r3, r3
 801c362:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801c36c:	88fb      	ldrh	r3, [r7, #6]
 801c36e:	005a      	lsls	r2, r3, #1
 801c370:	697b      	ldr	r3, [r7, #20]
 801c372:	4413      	add	r3, r2
 801c374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801c378:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 801c37a:	69bb      	ldr	r3, [r7, #24]
 801c37c:	627b      	str	r3, [r7, #36]	; 0x24
 801c37e:	e01b      	b.n	801c3b8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 801c380:	6a3b      	ldr	r3, [r7, #32]
 801c382:	881b      	ldrh	r3, [r3, #0]
 801c384:	b29b      	uxth	r3, r3
 801c386:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801c388:	6a3b      	ldr	r3, [r7, #32]
 801c38a:	3302      	adds	r3, #2
 801c38c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801c38e:	693b      	ldr	r3, [r7, #16]
 801c390:	b2da      	uxtb	r2, r3
 801c392:	69fb      	ldr	r3, [r7, #28]
 801c394:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801c396:	69fb      	ldr	r3, [r7, #28]
 801c398:	3301      	adds	r3, #1
 801c39a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801c39c:	693b      	ldr	r3, [r7, #16]
 801c39e:	0a1b      	lsrs	r3, r3, #8
 801c3a0:	b2da      	uxtb	r2, r3
 801c3a2:	69fb      	ldr	r3, [r7, #28]
 801c3a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801c3a6:	69fb      	ldr	r3, [r7, #28]
 801c3a8:	3301      	adds	r3, #1
 801c3aa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801c3ac:	6a3b      	ldr	r3, [r7, #32]
 801c3ae:	3302      	adds	r3, #2
 801c3b0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 801c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3b4:	3b01      	subs	r3, #1
 801c3b6:	627b      	str	r3, [r7, #36]	; 0x24
 801c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d1e0      	bne.n	801c380 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 801c3be:	88bb      	ldrh	r3, [r7, #4]
 801c3c0:	f003 0301 	and.w	r3, r3, #1
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d007      	beq.n	801c3da <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 801c3ca:	6a3b      	ldr	r3, [r7, #32]
 801c3cc:	881b      	ldrh	r3, [r3, #0]
 801c3ce:	b29b      	uxth	r3, r3
 801c3d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801c3d2:	693b      	ldr	r3, [r7, #16]
 801c3d4:	b2da      	uxtb	r2, r3
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	701a      	strb	r2, [r3, #0]
  }
}
 801c3da:	bf00      	nop
 801c3dc:	372c      	adds	r7, #44	; 0x2c
 801c3de:	46bd      	mov	sp, r7
 801c3e0:	bc80      	pop	{r7}
 801c3e2:	4770      	bx	lr

0801c3e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	b084      	sub	sp, #16
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	60f8      	str	r0, [r7, #12]
 801c3ec:	60b9      	str	r1, [r7, #8]
 801c3ee:	4613      	mov	r3, r2
 801c3f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d101      	bne.n	801c3fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c3f8:	2302      	movs	r3, #2
 801c3fa:	e01a      	b.n	801c432 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c402:	2b00      	cmp	r3, #0
 801c404:	d003      	beq.n	801c40e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	2200      	movs	r2, #0
 801c40a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c40e:	68bb      	ldr	r3, [r7, #8]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d003      	beq.n	801c41c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	68ba      	ldr	r2, [r7, #8]
 801c418:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2201      	movs	r2, #1
 801c420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	79fa      	ldrb	r2, [r7, #7]
 801c428:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c42a:	68f8      	ldr	r0, [r7, #12]
 801c42c:	f001 fa5c 	bl	801d8e8 <USBD_LL_Init>

  return USBD_OK;
 801c430:	2300      	movs	r3, #0
}
 801c432:	4618      	mov	r0, r3
 801c434:	3710      	adds	r7, #16
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}

0801c43a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c43a:	b480      	push	{r7}
 801c43c:	b085      	sub	sp, #20
 801c43e:	af00      	add	r7, sp, #0
 801c440:	6078      	str	r0, [r7, #4]
 801c442:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c444:	2300      	movs	r3, #0
 801c446:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801c448:	683b      	ldr	r3, [r7, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d006      	beq.n	801c45c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	683a      	ldr	r2, [r7, #0]
 801c452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801c456:	2300      	movs	r3, #0
 801c458:	73fb      	strb	r3, [r7, #15]
 801c45a:	e001      	b.n	801c460 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c45c:	2302      	movs	r3, #2
 801c45e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801c460:	7bfb      	ldrb	r3, [r7, #15]
}
 801c462:	4618      	mov	r0, r3
 801c464:	3714      	adds	r7, #20
 801c466:	46bd      	mov	sp, r7
 801c468:	bc80      	pop	{r7}
 801c46a:	4770      	bx	lr

0801c46c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b082      	sub	sp, #8
 801c470:	af00      	add	r7, sp, #0
 801c472:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c474:	6878      	ldr	r0, [r7, #4]
 801c476:	f001 faa3 	bl	801d9c0 <USBD_LL_Start>

  return USBD_OK;
 801c47a:	2300      	movs	r3, #0
}
 801c47c:	4618      	mov	r0, r3
 801c47e:	3708      	adds	r7, #8
 801c480:	46bd      	mov	sp, r7
 801c482:	bd80      	pop	{r7, pc}

0801c484 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c484:	b480      	push	{r7}
 801c486:	b083      	sub	sp, #12
 801c488:	af00      	add	r7, sp, #0
 801c48a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c48c:	2300      	movs	r3, #0
}
 801c48e:	4618      	mov	r0, r3
 801c490:	370c      	adds	r7, #12
 801c492:	46bd      	mov	sp, r7
 801c494:	bc80      	pop	{r7}
 801c496:	4770      	bx	lr

0801c498 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
 801c4a0:	460b      	mov	r3, r1
 801c4a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c4a4:	2302      	movs	r3, #2
 801c4a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d00c      	beq.n	801c4cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	78fa      	ldrb	r2, [r7, #3]
 801c4bc:	4611      	mov	r1, r2
 801c4be:	6878      	ldr	r0, [r7, #4]
 801c4c0:	4798      	blx	r3
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d101      	bne.n	801c4cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801c4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4ce:	4618      	mov	r0, r3
 801c4d0:	3710      	adds	r7, #16
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}

0801c4d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c4d6:	b580      	push	{r7, lr}
 801c4d8:	b082      	sub	sp, #8
 801c4da:	af00      	add	r7, sp, #0
 801c4dc:	6078      	str	r0, [r7, #4]
 801c4de:	460b      	mov	r3, r1
 801c4e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c4e8:	685b      	ldr	r3, [r3, #4]
 801c4ea:	78fa      	ldrb	r2, [r7, #3]
 801c4ec:	4611      	mov	r1, r2
 801c4ee:	6878      	ldr	r0, [r7, #4]
 801c4f0:	4798      	blx	r3

  return USBD_OK;
 801c4f2:	2300      	movs	r3, #0
}
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	3708      	adds	r7, #8
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	bd80      	pop	{r7, pc}

0801c4fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b082      	sub	sp, #8
 801c500:	af00      	add	r7, sp, #0
 801c502:	6078      	str	r0, [r7, #4]
 801c504:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c50c:	6839      	ldr	r1, [r7, #0]
 801c50e:	4618      	mov	r0, r3
 801c510:	f000 feca 	bl	801d2a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2201      	movs	r2, #1
 801c518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c522:	461a      	mov	r2, r3
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c530:	f003 031f 	and.w	r3, r3, #31
 801c534:	2b01      	cmp	r3, #1
 801c536:	d00c      	beq.n	801c552 <USBD_LL_SetupStage+0x56>
 801c538:	2b01      	cmp	r3, #1
 801c53a:	d302      	bcc.n	801c542 <USBD_LL_SetupStage+0x46>
 801c53c:	2b02      	cmp	r3, #2
 801c53e:	d010      	beq.n	801c562 <USBD_LL_SetupStage+0x66>
 801c540:	e017      	b.n	801c572 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c548:	4619      	mov	r1, r3
 801c54a:	6878      	ldr	r0, [r7, #4]
 801c54c:	f000 f9ca 	bl	801c8e4 <USBD_StdDevReq>
      break;
 801c550:	e01a      	b.n	801c588 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c558:	4619      	mov	r1, r3
 801c55a:	6878      	ldr	r0, [r7, #4]
 801c55c:	f000 fa2c 	bl	801c9b8 <USBD_StdItfReq>
      break;
 801c560:	e012      	b.n	801c588 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c568:	4619      	mov	r1, r3
 801c56a:	6878      	ldr	r0, [r7, #4]
 801c56c:	f000 fa6a 	bl	801ca44 <USBD_StdEPReq>
      break;
 801c570:	e00a      	b.n	801c588 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c57c:	b2db      	uxtb	r3, r3
 801c57e:	4619      	mov	r1, r3
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f001 fa7d 	bl	801da80 <USBD_LL_StallEP>
      break;
 801c586:	bf00      	nop
  }

  return USBD_OK;
 801c588:	2300      	movs	r3, #0
}
 801c58a:	4618      	mov	r0, r3
 801c58c:	3708      	adds	r7, #8
 801c58e:	46bd      	mov	sp, r7
 801c590:	bd80      	pop	{r7, pc}

0801c592 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c592:	b580      	push	{r7, lr}
 801c594:	b086      	sub	sp, #24
 801c596:	af00      	add	r7, sp, #0
 801c598:	60f8      	str	r0, [r7, #12]
 801c59a:	460b      	mov	r3, r1
 801c59c:	607a      	str	r2, [r7, #4]
 801c59e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c5a0:	7afb      	ldrb	r3, [r7, #11]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d14b      	bne.n	801c63e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801c5ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c5b4:	2b03      	cmp	r3, #3
 801c5b6:	d134      	bne.n	801c622 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801c5b8:	697b      	ldr	r3, [r7, #20]
 801c5ba:	68da      	ldr	r2, [r3, #12]
 801c5bc:	697b      	ldr	r3, [r7, #20]
 801c5be:	691b      	ldr	r3, [r3, #16]
 801c5c0:	429a      	cmp	r2, r3
 801c5c2:	d919      	bls.n	801c5f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c5c4:	697b      	ldr	r3, [r7, #20]
 801c5c6:	68da      	ldr	r2, [r3, #12]
 801c5c8:	697b      	ldr	r3, [r7, #20]
 801c5ca:	691b      	ldr	r3, [r3, #16]
 801c5cc:	1ad2      	subs	r2, r2, r3
 801c5ce:	697b      	ldr	r3, [r7, #20]
 801c5d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5d2:	697b      	ldr	r3, [r7, #20]
 801c5d4:	68da      	ldr	r2, [r3, #12]
 801c5d6:	697b      	ldr	r3, [r7, #20]
 801c5d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	d203      	bcs.n	801c5e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5de:	697b      	ldr	r3, [r7, #20]
 801c5e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	e002      	b.n	801c5ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5e6:	697b      	ldr	r3, [r7, #20]
 801c5e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5ea:	b29b      	uxth	r3, r3
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	6879      	ldr	r1, [r7, #4]
 801c5f0:	68f8      	ldr	r0, [r7, #12]
 801c5f2:	f000 ff4b 	bl	801d48c <USBD_CtlContinueRx>
 801c5f6:	e038      	b.n	801c66a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c5fe:	691b      	ldr	r3, [r3, #16]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d00a      	beq.n	801c61a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c60a:	2b03      	cmp	r3, #3
 801c60c:	d105      	bne.n	801c61a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c614:	691b      	ldr	r3, [r3, #16]
 801c616:	68f8      	ldr	r0, [r7, #12]
 801c618:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c61a:	68f8      	ldr	r0, [r7, #12]
 801c61c:	f000 ff48 	bl	801d4b0 <USBD_CtlSendStatus>
 801c620:	e023      	b.n	801c66a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c628:	2b05      	cmp	r3, #5
 801c62a:	d11e      	bne.n	801c66a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	2200      	movs	r2, #0
 801c630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801c634:	2100      	movs	r1, #0
 801c636:	68f8      	ldr	r0, [r7, #12]
 801c638:	f001 fa22 	bl	801da80 <USBD_LL_StallEP>
 801c63c:	e015      	b.n	801c66a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c644:	699b      	ldr	r3, [r3, #24]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d00d      	beq.n	801c666 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801c650:	2b03      	cmp	r3, #3
 801c652:	d108      	bne.n	801c666 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c65a:	699b      	ldr	r3, [r3, #24]
 801c65c:	7afa      	ldrb	r2, [r7, #11]
 801c65e:	4611      	mov	r1, r2
 801c660:	68f8      	ldr	r0, [r7, #12]
 801c662:	4798      	blx	r3
 801c664:	e001      	b.n	801c66a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c666:	2302      	movs	r3, #2
 801c668:	e000      	b.n	801c66c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801c66a:	2300      	movs	r3, #0
}
 801c66c:	4618      	mov	r0, r3
 801c66e:	3718      	adds	r7, #24
 801c670:	46bd      	mov	sp, r7
 801c672:	bd80      	pop	{r7, pc}

0801c674 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c674:	b580      	push	{r7, lr}
 801c676:	b086      	sub	sp, #24
 801c678:	af00      	add	r7, sp, #0
 801c67a:	60f8      	str	r0, [r7, #12]
 801c67c:	460b      	mov	r3, r1
 801c67e:	607a      	str	r2, [r7, #4]
 801c680:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c682:	7afb      	ldrb	r3, [r7, #11]
 801c684:	2b00      	cmp	r3, #0
 801c686:	d17f      	bne.n	801c788 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	3314      	adds	r3, #20
 801c68c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c694:	2b02      	cmp	r3, #2
 801c696:	d15c      	bne.n	801c752 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	68da      	ldr	r2, [r3, #12]
 801c69c:	697b      	ldr	r3, [r7, #20]
 801c69e:	691b      	ldr	r3, [r3, #16]
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d915      	bls.n	801c6d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801c6a4:	697b      	ldr	r3, [r7, #20]
 801c6a6:	68da      	ldr	r2, [r3, #12]
 801c6a8:	697b      	ldr	r3, [r7, #20]
 801c6aa:	691b      	ldr	r3, [r3, #16]
 801c6ac:	1ad2      	subs	r2, r2, r3
 801c6ae:	697b      	ldr	r3, [r7, #20]
 801c6b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c6b2:	697b      	ldr	r3, [r7, #20]
 801c6b4:	68db      	ldr	r3, [r3, #12]
 801c6b6:	b29b      	uxth	r3, r3
 801c6b8:	461a      	mov	r2, r3
 801c6ba:	6879      	ldr	r1, [r7, #4]
 801c6bc:	68f8      	ldr	r0, [r7, #12]
 801c6be:	f000 feb5 	bl	801d42c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c6c2:	2300      	movs	r3, #0
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	2100      	movs	r1, #0
 801c6c8:	68f8      	ldr	r0, [r7, #12]
 801c6ca:	f001 fa85 	bl	801dbd8 <USBD_LL_PrepareReceive>
 801c6ce:	e04e      	b.n	801c76e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6d0:	697b      	ldr	r3, [r7, #20]
 801c6d2:	689b      	ldr	r3, [r3, #8]
 801c6d4:	697a      	ldr	r2, [r7, #20]
 801c6d6:	6912      	ldr	r2, [r2, #16]
 801c6d8:	fbb3 f1f2 	udiv	r1, r3, r2
 801c6dc:	fb02 f201 	mul.w	r2, r2, r1
 801c6e0:	1a9b      	subs	r3, r3, r2
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d11c      	bne.n	801c720 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	689a      	ldr	r2, [r3, #8]
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6ee:	429a      	cmp	r2, r3
 801c6f0:	d316      	bcc.n	801c720 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	689a      	ldr	r2, [r3, #8]
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	d20f      	bcs.n	801c720 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c700:	2200      	movs	r2, #0
 801c702:	2100      	movs	r1, #0
 801c704:	68f8      	ldr	r0, [r7, #12]
 801c706:	f000 fe91 	bl	801d42c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2200      	movs	r2, #0
 801c70e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c712:	2300      	movs	r3, #0
 801c714:	2200      	movs	r2, #0
 801c716:	2100      	movs	r1, #0
 801c718:	68f8      	ldr	r0, [r7, #12]
 801c71a:	f001 fa5d 	bl	801dbd8 <USBD_LL_PrepareReceive>
 801c71e:	e026      	b.n	801c76e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c726:	68db      	ldr	r3, [r3, #12]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d00a      	beq.n	801c742 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c732:	2b03      	cmp	r3, #3
 801c734:	d105      	bne.n	801c742 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c73c:	68db      	ldr	r3, [r3, #12]
 801c73e:	68f8      	ldr	r0, [r7, #12]
 801c740:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c742:	2180      	movs	r1, #128	; 0x80
 801c744:	68f8      	ldr	r0, [r7, #12]
 801c746:	f001 f99b 	bl	801da80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c74a:	68f8      	ldr	r0, [r7, #12]
 801c74c:	f000 fec3 	bl	801d4d6 <USBD_CtlReceiveStatus>
 801c750:	e00d      	b.n	801c76e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c758:	2b04      	cmp	r3, #4
 801c75a:	d004      	beq.n	801c766 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c762:	2b00      	cmp	r3, #0
 801c764:	d103      	bne.n	801c76e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c766:	2180      	movs	r1, #128	; 0x80
 801c768:	68f8      	ldr	r0, [r7, #12]
 801c76a:	f001 f989 	bl	801da80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801c774:	2b01      	cmp	r3, #1
 801c776:	d11d      	bne.n	801c7b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801c778:	68f8      	ldr	r0, [r7, #12]
 801c77a:	f7ff fe83 	bl	801c484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2200      	movs	r2, #0
 801c782:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801c786:	e015      	b.n	801c7b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c78e:	695b      	ldr	r3, [r3, #20]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d00d      	beq.n	801c7b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801c79a:	2b03      	cmp	r3, #3
 801c79c:	d108      	bne.n	801c7b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c7a4:	695b      	ldr	r3, [r3, #20]
 801c7a6:	7afa      	ldrb	r2, [r7, #11]
 801c7a8:	4611      	mov	r1, r2
 801c7aa:	68f8      	ldr	r0, [r7, #12]
 801c7ac:	4798      	blx	r3
 801c7ae:	e001      	b.n	801c7b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c7b0:	2302      	movs	r3, #2
 801c7b2:	e000      	b.n	801c7b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801c7b4:	2300      	movs	r3, #0
}
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	3718      	adds	r7, #24
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	bd80      	pop	{r7, pc}

0801c7be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c7be:	b580      	push	{r7, lr}
 801c7c0:	b082      	sub	sp, #8
 801c7c2:	af00      	add	r7, sp, #0
 801c7c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7c6:	2340      	movs	r3, #64	; 0x40
 801c7c8:	2200      	movs	r2, #0
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	6878      	ldr	r0, [r7, #4]
 801c7ce:	f001 f912 	bl	801d9f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	2201      	movs	r2, #1
 801c7d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	2240      	movs	r2, #64	; 0x40
 801c7de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7e2:	2340      	movs	r3, #64	; 0x40
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	2180      	movs	r1, #128	; 0x80
 801c7e8:	6878      	ldr	r0, [r7, #4]
 801c7ea:	f001 f904 	bl	801d9f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	2201      	movs	r2, #1
 801c7f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2240      	movs	r2, #64	; 0x40
 801c7f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	2201      	movs	r2, #1
 801c7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	2200      	movs	r2, #0
 801c806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	2200      	movs	r2, #0
 801c80e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	2200      	movs	r2, #0
 801c814:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d009      	beq.n	801c836 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	687a      	ldr	r2, [r7, #4]
 801c82c:	6852      	ldr	r2, [r2, #4]
 801c82e:	b2d2      	uxtb	r2, r2
 801c830:	4611      	mov	r1, r2
 801c832:	6878      	ldr	r0, [r7, #4]
 801c834:	4798      	blx	r3
  }

  return USBD_OK;
 801c836:	2300      	movs	r3, #0
}
 801c838:	4618      	mov	r0, r3
 801c83a:	3708      	adds	r7, #8
 801c83c:	46bd      	mov	sp, r7
 801c83e:	bd80      	pop	{r7, pc}

0801c840 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c840:	b480      	push	{r7}
 801c842:	b083      	sub	sp, #12
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
 801c848:	460b      	mov	r3, r1
 801c84a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	78fa      	ldrb	r2, [r7, #3]
 801c850:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c852:	2300      	movs	r3, #0
}
 801c854:	4618      	mov	r0, r3
 801c856:	370c      	adds	r7, #12
 801c858:	46bd      	mov	sp, r7
 801c85a:	bc80      	pop	{r7}
 801c85c:	4770      	bx	lr

0801c85e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c85e:	b480      	push	{r7}
 801c860:	b083      	sub	sp, #12
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	2204      	movs	r2, #4
 801c876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801c87a:	2300      	movs	r3, #0
}
 801c87c:	4618      	mov	r0, r3
 801c87e:	370c      	adds	r7, #12
 801c880:	46bd      	mov	sp, r7
 801c882:	bc80      	pop	{r7}
 801c884:	4770      	bx	lr

0801c886 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c886:	b480      	push	{r7}
 801c888:	b083      	sub	sp, #12
 801c88a:	af00      	add	r7, sp, #0
 801c88c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c894:	2b04      	cmp	r3, #4
 801c896:	d105      	bne.n	801c8a4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801c8a4:	2300      	movs	r3, #0
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	370c      	adds	r7, #12
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bc80      	pop	{r7}
 801c8ae:	4770      	bx	lr

0801c8b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c8be:	2b03      	cmp	r3, #3
 801c8c0:	d10b      	bne.n	801c8da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8c8:	69db      	ldr	r3, [r3, #28]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d005      	beq.n	801c8da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8d4:	69db      	ldr	r3, [r3, #28]
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c8da:	2300      	movs	r3, #0
}
 801c8dc:	4618      	mov	r0, r3
 801c8de:	3708      	adds	r7, #8
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}

0801c8e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b084      	sub	sp, #16
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
 801c8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c8f2:	683b      	ldr	r3, [r7, #0]
 801c8f4:	781b      	ldrb	r3, [r3, #0]
 801c8f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c8fa:	2b20      	cmp	r3, #32
 801c8fc:	d004      	beq.n	801c908 <USBD_StdDevReq+0x24>
 801c8fe:	2b40      	cmp	r3, #64	; 0x40
 801c900:	d002      	beq.n	801c908 <USBD_StdDevReq+0x24>
 801c902:	2b00      	cmp	r3, #0
 801c904:	d008      	beq.n	801c918 <USBD_StdDevReq+0x34>
 801c906:	e04c      	b.n	801c9a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c90e:	689b      	ldr	r3, [r3, #8]
 801c910:	6839      	ldr	r1, [r7, #0]
 801c912:	6878      	ldr	r0, [r7, #4]
 801c914:	4798      	blx	r3
      break;
 801c916:	e049      	b.n	801c9ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	785b      	ldrb	r3, [r3, #1]
 801c91c:	2b09      	cmp	r3, #9
 801c91e:	d83a      	bhi.n	801c996 <USBD_StdDevReq+0xb2>
 801c920:	a201      	add	r2, pc, #4	; (adr r2, 801c928 <USBD_StdDevReq+0x44>)
 801c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c926:	bf00      	nop
 801c928:	0801c979 	.word	0x0801c979
 801c92c:	0801c98d 	.word	0x0801c98d
 801c930:	0801c997 	.word	0x0801c997
 801c934:	0801c983 	.word	0x0801c983
 801c938:	0801c997 	.word	0x0801c997
 801c93c:	0801c95b 	.word	0x0801c95b
 801c940:	0801c951 	.word	0x0801c951
 801c944:	0801c997 	.word	0x0801c997
 801c948:	0801c96f 	.word	0x0801c96f
 801c94c:	0801c965 	.word	0x0801c965
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c950:	6839      	ldr	r1, [r7, #0]
 801c952:	6878      	ldr	r0, [r7, #4]
 801c954:	f000 f9d4 	bl	801cd00 <USBD_GetDescriptor>
          break;
 801c958:	e022      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c95a:	6839      	ldr	r1, [r7, #0]
 801c95c:	6878      	ldr	r0, [r7, #4]
 801c95e:	f000 fb37 	bl	801cfd0 <USBD_SetAddress>
          break;
 801c962:	e01d      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c964:	6839      	ldr	r1, [r7, #0]
 801c966:	6878      	ldr	r0, [r7, #4]
 801c968:	f000 fb74 	bl	801d054 <USBD_SetConfig>
          break;
 801c96c:	e018      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c96e:	6839      	ldr	r1, [r7, #0]
 801c970:	6878      	ldr	r0, [r7, #4]
 801c972:	f000 fbfd 	bl	801d170 <USBD_GetConfig>
          break;
 801c976:	e013      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c978:	6839      	ldr	r1, [r7, #0]
 801c97a:	6878      	ldr	r0, [r7, #4]
 801c97c:	f000 fc2c 	bl	801d1d8 <USBD_GetStatus>
          break;
 801c980:	e00e      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c982:	6839      	ldr	r1, [r7, #0]
 801c984:	6878      	ldr	r0, [r7, #4]
 801c986:	f000 fc5a 	bl	801d23e <USBD_SetFeature>
          break;
 801c98a:	e009      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c98c:	6839      	ldr	r1, [r7, #0]
 801c98e:	6878      	ldr	r0, [r7, #4]
 801c990:	f000 fc69 	bl	801d266 <USBD_ClrFeature>
          break;
 801c994:	e004      	b.n	801c9a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801c996:	6839      	ldr	r1, [r7, #0]
 801c998:	6878      	ldr	r0, [r7, #4]
 801c99a:	f000 fcc1 	bl	801d320 <USBD_CtlError>
          break;
 801c99e:	bf00      	nop
      }
      break;
 801c9a0:	e004      	b.n	801c9ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801c9a2:	6839      	ldr	r1, [r7, #0]
 801c9a4:	6878      	ldr	r0, [r7, #4]
 801c9a6:	f000 fcbb 	bl	801d320 <USBD_CtlError>
      break;
 801c9aa:	bf00      	nop
  }

  return ret;
 801c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	3710      	adds	r7, #16
 801c9b2:	46bd      	mov	sp, r7
 801c9b4:	bd80      	pop	{r7, pc}
 801c9b6:	bf00      	nop

0801c9b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b084      	sub	sp, #16
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
 801c9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c9ce:	2b20      	cmp	r3, #32
 801c9d0:	d003      	beq.n	801c9da <USBD_StdItfReq+0x22>
 801c9d2:	2b40      	cmp	r3, #64	; 0x40
 801c9d4:	d001      	beq.n	801c9da <USBD_StdItfReq+0x22>
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d12a      	bne.n	801ca30 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c9e0:	3b01      	subs	r3, #1
 801c9e2:	2b02      	cmp	r3, #2
 801c9e4:	d81d      	bhi.n	801ca22 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	889b      	ldrh	r3, [r3, #4]
 801c9ea:	b2db      	uxtb	r3, r3
 801c9ec:	2b01      	cmp	r3, #1
 801c9ee:	d813      	bhi.n	801ca18 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c9f6:	689b      	ldr	r3, [r3, #8]
 801c9f8:	6839      	ldr	r1, [r7, #0]
 801c9fa:	6878      	ldr	r0, [r7, #4]
 801c9fc:	4798      	blx	r3
 801c9fe:	4603      	mov	r3, r0
 801ca00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	88db      	ldrh	r3, [r3, #6]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d110      	bne.n	801ca2c <USBD_StdItfReq+0x74>
 801ca0a:	7bfb      	ldrb	r3, [r7, #15]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d10d      	bne.n	801ca2c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801ca10:	6878      	ldr	r0, [r7, #4]
 801ca12:	f000 fd4d 	bl	801d4b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801ca16:	e009      	b.n	801ca2c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801ca18:	6839      	ldr	r1, [r7, #0]
 801ca1a:	6878      	ldr	r0, [r7, #4]
 801ca1c:	f000 fc80 	bl	801d320 <USBD_CtlError>
          break;
 801ca20:	e004      	b.n	801ca2c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801ca22:	6839      	ldr	r1, [r7, #0]
 801ca24:	6878      	ldr	r0, [r7, #4]
 801ca26:	f000 fc7b 	bl	801d320 <USBD_CtlError>
          break;
 801ca2a:	e000      	b.n	801ca2e <USBD_StdItfReq+0x76>
          break;
 801ca2c:	bf00      	nop
      }
      break;
 801ca2e:	e004      	b.n	801ca3a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801ca30:	6839      	ldr	r1, [r7, #0]
 801ca32:	6878      	ldr	r0, [r7, #4]
 801ca34:	f000 fc74 	bl	801d320 <USBD_CtlError>
      break;
 801ca38:	bf00      	nop
  }

  return USBD_OK;
 801ca3a:	2300      	movs	r3, #0
}
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	3710      	adds	r7, #16
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd80      	pop	{r7, pc}

0801ca44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b084      	sub	sp, #16
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
 801ca4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801ca4e:	2300      	movs	r3, #0
 801ca50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	889b      	ldrh	r3, [r3, #4]
 801ca56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ca60:	2b20      	cmp	r3, #32
 801ca62:	d004      	beq.n	801ca6e <USBD_StdEPReq+0x2a>
 801ca64:	2b40      	cmp	r3, #64	; 0x40
 801ca66:	d002      	beq.n	801ca6e <USBD_StdEPReq+0x2a>
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d008      	beq.n	801ca7e <USBD_StdEPReq+0x3a>
 801ca6c:	e13d      	b.n	801ccea <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca74:	689b      	ldr	r3, [r3, #8]
 801ca76:	6839      	ldr	r1, [r7, #0]
 801ca78:	6878      	ldr	r0, [r7, #4]
 801ca7a:	4798      	blx	r3
      break;
 801ca7c:	e13a      	b.n	801ccf4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ca86:	2b20      	cmp	r3, #32
 801ca88:	d10a      	bne.n	801caa0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca90:	689b      	ldr	r3, [r3, #8]
 801ca92:	6839      	ldr	r1, [r7, #0]
 801ca94:	6878      	ldr	r0, [r7, #4]
 801ca96:	4798      	blx	r3
 801ca98:	4603      	mov	r3, r0
 801ca9a:	73fb      	strb	r3, [r7, #15]

        return ret;
 801ca9c:	7bfb      	ldrb	r3, [r7, #15]
 801ca9e:	e12a      	b.n	801ccf6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	785b      	ldrb	r3, [r3, #1]
 801caa4:	2b01      	cmp	r3, #1
 801caa6:	d03e      	beq.n	801cb26 <USBD_StdEPReq+0xe2>
 801caa8:	2b03      	cmp	r3, #3
 801caaa:	d002      	beq.n	801cab2 <USBD_StdEPReq+0x6e>
 801caac:	2b00      	cmp	r3, #0
 801caae:	d070      	beq.n	801cb92 <USBD_StdEPReq+0x14e>
 801cab0:	e115      	b.n	801ccde <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cab8:	2b02      	cmp	r3, #2
 801caba:	d002      	beq.n	801cac2 <USBD_StdEPReq+0x7e>
 801cabc:	2b03      	cmp	r3, #3
 801cabe:	d015      	beq.n	801caec <USBD_StdEPReq+0xa8>
 801cac0:	e02b      	b.n	801cb1a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cac2:	7bbb      	ldrb	r3, [r7, #14]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d00c      	beq.n	801cae2 <USBD_StdEPReq+0x9e>
 801cac8:	7bbb      	ldrb	r3, [r7, #14]
 801caca:	2b80      	cmp	r3, #128	; 0x80
 801cacc:	d009      	beq.n	801cae2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cace:	7bbb      	ldrb	r3, [r7, #14]
 801cad0:	4619      	mov	r1, r3
 801cad2:	6878      	ldr	r0, [r7, #4]
 801cad4:	f000 ffd4 	bl	801da80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cad8:	2180      	movs	r1, #128	; 0x80
 801cada:	6878      	ldr	r0, [r7, #4]
 801cadc:	f000 ffd0 	bl	801da80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cae0:	e020      	b.n	801cb24 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801cae2:	6839      	ldr	r1, [r7, #0]
 801cae4:	6878      	ldr	r0, [r7, #4]
 801cae6:	f000 fc1b 	bl	801d320 <USBD_CtlError>
              break;
 801caea:	e01b      	b.n	801cb24 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801caec:	683b      	ldr	r3, [r7, #0]
 801caee:	885b      	ldrh	r3, [r3, #2]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d10e      	bne.n	801cb12 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801caf4:	7bbb      	ldrb	r3, [r7, #14]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d00b      	beq.n	801cb12 <USBD_StdEPReq+0xce>
 801cafa:	7bbb      	ldrb	r3, [r7, #14]
 801cafc:	2b80      	cmp	r3, #128	; 0x80
 801cafe:	d008      	beq.n	801cb12 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	88db      	ldrh	r3, [r3, #6]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d104      	bne.n	801cb12 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801cb08:	7bbb      	ldrb	r3, [r7, #14]
 801cb0a:	4619      	mov	r1, r3
 801cb0c:	6878      	ldr	r0, [r7, #4]
 801cb0e:	f000 ffb7 	bl	801da80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801cb12:	6878      	ldr	r0, [r7, #4]
 801cb14:	f000 fccc 	bl	801d4b0 <USBD_CtlSendStatus>

              break;
 801cb18:	e004      	b.n	801cb24 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801cb1a:	6839      	ldr	r1, [r7, #0]
 801cb1c:	6878      	ldr	r0, [r7, #4]
 801cb1e:	f000 fbff 	bl	801d320 <USBD_CtlError>
              break;
 801cb22:	bf00      	nop
          }
          break;
 801cb24:	e0e0      	b.n	801cce8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb2c:	2b02      	cmp	r3, #2
 801cb2e:	d002      	beq.n	801cb36 <USBD_StdEPReq+0xf2>
 801cb30:	2b03      	cmp	r3, #3
 801cb32:	d015      	beq.n	801cb60 <USBD_StdEPReq+0x11c>
 801cb34:	e026      	b.n	801cb84 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cb36:	7bbb      	ldrb	r3, [r7, #14]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d00c      	beq.n	801cb56 <USBD_StdEPReq+0x112>
 801cb3c:	7bbb      	ldrb	r3, [r7, #14]
 801cb3e:	2b80      	cmp	r3, #128	; 0x80
 801cb40:	d009      	beq.n	801cb56 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cb42:	7bbb      	ldrb	r3, [r7, #14]
 801cb44:	4619      	mov	r1, r3
 801cb46:	6878      	ldr	r0, [r7, #4]
 801cb48:	f000 ff9a 	bl	801da80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cb4c:	2180      	movs	r1, #128	; 0x80
 801cb4e:	6878      	ldr	r0, [r7, #4]
 801cb50:	f000 ff96 	bl	801da80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cb54:	e01c      	b.n	801cb90 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801cb56:	6839      	ldr	r1, [r7, #0]
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	f000 fbe1 	bl	801d320 <USBD_CtlError>
              break;
 801cb5e:	e017      	b.n	801cb90 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cb60:	683b      	ldr	r3, [r7, #0]
 801cb62:	885b      	ldrh	r3, [r3, #2]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d112      	bne.n	801cb8e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801cb68:	7bbb      	ldrb	r3, [r7, #14]
 801cb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d004      	beq.n	801cb7c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801cb72:	7bbb      	ldrb	r3, [r7, #14]
 801cb74:	4619      	mov	r1, r3
 801cb76:	6878      	ldr	r0, [r7, #4]
 801cb78:	f000 ffa1 	bl	801dabe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801cb7c:	6878      	ldr	r0, [r7, #4]
 801cb7e:	f000 fc97 	bl	801d4b0 <USBD_CtlSendStatus>
              }
              break;
 801cb82:	e004      	b.n	801cb8e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801cb84:	6839      	ldr	r1, [r7, #0]
 801cb86:	6878      	ldr	r0, [r7, #4]
 801cb88:	f000 fbca 	bl	801d320 <USBD_CtlError>
              break;
 801cb8c:	e000      	b.n	801cb90 <USBD_StdEPReq+0x14c>
              break;
 801cb8e:	bf00      	nop
          }
          break;
 801cb90:	e0aa      	b.n	801cce8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb98:	2b02      	cmp	r3, #2
 801cb9a:	d002      	beq.n	801cba2 <USBD_StdEPReq+0x15e>
 801cb9c:	2b03      	cmp	r3, #3
 801cb9e:	d032      	beq.n	801cc06 <USBD_StdEPReq+0x1c2>
 801cba0:	e097      	b.n	801ccd2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cba2:	7bbb      	ldrb	r3, [r7, #14]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d007      	beq.n	801cbb8 <USBD_StdEPReq+0x174>
 801cba8:	7bbb      	ldrb	r3, [r7, #14]
 801cbaa:	2b80      	cmp	r3, #128	; 0x80
 801cbac:	d004      	beq.n	801cbb8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801cbae:	6839      	ldr	r1, [r7, #0]
 801cbb0:	6878      	ldr	r0, [r7, #4]
 801cbb2:	f000 fbb5 	bl	801d320 <USBD_CtlError>
                break;
 801cbb6:	e091      	b.n	801ccdc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cbb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	da0b      	bge.n	801cbd8 <USBD_StdEPReq+0x194>
 801cbc0:	7bbb      	ldrb	r3, [r7, #14]
 801cbc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cbc6:	4613      	mov	r3, r2
 801cbc8:	009b      	lsls	r3, r3, #2
 801cbca:	4413      	add	r3, r2
 801cbcc:	009b      	lsls	r3, r3, #2
 801cbce:	3310      	adds	r3, #16
 801cbd0:	687a      	ldr	r2, [r7, #4]
 801cbd2:	4413      	add	r3, r2
 801cbd4:	3304      	adds	r3, #4
 801cbd6:	e00b      	b.n	801cbf0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cbd8:	7bbb      	ldrb	r3, [r7, #14]
 801cbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cbde:	4613      	mov	r3, r2
 801cbe0:	009b      	lsls	r3, r3, #2
 801cbe2:	4413      	add	r3, r2
 801cbe4:	009b      	lsls	r3, r3, #2
 801cbe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cbea:	687a      	ldr	r2, [r7, #4]
 801cbec:	4413      	add	r3, r2
 801cbee:	3304      	adds	r3, #4
 801cbf0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cbf8:	68bb      	ldr	r3, [r7, #8]
 801cbfa:	2202      	movs	r2, #2
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f000 fbf8 	bl	801d3f4 <USBD_CtlSendData>
              break;
 801cc04:	e06a      	b.n	801ccdc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801cc06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	da11      	bge.n	801cc32 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801cc0e:	7bbb      	ldrb	r3, [r7, #14]
 801cc10:	f003 020f 	and.w	r2, r3, #15
 801cc14:	6879      	ldr	r1, [r7, #4]
 801cc16:	4613      	mov	r3, r2
 801cc18:	009b      	lsls	r3, r3, #2
 801cc1a:	4413      	add	r3, r2
 801cc1c:	009b      	lsls	r3, r3, #2
 801cc1e:	440b      	add	r3, r1
 801cc20:	3318      	adds	r3, #24
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d117      	bne.n	801cc58 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cc28:	6839      	ldr	r1, [r7, #0]
 801cc2a:	6878      	ldr	r0, [r7, #4]
 801cc2c:	f000 fb78 	bl	801d320 <USBD_CtlError>
                  break;
 801cc30:	e054      	b.n	801ccdc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cc32:	7bbb      	ldrb	r3, [r7, #14]
 801cc34:	f003 020f 	and.w	r2, r3, #15
 801cc38:	6879      	ldr	r1, [r7, #4]
 801cc3a:	4613      	mov	r3, r2
 801cc3c:	009b      	lsls	r3, r3, #2
 801cc3e:	4413      	add	r3, r2
 801cc40:	009b      	lsls	r3, r3, #2
 801cc42:	440b      	add	r3, r1
 801cc44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d104      	bne.n	801cc58 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cc4e:	6839      	ldr	r1, [r7, #0]
 801cc50:	6878      	ldr	r0, [r7, #4]
 801cc52:	f000 fb65 	bl	801d320 <USBD_CtlError>
                  break;
 801cc56:	e041      	b.n	801ccdc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	da0b      	bge.n	801cc78 <USBD_StdEPReq+0x234>
 801cc60:	7bbb      	ldrb	r3, [r7, #14]
 801cc62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cc66:	4613      	mov	r3, r2
 801cc68:	009b      	lsls	r3, r3, #2
 801cc6a:	4413      	add	r3, r2
 801cc6c:	009b      	lsls	r3, r3, #2
 801cc6e:	3310      	adds	r3, #16
 801cc70:	687a      	ldr	r2, [r7, #4]
 801cc72:	4413      	add	r3, r2
 801cc74:	3304      	adds	r3, #4
 801cc76:	e00b      	b.n	801cc90 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cc78:	7bbb      	ldrb	r3, [r7, #14]
 801cc7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc7e:	4613      	mov	r3, r2
 801cc80:	009b      	lsls	r3, r3, #2
 801cc82:	4413      	add	r3, r2
 801cc84:	009b      	lsls	r3, r3, #2
 801cc86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	4413      	add	r3, r2
 801cc8e:	3304      	adds	r3, #4
 801cc90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801cc92:	7bbb      	ldrb	r3, [r7, #14]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d002      	beq.n	801cc9e <USBD_StdEPReq+0x25a>
 801cc98:	7bbb      	ldrb	r3, [r7, #14]
 801cc9a:	2b80      	cmp	r3, #128	; 0x80
 801cc9c:	d103      	bne.n	801cca6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801cc9e:	68bb      	ldr	r3, [r7, #8]
 801cca0:	2200      	movs	r2, #0
 801cca2:	601a      	str	r2, [r3, #0]
 801cca4:	e00e      	b.n	801ccc4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801cca6:	7bbb      	ldrb	r3, [r7, #14]
 801cca8:	4619      	mov	r1, r3
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f000 ff26 	bl	801dafc <USBD_LL_IsStallEP>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d003      	beq.n	801ccbe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801ccb6:	68bb      	ldr	r3, [r7, #8]
 801ccb8:	2201      	movs	r2, #1
 801ccba:	601a      	str	r2, [r3, #0]
 801ccbc:	e002      	b.n	801ccc4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801ccbe:	68bb      	ldr	r3, [r7, #8]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ccc4:	68bb      	ldr	r3, [r7, #8]
 801ccc6:	2202      	movs	r2, #2
 801ccc8:	4619      	mov	r1, r3
 801ccca:	6878      	ldr	r0, [r7, #4]
 801cccc:	f000 fb92 	bl	801d3f4 <USBD_CtlSendData>
              break;
 801ccd0:	e004      	b.n	801ccdc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801ccd2:	6839      	ldr	r1, [r7, #0]
 801ccd4:	6878      	ldr	r0, [r7, #4]
 801ccd6:	f000 fb23 	bl	801d320 <USBD_CtlError>
              break;
 801ccda:	bf00      	nop
          }
          break;
 801ccdc:	e004      	b.n	801cce8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801ccde:	6839      	ldr	r1, [r7, #0]
 801cce0:	6878      	ldr	r0, [r7, #4]
 801cce2:	f000 fb1d 	bl	801d320 <USBD_CtlError>
          break;
 801cce6:	bf00      	nop
      }
      break;
 801cce8:	e004      	b.n	801ccf4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801ccea:	6839      	ldr	r1, [r7, #0]
 801ccec:	6878      	ldr	r0, [r7, #4]
 801ccee:	f000 fb17 	bl	801d320 <USBD_CtlError>
      break;
 801ccf2:	bf00      	nop
  }

  return ret;
 801ccf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	3710      	adds	r7, #16
 801ccfa:	46bd      	mov	sp, r7
 801ccfc:	bd80      	pop	{r7, pc}
	...

0801cd00 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b084      	sub	sp, #16
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
 801cd08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801cd0e:	2300      	movs	r3, #0
 801cd10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801cd12:	2300      	movs	r3, #0
 801cd14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	885b      	ldrh	r3, [r3, #2]
 801cd1a:	0a1b      	lsrs	r3, r3, #8
 801cd1c:	b29b      	uxth	r3, r3
 801cd1e:	3b01      	subs	r3, #1
 801cd20:	2b06      	cmp	r3, #6
 801cd22:	f200 8128 	bhi.w	801cf76 <USBD_GetDescriptor+0x276>
 801cd26:	a201      	add	r2, pc, #4	; (adr r2, 801cd2c <USBD_GetDescriptor+0x2c>)
 801cd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd2c:	0801cd49 	.word	0x0801cd49
 801cd30:	0801cd61 	.word	0x0801cd61
 801cd34:	0801cda1 	.word	0x0801cda1
 801cd38:	0801cf77 	.word	0x0801cf77
 801cd3c:	0801cf77 	.word	0x0801cf77
 801cd40:	0801cf17 	.word	0x0801cf17
 801cd44:	0801cf43 	.word	0x0801cf43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	687a      	ldr	r2, [r7, #4]
 801cd52:	7c12      	ldrb	r2, [r2, #16]
 801cd54:	f107 0108 	add.w	r1, r7, #8
 801cd58:	4610      	mov	r0, r2
 801cd5a:	4798      	blx	r3
 801cd5c:	60f8      	str	r0, [r7, #12]
      break;
 801cd5e:	e112      	b.n	801cf86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	7c1b      	ldrb	r3, [r3, #16]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d10d      	bne.n	801cd84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd70:	f107 0208 	add.w	r2, r7, #8
 801cd74:	4610      	mov	r0, r2
 801cd76:	4798      	blx	r3
 801cd78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	3301      	adds	r3, #1
 801cd7e:	2202      	movs	r2, #2
 801cd80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801cd82:	e100      	b.n	801cf86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd8c:	f107 0208 	add.w	r2, r7, #8
 801cd90:	4610      	mov	r0, r2
 801cd92:	4798      	blx	r3
 801cd94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	3301      	adds	r3, #1
 801cd9a:	2202      	movs	r2, #2
 801cd9c:	701a      	strb	r2, [r3, #0]
      break;
 801cd9e:	e0f2      	b.n	801cf86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	885b      	ldrh	r3, [r3, #2]
 801cda4:	b2db      	uxtb	r3, r3
 801cda6:	2b05      	cmp	r3, #5
 801cda8:	f200 80ac 	bhi.w	801cf04 <USBD_GetDescriptor+0x204>
 801cdac:	a201      	add	r2, pc, #4	; (adr r2, 801cdb4 <USBD_GetDescriptor+0xb4>)
 801cdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdb2:	bf00      	nop
 801cdb4:	0801cdcd 	.word	0x0801cdcd
 801cdb8:	0801ce01 	.word	0x0801ce01
 801cdbc:	0801ce35 	.word	0x0801ce35
 801cdc0:	0801ce69 	.word	0x0801ce69
 801cdc4:	0801ce9d 	.word	0x0801ce9d
 801cdc8:	0801ced1 	.word	0x0801ced1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cdd2:	685b      	ldr	r3, [r3, #4]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d00b      	beq.n	801cdf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cdde:	685b      	ldr	r3, [r3, #4]
 801cde0:	687a      	ldr	r2, [r7, #4]
 801cde2:	7c12      	ldrb	r2, [r2, #16]
 801cde4:	f107 0108 	add.w	r1, r7, #8
 801cde8:	4610      	mov	r0, r2
 801cdea:	4798      	blx	r3
 801cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cdee:	e091      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cdf0:	6839      	ldr	r1, [r7, #0]
 801cdf2:	6878      	ldr	r0, [r7, #4]
 801cdf4:	f000 fa94 	bl	801d320 <USBD_CtlError>
            err++;
 801cdf8:	7afb      	ldrb	r3, [r7, #11]
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 801cdfe:	e089      	b.n	801cf14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce06:	689b      	ldr	r3, [r3, #8]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d00b      	beq.n	801ce24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce12:	689b      	ldr	r3, [r3, #8]
 801ce14:	687a      	ldr	r2, [r7, #4]
 801ce16:	7c12      	ldrb	r2, [r2, #16]
 801ce18:	f107 0108 	add.w	r1, r7, #8
 801ce1c:	4610      	mov	r0, r2
 801ce1e:	4798      	blx	r3
 801ce20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce22:	e077      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ce24:	6839      	ldr	r1, [r7, #0]
 801ce26:	6878      	ldr	r0, [r7, #4]
 801ce28:	f000 fa7a 	bl	801d320 <USBD_CtlError>
            err++;
 801ce2c:	7afb      	ldrb	r3, [r7, #11]
 801ce2e:	3301      	adds	r3, #1
 801ce30:	72fb      	strb	r3, [r7, #11]
          break;
 801ce32:	e06f      	b.n	801cf14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce3a:	68db      	ldr	r3, [r3, #12]
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d00b      	beq.n	801ce58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce46:	68db      	ldr	r3, [r3, #12]
 801ce48:	687a      	ldr	r2, [r7, #4]
 801ce4a:	7c12      	ldrb	r2, [r2, #16]
 801ce4c:	f107 0108 	add.w	r1, r7, #8
 801ce50:	4610      	mov	r0, r2
 801ce52:	4798      	blx	r3
 801ce54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce56:	e05d      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ce58:	6839      	ldr	r1, [r7, #0]
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f000 fa60 	bl	801d320 <USBD_CtlError>
            err++;
 801ce60:	7afb      	ldrb	r3, [r7, #11]
 801ce62:	3301      	adds	r3, #1
 801ce64:	72fb      	strb	r3, [r7, #11]
          break;
 801ce66:	e055      	b.n	801cf14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce6e:	691b      	ldr	r3, [r3, #16]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d00b      	beq.n	801ce8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce7a:	691b      	ldr	r3, [r3, #16]
 801ce7c:	687a      	ldr	r2, [r7, #4]
 801ce7e:	7c12      	ldrb	r2, [r2, #16]
 801ce80:	f107 0108 	add.w	r1, r7, #8
 801ce84:	4610      	mov	r0, r2
 801ce86:	4798      	blx	r3
 801ce88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce8a:	e043      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ce8c:	6839      	ldr	r1, [r7, #0]
 801ce8e:	6878      	ldr	r0, [r7, #4]
 801ce90:	f000 fa46 	bl	801d320 <USBD_CtlError>
            err++;
 801ce94:	7afb      	ldrb	r3, [r7, #11]
 801ce96:	3301      	adds	r3, #1
 801ce98:	72fb      	strb	r3, [r7, #11]
          break;
 801ce9a:	e03b      	b.n	801cf14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cea2:	695b      	ldr	r3, [r3, #20]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d00b      	beq.n	801cec0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ceae:	695b      	ldr	r3, [r3, #20]
 801ceb0:	687a      	ldr	r2, [r7, #4]
 801ceb2:	7c12      	ldrb	r2, [r2, #16]
 801ceb4:	f107 0108 	add.w	r1, r7, #8
 801ceb8:	4610      	mov	r0, r2
 801ceba:	4798      	blx	r3
 801cebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cebe:	e029      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cec0:	6839      	ldr	r1, [r7, #0]
 801cec2:	6878      	ldr	r0, [r7, #4]
 801cec4:	f000 fa2c 	bl	801d320 <USBD_CtlError>
            err++;
 801cec8:	7afb      	ldrb	r3, [r7, #11]
 801ceca:	3301      	adds	r3, #1
 801cecc:	72fb      	strb	r3, [r7, #11]
          break;
 801cece:	e021      	b.n	801cf14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ced6:	699b      	ldr	r3, [r3, #24]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d00b      	beq.n	801cef4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cee2:	699b      	ldr	r3, [r3, #24]
 801cee4:	687a      	ldr	r2, [r7, #4]
 801cee6:	7c12      	ldrb	r2, [r2, #16]
 801cee8:	f107 0108 	add.w	r1, r7, #8
 801ceec:	4610      	mov	r0, r2
 801ceee:	4798      	blx	r3
 801cef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cef2:	e00f      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cef4:	6839      	ldr	r1, [r7, #0]
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f000 fa12 	bl	801d320 <USBD_CtlError>
            err++;
 801cefc:	7afb      	ldrb	r3, [r7, #11]
 801cefe:	3301      	adds	r3, #1
 801cf00:	72fb      	strb	r3, [r7, #11]
          break;
 801cf02:	e007      	b.n	801cf14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801cf04:	6839      	ldr	r1, [r7, #0]
 801cf06:	6878      	ldr	r0, [r7, #4]
 801cf08:	f000 fa0a 	bl	801d320 <USBD_CtlError>
          err++;
 801cf0c:	7afb      	ldrb	r3, [r7, #11]
 801cf0e:	3301      	adds	r3, #1
 801cf10:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801cf12:	e038      	b.n	801cf86 <USBD_GetDescriptor+0x286>
 801cf14:	e037      	b.n	801cf86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	7c1b      	ldrb	r3, [r3, #16]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d109      	bne.n	801cf32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cf26:	f107 0208 	add.w	r2, r7, #8
 801cf2a:	4610      	mov	r0, r2
 801cf2c:	4798      	blx	r3
 801cf2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cf30:	e029      	b.n	801cf86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801cf32:	6839      	ldr	r1, [r7, #0]
 801cf34:	6878      	ldr	r0, [r7, #4]
 801cf36:	f000 f9f3 	bl	801d320 <USBD_CtlError>
        err++;
 801cf3a:	7afb      	ldrb	r3, [r7, #11]
 801cf3c:	3301      	adds	r3, #1
 801cf3e:	72fb      	strb	r3, [r7, #11]
      break;
 801cf40:	e021      	b.n	801cf86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	7c1b      	ldrb	r3, [r3, #16]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d10d      	bne.n	801cf66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf52:	f107 0208 	add.w	r2, r7, #8
 801cf56:	4610      	mov	r0, r2
 801cf58:	4798      	blx	r3
 801cf5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	3301      	adds	r3, #1
 801cf60:	2207      	movs	r2, #7
 801cf62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cf64:	e00f      	b.n	801cf86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801cf66:	6839      	ldr	r1, [r7, #0]
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f000 f9d9 	bl	801d320 <USBD_CtlError>
        err++;
 801cf6e:	7afb      	ldrb	r3, [r7, #11]
 801cf70:	3301      	adds	r3, #1
 801cf72:	72fb      	strb	r3, [r7, #11]
      break;
 801cf74:	e007      	b.n	801cf86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801cf76:	6839      	ldr	r1, [r7, #0]
 801cf78:	6878      	ldr	r0, [r7, #4]
 801cf7a:	f000 f9d1 	bl	801d320 <USBD_CtlError>
      err++;
 801cf7e:	7afb      	ldrb	r3, [r7, #11]
 801cf80:	3301      	adds	r3, #1
 801cf82:	72fb      	strb	r3, [r7, #11]
      break;
 801cf84:	bf00      	nop
  }

  if (err != 0U)
 801cf86:	7afb      	ldrb	r3, [r7, #11]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d11c      	bne.n	801cfc6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801cf8c:	893b      	ldrh	r3, [r7, #8]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d011      	beq.n	801cfb6 <USBD_GetDescriptor+0x2b6>
 801cf92:	683b      	ldr	r3, [r7, #0]
 801cf94:	88db      	ldrh	r3, [r3, #6]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d00d      	beq.n	801cfb6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801cf9a:	683b      	ldr	r3, [r7, #0]
 801cf9c:	88da      	ldrh	r2, [r3, #6]
 801cf9e:	893b      	ldrh	r3, [r7, #8]
 801cfa0:	4293      	cmp	r3, r2
 801cfa2:	bf28      	it	cs
 801cfa4:	4613      	movcs	r3, r2
 801cfa6:	b29b      	uxth	r3, r3
 801cfa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801cfaa:	893b      	ldrh	r3, [r7, #8]
 801cfac:	461a      	mov	r2, r3
 801cfae:	68f9      	ldr	r1, [r7, #12]
 801cfb0:	6878      	ldr	r0, [r7, #4]
 801cfb2:	f000 fa1f 	bl	801d3f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801cfb6:	683b      	ldr	r3, [r7, #0]
 801cfb8:	88db      	ldrh	r3, [r3, #6]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d104      	bne.n	801cfc8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801cfbe:	6878      	ldr	r0, [r7, #4]
 801cfc0:	f000 fa76 	bl	801d4b0 <USBD_CtlSendStatus>
 801cfc4:	e000      	b.n	801cfc8 <USBD_GetDescriptor+0x2c8>
    return;
 801cfc6:	bf00      	nop
    }
  }
}
 801cfc8:	3710      	adds	r7, #16
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop

0801cfd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b084      	sub	sp, #16
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
 801cfd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	889b      	ldrh	r3, [r3, #4]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d130      	bne.n	801d044 <USBD_SetAddress+0x74>
 801cfe2:	683b      	ldr	r3, [r7, #0]
 801cfe4:	88db      	ldrh	r3, [r3, #6]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d12c      	bne.n	801d044 <USBD_SetAddress+0x74>
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	885b      	ldrh	r3, [r3, #2]
 801cfee:	2b7f      	cmp	r3, #127	; 0x7f
 801cff0:	d828      	bhi.n	801d044 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	885b      	ldrh	r3, [r3, #2]
 801cff6:	b2db      	uxtb	r3, r3
 801cff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d004:	2b03      	cmp	r3, #3
 801d006:	d104      	bne.n	801d012 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d008:	6839      	ldr	r1, [r7, #0]
 801d00a:	6878      	ldr	r0, [r7, #4]
 801d00c:	f000 f988 	bl	801d320 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d010:	e01c      	b.n	801d04c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	7bfa      	ldrb	r2, [r7, #15]
 801d016:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d01a:	7bfb      	ldrb	r3, [r7, #15]
 801d01c:	4619      	mov	r1, r3
 801d01e:	6878      	ldr	r0, [r7, #4]
 801d020:	f000 fd98 	bl	801db54 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d024:	6878      	ldr	r0, [r7, #4]
 801d026:	f000 fa43 	bl	801d4b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d02a:	7bfb      	ldrb	r3, [r7, #15]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d004      	beq.n	801d03a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	2202      	movs	r2, #2
 801d034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d038:	e008      	b.n	801d04c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	2201      	movs	r2, #1
 801d03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d042:	e003      	b.n	801d04c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d044:	6839      	ldr	r1, [r7, #0]
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	f000 f96a 	bl	801d320 <USBD_CtlError>
  }
}
 801d04c:	bf00      	nop
 801d04e:	3710      	adds	r7, #16
 801d050:	46bd      	mov	sp, r7
 801d052:	bd80      	pop	{r7, pc}

0801d054 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b082      	sub	sp, #8
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
 801d05c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d05e:	683b      	ldr	r3, [r7, #0]
 801d060:	885b      	ldrh	r3, [r3, #2]
 801d062:	b2da      	uxtb	r2, r3
 801d064:	4b41      	ldr	r3, [pc, #260]	; (801d16c <USBD_SetConfig+0x118>)
 801d066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d068:	4b40      	ldr	r3, [pc, #256]	; (801d16c <USBD_SetConfig+0x118>)
 801d06a:	781b      	ldrb	r3, [r3, #0]
 801d06c:	2b01      	cmp	r3, #1
 801d06e:	d904      	bls.n	801d07a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d070:	6839      	ldr	r1, [r7, #0]
 801d072:	6878      	ldr	r0, [r7, #4]
 801d074:	f000 f954 	bl	801d320 <USBD_CtlError>
 801d078:	e075      	b.n	801d166 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d080:	2b02      	cmp	r3, #2
 801d082:	d002      	beq.n	801d08a <USBD_SetConfig+0x36>
 801d084:	2b03      	cmp	r3, #3
 801d086:	d023      	beq.n	801d0d0 <USBD_SetConfig+0x7c>
 801d088:	e062      	b.n	801d150 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d08a:	4b38      	ldr	r3, [pc, #224]	; (801d16c <USBD_SetConfig+0x118>)
 801d08c:	781b      	ldrb	r3, [r3, #0]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d01a      	beq.n	801d0c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d092:	4b36      	ldr	r3, [pc, #216]	; (801d16c <USBD_SetConfig+0x118>)
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	461a      	mov	r2, r3
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	2203      	movs	r2, #3
 801d0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d0a4:	4b31      	ldr	r3, [pc, #196]	; (801d16c <USBD_SetConfig+0x118>)
 801d0a6:	781b      	ldrb	r3, [r3, #0]
 801d0a8:	4619      	mov	r1, r3
 801d0aa:	6878      	ldr	r0, [r7, #4]
 801d0ac:	f7ff f9f4 	bl	801c498 <USBD_SetClassConfig>
 801d0b0:	4603      	mov	r3, r0
 801d0b2:	2b02      	cmp	r3, #2
 801d0b4:	d104      	bne.n	801d0c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d0b6:	6839      	ldr	r1, [r7, #0]
 801d0b8:	6878      	ldr	r0, [r7, #4]
 801d0ba:	f000 f931 	bl	801d320 <USBD_CtlError>
            return;
 801d0be:	e052      	b.n	801d166 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d0c0:	6878      	ldr	r0, [r7, #4]
 801d0c2:	f000 f9f5 	bl	801d4b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d0c6:	e04e      	b.n	801d166 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d0c8:	6878      	ldr	r0, [r7, #4]
 801d0ca:	f000 f9f1 	bl	801d4b0 <USBD_CtlSendStatus>
        break;
 801d0ce:	e04a      	b.n	801d166 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d0d0:	4b26      	ldr	r3, [pc, #152]	; (801d16c <USBD_SetConfig+0x118>)
 801d0d2:	781b      	ldrb	r3, [r3, #0]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d112      	bne.n	801d0fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	2202      	movs	r2, #2
 801d0dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d0e0:	4b22      	ldr	r3, [pc, #136]	; (801d16c <USBD_SetConfig+0x118>)
 801d0e2:	781b      	ldrb	r3, [r3, #0]
 801d0e4:	461a      	mov	r2, r3
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d0ea:	4b20      	ldr	r3, [pc, #128]	; (801d16c <USBD_SetConfig+0x118>)
 801d0ec:	781b      	ldrb	r3, [r3, #0]
 801d0ee:	4619      	mov	r1, r3
 801d0f0:	6878      	ldr	r0, [r7, #4]
 801d0f2:	f7ff f9f0 	bl	801c4d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d0f6:	6878      	ldr	r0, [r7, #4]
 801d0f8:	f000 f9da 	bl	801d4b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d0fc:	e033      	b.n	801d166 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d0fe:	4b1b      	ldr	r3, [pc, #108]	; (801d16c <USBD_SetConfig+0x118>)
 801d100:	781b      	ldrb	r3, [r3, #0]
 801d102:	461a      	mov	r2, r3
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	685b      	ldr	r3, [r3, #4]
 801d108:	429a      	cmp	r2, r3
 801d10a:	d01d      	beq.n	801d148 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	685b      	ldr	r3, [r3, #4]
 801d110:	b2db      	uxtb	r3, r3
 801d112:	4619      	mov	r1, r3
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f7ff f9de 	bl	801c4d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d11a:	4b14      	ldr	r3, [pc, #80]	; (801d16c <USBD_SetConfig+0x118>)
 801d11c:	781b      	ldrb	r3, [r3, #0]
 801d11e:	461a      	mov	r2, r3
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d124:	4b11      	ldr	r3, [pc, #68]	; (801d16c <USBD_SetConfig+0x118>)
 801d126:	781b      	ldrb	r3, [r3, #0]
 801d128:	4619      	mov	r1, r3
 801d12a:	6878      	ldr	r0, [r7, #4]
 801d12c:	f7ff f9b4 	bl	801c498 <USBD_SetClassConfig>
 801d130:	4603      	mov	r3, r0
 801d132:	2b02      	cmp	r3, #2
 801d134:	d104      	bne.n	801d140 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d136:	6839      	ldr	r1, [r7, #0]
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	f000 f8f1 	bl	801d320 <USBD_CtlError>
            return;
 801d13e:	e012      	b.n	801d166 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d140:	6878      	ldr	r0, [r7, #4]
 801d142:	f000 f9b5 	bl	801d4b0 <USBD_CtlSendStatus>
        break;
 801d146:	e00e      	b.n	801d166 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d148:	6878      	ldr	r0, [r7, #4]
 801d14a:	f000 f9b1 	bl	801d4b0 <USBD_CtlSendStatus>
        break;
 801d14e:	e00a      	b.n	801d166 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d150:	6839      	ldr	r1, [r7, #0]
 801d152:	6878      	ldr	r0, [r7, #4]
 801d154:	f000 f8e4 	bl	801d320 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d158:	4b04      	ldr	r3, [pc, #16]	; (801d16c <USBD_SetConfig+0x118>)
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	4619      	mov	r1, r3
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f7ff f9b9 	bl	801c4d6 <USBD_ClrClassConfig>
        break;
 801d164:	bf00      	nop
    }
  }
}
 801d166:	3708      	adds	r7, #8
 801d168:	46bd      	mov	sp, r7
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	200006ec 	.word	0x200006ec

0801d170 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b082      	sub	sp, #8
 801d174:	af00      	add	r7, sp, #0
 801d176:	6078      	str	r0, [r7, #4]
 801d178:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	88db      	ldrh	r3, [r3, #6]
 801d17e:	2b01      	cmp	r3, #1
 801d180:	d004      	beq.n	801d18c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d182:	6839      	ldr	r1, [r7, #0]
 801d184:	6878      	ldr	r0, [r7, #4]
 801d186:	f000 f8cb 	bl	801d320 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d18a:	e021      	b.n	801d1d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d192:	2b01      	cmp	r3, #1
 801d194:	db17      	blt.n	801d1c6 <USBD_GetConfig+0x56>
 801d196:	2b02      	cmp	r3, #2
 801d198:	dd02      	ble.n	801d1a0 <USBD_GetConfig+0x30>
 801d19a:	2b03      	cmp	r3, #3
 801d19c:	d00b      	beq.n	801d1b6 <USBD_GetConfig+0x46>
 801d19e:	e012      	b.n	801d1c6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	3308      	adds	r3, #8
 801d1aa:	2201      	movs	r2, #1
 801d1ac:	4619      	mov	r1, r3
 801d1ae:	6878      	ldr	r0, [r7, #4]
 801d1b0:	f000 f920 	bl	801d3f4 <USBD_CtlSendData>
        break;
 801d1b4:	e00c      	b.n	801d1d0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	3304      	adds	r3, #4
 801d1ba:	2201      	movs	r2, #1
 801d1bc:	4619      	mov	r1, r3
 801d1be:	6878      	ldr	r0, [r7, #4]
 801d1c0:	f000 f918 	bl	801d3f4 <USBD_CtlSendData>
        break;
 801d1c4:	e004      	b.n	801d1d0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d1c6:	6839      	ldr	r1, [r7, #0]
 801d1c8:	6878      	ldr	r0, [r7, #4]
 801d1ca:	f000 f8a9 	bl	801d320 <USBD_CtlError>
        break;
 801d1ce:	bf00      	nop
}
 801d1d0:	bf00      	nop
 801d1d2:	3708      	adds	r7, #8
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bd80      	pop	{r7, pc}

0801d1d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b082      	sub	sp, #8
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
 801d1e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1e8:	3b01      	subs	r3, #1
 801d1ea:	2b02      	cmp	r3, #2
 801d1ec:	d81e      	bhi.n	801d22c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d1ee:	683b      	ldr	r3, [r7, #0]
 801d1f0:	88db      	ldrh	r3, [r3, #6]
 801d1f2:	2b02      	cmp	r3, #2
 801d1f4:	d004      	beq.n	801d200 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d1f6:	6839      	ldr	r1, [r7, #0]
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f000 f891 	bl	801d320 <USBD_CtlError>
        break;
 801d1fe:	e01a      	b.n	801d236 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2201      	movs	r2, #1
 801d204:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d005      	beq.n	801d21c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	68db      	ldr	r3, [r3, #12]
 801d214:	f043 0202 	orr.w	r2, r3, #2
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	330c      	adds	r3, #12
 801d220:	2202      	movs	r2, #2
 801d222:	4619      	mov	r1, r3
 801d224:	6878      	ldr	r0, [r7, #4]
 801d226:	f000 f8e5 	bl	801d3f4 <USBD_CtlSendData>
      break;
 801d22a:	e004      	b.n	801d236 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d22c:	6839      	ldr	r1, [r7, #0]
 801d22e:	6878      	ldr	r0, [r7, #4]
 801d230:	f000 f876 	bl	801d320 <USBD_CtlError>
      break;
 801d234:	bf00      	nop
  }
}
 801d236:	bf00      	nop
 801d238:	3708      	adds	r7, #8
 801d23a:	46bd      	mov	sp, r7
 801d23c:	bd80      	pop	{r7, pc}

0801d23e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d23e:	b580      	push	{r7, lr}
 801d240:	b082      	sub	sp, #8
 801d242:	af00      	add	r7, sp, #0
 801d244:	6078      	str	r0, [r7, #4]
 801d246:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d248:	683b      	ldr	r3, [r7, #0]
 801d24a:	885b      	ldrh	r3, [r3, #2]
 801d24c:	2b01      	cmp	r3, #1
 801d24e:	d106      	bne.n	801d25e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	2201      	movs	r2, #1
 801d254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d258:	6878      	ldr	r0, [r7, #4]
 801d25a:	f000 f929 	bl	801d4b0 <USBD_CtlSendStatus>
  }
}
 801d25e:	bf00      	nop
 801d260:	3708      	adds	r7, #8
 801d262:	46bd      	mov	sp, r7
 801d264:	bd80      	pop	{r7, pc}

0801d266 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d266:	b580      	push	{r7, lr}
 801d268:	b082      	sub	sp, #8
 801d26a:	af00      	add	r7, sp, #0
 801d26c:	6078      	str	r0, [r7, #4]
 801d26e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d276:	3b01      	subs	r3, #1
 801d278:	2b02      	cmp	r3, #2
 801d27a:	d80b      	bhi.n	801d294 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d27c:	683b      	ldr	r3, [r7, #0]
 801d27e:	885b      	ldrh	r3, [r3, #2]
 801d280:	2b01      	cmp	r3, #1
 801d282:	d10c      	bne.n	801d29e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	2200      	movs	r2, #0
 801d288:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d28c:	6878      	ldr	r0, [r7, #4]
 801d28e:	f000 f90f 	bl	801d4b0 <USBD_CtlSendStatus>
      }
      break;
 801d292:	e004      	b.n	801d29e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d294:	6839      	ldr	r1, [r7, #0]
 801d296:	6878      	ldr	r0, [r7, #4]
 801d298:	f000 f842 	bl	801d320 <USBD_CtlError>
      break;
 801d29c:	e000      	b.n	801d2a0 <USBD_ClrFeature+0x3a>
      break;
 801d29e:	bf00      	nop
  }
}
 801d2a0:	bf00      	nop
 801d2a2:	3708      	adds	r7, #8
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd80      	pop	{r7, pc}

0801d2a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d2a8:	b480      	push	{r7}
 801d2aa:	b083      	sub	sp, #12
 801d2ac:	af00      	add	r7, sp, #0
 801d2ae:	6078      	str	r0, [r7, #4]
 801d2b0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	781a      	ldrb	r2, [r3, #0]
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	785a      	ldrb	r2, [r3, #1]
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d2c2:	683b      	ldr	r3, [r7, #0]
 801d2c4:	3302      	adds	r3, #2
 801d2c6:	781b      	ldrb	r3, [r3, #0]
 801d2c8:	b29a      	uxth	r2, r3
 801d2ca:	683b      	ldr	r3, [r7, #0]
 801d2cc:	3303      	adds	r3, #3
 801d2ce:	781b      	ldrb	r3, [r3, #0]
 801d2d0:	b29b      	uxth	r3, r3
 801d2d2:	021b      	lsls	r3, r3, #8
 801d2d4:	b29b      	uxth	r3, r3
 801d2d6:	4413      	add	r3, r2
 801d2d8:	b29a      	uxth	r2, r3
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d2de:	683b      	ldr	r3, [r7, #0]
 801d2e0:	3304      	adds	r3, #4
 801d2e2:	781b      	ldrb	r3, [r3, #0]
 801d2e4:	b29a      	uxth	r2, r3
 801d2e6:	683b      	ldr	r3, [r7, #0]
 801d2e8:	3305      	adds	r3, #5
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	b29b      	uxth	r3, r3
 801d2ee:	021b      	lsls	r3, r3, #8
 801d2f0:	b29b      	uxth	r3, r3
 801d2f2:	4413      	add	r3, r2
 801d2f4:	b29a      	uxth	r2, r3
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d2fa:	683b      	ldr	r3, [r7, #0]
 801d2fc:	3306      	adds	r3, #6
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	b29a      	uxth	r2, r3
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	3307      	adds	r3, #7
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	b29b      	uxth	r3, r3
 801d30a:	021b      	lsls	r3, r3, #8
 801d30c:	b29b      	uxth	r3, r3
 801d30e:	4413      	add	r3, r2
 801d310:	b29a      	uxth	r2, r3
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	80da      	strh	r2, [r3, #6]

}
 801d316:	bf00      	nop
 801d318:	370c      	adds	r7, #12
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bc80      	pop	{r7}
 801d31e:	4770      	bx	lr

0801d320 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
 801d328:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d32a:	2180      	movs	r1, #128	; 0x80
 801d32c:	6878      	ldr	r0, [r7, #4]
 801d32e:	f000 fba7 	bl	801da80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d332:	2100      	movs	r1, #0
 801d334:	6878      	ldr	r0, [r7, #4]
 801d336:	f000 fba3 	bl	801da80 <USBD_LL_StallEP>
}
 801d33a:	bf00      	nop
 801d33c:	3708      	adds	r7, #8
 801d33e:	46bd      	mov	sp, r7
 801d340:	bd80      	pop	{r7, pc}

0801d342 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d342:	b580      	push	{r7, lr}
 801d344:	b086      	sub	sp, #24
 801d346:	af00      	add	r7, sp, #0
 801d348:	60f8      	str	r0, [r7, #12]
 801d34a:	60b9      	str	r1, [r7, #8]
 801d34c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d34e:	2300      	movs	r3, #0
 801d350:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	2b00      	cmp	r3, #0
 801d356:	d032      	beq.n	801d3be <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d358:	68f8      	ldr	r0, [r7, #12]
 801d35a:	f000 f834 	bl	801d3c6 <USBD_GetLen>
 801d35e:	4603      	mov	r3, r0
 801d360:	3301      	adds	r3, #1
 801d362:	b29b      	uxth	r3, r3
 801d364:	005b      	lsls	r3, r3, #1
 801d366:	b29a      	uxth	r2, r3
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d36c:	7dfb      	ldrb	r3, [r7, #23]
 801d36e:	1c5a      	adds	r2, r3, #1
 801d370:	75fa      	strb	r2, [r7, #23]
 801d372:	461a      	mov	r2, r3
 801d374:	68bb      	ldr	r3, [r7, #8]
 801d376:	4413      	add	r3, r2
 801d378:	687a      	ldr	r2, [r7, #4]
 801d37a:	7812      	ldrb	r2, [r2, #0]
 801d37c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d37e:	7dfb      	ldrb	r3, [r7, #23]
 801d380:	1c5a      	adds	r2, r3, #1
 801d382:	75fa      	strb	r2, [r7, #23]
 801d384:	461a      	mov	r2, r3
 801d386:	68bb      	ldr	r3, [r7, #8]
 801d388:	4413      	add	r3, r2
 801d38a:	2203      	movs	r2, #3
 801d38c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d38e:	e012      	b.n	801d3b6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	1c5a      	adds	r2, r3, #1
 801d394:	60fa      	str	r2, [r7, #12]
 801d396:	7dfa      	ldrb	r2, [r7, #23]
 801d398:	1c51      	adds	r1, r2, #1
 801d39a:	75f9      	strb	r1, [r7, #23]
 801d39c:	4611      	mov	r1, r2
 801d39e:	68ba      	ldr	r2, [r7, #8]
 801d3a0:	440a      	add	r2, r1
 801d3a2:	781b      	ldrb	r3, [r3, #0]
 801d3a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d3a6:	7dfb      	ldrb	r3, [r7, #23]
 801d3a8:	1c5a      	adds	r2, r3, #1
 801d3aa:	75fa      	strb	r2, [r7, #23]
 801d3ac:	461a      	mov	r2, r3
 801d3ae:	68bb      	ldr	r3, [r7, #8]
 801d3b0:	4413      	add	r3, r2
 801d3b2:	2200      	movs	r2, #0
 801d3b4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	781b      	ldrb	r3, [r3, #0]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d1e8      	bne.n	801d390 <USBD_GetString+0x4e>
    }
  }
}
 801d3be:	bf00      	nop
 801d3c0:	3718      	adds	r7, #24
 801d3c2:	46bd      	mov	sp, r7
 801d3c4:	bd80      	pop	{r7, pc}

0801d3c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d3c6:	b480      	push	{r7}
 801d3c8:	b085      	sub	sp, #20
 801d3ca:	af00      	add	r7, sp, #0
 801d3cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801d3d2:	e005      	b.n	801d3e0 <USBD_GetLen+0x1a>
  {
    len++;
 801d3d4:	7bfb      	ldrb	r3, [r7, #15]
 801d3d6:	3301      	adds	r3, #1
 801d3d8:	73fb      	strb	r3, [r7, #15]
    buf++;
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	3301      	adds	r3, #1
 801d3de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	781b      	ldrb	r3, [r3, #0]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d1f5      	bne.n	801d3d4 <USBD_GetLen+0xe>
  }

  return len;
 801d3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	3714      	adds	r7, #20
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	bc80      	pop	{r7}
 801d3f2:	4770      	bx	lr

0801d3f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b084      	sub	sp, #16
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	60f8      	str	r0, [r7, #12]
 801d3fc:	60b9      	str	r1, [r7, #8]
 801d3fe:	4613      	mov	r3, r2
 801d400:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	2202      	movs	r2, #2
 801d406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d40a:	88fa      	ldrh	r2, [r7, #6]
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d410:	88fa      	ldrh	r2, [r7, #6]
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d416:	88fb      	ldrh	r3, [r7, #6]
 801d418:	68ba      	ldr	r2, [r7, #8]
 801d41a:	2100      	movs	r1, #0
 801d41c:	68f8      	ldr	r0, [r7, #12]
 801d41e:	f000 fbb8 	bl	801db92 <USBD_LL_Transmit>

  return USBD_OK;
 801d422:	2300      	movs	r3, #0
}
 801d424:	4618      	mov	r0, r3
 801d426:	3710      	adds	r7, #16
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}

0801d42c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b084      	sub	sp, #16
 801d430:	af00      	add	r7, sp, #0
 801d432:	60f8      	str	r0, [r7, #12]
 801d434:	60b9      	str	r1, [r7, #8]
 801d436:	4613      	mov	r3, r2
 801d438:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d43a:	88fb      	ldrh	r3, [r7, #6]
 801d43c:	68ba      	ldr	r2, [r7, #8]
 801d43e:	2100      	movs	r1, #0
 801d440:	68f8      	ldr	r0, [r7, #12]
 801d442:	f000 fba6 	bl	801db92 <USBD_LL_Transmit>

  return USBD_OK;
 801d446:	2300      	movs	r3, #0
}
 801d448:	4618      	mov	r0, r3
 801d44a:	3710      	adds	r7, #16
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}

0801d450 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d450:	b580      	push	{r7, lr}
 801d452:	b084      	sub	sp, #16
 801d454:	af00      	add	r7, sp, #0
 801d456:	60f8      	str	r0, [r7, #12]
 801d458:	60b9      	str	r1, [r7, #8]
 801d45a:	4613      	mov	r3, r2
 801d45c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	2203      	movs	r2, #3
 801d462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d466:	88fa      	ldrh	r2, [r7, #6]
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801d46e:	88fa      	ldrh	r2, [r7, #6]
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d476:	88fb      	ldrh	r3, [r7, #6]
 801d478:	68ba      	ldr	r2, [r7, #8]
 801d47a:	2100      	movs	r1, #0
 801d47c:	68f8      	ldr	r0, [r7, #12]
 801d47e:	f000 fbab 	bl	801dbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d482:	2300      	movs	r3, #0
}
 801d484:	4618      	mov	r0, r3
 801d486:	3710      	adds	r7, #16
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b084      	sub	sp, #16
 801d490:	af00      	add	r7, sp, #0
 801d492:	60f8      	str	r0, [r7, #12]
 801d494:	60b9      	str	r1, [r7, #8]
 801d496:	4613      	mov	r3, r2
 801d498:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d49a:	88fb      	ldrh	r3, [r7, #6]
 801d49c:	68ba      	ldr	r2, [r7, #8]
 801d49e:	2100      	movs	r1, #0
 801d4a0:	68f8      	ldr	r0, [r7, #12]
 801d4a2:	f000 fb99 	bl	801dbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d4a6:	2300      	movs	r3, #0
}
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	3710      	adds	r7, #16
 801d4ac:	46bd      	mov	sp, r7
 801d4ae:	bd80      	pop	{r7, pc}

0801d4b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	b082      	sub	sp, #8
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	2204      	movs	r2, #4
 801d4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	2100      	movs	r1, #0
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	f000 fb63 	bl	801db92 <USBD_LL_Transmit>

  return USBD_OK;
 801d4cc:	2300      	movs	r3, #0
}
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	3708      	adds	r7, #8
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	bd80      	pop	{r7, pc}

0801d4d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d4d6:	b580      	push	{r7, lr}
 801d4d8:	b082      	sub	sp, #8
 801d4da:	af00      	add	r7, sp, #0
 801d4dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	2205      	movs	r2, #5
 801d4e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	2100      	movs	r1, #0
 801d4ec:	6878      	ldr	r0, [r7, #4]
 801d4ee:	f000 fb73 	bl	801dbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d4f2:	2300      	movs	r3, #0
}
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	3708      	adds	r7, #8
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}

0801d4fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d4fc:	b580      	push	{r7, lr}
 801d4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d500:	2200      	movs	r2, #0
 801d502:	490e      	ldr	r1, [pc, #56]	; (801d53c <MX_USB_DEVICE_Init+0x40>)
 801d504:	480e      	ldr	r0, [pc, #56]	; (801d540 <MX_USB_DEVICE_Init+0x44>)
 801d506:	f7fe ff6d 	bl	801c3e4 <USBD_Init>
 801d50a:	4603      	mov	r3, r0
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d001      	beq.n	801d514 <MX_USB_DEVICE_Init+0x18>
	  {
	    Error_Handler();
 801d510:	f7f7 facc 	bl	8014aac <Error_Handler>
	  }
#if 1
	  if (USBD_RegisterClass(&hUsbDeviceFS, &DFR_USBD_COMPOSITE) != USBD_OK)
 801d514:	490b      	ldr	r1, [pc, #44]	; (801d544 <MX_USB_DEVICE_Init+0x48>)
 801d516:	480a      	ldr	r0, [pc, #40]	; (801d540 <MX_USB_DEVICE_Init+0x44>)
 801d518:	f7fe ff8f 	bl	801c43a <USBD_RegisterClass>
 801d51c:	4603      	mov	r3, r0
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d001      	beq.n	801d526 <MX_USB_DEVICE_Init+0x2a>
	  {
	    Error_Handler();
 801d522:	f7f7 fac3 	bl	8014aac <Error_Handler>

	  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &DFR_USBD_CDC_fops_FS) != USBD_OK)
	  {
	    Error_Handler();
	  }*/
	  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d526:	4806      	ldr	r0, [pc, #24]	; (801d540 <MX_USB_DEVICE_Init+0x44>)
 801d528:	f7fe ffa0 	bl	801c46c <USBD_Start>
 801d52c:	4603      	mov	r3, r0
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d001      	beq.n	801d536 <MX_USB_DEVICE_Init+0x3a>
	  {
	    Error_Handler();
 801d532:	f7f7 fabb 	bl	8014aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
#endif
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d536:	bf00      	nop
 801d538:	bd80      	pop	{r7, pc}
 801d53a:	bf00      	nop
 801d53c:	20000388 	.word	0x20000388
 801d540:	20001514 	.word	0x20001514
 801d544:	20000124 	.word	0x20000124

0801d548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d548:	b480      	push	{r7}
 801d54a:	b083      	sub	sp, #12
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	4603      	mov	r3, r0
 801d550:	6039      	str	r1, [r7, #0]
 801d552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d554:	683b      	ldr	r3, [r7, #0]
 801d556:	2212      	movs	r2, #18
 801d558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d55a:	4b03      	ldr	r3, [pc, #12]	; (801d568 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	370c      	adds	r7, #12
 801d560:	46bd      	mov	sp, r7
 801d562:	bc80      	pop	{r7}
 801d564:	4770      	bx	lr
 801d566:	bf00      	nop
 801d568:	200003a4 	.word	0x200003a4

0801d56c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d56c:	b480      	push	{r7}
 801d56e:	b083      	sub	sp, #12
 801d570:	af00      	add	r7, sp, #0
 801d572:	4603      	mov	r3, r0
 801d574:	6039      	str	r1, [r7, #0]
 801d576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d578:	683b      	ldr	r3, [r7, #0]
 801d57a:	2204      	movs	r2, #4
 801d57c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d57e:	4b03      	ldr	r3, [pc, #12]	; (801d58c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d580:	4618      	mov	r0, r3
 801d582:	370c      	adds	r7, #12
 801d584:	46bd      	mov	sp, r7
 801d586:	bc80      	pop	{r7}
 801d588:	4770      	bx	lr
 801d58a:	bf00      	nop
 801d58c:	200003b8 	.word	0x200003b8

0801d590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b082      	sub	sp, #8
 801d594:	af00      	add	r7, sp, #0
 801d596:	4603      	mov	r3, r0
 801d598:	6039      	str	r1, [r7, #0]
 801d59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d59c:	79fb      	ldrb	r3, [r7, #7]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d105      	bne.n	801d5ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d5a2:	683a      	ldr	r2, [r7, #0]
 801d5a4:	4907      	ldr	r1, [pc, #28]	; (801d5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 801d5a6:	4808      	ldr	r0, [pc, #32]	; (801d5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 801d5a8:	f7ff fecb 	bl	801d342 <USBD_GetString>
 801d5ac:	e004      	b.n	801d5b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d5ae:	683a      	ldr	r2, [r7, #0]
 801d5b0:	4904      	ldr	r1, [pc, #16]	; (801d5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 801d5b2:	4805      	ldr	r0, [pc, #20]	; (801d5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 801d5b4:	f7ff fec5 	bl	801d342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d5b8:	4b02      	ldr	r3, [pc, #8]	; (801d5c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	3708      	adds	r7, #8
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	bd80      	pop	{r7, pc}
 801d5c2:	bf00      	nop
 801d5c4:	200017d8 	.word	0x200017d8
 801d5c8:	08020490 	.word	0x08020490

0801d5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b082      	sub	sp, #8
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	6039      	str	r1, [r7, #0]
 801d5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d5d8:	683a      	ldr	r2, [r7, #0]
 801d5da:	4904      	ldr	r1, [pc, #16]	; (801d5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d5dc:	4804      	ldr	r0, [pc, #16]	; (801d5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d5de:	f7ff feb0 	bl	801d342 <USBD_GetString>
  return USBD_StrDesc;
 801d5e2:	4b02      	ldr	r3, [pc, #8]	; (801d5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	3708      	adds	r7, #8
 801d5e8:	46bd      	mov	sp, r7
 801d5ea:	bd80      	pop	{r7, pc}
 801d5ec:	200017d8 	.word	0x200017d8
 801d5f0:	080204a8 	.word	0x080204a8

0801d5f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d5f4:	b580      	push	{r7, lr}
 801d5f6:	b082      	sub	sp, #8
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	4603      	mov	r3, r0
 801d5fc:	6039      	str	r1, [r7, #0]
 801d5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d600:	683b      	ldr	r3, [r7, #0]
 801d602:	221a      	movs	r2, #26
 801d604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d606:	f000 f843 	bl	801d690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d60a:	4b02      	ldr	r3, [pc, #8]	; (801d614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d60c:	4618      	mov	r0, r3
 801d60e:	3708      	adds	r7, #8
 801d610:	46bd      	mov	sp, r7
 801d612:	bd80      	pop	{r7, pc}
 801d614:	200003bc 	.word	0x200003bc

0801d618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d618:	b580      	push	{r7, lr}
 801d61a:	b082      	sub	sp, #8
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	4603      	mov	r3, r0
 801d620:	6039      	str	r1, [r7, #0]
 801d622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d624:	79fb      	ldrb	r3, [r7, #7]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d105      	bne.n	801d636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d62a:	683a      	ldr	r2, [r7, #0]
 801d62c:	4907      	ldr	r1, [pc, #28]	; (801d64c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d62e:	4808      	ldr	r0, [pc, #32]	; (801d650 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d630:	f7ff fe87 	bl	801d342 <USBD_GetString>
 801d634:	e004      	b.n	801d640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d636:	683a      	ldr	r2, [r7, #0]
 801d638:	4904      	ldr	r1, [pc, #16]	; (801d64c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d63a:	4805      	ldr	r0, [pc, #20]	; (801d650 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d63c:	f7ff fe81 	bl	801d342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d640:	4b02      	ldr	r3, [pc, #8]	; (801d64c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d642:	4618      	mov	r0, r3
 801d644:	3708      	adds	r7, #8
 801d646:	46bd      	mov	sp, r7
 801d648:	bd80      	pop	{r7, pc}
 801d64a:	bf00      	nop
 801d64c:	200017d8 	.word	0x200017d8
 801d650:	080204b0 	.word	0x080204b0

0801d654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b082      	sub	sp, #8
 801d658:	af00      	add	r7, sp, #0
 801d65a:	4603      	mov	r3, r0
 801d65c:	6039      	str	r1, [r7, #0]
 801d65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d660:	79fb      	ldrb	r3, [r7, #7]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d105      	bne.n	801d672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d666:	683a      	ldr	r2, [r7, #0]
 801d668:	4907      	ldr	r1, [pc, #28]	; (801d688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d66a:	4808      	ldr	r0, [pc, #32]	; (801d68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d66c:	f7ff fe69 	bl	801d342 <USBD_GetString>
 801d670:	e004      	b.n	801d67c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d672:	683a      	ldr	r2, [r7, #0]
 801d674:	4904      	ldr	r1, [pc, #16]	; (801d688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d676:	4805      	ldr	r0, [pc, #20]	; (801d68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d678:	f7ff fe63 	bl	801d342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d67c:	4b02      	ldr	r3, [pc, #8]	; (801d688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d67e:	4618      	mov	r0, r3
 801d680:	3708      	adds	r7, #8
 801d682:	46bd      	mov	sp, r7
 801d684:	bd80      	pop	{r7, pc}
 801d686:	bf00      	nop
 801d688:	200017d8 	.word	0x200017d8
 801d68c:	080204bc 	.word	0x080204bc

0801d690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d690:	b580      	push	{r7, lr}
 801d692:	b084      	sub	sp, #16
 801d694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d696:	4b0f      	ldr	r3, [pc, #60]	; (801d6d4 <Get_SerialNum+0x44>)
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d69c:	4b0e      	ldr	r3, [pc, #56]	; (801d6d8 <Get_SerialNum+0x48>)
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d6a2:	4b0e      	ldr	r3, [pc, #56]	; (801d6dc <Get_SerialNum+0x4c>)
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d6a8:	68fa      	ldr	r2, [r7, #12]
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	4413      	add	r3, r2
 801d6ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d009      	beq.n	801d6ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d6b6:	2208      	movs	r2, #8
 801d6b8:	4909      	ldr	r1, [pc, #36]	; (801d6e0 <Get_SerialNum+0x50>)
 801d6ba:	68f8      	ldr	r0, [r7, #12]
 801d6bc:	f000 f814 	bl	801d6e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d6c0:	2204      	movs	r2, #4
 801d6c2:	4908      	ldr	r1, [pc, #32]	; (801d6e4 <Get_SerialNum+0x54>)
 801d6c4:	68b8      	ldr	r0, [r7, #8]
 801d6c6:	f000 f80f 	bl	801d6e8 <IntToUnicode>
  }
}
 801d6ca:	bf00      	nop
 801d6cc:	3710      	adds	r7, #16
 801d6ce:	46bd      	mov	sp, r7
 801d6d0:	bd80      	pop	{r7, pc}
 801d6d2:	bf00      	nop
 801d6d4:	1ffff7e8 	.word	0x1ffff7e8
 801d6d8:	1ffff7ec 	.word	0x1ffff7ec
 801d6dc:	1ffff7f0 	.word	0x1ffff7f0
 801d6e0:	200003be 	.word	0x200003be
 801d6e4:	200003ce 	.word	0x200003ce

0801d6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d6e8:	b480      	push	{r7}
 801d6ea:	b087      	sub	sp, #28
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	60f8      	str	r0, [r7, #12]
 801d6f0:	60b9      	str	r1, [r7, #8]
 801d6f2:	4613      	mov	r3, r2
 801d6f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	75fb      	strb	r3, [r7, #23]
 801d6fe:	e027      	b.n	801d750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	0f1b      	lsrs	r3, r3, #28
 801d704:	2b09      	cmp	r3, #9
 801d706:	d80b      	bhi.n	801d720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	0f1b      	lsrs	r3, r3, #28
 801d70c:	b2da      	uxtb	r2, r3
 801d70e:	7dfb      	ldrb	r3, [r7, #23]
 801d710:	005b      	lsls	r3, r3, #1
 801d712:	4619      	mov	r1, r3
 801d714:	68bb      	ldr	r3, [r7, #8]
 801d716:	440b      	add	r3, r1
 801d718:	3230      	adds	r2, #48	; 0x30
 801d71a:	b2d2      	uxtb	r2, r2
 801d71c:	701a      	strb	r2, [r3, #0]
 801d71e:	e00a      	b.n	801d736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	0f1b      	lsrs	r3, r3, #28
 801d724:	b2da      	uxtb	r2, r3
 801d726:	7dfb      	ldrb	r3, [r7, #23]
 801d728:	005b      	lsls	r3, r3, #1
 801d72a:	4619      	mov	r1, r3
 801d72c:	68bb      	ldr	r3, [r7, #8]
 801d72e:	440b      	add	r3, r1
 801d730:	3237      	adds	r2, #55	; 0x37
 801d732:	b2d2      	uxtb	r2, r2
 801d734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	011b      	lsls	r3, r3, #4
 801d73a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d73c:	7dfb      	ldrb	r3, [r7, #23]
 801d73e:	005b      	lsls	r3, r3, #1
 801d740:	3301      	adds	r3, #1
 801d742:	68ba      	ldr	r2, [r7, #8]
 801d744:	4413      	add	r3, r2
 801d746:	2200      	movs	r2, #0
 801d748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d74a:	7dfb      	ldrb	r3, [r7, #23]
 801d74c:	3301      	adds	r3, #1
 801d74e:	75fb      	strb	r3, [r7, #23]
 801d750:	7dfa      	ldrb	r2, [r7, #23]
 801d752:	79fb      	ldrb	r3, [r7, #7]
 801d754:	429a      	cmp	r2, r3
 801d756:	d3d3      	bcc.n	801d700 <IntToUnicode+0x18>
  }
}
 801d758:	bf00      	nop
 801d75a:	371c      	adds	r7, #28
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bc80      	pop	{r7}
 801d760:	4770      	bx	lr
	...

0801d764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d764:	b580      	push	{r7, lr}
 801d766:	b084      	sub	sp, #16
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	4a0d      	ldr	r2, [pc, #52]	; (801d7a8 <HAL_PCD_MspInit+0x44>)
 801d772:	4293      	cmp	r3, r2
 801d774:	d113      	bne.n	801d79e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d776:	4b0d      	ldr	r3, [pc, #52]	; (801d7ac <HAL_PCD_MspInit+0x48>)
 801d778:	69db      	ldr	r3, [r3, #28]
 801d77a:	4a0c      	ldr	r2, [pc, #48]	; (801d7ac <HAL_PCD_MspInit+0x48>)
 801d77c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d780:	61d3      	str	r3, [r2, #28]
 801d782:	4b0a      	ldr	r3, [pc, #40]	; (801d7ac <HAL_PCD_MspInit+0x48>)
 801d784:	69db      	ldr	r3, [r3, #28]
 801d786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d78a:	60fb      	str	r3, [r7, #12]
 801d78c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801d78e:	2200      	movs	r2, #0
 801d790:	2100      	movs	r1, #0
 801d792:	2014      	movs	r0, #20
 801d794:	f7f8 f979 	bl	8015a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 801d798:	2014      	movs	r0, #20
 801d79a:	f7f8 f992 	bl	8015ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d79e:	bf00      	nop
 801d7a0:	3710      	adds	r7, #16
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}
 801d7a6:	bf00      	nop
 801d7a8:	40005c00 	.word	0x40005c00
 801d7ac:	40021000 	.word	0x40021000

0801d7b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7b0:	b580      	push	{r7, lr}
 801d7b2:	b082      	sub	sp, #8
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	4610      	mov	r0, r2
 801d7c8:	f7fe fe98 	bl	801c4fc <USBD_LL_SetupStage>
}
 801d7cc:	bf00      	nop
 801d7ce:	3708      	adds	r7, #8
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	bd80      	pop	{r7, pc}

0801d7d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7d4:	b580      	push	{r7, lr}
 801d7d6:	b082      	sub	sp, #8
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	6078      	str	r0, [r7, #4]
 801d7dc:	460b      	mov	r3, r1
 801d7de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801d7e6:	78fa      	ldrb	r2, [r7, #3]
 801d7e8:	6879      	ldr	r1, [r7, #4]
 801d7ea:	4613      	mov	r3, r2
 801d7ec:	009b      	lsls	r3, r3, #2
 801d7ee:	4413      	add	r3, r2
 801d7f0:	00db      	lsls	r3, r3, #3
 801d7f2:	440b      	add	r3, r1
 801d7f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801d7f8:	681a      	ldr	r2, [r3, #0]
 801d7fa:	78fb      	ldrb	r3, [r7, #3]
 801d7fc:	4619      	mov	r1, r3
 801d7fe:	f7fe fec8 	bl	801c592 <USBD_LL_DataOutStage>
}
 801d802:	bf00      	nop
 801d804:	3708      	adds	r7, #8
 801d806:	46bd      	mov	sp, r7
 801d808:	bd80      	pop	{r7, pc}

0801d80a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d80a:	b580      	push	{r7, lr}
 801d80c:	b082      	sub	sp, #8
 801d80e:	af00      	add	r7, sp, #0
 801d810:	6078      	str	r0, [r7, #4]
 801d812:	460b      	mov	r3, r1
 801d814:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801d81c:	78fa      	ldrb	r2, [r7, #3]
 801d81e:	6879      	ldr	r1, [r7, #4]
 801d820:	4613      	mov	r3, r2
 801d822:	009b      	lsls	r3, r3, #2
 801d824:	4413      	add	r3, r2
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	440b      	add	r3, r1
 801d82a:	333c      	adds	r3, #60	; 0x3c
 801d82c:	681a      	ldr	r2, [r3, #0]
 801d82e:	78fb      	ldrb	r3, [r7, #3]
 801d830:	4619      	mov	r1, r3
 801d832:	f7fe ff1f 	bl	801c674 <USBD_LL_DataInStage>
}
 801d836:	bf00      	nop
 801d838:	3708      	adds	r7, #8
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bd80      	pop	{r7, pc}

0801d83e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d83e:	b580      	push	{r7, lr}
 801d840:	b082      	sub	sp, #8
 801d842:	af00      	add	r7, sp, #0
 801d844:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801d84c:	4618      	mov	r0, r3
 801d84e:	f7ff f82f 	bl	801c8b0 <USBD_LL_SOF>
}
 801d852:	bf00      	nop
 801d854:	3708      	adds	r7, #8
 801d856:	46bd      	mov	sp, r7
 801d858:	bd80      	pop	{r7, pc}

0801d85a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801d85a:	b580      	push	{r7, lr}
 801d85c:	b084      	sub	sp, #16
 801d85e:	af00      	add	r7, sp, #0
 801d860:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d862:	2301      	movs	r3, #1
 801d864:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	689b      	ldr	r3, [r3, #8]
 801d86a:	2b02      	cmp	r3, #2
 801d86c:	d001      	beq.n	801d872 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801d86e:	f7f7 f91d 	bl	8014aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801d878:	7bfa      	ldrb	r2, [r7, #15]
 801d87a:	4611      	mov	r1, r2
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7fe ffdf 	bl	801c840 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801d888:	4618      	mov	r0, r3
 801d88a:	f7fe ff98 	bl	801c7be <USBD_LL_Reset>
}
 801d88e:	bf00      	nop
 801d890:	3710      	adds	r7, #16
 801d892:	46bd      	mov	sp, r7
 801d894:	bd80      	pop	{r7, pc}
	...

0801d898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d898:	b580      	push	{r7, lr}
 801d89a:	b082      	sub	sp, #8
 801d89c:	af00      	add	r7, sp, #0
 801d89e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7fe ffd9 	bl	801c85e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	699b      	ldr	r3, [r3, #24]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d005      	beq.n	801d8c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d8b4:	4b04      	ldr	r3, [pc, #16]	; (801d8c8 <HAL_PCD_SuspendCallback+0x30>)
 801d8b6:	691b      	ldr	r3, [r3, #16]
 801d8b8:	4a03      	ldr	r2, [pc, #12]	; (801d8c8 <HAL_PCD_SuspendCallback+0x30>)
 801d8ba:	f043 0306 	orr.w	r3, r3, #6
 801d8be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d8c0:	bf00      	nop
 801d8c2:	3708      	adds	r7, #8
 801d8c4:	46bd      	mov	sp, r7
 801d8c6:	bd80      	pop	{r7, pc}
 801d8c8:	e000ed00 	.word	0xe000ed00

0801d8cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8cc:	b580      	push	{r7, lr}
 801d8ce:	b082      	sub	sp, #8
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f7fe ffd3 	bl	801c886 <USBD_LL_Resume>
}
 801d8e0:	bf00      	nop
 801d8e2:	3708      	adds	r7, #8
 801d8e4:	46bd      	mov	sp, r7
 801d8e6:	bd80      	pop	{r7, pc}

0801d8e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d8e8:	b580      	push	{r7, lr}
 801d8ea:	b082      	sub	sp, #8
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d8f0:	4a31      	ldr	r2, [pc, #196]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	4a2f      	ldr	r2, [pc, #188]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d8fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 801d900:	4b2d      	ldr	r3, [pc, #180]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d902:	4a2e      	ldr	r2, [pc, #184]	; (801d9bc <USBD_LL_Init+0xd4>)
 801d904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d906:	4b2c      	ldr	r3, [pc, #176]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d908:	2208      	movs	r2, #8
 801d90a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d90c:	4b2a      	ldr	r3, [pc, #168]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d90e:	2202      	movs	r2, #2
 801d910:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d912:	4b29      	ldr	r3, [pc, #164]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d914:	2200      	movs	r2, #0
 801d916:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d918:	4b27      	ldr	r3, [pc, #156]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d91a:	2200      	movs	r2, #0
 801d91c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d91e:	4b26      	ldr	r3, [pc, #152]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d920:	2200      	movs	r2, #0
 801d922:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d924:	4824      	ldr	r0, [pc, #144]	; (801d9b8 <USBD_LL_Init+0xd0>)
 801d926:	f7f9 fd95 	bl	8017454 <HAL_PCD_Init>
 801d92a:	4603      	mov	r3, r0
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d001      	beq.n	801d934 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 801d930:	f7f7 f8bc 	bl	8014aac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d93a:	2340      	movs	r3, #64	; 0x40
 801d93c:	2200      	movs	r2, #0
 801d93e:	2100      	movs	r1, #0
 801d940:	f7fb f8c9 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d94a:	2380      	movs	r3, #128	; 0x80
 801d94c:	2200      	movs	r2, #0
 801d94e:	2180      	movs	r1, #128	; 0x80
 801d950:	f7fb f8c1 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , DFR_KEYBOARD_HID_EPIN_ADDR , PCD_SNG_BUF, 0xC0);
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d95a:	23c0      	movs	r3, #192	; 0xc0
 801d95c:	2200      	movs	r2, #0
 801d95e:	2181      	movs	r1, #129	; 0x81
 801d960:	f7fb f8b9 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , DFR_KEYBOARD_HID_EPOUT_ADDR , PCD_SNG_BUF, 0x100);
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d96a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d96e:	2200      	movs	r2, #0
 801d970:	2101      	movs	r1, #1
 801d972:	f7fb f8b0 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , DFR_CDC_IN_EP , PCD_SNG_BUF, 0x140);
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d97c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801d980:	2200      	movs	r2, #0
 801d982:	2184      	movs	r1, #132	; 0x84
 801d984:	f7fb f8a7 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , DFR_CDC_OUT_EP , PCD_SNG_BUF, 0x190);
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d98e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d992:	2200      	movs	r2, #0
 801d994:	2104      	movs	r1, #4
 801d996:	f7fb f89e 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , DFR_CDC_CMD_EP , PCD_SNG_BUF, 0x180);
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801d9a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801d9a4:	2200      	movs	r2, #0
 801d9a6:	2182      	movs	r1, #130	; 0x82
 801d9a8:	f7fb f895 	bl	8018ad6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d9ac:	2300      	movs	r3, #0
}
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	3708      	adds	r7, #8
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}
 801d9b6:	bf00      	nop
 801d9b8:	200019d8 	.word	0x200019d8
 801d9bc:	40005c00 	.word	0x40005c00

0801d9c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b084      	sub	sp, #16
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7f9 fe47 	bl	801766a <HAL_PCD_Start>
 801d9dc:	4603      	mov	r3, r0
 801d9de:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801d9e0:	7bfb      	ldrb	r3, [r7, #15]
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	f000 f94e 	bl	801dc84 <USBD_Get_USB_Status>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	3710      	adds	r7, #16
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}

0801d9f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d9f6:	b580      	push	{r7, lr}
 801d9f8:	b084      	sub	sp, #16
 801d9fa:	af00      	add	r7, sp, #0
 801d9fc:	6078      	str	r0, [r7, #4]
 801d9fe:	4608      	mov	r0, r1
 801da00:	4611      	mov	r1, r2
 801da02:	461a      	mov	r2, r3
 801da04:	4603      	mov	r3, r0
 801da06:	70fb      	strb	r3, [r7, #3]
 801da08:	460b      	mov	r3, r1
 801da0a:	70bb      	strb	r3, [r7, #2]
 801da0c:	4613      	mov	r3, r2
 801da0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da10:	2300      	movs	r3, #0
 801da12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da14:	2300      	movs	r3, #0
 801da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801da1e:	78bb      	ldrb	r3, [r7, #2]
 801da20:	883a      	ldrh	r2, [r7, #0]
 801da22:	78f9      	ldrb	r1, [r7, #3]
 801da24:	f7f9 ffc1 	bl	80179aa <HAL_PCD_EP_Open>
 801da28:	4603      	mov	r3, r0
 801da2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da2c:	7bfb      	ldrb	r3, [r7, #15]
 801da2e:	4618      	mov	r0, r3
 801da30:	f000 f928 	bl	801dc84 <USBD_Get_USB_Status>
 801da34:	4603      	mov	r3, r0
 801da36:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801da38:	7bbb      	ldrb	r3, [r7, #14]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3710      	adds	r7, #16
 801da3e:	46bd      	mov	sp, r7
 801da40:	bd80      	pop	{r7, pc}

0801da42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801da42:	b580      	push	{r7, lr}
 801da44:	b084      	sub	sp, #16
 801da46:	af00      	add	r7, sp, #0
 801da48:	6078      	str	r0, [r7, #4]
 801da4a:	460b      	mov	r3, r1
 801da4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da4e:	2300      	movs	r3, #0
 801da50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da52:	2300      	movs	r3, #0
 801da54:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801da5c:	78fa      	ldrb	r2, [r7, #3]
 801da5e:	4611      	mov	r1, r2
 801da60:	4618      	mov	r0, r3
 801da62:	f7fa f808 	bl	8017a76 <HAL_PCD_EP_Close>
 801da66:	4603      	mov	r3, r0
 801da68:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 801da6a:	7bfb      	ldrb	r3, [r7, #15]
 801da6c:	4618      	mov	r0, r3
 801da6e:	f000 f909 	bl	801dc84 <USBD_Get_USB_Status>
 801da72:	4603      	mov	r3, r0
 801da74:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 801da76:	7bbb      	ldrb	r3, [r7, #14]
}
 801da78:	4618      	mov	r0, r3
 801da7a:	3710      	adds	r7, #16
 801da7c:	46bd      	mov	sp, r7
 801da7e:	bd80      	pop	{r7, pc}

0801da80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801da80:	b580      	push	{r7, lr}
 801da82:	b084      	sub	sp, #16
 801da84:	af00      	add	r7, sp, #0
 801da86:	6078      	str	r0, [r7, #4]
 801da88:	460b      	mov	r3, r1
 801da8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da8c:	2300      	movs	r3, #0
 801da8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da90:	2300      	movs	r3, #0
 801da92:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801da9a:	78fa      	ldrb	r2, [r7, #3]
 801da9c:	4611      	mov	r1, r2
 801da9e:	4618      	mov	r0, r3
 801daa0:	f7fa f8c8 	bl	8017c34 <HAL_PCD_EP_SetStall>
 801daa4:	4603      	mov	r3, r0
 801daa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801daa8:	7bfb      	ldrb	r3, [r7, #15]
 801daaa:	4618      	mov	r0, r3
 801daac:	f000 f8ea 	bl	801dc84 <USBD_Get_USB_Status>
 801dab0:	4603      	mov	r3, r0
 801dab2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801dab4:	7bbb      	ldrb	r3, [r7, #14]
}
 801dab6:	4618      	mov	r0, r3
 801dab8:	3710      	adds	r7, #16
 801daba:	46bd      	mov	sp, r7
 801dabc:	bd80      	pop	{r7, pc}

0801dabe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dabe:	b580      	push	{r7, lr}
 801dac0:	b084      	sub	sp, #16
 801dac2:	af00      	add	r7, sp, #0
 801dac4:	6078      	str	r0, [r7, #4]
 801dac6:	460b      	mov	r3, r1
 801dac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801daca:	2300      	movs	r3, #0
 801dacc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dace:	2300      	movs	r3, #0
 801dad0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dad8:	78fa      	ldrb	r2, [r7, #3]
 801dada:	4611      	mov	r1, r2
 801dadc:	4618      	mov	r0, r3
 801dade:	f7fa f909 	bl	8017cf4 <HAL_PCD_EP_ClrStall>
 801dae2:	4603      	mov	r3, r0
 801dae4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801dae6:	7bfb      	ldrb	r3, [r7, #15]
 801dae8:	4618      	mov	r0, r3
 801daea:	f000 f8cb 	bl	801dc84 <USBD_Get_USB_Status>
 801daee:	4603      	mov	r3, r0
 801daf0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 801daf2:	7bbb      	ldrb	r3, [r7, #14]
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3710      	adds	r7, #16
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}

0801dafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dafc:	b480      	push	{r7}
 801dafe:	b085      	sub	sp, #20
 801db00:	af00      	add	r7, sp, #0
 801db02:	6078      	str	r0, [r7, #4]
 801db04:	460b      	mov	r3, r1
 801db06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db0e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801db10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801db14:	2b00      	cmp	r3, #0
 801db16:	da0c      	bge.n	801db32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801db18:	78fb      	ldrb	r3, [r7, #3]
 801db1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db1e:	68f9      	ldr	r1, [r7, #12]
 801db20:	1c5a      	adds	r2, r3, #1
 801db22:	4613      	mov	r3, r2
 801db24:	009b      	lsls	r3, r3, #2
 801db26:	4413      	add	r3, r2
 801db28:	00db      	lsls	r3, r3, #3
 801db2a:	440b      	add	r3, r1
 801db2c:	3302      	adds	r3, #2
 801db2e:	781b      	ldrb	r3, [r3, #0]
 801db30:	e00b      	b.n	801db4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801db32:	78fb      	ldrb	r3, [r7, #3]
 801db34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801db38:	68f9      	ldr	r1, [r7, #12]
 801db3a:	4613      	mov	r3, r2
 801db3c:	009b      	lsls	r3, r3, #2
 801db3e:	4413      	add	r3, r2
 801db40:	00db      	lsls	r3, r3, #3
 801db42:	440b      	add	r3, r1
 801db44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801db48:	781b      	ldrb	r3, [r3, #0]
  }
}
 801db4a:	4618      	mov	r0, r3
 801db4c:	3714      	adds	r7, #20
 801db4e:	46bd      	mov	sp, r7
 801db50:	bc80      	pop	{r7}
 801db52:	4770      	bx	lr

0801db54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801db54:	b580      	push	{r7, lr}
 801db56:	b084      	sub	sp, #16
 801db58:	af00      	add	r7, sp, #0
 801db5a:	6078      	str	r0, [r7, #4]
 801db5c:	460b      	mov	r3, r1
 801db5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db60:	2300      	movs	r3, #0
 801db62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db64:	2300      	movs	r3, #0
 801db66:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db6e:	78fa      	ldrb	r2, [r7, #3]
 801db70:	4611      	mov	r1, r2
 801db72:	4618      	mov	r0, r3
 801db74:	f7f9 fef4 	bl	8017960 <HAL_PCD_SetAddress>
 801db78:	4603      	mov	r3, r0
 801db7a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801db7c:	7bfb      	ldrb	r3, [r7, #15]
 801db7e:	4618      	mov	r0, r3
 801db80:	f000 f880 	bl	801dc84 <USBD_Get_USB_Status>
 801db84:	4603      	mov	r3, r0
 801db86:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801db88:	7bbb      	ldrb	r3, [r7, #14]
}
 801db8a:	4618      	mov	r0, r3
 801db8c:	3710      	adds	r7, #16
 801db8e:	46bd      	mov	sp, r7
 801db90:	bd80      	pop	{r7, pc}

0801db92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801db92:	b580      	push	{r7, lr}
 801db94:	b086      	sub	sp, #24
 801db96:	af00      	add	r7, sp, #0
 801db98:	60f8      	str	r0, [r7, #12]
 801db9a:	607a      	str	r2, [r7, #4]
 801db9c:	461a      	mov	r2, r3
 801db9e:	460b      	mov	r3, r1
 801dba0:	72fb      	strb	r3, [r7, #11]
 801dba2:	4613      	mov	r3, r2
 801dba4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dba6:	2300      	movs	r3, #0
 801dba8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbaa:	2300      	movs	r3, #0
 801dbac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801dbb4:	893b      	ldrh	r3, [r7, #8]
 801dbb6:	7af9      	ldrb	r1, [r7, #11]
 801dbb8:	687a      	ldr	r2, [r7, #4]
 801dbba:	f7f9 fff8 	bl	8017bae <HAL_PCD_EP_Transmit>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801dbc2:	7dfb      	ldrb	r3, [r7, #23]
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f000 f85d 	bl	801dc84 <USBD_Get_USB_Status>
 801dbca:	4603      	mov	r3, r0
 801dbcc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801dbce:	7dbb      	ldrb	r3, [r7, #22]
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	3718      	adds	r7, #24
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	bd80      	pop	{r7, pc}

0801dbd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b086      	sub	sp, #24
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	60f8      	str	r0, [r7, #12]
 801dbe0:	607a      	str	r2, [r7, #4]
 801dbe2:	461a      	mov	r2, r3
 801dbe4:	460b      	mov	r3, r1
 801dbe6:	72fb      	strb	r3, [r7, #11]
 801dbe8:	4613      	mov	r3, r2
 801dbea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dbec:	2300      	movs	r3, #0
 801dbee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dbf4:	68fb      	ldr	r3, [r7, #12]
 801dbf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801dbfa:	893b      	ldrh	r3, [r7, #8]
 801dbfc:	7af9      	ldrb	r1, [r7, #11]
 801dbfe:	687a      	ldr	r2, [r7, #4]
 801dc00:	f7f9 ff81 	bl	8017b06 <HAL_PCD_EP_Receive>
 801dc04:	4603      	mov	r3, r0
 801dc06:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc08:	7dfb      	ldrb	r3, [r7, #23]
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f000 f83a 	bl	801dc84 <USBD_Get_USB_Status>
 801dc10:	4603      	mov	r3, r0
 801dc12:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 801dc14:	7dbb      	ldrb	r3, [r7, #22]
}
 801dc16:	4618      	mov	r0, r3
 801dc18:	3718      	adds	r7, #24
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd80      	pop	{r7, pc}

0801dc1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dc1e:	b580      	push	{r7, lr}
 801dc20:	b082      	sub	sp, #8
 801dc22:	af00      	add	r7, sp, #0
 801dc24:	6078      	str	r0, [r7, #4]
 801dc26:	460b      	mov	r3, r1
 801dc28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dc30:	78fa      	ldrb	r2, [r7, #3]
 801dc32:	4611      	mov	r1, r2
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7f9 ffa3 	bl	8017b80 <HAL_PCD_EP_GetRxCount>
 801dc3a:	4603      	mov	r3, r0
}
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	3708      	adds	r7, #8
 801dc40:	46bd      	mov	sp, r7
 801dc42:	bd80      	pop	{r7, pc}

0801dc44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dc44:	b480      	push	{r7}
 801dc46:	b083      	sub	sp, #12
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801dc4c:	4b02      	ldr	r3, [pc, #8]	; (801dc58 <USBD_static_malloc+0x14>)
}
 801dc4e:	4618      	mov	r0, r3
 801dc50:	370c      	adds	r7, #12
 801dc52:	46bd      	mov	sp, r7
 801dc54:	bc80      	pop	{r7}
 801dc56:	4770      	bx	lr
 801dc58:	200006f0 	.word	0x200006f0

0801dc5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801dc5c:	b480      	push	{r7}
 801dc5e:	b083      	sub	sp, #12
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	6078      	str	r0, [r7, #4]

}
 801dc64:	bf00      	nop
 801dc66:	370c      	adds	r7, #12
 801dc68:	46bd      	mov	sp, r7
 801dc6a:	bc80      	pop	{r7}
 801dc6c:	4770      	bx	lr

0801dc6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc6e:	b480      	push	{r7}
 801dc70:	b083      	sub	sp, #12
 801dc72:	af00      	add	r7, sp, #0
 801dc74:	6078      	str	r0, [r7, #4]
 801dc76:	460b      	mov	r3, r1
 801dc78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801dc7a:	bf00      	nop
 801dc7c:	370c      	adds	r7, #12
 801dc7e:	46bd      	mov	sp, r7
 801dc80:	bc80      	pop	{r7}
 801dc82:	4770      	bx	lr

0801dc84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801dc84:	b480      	push	{r7}
 801dc86:	b085      	sub	sp, #20
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc8e:	2300      	movs	r3, #0
 801dc90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801dc92:	79fb      	ldrb	r3, [r7, #7]
 801dc94:	2b03      	cmp	r3, #3
 801dc96:	d817      	bhi.n	801dcc8 <USBD_Get_USB_Status+0x44>
 801dc98:	a201      	add	r2, pc, #4	; (adr r2, 801dca0 <USBD_Get_USB_Status+0x1c>)
 801dc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc9e:	bf00      	nop
 801dca0:	0801dcb1 	.word	0x0801dcb1
 801dca4:	0801dcb7 	.word	0x0801dcb7
 801dca8:	0801dcbd 	.word	0x0801dcbd
 801dcac:	0801dcc3 	.word	0x0801dcc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	73fb      	strb	r3, [r7, #15]
    break;
 801dcb4:	e00b      	b.n	801dcce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801dcb6:	2302      	movs	r3, #2
 801dcb8:	73fb      	strb	r3, [r7, #15]
    break;
 801dcba:	e008      	b.n	801dcce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	73fb      	strb	r3, [r7, #15]
    break;
 801dcc0:	e005      	b.n	801dcce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801dcc2:	2302      	movs	r3, #2
 801dcc4:	73fb      	strb	r3, [r7, #15]
    break;
 801dcc6:	e002      	b.n	801dcce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801dcc8:	2302      	movs	r3, #2
 801dcca:	73fb      	strb	r3, [r7, #15]
    break;
 801dccc:	bf00      	nop
  }
  return usb_status;
 801dcce:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	3714      	adds	r7, #20
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bc80      	pop	{r7}
 801dcd8:	4770      	bx	lr
 801dcda:	bf00      	nop

0801dcdc <__errno>:
 801dcdc:	4b01      	ldr	r3, [pc, #4]	; (801dce4 <__errno+0x8>)
 801dcde:	6818      	ldr	r0, [r3, #0]
 801dce0:	4770      	bx	lr
 801dce2:	bf00      	nop
 801dce4:	200003d8 	.word	0x200003d8

0801dce8 <__libc_init_array>:
 801dce8:	b570      	push	{r4, r5, r6, lr}
 801dcea:	2500      	movs	r5, #0
 801dcec:	4e0c      	ldr	r6, [pc, #48]	; (801dd20 <__libc_init_array+0x38>)
 801dcee:	4c0d      	ldr	r4, [pc, #52]	; (801dd24 <__libc_init_array+0x3c>)
 801dcf0:	1ba4      	subs	r4, r4, r6
 801dcf2:	10a4      	asrs	r4, r4, #2
 801dcf4:	42a5      	cmp	r5, r4
 801dcf6:	d109      	bne.n	801dd0c <__libc_init_array+0x24>
 801dcf8:	f002 fb7a 	bl	80203f0 <_init>
 801dcfc:	2500      	movs	r5, #0
 801dcfe:	4e0a      	ldr	r6, [pc, #40]	; (801dd28 <__libc_init_array+0x40>)
 801dd00:	4c0a      	ldr	r4, [pc, #40]	; (801dd2c <__libc_init_array+0x44>)
 801dd02:	1ba4      	subs	r4, r4, r6
 801dd04:	10a4      	asrs	r4, r4, #2
 801dd06:	42a5      	cmp	r5, r4
 801dd08:	d105      	bne.n	801dd16 <__libc_init_array+0x2e>
 801dd0a:	bd70      	pop	{r4, r5, r6, pc}
 801dd0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dd10:	4798      	blx	r3
 801dd12:	3501      	adds	r5, #1
 801dd14:	e7ee      	b.n	801dcf4 <__libc_init_array+0xc>
 801dd16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dd1a:	4798      	blx	r3
 801dd1c:	3501      	adds	r5, #1
 801dd1e:	e7f2      	b.n	801dd06 <__libc_init_array+0x1e>
 801dd20:	080207b8 	.word	0x080207b8
 801dd24:	080207b8 	.word	0x080207b8
 801dd28:	080207b8 	.word	0x080207b8
 801dd2c:	080207bc 	.word	0x080207bc

0801dd30 <malloc>:
 801dd30:	4b02      	ldr	r3, [pc, #8]	; (801dd3c <malloc+0xc>)
 801dd32:	4601      	mov	r1, r0
 801dd34:	6818      	ldr	r0, [r3, #0]
 801dd36:	f000 b863 	b.w	801de00 <_malloc_r>
 801dd3a:	bf00      	nop
 801dd3c:	200003d8 	.word	0x200003d8

0801dd40 <memcpy>:
 801dd40:	b510      	push	{r4, lr}
 801dd42:	1e43      	subs	r3, r0, #1
 801dd44:	440a      	add	r2, r1
 801dd46:	4291      	cmp	r1, r2
 801dd48:	d100      	bne.n	801dd4c <memcpy+0xc>
 801dd4a:	bd10      	pop	{r4, pc}
 801dd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd54:	e7f7      	b.n	801dd46 <memcpy+0x6>

0801dd56 <memset>:
 801dd56:	4603      	mov	r3, r0
 801dd58:	4402      	add	r2, r0
 801dd5a:	4293      	cmp	r3, r2
 801dd5c:	d100      	bne.n	801dd60 <memset+0xa>
 801dd5e:	4770      	bx	lr
 801dd60:	f803 1b01 	strb.w	r1, [r3], #1
 801dd64:	e7f9      	b.n	801dd5a <memset+0x4>
	...

0801dd68 <_free_r>:
 801dd68:	b538      	push	{r3, r4, r5, lr}
 801dd6a:	4605      	mov	r5, r0
 801dd6c:	2900      	cmp	r1, #0
 801dd6e:	d043      	beq.n	801ddf8 <_free_r+0x90>
 801dd70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd74:	1f0c      	subs	r4, r1, #4
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	bfb8      	it	lt
 801dd7a:	18e4      	addlt	r4, r4, r3
 801dd7c:	f001 fc42 	bl	801f604 <__malloc_lock>
 801dd80:	4a1e      	ldr	r2, [pc, #120]	; (801ddfc <_free_r+0x94>)
 801dd82:	6813      	ldr	r3, [r2, #0]
 801dd84:	4610      	mov	r0, r2
 801dd86:	b933      	cbnz	r3, 801dd96 <_free_r+0x2e>
 801dd88:	6063      	str	r3, [r4, #4]
 801dd8a:	6014      	str	r4, [r2, #0]
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd92:	f001 bc38 	b.w	801f606 <__malloc_unlock>
 801dd96:	42a3      	cmp	r3, r4
 801dd98:	d90b      	bls.n	801ddb2 <_free_r+0x4a>
 801dd9a:	6821      	ldr	r1, [r4, #0]
 801dd9c:	1862      	adds	r2, r4, r1
 801dd9e:	4293      	cmp	r3, r2
 801dda0:	bf01      	itttt	eq
 801dda2:	681a      	ldreq	r2, [r3, #0]
 801dda4:	685b      	ldreq	r3, [r3, #4]
 801dda6:	1852      	addeq	r2, r2, r1
 801dda8:	6022      	streq	r2, [r4, #0]
 801ddaa:	6063      	str	r3, [r4, #4]
 801ddac:	6004      	str	r4, [r0, #0]
 801ddae:	e7ed      	b.n	801dd8c <_free_r+0x24>
 801ddb0:	4613      	mov	r3, r2
 801ddb2:	685a      	ldr	r2, [r3, #4]
 801ddb4:	b10a      	cbz	r2, 801ddba <_free_r+0x52>
 801ddb6:	42a2      	cmp	r2, r4
 801ddb8:	d9fa      	bls.n	801ddb0 <_free_r+0x48>
 801ddba:	6819      	ldr	r1, [r3, #0]
 801ddbc:	1858      	adds	r0, r3, r1
 801ddbe:	42a0      	cmp	r0, r4
 801ddc0:	d10b      	bne.n	801ddda <_free_r+0x72>
 801ddc2:	6820      	ldr	r0, [r4, #0]
 801ddc4:	4401      	add	r1, r0
 801ddc6:	1858      	adds	r0, r3, r1
 801ddc8:	4282      	cmp	r2, r0
 801ddca:	6019      	str	r1, [r3, #0]
 801ddcc:	d1de      	bne.n	801dd8c <_free_r+0x24>
 801ddce:	6810      	ldr	r0, [r2, #0]
 801ddd0:	6852      	ldr	r2, [r2, #4]
 801ddd2:	4401      	add	r1, r0
 801ddd4:	6019      	str	r1, [r3, #0]
 801ddd6:	605a      	str	r2, [r3, #4]
 801ddd8:	e7d8      	b.n	801dd8c <_free_r+0x24>
 801ddda:	d902      	bls.n	801dde2 <_free_r+0x7a>
 801dddc:	230c      	movs	r3, #12
 801ddde:	602b      	str	r3, [r5, #0]
 801dde0:	e7d4      	b.n	801dd8c <_free_r+0x24>
 801dde2:	6820      	ldr	r0, [r4, #0]
 801dde4:	1821      	adds	r1, r4, r0
 801dde6:	428a      	cmp	r2, r1
 801dde8:	bf01      	itttt	eq
 801ddea:	6811      	ldreq	r1, [r2, #0]
 801ddec:	6852      	ldreq	r2, [r2, #4]
 801ddee:	1809      	addeq	r1, r1, r0
 801ddf0:	6021      	streq	r1, [r4, #0]
 801ddf2:	6062      	str	r2, [r4, #4]
 801ddf4:	605c      	str	r4, [r3, #4]
 801ddf6:	e7c9      	b.n	801dd8c <_free_r+0x24>
 801ddf8:	bd38      	pop	{r3, r4, r5, pc}
 801ddfa:	bf00      	nop
 801ddfc:	20000910 	.word	0x20000910

0801de00 <_malloc_r>:
 801de00:	b570      	push	{r4, r5, r6, lr}
 801de02:	1ccd      	adds	r5, r1, #3
 801de04:	f025 0503 	bic.w	r5, r5, #3
 801de08:	3508      	adds	r5, #8
 801de0a:	2d0c      	cmp	r5, #12
 801de0c:	bf38      	it	cc
 801de0e:	250c      	movcc	r5, #12
 801de10:	2d00      	cmp	r5, #0
 801de12:	4606      	mov	r6, r0
 801de14:	db01      	blt.n	801de1a <_malloc_r+0x1a>
 801de16:	42a9      	cmp	r1, r5
 801de18:	d903      	bls.n	801de22 <_malloc_r+0x22>
 801de1a:	230c      	movs	r3, #12
 801de1c:	6033      	str	r3, [r6, #0]
 801de1e:	2000      	movs	r0, #0
 801de20:	bd70      	pop	{r4, r5, r6, pc}
 801de22:	f001 fbef 	bl	801f604 <__malloc_lock>
 801de26:	4a21      	ldr	r2, [pc, #132]	; (801deac <_malloc_r+0xac>)
 801de28:	6814      	ldr	r4, [r2, #0]
 801de2a:	4621      	mov	r1, r4
 801de2c:	b991      	cbnz	r1, 801de54 <_malloc_r+0x54>
 801de2e:	4c20      	ldr	r4, [pc, #128]	; (801deb0 <_malloc_r+0xb0>)
 801de30:	6823      	ldr	r3, [r4, #0]
 801de32:	b91b      	cbnz	r3, 801de3c <_malloc_r+0x3c>
 801de34:	4630      	mov	r0, r6
 801de36:	f000 fcad 	bl	801e794 <_sbrk_r>
 801de3a:	6020      	str	r0, [r4, #0]
 801de3c:	4629      	mov	r1, r5
 801de3e:	4630      	mov	r0, r6
 801de40:	f000 fca8 	bl	801e794 <_sbrk_r>
 801de44:	1c43      	adds	r3, r0, #1
 801de46:	d124      	bne.n	801de92 <_malloc_r+0x92>
 801de48:	230c      	movs	r3, #12
 801de4a:	4630      	mov	r0, r6
 801de4c:	6033      	str	r3, [r6, #0]
 801de4e:	f001 fbda 	bl	801f606 <__malloc_unlock>
 801de52:	e7e4      	b.n	801de1e <_malloc_r+0x1e>
 801de54:	680b      	ldr	r3, [r1, #0]
 801de56:	1b5b      	subs	r3, r3, r5
 801de58:	d418      	bmi.n	801de8c <_malloc_r+0x8c>
 801de5a:	2b0b      	cmp	r3, #11
 801de5c:	d90f      	bls.n	801de7e <_malloc_r+0x7e>
 801de5e:	600b      	str	r3, [r1, #0]
 801de60:	18cc      	adds	r4, r1, r3
 801de62:	50cd      	str	r5, [r1, r3]
 801de64:	4630      	mov	r0, r6
 801de66:	f001 fbce 	bl	801f606 <__malloc_unlock>
 801de6a:	f104 000b 	add.w	r0, r4, #11
 801de6e:	1d23      	adds	r3, r4, #4
 801de70:	f020 0007 	bic.w	r0, r0, #7
 801de74:	1ac3      	subs	r3, r0, r3
 801de76:	d0d3      	beq.n	801de20 <_malloc_r+0x20>
 801de78:	425a      	negs	r2, r3
 801de7a:	50e2      	str	r2, [r4, r3]
 801de7c:	e7d0      	b.n	801de20 <_malloc_r+0x20>
 801de7e:	684b      	ldr	r3, [r1, #4]
 801de80:	428c      	cmp	r4, r1
 801de82:	bf16      	itet	ne
 801de84:	6063      	strne	r3, [r4, #4]
 801de86:	6013      	streq	r3, [r2, #0]
 801de88:	460c      	movne	r4, r1
 801de8a:	e7eb      	b.n	801de64 <_malloc_r+0x64>
 801de8c:	460c      	mov	r4, r1
 801de8e:	6849      	ldr	r1, [r1, #4]
 801de90:	e7cc      	b.n	801de2c <_malloc_r+0x2c>
 801de92:	1cc4      	adds	r4, r0, #3
 801de94:	f024 0403 	bic.w	r4, r4, #3
 801de98:	42a0      	cmp	r0, r4
 801de9a:	d005      	beq.n	801dea8 <_malloc_r+0xa8>
 801de9c:	1a21      	subs	r1, r4, r0
 801de9e:	4630      	mov	r0, r6
 801dea0:	f000 fc78 	bl	801e794 <_sbrk_r>
 801dea4:	3001      	adds	r0, #1
 801dea6:	d0cf      	beq.n	801de48 <_malloc_r+0x48>
 801dea8:	6025      	str	r5, [r4, #0]
 801deaa:	e7db      	b.n	801de64 <_malloc_r+0x64>
 801deac:	20000910 	.word	0x20000910
 801deb0:	20000914 	.word	0x20000914

0801deb4 <__cvt>:
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801deba:	461e      	mov	r6, r3
 801debc:	bfbb      	ittet	lt
 801debe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801dec2:	461e      	movlt	r6, r3
 801dec4:	2300      	movge	r3, #0
 801dec6:	232d      	movlt	r3, #45	; 0x2d
 801dec8:	b088      	sub	sp, #32
 801deca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801decc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801ded0:	f027 0720 	bic.w	r7, r7, #32
 801ded4:	2f46      	cmp	r7, #70	; 0x46
 801ded6:	4614      	mov	r4, r2
 801ded8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801deda:	700b      	strb	r3, [r1, #0]
 801dedc:	d004      	beq.n	801dee8 <__cvt+0x34>
 801dede:	2f45      	cmp	r7, #69	; 0x45
 801dee0:	d100      	bne.n	801dee4 <__cvt+0x30>
 801dee2:	3501      	adds	r5, #1
 801dee4:	2302      	movs	r3, #2
 801dee6:	e000      	b.n	801deea <__cvt+0x36>
 801dee8:	2303      	movs	r3, #3
 801deea:	aa07      	add	r2, sp, #28
 801deec:	9204      	str	r2, [sp, #16]
 801deee:	aa06      	add	r2, sp, #24
 801def0:	e9cd a202 	strd	sl, r2, [sp, #8]
 801def4:	e9cd 3500 	strd	r3, r5, [sp]
 801def8:	4622      	mov	r2, r4
 801defa:	4633      	mov	r3, r6
 801defc:	f000 fce8 	bl	801e8d0 <_dtoa_r>
 801df00:	2f47      	cmp	r7, #71	; 0x47
 801df02:	4680      	mov	r8, r0
 801df04:	d102      	bne.n	801df0c <__cvt+0x58>
 801df06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df08:	07db      	lsls	r3, r3, #31
 801df0a:	d526      	bpl.n	801df5a <__cvt+0xa6>
 801df0c:	2f46      	cmp	r7, #70	; 0x46
 801df0e:	eb08 0905 	add.w	r9, r8, r5
 801df12:	d111      	bne.n	801df38 <__cvt+0x84>
 801df14:	f898 3000 	ldrb.w	r3, [r8]
 801df18:	2b30      	cmp	r3, #48	; 0x30
 801df1a:	d10a      	bne.n	801df32 <__cvt+0x7e>
 801df1c:	2200      	movs	r2, #0
 801df1e:	2300      	movs	r3, #0
 801df20:	4620      	mov	r0, r4
 801df22:	4631      	mov	r1, r6
 801df24:	f7f0 fdac 	bl	800ea80 <__aeabi_dcmpeq>
 801df28:	b918      	cbnz	r0, 801df32 <__cvt+0x7e>
 801df2a:	f1c5 0501 	rsb	r5, r5, #1
 801df2e:	f8ca 5000 	str.w	r5, [sl]
 801df32:	f8da 3000 	ldr.w	r3, [sl]
 801df36:	4499      	add	r9, r3
 801df38:	2200      	movs	r2, #0
 801df3a:	2300      	movs	r3, #0
 801df3c:	4620      	mov	r0, r4
 801df3e:	4631      	mov	r1, r6
 801df40:	f7f0 fd9e 	bl	800ea80 <__aeabi_dcmpeq>
 801df44:	b938      	cbnz	r0, 801df56 <__cvt+0xa2>
 801df46:	2230      	movs	r2, #48	; 0x30
 801df48:	9b07      	ldr	r3, [sp, #28]
 801df4a:	454b      	cmp	r3, r9
 801df4c:	d205      	bcs.n	801df5a <__cvt+0xa6>
 801df4e:	1c59      	adds	r1, r3, #1
 801df50:	9107      	str	r1, [sp, #28]
 801df52:	701a      	strb	r2, [r3, #0]
 801df54:	e7f8      	b.n	801df48 <__cvt+0x94>
 801df56:	f8cd 901c 	str.w	r9, [sp, #28]
 801df5a:	4640      	mov	r0, r8
 801df5c:	9b07      	ldr	r3, [sp, #28]
 801df5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801df60:	eba3 0308 	sub.w	r3, r3, r8
 801df64:	6013      	str	r3, [r2, #0]
 801df66:	b008      	add	sp, #32
 801df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801df6c <__exponent>:
 801df6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df6e:	2900      	cmp	r1, #0
 801df70:	bfb4      	ite	lt
 801df72:	232d      	movlt	r3, #45	; 0x2d
 801df74:	232b      	movge	r3, #43	; 0x2b
 801df76:	4604      	mov	r4, r0
 801df78:	bfb8      	it	lt
 801df7a:	4249      	neglt	r1, r1
 801df7c:	2909      	cmp	r1, #9
 801df7e:	f804 2b02 	strb.w	r2, [r4], #2
 801df82:	7043      	strb	r3, [r0, #1]
 801df84:	dd21      	ble.n	801dfca <__exponent+0x5e>
 801df86:	f10d 0307 	add.w	r3, sp, #7
 801df8a:	461f      	mov	r7, r3
 801df8c:	260a      	movs	r6, #10
 801df8e:	fb91 f5f6 	sdiv	r5, r1, r6
 801df92:	fb06 1115 	mls	r1, r6, r5, r1
 801df96:	2d09      	cmp	r5, #9
 801df98:	f101 0130 	add.w	r1, r1, #48	; 0x30
 801df9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dfa0:	f103 32ff 	add.w	r2, r3, #4294967295
 801dfa4:	4629      	mov	r1, r5
 801dfa6:	dc09      	bgt.n	801dfbc <__exponent+0x50>
 801dfa8:	3130      	adds	r1, #48	; 0x30
 801dfaa:	3b02      	subs	r3, #2
 801dfac:	f802 1c01 	strb.w	r1, [r2, #-1]
 801dfb0:	42bb      	cmp	r3, r7
 801dfb2:	4622      	mov	r2, r4
 801dfb4:	d304      	bcc.n	801dfc0 <__exponent+0x54>
 801dfb6:	1a10      	subs	r0, r2, r0
 801dfb8:	b003      	add	sp, #12
 801dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfbc:	4613      	mov	r3, r2
 801dfbe:	e7e6      	b.n	801df8e <__exponent+0x22>
 801dfc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dfc4:	f804 2b01 	strb.w	r2, [r4], #1
 801dfc8:	e7f2      	b.n	801dfb0 <__exponent+0x44>
 801dfca:	2330      	movs	r3, #48	; 0x30
 801dfcc:	4419      	add	r1, r3
 801dfce:	7083      	strb	r3, [r0, #2]
 801dfd0:	1d02      	adds	r2, r0, #4
 801dfd2:	70c1      	strb	r1, [r0, #3]
 801dfd4:	e7ef      	b.n	801dfb6 <__exponent+0x4a>
	...

0801dfd8 <_printf_float>:
 801dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfdc:	b091      	sub	sp, #68	; 0x44
 801dfde:	460c      	mov	r4, r1
 801dfe0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801dfe2:	4693      	mov	fp, r2
 801dfe4:	461e      	mov	r6, r3
 801dfe6:	4605      	mov	r5, r0
 801dfe8:	f001 faf0 	bl	801f5cc <_localeconv_r>
 801dfec:	6803      	ldr	r3, [r0, #0]
 801dfee:	4618      	mov	r0, r3
 801dff0:	9309      	str	r3, [sp, #36]	; 0x24
 801dff2:	f7f0 f919 	bl	800e228 <strlen>
 801dff6:	2300      	movs	r3, #0
 801dff8:	930e      	str	r3, [sp, #56]	; 0x38
 801dffa:	683b      	ldr	r3, [r7, #0]
 801dffc:	900a      	str	r0, [sp, #40]	; 0x28
 801dffe:	3307      	adds	r3, #7
 801e000:	f023 0307 	bic.w	r3, r3, #7
 801e004:	f103 0208 	add.w	r2, r3, #8
 801e008:	f894 8018 	ldrb.w	r8, [r4, #24]
 801e00c:	f8d4 a000 	ldr.w	sl, [r4]
 801e010:	603a      	str	r2, [r7, #0]
 801e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e016:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e01a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 801e01e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e022:	930b      	str	r3, [sp, #44]	; 0x2c
 801e024:	f04f 32ff 	mov.w	r2, #4294967295
 801e028:	4ba6      	ldr	r3, [pc, #664]	; (801e2c4 <_printf_float+0x2ec>)
 801e02a:	4638      	mov	r0, r7
 801e02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e02e:	f7f0 fd59 	bl	800eae4 <__aeabi_dcmpun>
 801e032:	bb68      	cbnz	r0, 801e090 <_printf_float+0xb8>
 801e034:	f04f 32ff 	mov.w	r2, #4294967295
 801e038:	4ba2      	ldr	r3, [pc, #648]	; (801e2c4 <_printf_float+0x2ec>)
 801e03a:	4638      	mov	r0, r7
 801e03c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e03e:	f7f0 fd33 	bl	800eaa8 <__aeabi_dcmple>
 801e042:	bb28      	cbnz	r0, 801e090 <_printf_float+0xb8>
 801e044:	2200      	movs	r2, #0
 801e046:	2300      	movs	r3, #0
 801e048:	4638      	mov	r0, r7
 801e04a:	4649      	mov	r1, r9
 801e04c:	f7f0 fd22 	bl	800ea94 <__aeabi_dcmplt>
 801e050:	b110      	cbz	r0, 801e058 <_printf_float+0x80>
 801e052:	232d      	movs	r3, #45	; 0x2d
 801e054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e058:	4f9b      	ldr	r7, [pc, #620]	; (801e2c8 <_printf_float+0x2f0>)
 801e05a:	4b9c      	ldr	r3, [pc, #624]	; (801e2cc <_printf_float+0x2f4>)
 801e05c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e060:	bf98      	it	ls
 801e062:	461f      	movls	r7, r3
 801e064:	2303      	movs	r3, #3
 801e066:	f04f 0900 	mov.w	r9, #0
 801e06a:	6123      	str	r3, [r4, #16]
 801e06c:	f02a 0304 	bic.w	r3, sl, #4
 801e070:	6023      	str	r3, [r4, #0]
 801e072:	9600      	str	r6, [sp, #0]
 801e074:	465b      	mov	r3, fp
 801e076:	aa0f      	add	r2, sp, #60	; 0x3c
 801e078:	4621      	mov	r1, r4
 801e07a:	4628      	mov	r0, r5
 801e07c:	f000 f9e2 	bl	801e444 <_printf_common>
 801e080:	3001      	adds	r0, #1
 801e082:	f040 8090 	bne.w	801e1a6 <_printf_float+0x1ce>
 801e086:	f04f 30ff 	mov.w	r0, #4294967295
 801e08a:	b011      	add	sp, #68	; 0x44
 801e08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e090:	463a      	mov	r2, r7
 801e092:	464b      	mov	r3, r9
 801e094:	4638      	mov	r0, r7
 801e096:	4649      	mov	r1, r9
 801e098:	f7f0 fd24 	bl	800eae4 <__aeabi_dcmpun>
 801e09c:	b110      	cbz	r0, 801e0a4 <_printf_float+0xcc>
 801e09e:	4f8c      	ldr	r7, [pc, #560]	; (801e2d0 <_printf_float+0x2f8>)
 801e0a0:	4b8c      	ldr	r3, [pc, #560]	; (801e2d4 <_printf_float+0x2fc>)
 801e0a2:	e7db      	b.n	801e05c <_printf_float+0x84>
 801e0a4:	6863      	ldr	r3, [r4, #4]
 801e0a6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 801e0aa:	1c59      	adds	r1, r3, #1
 801e0ac:	a80d      	add	r0, sp, #52	; 0x34
 801e0ae:	a90e      	add	r1, sp, #56	; 0x38
 801e0b0:	d140      	bne.n	801e134 <_printf_float+0x15c>
 801e0b2:	2306      	movs	r3, #6
 801e0b4:	6063      	str	r3, [r4, #4]
 801e0b6:	f04f 0c00 	mov.w	ip, #0
 801e0ba:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801e0be:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801e0c2:	6863      	ldr	r3, [r4, #4]
 801e0c4:	6022      	str	r2, [r4, #0]
 801e0c6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801e0ca:	9300      	str	r3, [sp, #0]
 801e0cc:	463a      	mov	r2, r7
 801e0ce:	464b      	mov	r3, r9
 801e0d0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801e0d4:	4628      	mov	r0, r5
 801e0d6:	f7ff feed 	bl	801deb4 <__cvt>
 801e0da:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801e0de:	2b47      	cmp	r3, #71	; 0x47
 801e0e0:	4607      	mov	r7, r0
 801e0e2:	d109      	bne.n	801e0f8 <_printf_float+0x120>
 801e0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0e6:	1cd8      	adds	r0, r3, #3
 801e0e8:	db02      	blt.n	801e0f0 <_printf_float+0x118>
 801e0ea:	6862      	ldr	r2, [r4, #4]
 801e0ec:	4293      	cmp	r3, r2
 801e0ee:	dd47      	ble.n	801e180 <_printf_float+0x1a8>
 801e0f0:	f1a8 0802 	sub.w	r8, r8, #2
 801e0f4:	fa5f f888 	uxtb.w	r8, r8
 801e0f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801e0fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e0fe:	d824      	bhi.n	801e14a <_printf_float+0x172>
 801e100:	3901      	subs	r1, #1
 801e102:	4642      	mov	r2, r8
 801e104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e108:	910d      	str	r1, [sp, #52]	; 0x34
 801e10a:	f7ff ff2f 	bl	801df6c <__exponent>
 801e10e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e110:	4681      	mov	r9, r0
 801e112:	1813      	adds	r3, r2, r0
 801e114:	2a01      	cmp	r2, #1
 801e116:	6123      	str	r3, [r4, #16]
 801e118:	dc02      	bgt.n	801e120 <_printf_float+0x148>
 801e11a:	6822      	ldr	r2, [r4, #0]
 801e11c:	07d1      	lsls	r1, r2, #31
 801e11e:	d501      	bpl.n	801e124 <_printf_float+0x14c>
 801e120:	3301      	adds	r3, #1
 801e122:	6123      	str	r3, [r4, #16]
 801e124:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d0a2      	beq.n	801e072 <_printf_float+0x9a>
 801e12c:	232d      	movs	r3, #45	; 0x2d
 801e12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e132:	e79e      	b.n	801e072 <_printf_float+0x9a>
 801e134:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 801e138:	f000 816e 	beq.w	801e418 <_printf_float+0x440>
 801e13c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e140:	d1b9      	bne.n	801e0b6 <_printf_float+0xde>
 801e142:	2b00      	cmp	r3, #0
 801e144:	d1b7      	bne.n	801e0b6 <_printf_float+0xde>
 801e146:	2301      	movs	r3, #1
 801e148:	e7b4      	b.n	801e0b4 <_printf_float+0xdc>
 801e14a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 801e14e:	d119      	bne.n	801e184 <_printf_float+0x1ac>
 801e150:	2900      	cmp	r1, #0
 801e152:	6863      	ldr	r3, [r4, #4]
 801e154:	dd0c      	ble.n	801e170 <_printf_float+0x198>
 801e156:	6121      	str	r1, [r4, #16]
 801e158:	b913      	cbnz	r3, 801e160 <_printf_float+0x188>
 801e15a:	6822      	ldr	r2, [r4, #0]
 801e15c:	07d2      	lsls	r2, r2, #31
 801e15e:	d502      	bpl.n	801e166 <_printf_float+0x18e>
 801e160:	3301      	adds	r3, #1
 801e162:	440b      	add	r3, r1
 801e164:	6123      	str	r3, [r4, #16]
 801e166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e168:	f04f 0900 	mov.w	r9, #0
 801e16c:	65a3      	str	r3, [r4, #88]	; 0x58
 801e16e:	e7d9      	b.n	801e124 <_printf_float+0x14c>
 801e170:	b913      	cbnz	r3, 801e178 <_printf_float+0x1a0>
 801e172:	6822      	ldr	r2, [r4, #0]
 801e174:	07d0      	lsls	r0, r2, #31
 801e176:	d501      	bpl.n	801e17c <_printf_float+0x1a4>
 801e178:	3302      	adds	r3, #2
 801e17a:	e7f3      	b.n	801e164 <_printf_float+0x18c>
 801e17c:	2301      	movs	r3, #1
 801e17e:	e7f1      	b.n	801e164 <_printf_float+0x18c>
 801e180:	f04f 0867 	mov.w	r8, #103	; 0x67
 801e184:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801e188:	4293      	cmp	r3, r2
 801e18a:	db05      	blt.n	801e198 <_printf_float+0x1c0>
 801e18c:	6822      	ldr	r2, [r4, #0]
 801e18e:	6123      	str	r3, [r4, #16]
 801e190:	07d1      	lsls	r1, r2, #31
 801e192:	d5e8      	bpl.n	801e166 <_printf_float+0x18e>
 801e194:	3301      	adds	r3, #1
 801e196:	e7e5      	b.n	801e164 <_printf_float+0x18c>
 801e198:	2b00      	cmp	r3, #0
 801e19a:	bfcc      	ite	gt
 801e19c:	2301      	movgt	r3, #1
 801e19e:	f1c3 0302 	rsble	r3, r3, #2
 801e1a2:	4413      	add	r3, r2
 801e1a4:	e7de      	b.n	801e164 <_printf_float+0x18c>
 801e1a6:	6823      	ldr	r3, [r4, #0]
 801e1a8:	055a      	lsls	r2, r3, #21
 801e1aa:	d407      	bmi.n	801e1bc <_printf_float+0x1e4>
 801e1ac:	6923      	ldr	r3, [r4, #16]
 801e1ae:	463a      	mov	r2, r7
 801e1b0:	4659      	mov	r1, fp
 801e1b2:	4628      	mov	r0, r5
 801e1b4:	47b0      	blx	r6
 801e1b6:	3001      	adds	r0, #1
 801e1b8:	d129      	bne.n	801e20e <_printf_float+0x236>
 801e1ba:	e764      	b.n	801e086 <_printf_float+0xae>
 801e1bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801e1c0:	f240 80d7 	bls.w	801e372 <_printf_float+0x39a>
 801e1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e1c8:	2200      	movs	r2, #0
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	f7f0 fc58 	bl	800ea80 <__aeabi_dcmpeq>
 801e1d0:	b388      	cbz	r0, 801e236 <_printf_float+0x25e>
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	4a40      	ldr	r2, [pc, #256]	; (801e2d8 <_printf_float+0x300>)
 801e1d6:	4659      	mov	r1, fp
 801e1d8:	4628      	mov	r0, r5
 801e1da:	47b0      	blx	r6
 801e1dc:	3001      	adds	r0, #1
 801e1de:	f43f af52 	beq.w	801e086 <_printf_float+0xae>
 801e1e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801e1e6:	429a      	cmp	r2, r3
 801e1e8:	db02      	blt.n	801e1f0 <_printf_float+0x218>
 801e1ea:	6823      	ldr	r3, [r4, #0]
 801e1ec:	07d8      	lsls	r0, r3, #31
 801e1ee:	d50e      	bpl.n	801e20e <_printf_float+0x236>
 801e1f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e1f4:	4659      	mov	r1, fp
 801e1f6:	4628      	mov	r0, r5
 801e1f8:	47b0      	blx	r6
 801e1fa:	3001      	adds	r0, #1
 801e1fc:	f43f af43 	beq.w	801e086 <_printf_float+0xae>
 801e200:	2700      	movs	r7, #0
 801e202:	f104 081a 	add.w	r8, r4, #26
 801e206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e208:	3b01      	subs	r3, #1
 801e20a:	42bb      	cmp	r3, r7
 801e20c:	dc09      	bgt.n	801e222 <_printf_float+0x24a>
 801e20e:	6823      	ldr	r3, [r4, #0]
 801e210:	079f      	lsls	r7, r3, #30
 801e212:	f100 80fd 	bmi.w	801e410 <_printf_float+0x438>
 801e216:	68e0      	ldr	r0, [r4, #12]
 801e218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e21a:	4298      	cmp	r0, r3
 801e21c:	bfb8      	it	lt
 801e21e:	4618      	movlt	r0, r3
 801e220:	e733      	b.n	801e08a <_printf_float+0xb2>
 801e222:	2301      	movs	r3, #1
 801e224:	4642      	mov	r2, r8
 801e226:	4659      	mov	r1, fp
 801e228:	4628      	mov	r0, r5
 801e22a:	47b0      	blx	r6
 801e22c:	3001      	adds	r0, #1
 801e22e:	f43f af2a 	beq.w	801e086 <_printf_float+0xae>
 801e232:	3701      	adds	r7, #1
 801e234:	e7e7      	b.n	801e206 <_printf_float+0x22e>
 801e236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e238:	2b00      	cmp	r3, #0
 801e23a:	dc2b      	bgt.n	801e294 <_printf_float+0x2bc>
 801e23c:	2301      	movs	r3, #1
 801e23e:	4a26      	ldr	r2, [pc, #152]	; (801e2d8 <_printf_float+0x300>)
 801e240:	4659      	mov	r1, fp
 801e242:	4628      	mov	r0, r5
 801e244:	47b0      	blx	r6
 801e246:	3001      	adds	r0, #1
 801e248:	f43f af1d 	beq.w	801e086 <_printf_float+0xae>
 801e24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e24e:	b923      	cbnz	r3, 801e25a <_printf_float+0x282>
 801e250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e252:	b913      	cbnz	r3, 801e25a <_printf_float+0x282>
 801e254:	6823      	ldr	r3, [r4, #0]
 801e256:	07d9      	lsls	r1, r3, #31
 801e258:	d5d9      	bpl.n	801e20e <_printf_float+0x236>
 801e25a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e25e:	4659      	mov	r1, fp
 801e260:	4628      	mov	r0, r5
 801e262:	47b0      	blx	r6
 801e264:	3001      	adds	r0, #1
 801e266:	f43f af0e 	beq.w	801e086 <_printf_float+0xae>
 801e26a:	f04f 0800 	mov.w	r8, #0
 801e26e:	f104 091a 	add.w	r9, r4, #26
 801e272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e274:	425b      	negs	r3, r3
 801e276:	4543      	cmp	r3, r8
 801e278:	dc01      	bgt.n	801e27e <_printf_float+0x2a6>
 801e27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e27c:	e797      	b.n	801e1ae <_printf_float+0x1d6>
 801e27e:	2301      	movs	r3, #1
 801e280:	464a      	mov	r2, r9
 801e282:	4659      	mov	r1, fp
 801e284:	4628      	mov	r0, r5
 801e286:	47b0      	blx	r6
 801e288:	3001      	adds	r0, #1
 801e28a:	f43f aefc 	beq.w	801e086 <_printf_float+0xae>
 801e28e:	f108 0801 	add.w	r8, r8, #1
 801e292:	e7ee      	b.n	801e272 <_printf_float+0x29a>
 801e294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e298:	429a      	cmp	r2, r3
 801e29a:	bfa8      	it	ge
 801e29c:	461a      	movge	r2, r3
 801e29e:	2a00      	cmp	r2, #0
 801e2a0:	4690      	mov	r8, r2
 801e2a2:	dd07      	ble.n	801e2b4 <_printf_float+0x2dc>
 801e2a4:	4613      	mov	r3, r2
 801e2a6:	4659      	mov	r1, fp
 801e2a8:	463a      	mov	r2, r7
 801e2aa:	4628      	mov	r0, r5
 801e2ac:	47b0      	blx	r6
 801e2ae:	3001      	adds	r0, #1
 801e2b0:	f43f aee9 	beq.w	801e086 <_printf_float+0xae>
 801e2b4:	f104 031a 	add.w	r3, r4, #26
 801e2b8:	f04f 0a00 	mov.w	sl, #0
 801e2bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801e2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2c2:	e015      	b.n	801e2f0 <_printf_float+0x318>
 801e2c4:	7fefffff 	.word	0x7fefffff
 801e2c8:	080204fc 	.word	0x080204fc
 801e2cc:	080204f8 	.word	0x080204f8
 801e2d0:	08020504 	.word	0x08020504
 801e2d4:	08020500 	.word	0x08020500
 801e2d8:	08020508 	.word	0x08020508
 801e2dc:	2301      	movs	r3, #1
 801e2de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2e0:	4659      	mov	r1, fp
 801e2e2:	4628      	mov	r0, r5
 801e2e4:	47b0      	blx	r6
 801e2e6:	3001      	adds	r0, #1
 801e2e8:	f43f aecd 	beq.w	801e086 <_printf_float+0xae>
 801e2ec:	f10a 0a01 	add.w	sl, sl, #1
 801e2f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801e2f4:	eba9 0308 	sub.w	r3, r9, r8
 801e2f8:	4553      	cmp	r3, sl
 801e2fa:	dcef      	bgt.n	801e2dc <_printf_float+0x304>
 801e2fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801e300:	429a      	cmp	r2, r3
 801e302:	444f      	add	r7, r9
 801e304:	db14      	blt.n	801e330 <_printf_float+0x358>
 801e306:	6823      	ldr	r3, [r4, #0]
 801e308:	07da      	lsls	r2, r3, #31
 801e30a:	d411      	bmi.n	801e330 <_printf_float+0x358>
 801e30c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e30e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e310:	eba3 0209 	sub.w	r2, r3, r9
 801e314:	eba3 0901 	sub.w	r9, r3, r1
 801e318:	4591      	cmp	r9, r2
 801e31a:	bfa8      	it	ge
 801e31c:	4691      	movge	r9, r2
 801e31e:	f1b9 0f00 	cmp.w	r9, #0
 801e322:	dc0d      	bgt.n	801e340 <_printf_float+0x368>
 801e324:	2700      	movs	r7, #0
 801e326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e32a:	f104 081a 	add.w	r8, r4, #26
 801e32e:	e018      	b.n	801e362 <_printf_float+0x38a>
 801e330:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e334:	4659      	mov	r1, fp
 801e336:	4628      	mov	r0, r5
 801e338:	47b0      	blx	r6
 801e33a:	3001      	adds	r0, #1
 801e33c:	d1e6      	bne.n	801e30c <_printf_float+0x334>
 801e33e:	e6a2      	b.n	801e086 <_printf_float+0xae>
 801e340:	464b      	mov	r3, r9
 801e342:	463a      	mov	r2, r7
 801e344:	4659      	mov	r1, fp
 801e346:	4628      	mov	r0, r5
 801e348:	47b0      	blx	r6
 801e34a:	3001      	adds	r0, #1
 801e34c:	d1ea      	bne.n	801e324 <_printf_float+0x34c>
 801e34e:	e69a      	b.n	801e086 <_printf_float+0xae>
 801e350:	2301      	movs	r3, #1
 801e352:	4642      	mov	r2, r8
 801e354:	4659      	mov	r1, fp
 801e356:	4628      	mov	r0, r5
 801e358:	47b0      	blx	r6
 801e35a:	3001      	adds	r0, #1
 801e35c:	f43f ae93 	beq.w	801e086 <_printf_float+0xae>
 801e360:	3701      	adds	r7, #1
 801e362:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801e366:	1a9b      	subs	r3, r3, r2
 801e368:	eba3 0309 	sub.w	r3, r3, r9
 801e36c:	42bb      	cmp	r3, r7
 801e36e:	dcef      	bgt.n	801e350 <_printf_float+0x378>
 801e370:	e74d      	b.n	801e20e <_printf_float+0x236>
 801e372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e374:	2a01      	cmp	r2, #1
 801e376:	dc01      	bgt.n	801e37c <_printf_float+0x3a4>
 801e378:	07db      	lsls	r3, r3, #31
 801e37a:	d538      	bpl.n	801e3ee <_printf_float+0x416>
 801e37c:	2301      	movs	r3, #1
 801e37e:	463a      	mov	r2, r7
 801e380:	4659      	mov	r1, fp
 801e382:	4628      	mov	r0, r5
 801e384:	47b0      	blx	r6
 801e386:	3001      	adds	r0, #1
 801e388:	f43f ae7d 	beq.w	801e086 <_printf_float+0xae>
 801e38c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e390:	4659      	mov	r1, fp
 801e392:	4628      	mov	r0, r5
 801e394:	47b0      	blx	r6
 801e396:	3001      	adds	r0, #1
 801e398:	f107 0701 	add.w	r7, r7, #1
 801e39c:	f43f ae73 	beq.w	801e086 <_printf_float+0xae>
 801e3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	f103 38ff 	add.w	r8, r3, #4294967295
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	f7f0 fb67 	bl	800ea80 <__aeabi_dcmpeq>
 801e3b2:	b9c0      	cbnz	r0, 801e3e6 <_printf_float+0x40e>
 801e3b4:	4643      	mov	r3, r8
 801e3b6:	463a      	mov	r2, r7
 801e3b8:	4659      	mov	r1, fp
 801e3ba:	4628      	mov	r0, r5
 801e3bc:	47b0      	blx	r6
 801e3be:	3001      	adds	r0, #1
 801e3c0:	d10d      	bne.n	801e3de <_printf_float+0x406>
 801e3c2:	e660      	b.n	801e086 <_printf_float+0xae>
 801e3c4:	2301      	movs	r3, #1
 801e3c6:	4642      	mov	r2, r8
 801e3c8:	4659      	mov	r1, fp
 801e3ca:	4628      	mov	r0, r5
 801e3cc:	47b0      	blx	r6
 801e3ce:	3001      	adds	r0, #1
 801e3d0:	f43f ae59 	beq.w	801e086 <_printf_float+0xae>
 801e3d4:	3701      	adds	r7, #1
 801e3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3d8:	3b01      	subs	r3, #1
 801e3da:	42bb      	cmp	r3, r7
 801e3dc:	dcf2      	bgt.n	801e3c4 <_printf_float+0x3ec>
 801e3de:	464b      	mov	r3, r9
 801e3e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e3e4:	e6e4      	b.n	801e1b0 <_printf_float+0x1d8>
 801e3e6:	2700      	movs	r7, #0
 801e3e8:	f104 081a 	add.w	r8, r4, #26
 801e3ec:	e7f3      	b.n	801e3d6 <_printf_float+0x3fe>
 801e3ee:	2301      	movs	r3, #1
 801e3f0:	e7e1      	b.n	801e3b6 <_printf_float+0x3de>
 801e3f2:	2301      	movs	r3, #1
 801e3f4:	4642      	mov	r2, r8
 801e3f6:	4659      	mov	r1, fp
 801e3f8:	4628      	mov	r0, r5
 801e3fa:	47b0      	blx	r6
 801e3fc:	3001      	adds	r0, #1
 801e3fe:	f43f ae42 	beq.w	801e086 <_printf_float+0xae>
 801e402:	3701      	adds	r7, #1
 801e404:	68e3      	ldr	r3, [r4, #12]
 801e406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e408:	1a9b      	subs	r3, r3, r2
 801e40a:	42bb      	cmp	r3, r7
 801e40c:	dcf1      	bgt.n	801e3f2 <_printf_float+0x41a>
 801e40e:	e702      	b.n	801e216 <_printf_float+0x23e>
 801e410:	2700      	movs	r7, #0
 801e412:	f104 0819 	add.w	r8, r4, #25
 801e416:	e7f5      	b.n	801e404 <_printf_float+0x42c>
 801e418:	2b00      	cmp	r3, #0
 801e41a:	f43f ae94 	beq.w	801e146 <_printf_float+0x16e>
 801e41e:	f04f 0c00 	mov.w	ip, #0
 801e422:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801e426:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 801e42a:	6022      	str	r2, [r4, #0]
 801e42c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801e430:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801e434:	9300      	str	r3, [sp, #0]
 801e436:	463a      	mov	r2, r7
 801e438:	464b      	mov	r3, r9
 801e43a:	4628      	mov	r0, r5
 801e43c:	f7ff fd3a 	bl	801deb4 <__cvt>
 801e440:	4607      	mov	r7, r0
 801e442:	e64f      	b.n	801e0e4 <_printf_float+0x10c>

0801e444 <_printf_common>:
 801e444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e448:	4691      	mov	r9, r2
 801e44a:	461f      	mov	r7, r3
 801e44c:	688a      	ldr	r2, [r1, #8]
 801e44e:	690b      	ldr	r3, [r1, #16]
 801e450:	4606      	mov	r6, r0
 801e452:	4293      	cmp	r3, r2
 801e454:	bfb8      	it	lt
 801e456:	4613      	movlt	r3, r2
 801e458:	f8c9 3000 	str.w	r3, [r9]
 801e45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e460:	460c      	mov	r4, r1
 801e462:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e466:	b112      	cbz	r2, 801e46e <_printf_common+0x2a>
 801e468:	3301      	adds	r3, #1
 801e46a:	f8c9 3000 	str.w	r3, [r9]
 801e46e:	6823      	ldr	r3, [r4, #0]
 801e470:	0699      	lsls	r1, r3, #26
 801e472:	bf42      	ittt	mi
 801e474:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e478:	3302      	addmi	r3, #2
 801e47a:	f8c9 3000 	strmi.w	r3, [r9]
 801e47e:	6825      	ldr	r5, [r4, #0]
 801e480:	f015 0506 	ands.w	r5, r5, #6
 801e484:	d107      	bne.n	801e496 <_printf_common+0x52>
 801e486:	f104 0a19 	add.w	sl, r4, #25
 801e48a:	68e3      	ldr	r3, [r4, #12]
 801e48c:	f8d9 2000 	ldr.w	r2, [r9]
 801e490:	1a9b      	subs	r3, r3, r2
 801e492:	42ab      	cmp	r3, r5
 801e494:	dc29      	bgt.n	801e4ea <_printf_common+0xa6>
 801e496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e49a:	6822      	ldr	r2, [r4, #0]
 801e49c:	3300      	adds	r3, #0
 801e49e:	bf18      	it	ne
 801e4a0:	2301      	movne	r3, #1
 801e4a2:	0692      	lsls	r2, r2, #26
 801e4a4:	d42e      	bmi.n	801e504 <_printf_common+0xc0>
 801e4a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e4aa:	4639      	mov	r1, r7
 801e4ac:	4630      	mov	r0, r6
 801e4ae:	47c0      	blx	r8
 801e4b0:	3001      	adds	r0, #1
 801e4b2:	d021      	beq.n	801e4f8 <_printf_common+0xb4>
 801e4b4:	6823      	ldr	r3, [r4, #0]
 801e4b6:	68e5      	ldr	r5, [r4, #12]
 801e4b8:	f003 0306 	and.w	r3, r3, #6
 801e4bc:	2b04      	cmp	r3, #4
 801e4be:	bf18      	it	ne
 801e4c0:	2500      	movne	r5, #0
 801e4c2:	f8d9 2000 	ldr.w	r2, [r9]
 801e4c6:	f04f 0900 	mov.w	r9, #0
 801e4ca:	bf08      	it	eq
 801e4cc:	1aad      	subeq	r5, r5, r2
 801e4ce:	68a3      	ldr	r3, [r4, #8]
 801e4d0:	6922      	ldr	r2, [r4, #16]
 801e4d2:	bf08      	it	eq
 801e4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e4d8:	4293      	cmp	r3, r2
 801e4da:	bfc4      	itt	gt
 801e4dc:	1a9b      	subgt	r3, r3, r2
 801e4de:	18ed      	addgt	r5, r5, r3
 801e4e0:	341a      	adds	r4, #26
 801e4e2:	454d      	cmp	r5, r9
 801e4e4:	d11a      	bne.n	801e51c <_printf_common+0xd8>
 801e4e6:	2000      	movs	r0, #0
 801e4e8:	e008      	b.n	801e4fc <_printf_common+0xb8>
 801e4ea:	2301      	movs	r3, #1
 801e4ec:	4652      	mov	r2, sl
 801e4ee:	4639      	mov	r1, r7
 801e4f0:	4630      	mov	r0, r6
 801e4f2:	47c0      	blx	r8
 801e4f4:	3001      	adds	r0, #1
 801e4f6:	d103      	bne.n	801e500 <_printf_common+0xbc>
 801e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e500:	3501      	adds	r5, #1
 801e502:	e7c2      	b.n	801e48a <_printf_common+0x46>
 801e504:	2030      	movs	r0, #48	; 0x30
 801e506:	18e1      	adds	r1, r4, r3
 801e508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e50c:	1c5a      	adds	r2, r3, #1
 801e50e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e512:	4422      	add	r2, r4
 801e514:	3302      	adds	r3, #2
 801e516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e51a:	e7c4      	b.n	801e4a6 <_printf_common+0x62>
 801e51c:	2301      	movs	r3, #1
 801e51e:	4622      	mov	r2, r4
 801e520:	4639      	mov	r1, r7
 801e522:	4630      	mov	r0, r6
 801e524:	47c0      	blx	r8
 801e526:	3001      	adds	r0, #1
 801e528:	d0e6      	beq.n	801e4f8 <_printf_common+0xb4>
 801e52a:	f109 0901 	add.w	r9, r9, #1
 801e52e:	e7d8      	b.n	801e4e2 <_printf_common+0x9e>

0801e530 <_printf_i>:
 801e530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e534:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e538:	460c      	mov	r4, r1
 801e53a:	7e09      	ldrb	r1, [r1, #24]
 801e53c:	b085      	sub	sp, #20
 801e53e:	296e      	cmp	r1, #110	; 0x6e
 801e540:	4617      	mov	r7, r2
 801e542:	4606      	mov	r6, r0
 801e544:	4698      	mov	r8, r3
 801e546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e548:	f000 80b3 	beq.w	801e6b2 <_printf_i+0x182>
 801e54c:	d822      	bhi.n	801e594 <_printf_i+0x64>
 801e54e:	2963      	cmp	r1, #99	; 0x63
 801e550:	d036      	beq.n	801e5c0 <_printf_i+0x90>
 801e552:	d80a      	bhi.n	801e56a <_printf_i+0x3a>
 801e554:	2900      	cmp	r1, #0
 801e556:	f000 80b9 	beq.w	801e6cc <_printf_i+0x19c>
 801e55a:	2958      	cmp	r1, #88	; 0x58
 801e55c:	f000 8083 	beq.w	801e666 <_printf_i+0x136>
 801e560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e564:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e568:	e032      	b.n	801e5d0 <_printf_i+0xa0>
 801e56a:	2964      	cmp	r1, #100	; 0x64
 801e56c:	d001      	beq.n	801e572 <_printf_i+0x42>
 801e56e:	2969      	cmp	r1, #105	; 0x69
 801e570:	d1f6      	bne.n	801e560 <_printf_i+0x30>
 801e572:	6820      	ldr	r0, [r4, #0]
 801e574:	6813      	ldr	r3, [r2, #0]
 801e576:	0605      	lsls	r5, r0, #24
 801e578:	f103 0104 	add.w	r1, r3, #4
 801e57c:	d52a      	bpl.n	801e5d4 <_printf_i+0xa4>
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	6011      	str	r1, [r2, #0]
 801e582:	2b00      	cmp	r3, #0
 801e584:	da03      	bge.n	801e58e <_printf_i+0x5e>
 801e586:	222d      	movs	r2, #45	; 0x2d
 801e588:	425b      	negs	r3, r3
 801e58a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e58e:	486f      	ldr	r0, [pc, #444]	; (801e74c <_printf_i+0x21c>)
 801e590:	220a      	movs	r2, #10
 801e592:	e039      	b.n	801e608 <_printf_i+0xd8>
 801e594:	2973      	cmp	r1, #115	; 0x73
 801e596:	f000 809d 	beq.w	801e6d4 <_printf_i+0x1a4>
 801e59a:	d808      	bhi.n	801e5ae <_printf_i+0x7e>
 801e59c:	296f      	cmp	r1, #111	; 0x6f
 801e59e:	d020      	beq.n	801e5e2 <_printf_i+0xb2>
 801e5a0:	2970      	cmp	r1, #112	; 0x70
 801e5a2:	d1dd      	bne.n	801e560 <_printf_i+0x30>
 801e5a4:	6823      	ldr	r3, [r4, #0]
 801e5a6:	f043 0320 	orr.w	r3, r3, #32
 801e5aa:	6023      	str	r3, [r4, #0]
 801e5ac:	e003      	b.n	801e5b6 <_printf_i+0x86>
 801e5ae:	2975      	cmp	r1, #117	; 0x75
 801e5b0:	d017      	beq.n	801e5e2 <_printf_i+0xb2>
 801e5b2:	2978      	cmp	r1, #120	; 0x78
 801e5b4:	d1d4      	bne.n	801e560 <_printf_i+0x30>
 801e5b6:	2378      	movs	r3, #120	; 0x78
 801e5b8:	4865      	ldr	r0, [pc, #404]	; (801e750 <_printf_i+0x220>)
 801e5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e5be:	e055      	b.n	801e66c <_printf_i+0x13c>
 801e5c0:	6813      	ldr	r3, [r2, #0]
 801e5c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e5c6:	1d19      	adds	r1, r3, #4
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	6011      	str	r1, [r2, #0]
 801e5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e5d0:	2301      	movs	r3, #1
 801e5d2:	e08c      	b.n	801e6ee <_printf_i+0x1be>
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e5da:	6011      	str	r1, [r2, #0]
 801e5dc:	bf18      	it	ne
 801e5de:	b21b      	sxthne	r3, r3
 801e5e0:	e7cf      	b.n	801e582 <_printf_i+0x52>
 801e5e2:	6813      	ldr	r3, [r2, #0]
 801e5e4:	6825      	ldr	r5, [r4, #0]
 801e5e6:	1d18      	adds	r0, r3, #4
 801e5e8:	6010      	str	r0, [r2, #0]
 801e5ea:	0628      	lsls	r0, r5, #24
 801e5ec:	d501      	bpl.n	801e5f2 <_printf_i+0xc2>
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	e002      	b.n	801e5f8 <_printf_i+0xc8>
 801e5f2:	0668      	lsls	r0, r5, #25
 801e5f4:	d5fb      	bpl.n	801e5ee <_printf_i+0xbe>
 801e5f6:	881b      	ldrh	r3, [r3, #0]
 801e5f8:	296f      	cmp	r1, #111	; 0x6f
 801e5fa:	bf14      	ite	ne
 801e5fc:	220a      	movne	r2, #10
 801e5fe:	2208      	moveq	r2, #8
 801e600:	4852      	ldr	r0, [pc, #328]	; (801e74c <_printf_i+0x21c>)
 801e602:	2100      	movs	r1, #0
 801e604:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e608:	6865      	ldr	r5, [r4, #4]
 801e60a:	2d00      	cmp	r5, #0
 801e60c:	60a5      	str	r5, [r4, #8]
 801e60e:	f2c0 8095 	blt.w	801e73c <_printf_i+0x20c>
 801e612:	6821      	ldr	r1, [r4, #0]
 801e614:	f021 0104 	bic.w	r1, r1, #4
 801e618:	6021      	str	r1, [r4, #0]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d13d      	bne.n	801e69a <_printf_i+0x16a>
 801e61e:	2d00      	cmp	r5, #0
 801e620:	f040 808e 	bne.w	801e740 <_printf_i+0x210>
 801e624:	4665      	mov	r5, ip
 801e626:	2a08      	cmp	r2, #8
 801e628:	d10b      	bne.n	801e642 <_printf_i+0x112>
 801e62a:	6823      	ldr	r3, [r4, #0]
 801e62c:	07db      	lsls	r3, r3, #31
 801e62e:	d508      	bpl.n	801e642 <_printf_i+0x112>
 801e630:	6923      	ldr	r3, [r4, #16]
 801e632:	6862      	ldr	r2, [r4, #4]
 801e634:	429a      	cmp	r2, r3
 801e636:	bfde      	ittt	le
 801e638:	2330      	movle	r3, #48	; 0x30
 801e63a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e63e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e642:	ebac 0305 	sub.w	r3, ip, r5
 801e646:	6123      	str	r3, [r4, #16]
 801e648:	f8cd 8000 	str.w	r8, [sp]
 801e64c:	463b      	mov	r3, r7
 801e64e:	aa03      	add	r2, sp, #12
 801e650:	4621      	mov	r1, r4
 801e652:	4630      	mov	r0, r6
 801e654:	f7ff fef6 	bl	801e444 <_printf_common>
 801e658:	3001      	adds	r0, #1
 801e65a:	d14d      	bne.n	801e6f8 <_printf_i+0x1c8>
 801e65c:	f04f 30ff 	mov.w	r0, #4294967295
 801e660:	b005      	add	sp, #20
 801e662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e666:	4839      	ldr	r0, [pc, #228]	; (801e74c <_printf_i+0x21c>)
 801e668:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e66c:	6813      	ldr	r3, [r2, #0]
 801e66e:	6821      	ldr	r1, [r4, #0]
 801e670:	1d1d      	adds	r5, r3, #4
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	6015      	str	r5, [r2, #0]
 801e676:	060a      	lsls	r2, r1, #24
 801e678:	d50b      	bpl.n	801e692 <_printf_i+0x162>
 801e67a:	07ca      	lsls	r2, r1, #31
 801e67c:	bf44      	itt	mi
 801e67e:	f041 0120 	orrmi.w	r1, r1, #32
 801e682:	6021      	strmi	r1, [r4, #0]
 801e684:	b91b      	cbnz	r3, 801e68e <_printf_i+0x15e>
 801e686:	6822      	ldr	r2, [r4, #0]
 801e688:	f022 0220 	bic.w	r2, r2, #32
 801e68c:	6022      	str	r2, [r4, #0]
 801e68e:	2210      	movs	r2, #16
 801e690:	e7b7      	b.n	801e602 <_printf_i+0xd2>
 801e692:	064d      	lsls	r5, r1, #25
 801e694:	bf48      	it	mi
 801e696:	b29b      	uxthmi	r3, r3
 801e698:	e7ef      	b.n	801e67a <_printf_i+0x14a>
 801e69a:	4665      	mov	r5, ip
 801e69c:	fbb3 f1f2 	udiv	r1, r3, r2
 801e6a0:	fb02 3311 	mls	r3, r2, r1, r3
 801e6a4:	5cc3      	ldrb	r3, [r0, r3]
 801e6a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e6aa:	460b      	mov	r3, r1
 801e6ac:	2900      	cmp	r1, #0
 801e6ae:	d1f5      	bne.n	801e69c <_printf_i+0x16c>
 801e6b0:	e7b9      	b.n	801e626 <_printf_i+0xf6>
 801e6b2:	6813      	ldr	r3, [r2, #0]
 801e6b4:	6825      	ldr	r5, [r4, #0]
 801e6b6:	1d18      	adds	r0, r3, #4
 801e6b8:	6961      	ldr	r1, [r4, #20]
 801e6ba:	6010      	str	r0, [r2, #0]
 801e6bc:	0628      	lsls	r0, r5, #24
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	d501      	bpl.n	801e6c6 <_printf_i+0x196>
 801e6c2:	6019      	str	r1, [r3, #0]
 801e6c4:	e002      	b.n	801e6cc <_printf_i+0x19c>
 801e6c6:	066a      	lsls	r2, r5, #25
 801e6c8:	d5fb      	bpl.n	801e6c2 <_printf_i+0x192>
 801e6ca:	8019      	strh	r1, [r3, #0]
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	4665      	mov	r5, ip
 801e6d0:	6123      	str	r3, [r4, #16]
 801e6d2:	e7b9      	b.n	801e648 <_printf_i+0x118>
 801e6d4:	6813      	ldr	r3, [r2, #0]
 801e6d6:	1d19      	adds	r1, r3, #4
 801e6d8:	6011      	str	r1, [r2, #0]
 801e6da:	681d      	ldr	r5, [r3, #0]
 801e6dc:	6862      	ldr	r2, [r4, #4]
 801e6de:	2100      	movs	r1, #0
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	f000 ff81 	bl	801f5e8 <memchr>
 801e6e6:	b108      	cbz	r0, 801e6ec <_printf_i+0x1bc>
 801e6e8:	1b40      	subs	r0, r0, r5
 801e6ea:	6060      	str	r0, [r4, #4]
 801e6ec:	6863      	ldr	r3, [r4, #4]
 801e6ee:	6123      	str	r3, [r4, #16]
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e6f6:	e7a7      	b.n	801e648 <_printf_i+0x118>
 801e6f8:	6923      	ldr	r3, [r4, #16]
 801e6fa:	462a      	mov	r2, r5
 801e6fc:	4639      	mov	r1, r7
 801e6fe:	4630      	mov	r0, r6
 801e700:	47c0      	blx	r8
 801e702:	3001      	adds	r0, #1
 801e704:	d0aa      	beq.n	801e65c <_printf_i+0x12c>
 801e706:	6823      	ldr	r3, [r4, #0]
 801e708:	079b      	lsls	r3, r3, #30
 801e70a:	d413      	bmi.n	801e734 <_printf_i+0x204>
 801e70c:	68e0      	ldr	r0, [r4, #12]
 801e70e:	9b03      	ldr	r3, [sp, #12]
 801e710:	4298      	cmp	r0, r3
 801e712:	bfb8      	it	lt
 801e714:	4618      	movlt	r0, r3
 801e716:	e7a3      	b.n	801e660 <_printf_i+0x130>
 801e718:	2301      	movs	r3, #1
 801e71a:	464a      	mov	r2, r9
 801e71c:	4639      	mov	r1, r7
 801e71e:	4630      	mov	r0, r6
 801e720:	47c0      	blx	r8
 801e722:	3001      	adds	r0, #1
 801e724:	d09a      	beq.n	801e65c <_printf_i+0x12c>
 801e726:	3501      	adds	r5, #1
 801e728:	68e3      	ldr	r3, [r4, #12]
 801e72a:	9a03      	ldr	r2, [sp, #12]
 801e72c:	1a9b      	subs	r3, r3, r2
 801e72e:	42ab      	cmp	r3, r5
 801e730:	dcf2      	bgt.n	801e718 <_printf_i+0x1e8>
 801e732:	e7eb      	b.n	801e70c <_printf_i+0x1dc>
 801e734:	2500      	movs	r5, #0
 801e736:	f104 0919 	add.w	r9, r4, #25
 801e73a:	e7f5      	b.n	801e728 <_printf_i+0x1f8>
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d1ac      	bne.n	801e69a <_printf_i+0x16a>
 801e740:	7803      	ldrb	r3, [r0, #0]
 801e742:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e74a:	e76c      	b.n	801e626 <_printf_i+0xf6>
 801e74c:	0802050a 	.word	0x0802050a
 801e750:	0802051b 	.word	0x0802051b

0801e754 <iprintf>:
 801e754:	b40f      	push	{r0, r1, r2, r3}
 801e756:	4b0a      	ldr	r3, [pc, #40]	; (801e780 <iprintf+0x2c>)
 801e758:	b513      	push	{r0, r1, r4, lr}
 801e75a:	681c      	ldr	r4, [r3, #0]
 801e75c:	b124      	cbz	r4, 801e768 <iprintf+0x14>
 801e75e:	69a3      	ldr	r3, [r4, #24]
 801e760:	b913      	cbnz	r3, 801e768 <iprintf+0x14>
 801e762:	4620      	mov	r0, r4
 801e764:	f000 fea8 	bl	801f4b8 <__sinit>
 801e768:	ab05      	add	r3, sp, #20
 801e76a:	9a04      	ldr	r2, [sp, #16]
 801e76c:	68a1      	ldr	r1, [r4, #8]
 801e76e:	4620      	mov	r0, r4
 801e770:	9301      	str	r3, [sp, #4]
 801e772:	f001 fa7f 	bl	801fc74 <_vfiprintf_r>
 801e776:	b002      	add	sp, #8
 801e778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e77c:	b004      	add	sp, #16
 801e77e:	4770      	bx	lr
 801e780:	200003d8 	.word	0x200003d8

0801e784 <realloc>:
 801e784:	4b02      	ldr	r3, [pc, #8]	; (801e790 <realloc+0xc>)
 801e786:	460a      	mov	r2, r1
 801e788:	4601      	mov	r1, r0
 801e78a:	6818      	ldr	r0, [r3, #0]
 801e78c:	f001 ba25 	b.w	801fbda <_realloc_r>
 801e790:	200003d8 	.word	0x200003d8

0801e794 <_sbrk_r>:
 801e794:	b538      	push	{r3, r4, r5, lr}
 801e796:	2300      	movs	r3, #0
 801e798:	4c05      	ldr	r4, [pc, #20]	; (801e7b0 <_sbrk_r+0x1c>)
 801e79a:	4605      	mov	r5, r0
 801e79c:	4608      	mov	r0, r1
 801e79e:	6023      	str	r3, [r4, #0]
 801e7a0:	f7f6 fbfc 	bl	8014f9c <_sbrk>
 801e7a4:	1c43      	adds	r3, r0, #1
 801e7a6:	d102      	bne.n	801e7ae <_sbrk_r+0x1a>
 801e7a8:	6823      	ldr	r3, [r4, #0]
 801e7aa:	b103      	cbz	r3, 801e7ae <_sbrk_r+0x1a>
 801e7ac:	602b      	str	r3, [r5, #0]
 801e7ae:	bd38      	pop	{r3, r4, r5, pc}
 801e7b0:	20001cc4 	.word	0x20001cc4

0801e7b4 <quorem>:
 801e7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7b8:	6903      	ldr	r3, [r0, #16]
 801e7ba:	690c      	ldr	r4, [r1, #16]
 801e7bc:	4680      	mov	r8, r0
 801e7be:	42a3      	cmp	r3, r4
 801e7c0:	f2c0 8084 	blt.w	801e8cc <quorem+0x118>
 801e7c4:	3c01      	subs	r4, #1
 801e7c6:	f101 0714 	add.w	r7, r1, #20
 801e7ca:	f100 0614 	add.w	r6, r0, #20
 801e7ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801e7d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e7d6:	3501      	adds	r5, #1
 801e7d8:	fbb0 f5f5 	udiv	r5, r0, r5
 801e7dc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801e7e0:	eb06 030c 	add.w	r3, r6, ip
 801e7e4:	eb07 090c 	add.w	r9, r7, ip
 801e7e8:	9301      	str	r3, [sp, #4]
 801e7ea:	b39d      	cbz	r5, 801e854 <quorem+0xa0>
 801e7ec:	f04f 0a00 	mov.w	sl, #0
 801e7f0:	4638      	mov	r0, r7
 801e7f2:	46b6      	mov	lr, r6
 801e7f4:	46d3      	mov	fp, sl
 801e7f6:	f850 2b04 	ldr.w	r2, [r0], #4
 801e7fa:	b293      	uxth	r3, r2
 801e7fc:	fb05 a303 	mla	r3, r5, r3, sl
 801e800:	0c12      	lsrs	r2, r2, #16
 801e802:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e806:	fb05 a202 	mla	r2, r5, r2, sl
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	ebab 0303 	sub.w	r3, fp, r3
 801e810:	f8de b000 	ldr.w	fp, [lr]
 801e814:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801e818:	fa1f fb8b 	uxth.w	fp, fp
 801e81c:	445b      	add	r3, fp
 801e81e:	fa1f fb82 	uxth.w	fp, r2
 801e822:	f8de 2000 	ldr.w	r2, [lr]
 801e826:	4581      	cmp	r9, r0
 801e828:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801e82c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e830:	b29b      	uxth	r3, r3
 801e832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e836:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801e83a:	f84e 3b04 	str.w	r3, [lr], #4
 801e83e:	d2da      	bcs.n	801e7f6 <quorem+0x42>
 801e840:	f856 300c 	ldr.w	r3, [r6, ip]
 801e844:	b933      	cbnz	r3, 801e854 <quorem+0xa0>
 801e846:	9b01      	ldr	r3, [sp, #4]
 801e848:	3b04      	subs	r3, #4
 801e84a:	429e      	cmp	r6, r3
 801e84c:	461a      	mov	r2, r3
 801e84e:	d331      	bcc.n	801e8b4 <quorem+0x100>
 801e850:	f8c8 4010 	str.w	r4, [r8, #16]
 801e854:	4640      	mov	r0, r8
 801e856:	f001 f8eb 	bl	801fa30 <__mcmp>
 801e85a:	2800      	cmp	r0, #0
 801e85c:	db26      	blt.n	801e8ac <quorem+0xf8>
 801e85e:	4630      	mov	r0, r6
 801e860:	f04f 0c00 	mov.w	ip, #0
 801e864:	3501      	adds	r5, #1
 801e866:	f857 1b04 	ldr.w	r1, [r7], #4
 801e86a:	f8d0 e000 	ldr.w	lr, [r0]
 801e86e:	b28b      	uxth	r3, r1
 801e870:	ebac 0303 	sub.w	r3, ip, r3
 801e874:	fa1f f28e 	uxth.w	r2, lr
 801e878:	4413      	add	r3, r2
 801e87a:	0c0a      	lsrs	r2, r1, #16
 801e87c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e884:	b29b      	uxth	r3, r3
 801e886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e88a:	45b9      	cmp	r9, r7
 801e88c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e890:	f840 3b04 	str.w	r3, [r0], #4
 801e894:	d2e7      	bcs.n	801e866 <quorem+0xb2>
 801e896:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801e89a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801e89e:	b92a      	cbnz	r2, 801e8ac <quorem+0xf8>
 801e8a0:	3b04      	subs	r3, #4
 801e8a2:	429e      	cmp	r6, r3
 801e8a4:	461a      	mov	r2, r3
 801e8a6:	d30b      	bcc.n	801e8c0 <quorem+0x10c>
 801e8a8:	f8c8 4010 	str.w	r4, [r8, #16]
 801e8ac:	4628      	mov	r0, r5
 801e8ae:	b003      	add	sp, #12
 801e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8b4:	6812      	ldr	r2, [r2, #0]
 801e8b6:	3b04      	subs	r3, #4
 801e8b8:	2a00      	cmp	r2, #0
 801e8ba:	d1c9      	bne.n	801e850 <quorem+0x9c>
 801e8bc:	3c01      	subs	r4, #1
 801e8be:	e7c4      	b.n	801e84a <quorem+0x96>
 801e8c0:	6812      	ldr	r2, [r2, #0]
 801e8c2:	3b04      	subs	r3, #4
 801e8c4:	2a00      	cmp	r2, #0
 801e8c6:	d1ef      	bne.n	801e8a8 <quorem+0xf4>
 801e8c8:	3c01      	subs	r4, #1
 801e8ca:	e7ea      	b.n	801e8a2 <quorem+0xee>
 801e8cc:	2000      	movs	r0, #0
 801e8ce:	e7ee      	b.n	801e8ae <quorem+0xfa>

0801e8d0 <_dtoa_r>:
 801e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d4:	4616      	mov	r6, r2
 801e8d6:	461f      	mov	r7, r3
 801e8d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e8da:	b095      	sub	sp, #84	; 0x54
 801e8dc:	4604      	mov	r4, r0
 801e8de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 801e8e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e8e6:	b93d      	cbnz	r5, 801e8f8 <_dtoa_r+0x28>
 801e8e8:	2010      	movs	r0, #16
 801e8ea:	f7ff fa21 	bl	801dd30 <malloc>
 801e8ee:	6260      	str	r0, [r4, #36]	; 0x24
 801e8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e8f4:	6005      	str	r5, [r0, #0]
 801e8f6:	60c5      	str	r5, [r0, #12]
 801e8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e8fa:	6819      	ldr	r1, [r3, #0]
 801e8fc:	b151      	cbz	r1, 801e914 <_dtoa_r+0x44>
 801e8fe:	685a      	ldr	r2, [r3, #4]
 801e900:	2301      	movs	r3, #1
 801e902:	4093      	lsls	r3, r2
 801e904:	604a      	str	r2, [r1, #4]
 801e906:	608b      	str	r3, [r1, #8]
 801e908:	4620      	mov	r0, r4
 801e90a:	f000 feb1 	bl	801f670 <_Bfree>
 801e90e:	2200      	movs	r2, #0
 801e910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e912:	601a      	str	r2, [r3, #0]
 801e914:	1e3b      	subs	r3, r7, #0
 801e916:	bfaf      	iteee	ge
 801e918:	2300      	movge	r3, #0
 801e91a:	2201      	movlt	r2, #1
 801e91c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e920:	9303      	strlt	r3, [sp, #12]
 801e922:	bfac      	ite	ge
 801e924:	f8c8 3000 	strge.w	r3, [r8]
 801e928:	f8c8 2000 	strlt.w	r2, [r8]
 801e92c:	4bae      	ldr	r3, [pc, #696]	; (801ebe8 <_dtoa_r+0x318>)
 801e92e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e932:	ea33 0308 	bics.w	r3, r3, r8
 801e936:	d11b      	bne.n	801e970 <_dtoa_r+0xa0>
 801e938:	f242 730f 	movw	r3, #9999	; 0x270f
 801e93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e93e:	6013      	str	r3, [r2, #0]
 801e940:	9b02      	ldr	r3, [sp, #8]
 801e942:	b923      	cbnz	r3, 801e94e <_dtoa_r+0x7e>
 801e944:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801e948:	2800      	cmp	r0, #0
 801e94a:	f000 8545 	beq.w	801f3d8 <_dtoa_r+0xb08>
 801e94e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e950:	b953      	cbnz	r3, 801e968 <_dtoa_r+0x98>
 801e952:	4ba6      	ldr	r3, [pc, #664]	; (801ebec <_dtoa_r+0x31c>)
 801e954:	e021      	b.n	801e99a <_dtoa_r+0xca>
 801e956:	4ba6      	ldr	r3, [pc, #664]	; (801ebf0 <_dtoa_r+0x320>)
 801e958:	9306      	str	r3, [sp, #24]
 801e95a:	3308      	adds	r3, #8
 801e95c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e95e:	6013      	str	r3, [r2, #0]
 801e960:	9806      	ldr	r0, [sp, #24]
 801e962:	b015      	add	sp, #84	; 0x54
 801e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e968:	4ba0      	ldr	r3, [pc, #640]	; (801ebec <_dtoa_r+0x31c>)
 801e96a:	9306      	str	r3, [sp, #24]
 801e96c:	3303      	adds	r3, #3
 801e96e:	e7f5      	b.n	801e95c <_dtoa_r+0x8c>
 801e970:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e974:	2200      	movs	r2, #0
 801e976:	2300      	movs	r3, #0
 801e978:	4630      	mov	r0, r6
 801e97a:	4639      	mov	r1, r7
 801e97c:	f7f0 f880 	bl	800ea80 <__aeabi_dcmpeq>
 801e980:	4682      	mov	sl, r0
 801e982:	b160      	cbz	r0, 801e99e <_dtoa_r+0xce>
 801e984:	2301      	movs	r3, #1
 801e986:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e988:	6013      	str	r3, [r2, #0]
 801e98a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	f000 8520 	beq.w	801f3d2 <_dtoa_r+0xb02>
 801e992:	4b98      	ldr	r3, [pc, #608]	; (801ebf4 <_dtoa_r+0x324>)
 801e994:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e996:	6013      	str	r3, [r2, #0]
 801e998:	3b01      	subs	r3, #1
 801e99a:	9306      	str	r3, [sp, #24]
 801e99c:	e7e0      	b.n	801e960 <_dtoa_r+0x90>
 801e99e:	ab12      	add	r3, sp, #72	; 0x48
 801e9a0:	9301      	str	r3, [sp, #4]
 801e9a2:	ab13      	add	r3, sp, #76	; 0x4c
 801e9a4:	9300      	str	r3, [sp, #0]
 801e9a6:	4632      	mov	r2, r6
 801e9a8:	463b      	mov	r3, r7
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f001 f8b8 	bl	801fb20 <__d2b>
 801e9b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801e9b4:	4683      	mov	fp, r0
 801e9b6:	2d00      	cmp	r5, #0
 801e9b8:	d07d      	beq.n	801eab6 <_dtoa_r+0x1e6>
 801e9ba:	46b0      	mov	r8, r6
 801e9bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e9c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 801e9c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 801e9c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e9cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801e9d0:	2200      	movs	r2, #0
 801e9d2:	4b89      	ldr	r3, [pc, #548]	; (801ebf8 <_dtoa_r+0x328>)
 801e9d4:	4640      	mov	r0, r8
 801e9d6:	4649      	mov	r1, r9
 801e9d8:	f7ef fc32 	bl	800e240 <__aeabi_dsub>
 801e9dc:	a37c      	add	r3, pc, #496	; (adr r3, 801ebd0 <_dtoa_r+0x300>)
 801e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e2:	f7ef fde5 	bl	800e5b0 <__aeabi_dmul>
 801e9e6:	a37c      	add	r3, pc, #496	; (adr r3, 801ebd8 <_dtoa_r+0x308>)
 801e9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ec:	f7ef fc2a 	bl	800e244 <__adddf3>
 801e9f0:	4606      	mov	r6, r0
 801e9f2:	4628      	mov	r0, r5
 801e9f4:	460f      	mov	r7, r1
 801e9f6:	f7ef fd71 	bl	800e4dc <__aeabi_i2d>
 801e9fa:	a379      	add	r3, pc, #484	; (adr r3, 801ebe0 <_dtoa_r+0x310>)
 801e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea00:	f7ef fdd6 	bl	800e5b0 <__aeabi_dmul>
 801ea04:	4602      	mov	r2, r0
 801ea06:	460b      	mov	r3, r1
 801ea08:	4630      	mov	r0, r6
 801ea0a:	4639      	mov	r1, r7
 801ea0c:	f7ef fc1a 	bl	800e244 <__adddf3>
 801ea10:	4606      	mov	r6, r0
 801ea12:	460f      	mov	r7, r1
 801ea14:	f7f0 f87c 	bl	800eb10 <__aeabi_d2iz>
 801ea18:	2200      	movs	r2, #0
 801ea1a:	4682      	mov	sl, r0
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	4630      	mov	r0, r6
 801ea20:	4639      	mov	r1, r7
 801ea22:	f7f0 f837 	bl	800ea94 <__aeabi_dcmplt>
 801ea26:	b148      	cbz	r0, 801ea3c <_dtoa_r+0x16c>
 801ea28:	4650      	mov	r0, sl
 801ea2a:	f7ef fd57 	bl	800e4dc <__aeabi_i2d>
 801ea2e:	4632      	mov	r2, r6
 801ea30:	463b      	mov	r3, r7
 801ea32:	f7f0 f825 	bl	800ea80 <__aeabi_dcmpeq>
 801ea36:	b908      	cbnz	r0, 801ea3c <_dtoa_r+0x16c>
 801ea38:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea3c:	f1ba 0f16 	cmp.w	sl, #22
 801ea40:	d85a      	bhi.n	801eaf8 <_dtoa_r+0x228>
 801ea42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ea46:	496d      	ldr	r1, [pc, #436]	; (801ebfc <_dtoa_r+0x32c>)
 801ea48:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ea4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea50:	f7f0 f83e 	bl	800ead0 <__aeabi_dcmpgt>
 801ea54:	2800      	cmp	r0, #0
 801ea56:	d051      	beq.n	801eafc <_dtoa_r+0x22c>
 801ea58:	2300      	movs	r3, #0
 801ea5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea5e:	930d      	str	r3, [sp, #52]	; 0x34
 801ea60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ea62:	1b5d      	subs	r5, r3, r5
 801ea64:	1e6b      	subs	r3, r5, #1
 801ea66:	9307      	str	r3, [sp, #28]
 801ea68:	bf43      	ittte	mi
 801ea6a:	2300      	movmi	r3, #0
 801ea6c:	f1c5 0901 	rsbmi	r9, r5, #1
 801ea70:	9307      	strmi	r3, [sp, #28]
 801ea72:	f04f 0900 	movpl.w	r9, #0
 801ea76:	f1ba 0f00 	cmp.w	sl, #0
 801ea7a:	db41      	blt.n	801eb00 <_dtoa_r+0x230>
 801ea7c:	9b07      	ldr	r3, [sp, #28]
 801ea7e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801ea82:	4453      	add	r3, sl
 801ea84:	9307      	str	r3, [sp, #28]
 801ea86:	2300      	movs	r3, #0
 801ea88:	9308      	str	r3, [sp, #32]
 801ea8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea8c:	2b09      	cmp	r3, #9
 801ea8e:	f200 808f 	bhi.w	801ebb0 <_dtoa_r+0x2e0>
 801ea92:	2b05      	cmp	r3, #5
 801ea94:	bfc4      	itt	gt
 801ea96:	3b04      	subgt	r3, #4
 801ea98:	931e      	strgt	r3, [sp, #120]	; 0x78
 801ea9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea9c:	bfc8      	it	gt
 801ea9e:	2500      	movgt	r5, #0
 801eaa0:	f1a3 0302 	sub.w	r3, r3, #2
 801eaa4:	bfd8      	it	le
 801eaa6:	2501      	movle	r5, #1
 801eaa8:	2b03      	cmp	r3, #3
 801eaaa:	f200 808d 	bhi.w	801ebc8 <_dtoa_r+0x2f8>
 801eaae:	e8df f003 	tbb	[pc, r3]
 801eab2:	7d7b      	.short	0x7d7b
 801eab4:	6f2f      	.short	0x6f2f
 801eab6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801eaba:	441d      	add	r5, r3
 801eabc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801eac0:	2820      	cmp	r0, #32
 801eac2:	dd13      	ble.n	801eaec <_dtoa_r+0x21c>
 801eac4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801eac8:	9b02      	ldr	r3, [sp, #8]
 801eaca:	fa08 f800 	lsl.w	r8, r8, r0
 801eace:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801ead2:	fa23 f000 	lsr.w	r0, r3, r0
 801ead6:	ea48 0000 	orr.w	r0, r8, r0
 801eada:	f7ef fcef 	bl	800e4bc <__aeabi_ui2d>
 801eade:	2301      	movs	r3, #1
 801eae0:	4680      	mov	r8, r0
 801eae2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 801eae6:	3d01      	subs	r5, #1
 801eae8:	9310      	str	r3, [sp, #64]	; 0x40
 801eaea:	e771      	b.n	801e9d0 <_dtoa_r+0x100>
 801eaec:	9b02      	ldr	r3, [sp, #8]
 801eaee:	f1c0 0020 	rsb	r0, r0, #32
 801eaf2:	fa03 f000 	lsl.w	r0, r3, r0
 801eaf6:	e7f0      	b.n	801eada <_dtoa_r+0x20a>
 801eaf8:	2301      	movs	r3, #1
 801eafa:	e7b0      	b.n	801ea5e <_dtoa_r+0x18e>
 801eafc:	900d      	str	r0, [sp, #52]	; 0x34
 801eafe:	e7af      	b.n	801ea60 <_dtoa_r+0x190>
 801eb00:	f1ca 0300 	rsb	r3, sl, #0
 801eb04:	9308      	str	r3, [sp, #32]
 801eb06:	2300      	movs	r3, #0
 801eb08:	eba9 090a 	sub.w	r9, r9, sl
 801eb0c:	930c      	str	r3, [sp, #48]	; 0x30
 801eb0e:	e7bc      	b.n	801ea8a <_dtoa_r+0x1ba>
 801eb10:	2301      	movs	r3, #1
 801eb12:	9309      	str	r3, [sp, #36]	; 0x24
 801eb14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	dd74      	ble.n	801ec04 <_dtoa_r+0x334>
 801eb1a:	4698      	mov	r8, r3
 801eb1c:	9304      	str	r3, [sp, #16]
 801eb1e:	2200      	movs	r2, #0
 801eb20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801eb22:	6072      	str	r2, [r6, #4]
 801eb24:	2204      	movs	r2, #4
 801eb26:	f102 0014 	add.w	r0, r2, #20
 801eb2a:	4298      	cmp	r0, r3
 801eb2c:	6871      	ldr	r1, [r6, #4]
 801eb2e:	d96e      	bls.n	801ec0e <_dtoa_r+0x33e>
 801eb30:	4620      	mov	r0, r4
 801eb32:	f000 fd69 	bl	801f608 <_Balloc>
 801eb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eb38:	6030      	str	r0, [r6, #0]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f1b8 0f0e 	cmp.w	r8, #14
 801eb40:	9306      	str	r3, [sp, #24]
 801eb42:	f200 80ed 	bhi.w	801ed20 <_dtoa_r+0x450>
 801eb46:	2d00      	cmp	r5, #0
 801eb48:	f000 80ea 	beq.w	801ed20 <_dtoa_r+0x450>
 801eb4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eb50:	f1ba 0f00 	cmp.w	sl, #0
 801eb54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801eb58:	dd77      	ble.n	801ec4a <_dtoa_r+0x37a>
 801eb5a:	4a28      	ldr	r2, [pc, #160]	; (801ebfc <_dtoa_r+0x32c>)
 801eb5c:	f00a 030f 	and.w	r3, sl, #15
 801eb60:	ea4f 162a 	mov.w	r6, sl, asr #4
 801eb64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801eb68:	06f0      	lsls	r0, r6, #27
 801eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801eb72:	d568      	bpl.n	801ec46 <_dtoa_r+0x376>
 801eb74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801eb78:	4b21      	ldr	r3, [pc, #132]	; (801ec00 <_dtoa_r+0x330>)
 801eb7a:	2503      	movs	r5, #3
 801eb7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801eb80:	f7ef fe40 	bl	800e804 <__aeabi_ddiv>
 801eb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb88:	f006 060f 	and.w	r6, r6, #15
 801eb8c:	4f1c      	ldr	r7, [pc, #112]	; (801ec00 <_dtoa_r+0x330>)
 801eb8e:	e04f      	b.n	801ec30 <_dtoa_r+0x360>
 801eb90:	2301      	movs	r3, #1
 801eb92:	9309      	str	r3, [sp, #36]	; 0x24
 801eb94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eb96:	4453      	add	r3, sl
 801eb98:	f103 0801 	add.w	r8, r3, #1
 801eb9c:	9304      	str	r3, [sp, #16]
 801eb9e:	4643      	mov	r3, r8
 801eba0:	2b01      	cmp	r3, #1
 801eba2:	bfb8      	it	lt
 801eba4:	2301      	movlt	r3, #1
 801eba6:	e7ba      	b.n	801eb1e <_dtoa_r+0x24e>
 801eba8:	2300      	movs	r3, #0
 801ebaa:	e7b2      	b.n	801eb12 <_dtoa_r+0x242>
 801ebac:	2300      	movs	r3, #0
 801ebae:	e7f0      	b.n	801eb92 <_dtoa_r+0x2c2>
 801ebb0:	2501      	movs	r5, #1
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	9509      	str	r5, [sp, #36]	; 0x24
 801ebb6:	931e      	str	r3, [sp, #120]	; 0x78
 801ebb8:	f04f 33ff 	mov.w	r3, #4294967295
 801ebbc:	2200      	movs	r2, #0
 801ebbe:	9304      	str	r3, [sp, #16]
 801ebc0:	4698      	mov	r8, r3
 801ebc2:	2312      	movs	r3, #18
 801ebc4:	921f      	str	r2, [sp, #124]	; 0x7c
 801ebc6:	e7aa      	b.n	801eb1e <_dtoa_r+0x24e>
 801ebc8:	2301      	movs	r3, #1
 801ebca:	9309      	str	r3, [sp, #36]	; 0x24
 801ebcc:	e7f4      	b.n	801ebb8 <_dtoa_r+0x2e8>
 801ebce:	bf00      	nop
 801ebd0:	636f4361 	.word	0x636f4361
 801ebd4:	3fd287a7 	.word	0x3fd287a7
 801ebd8:	8b60c8b3 	.word	0x8b60c8b3
 801ebdc:	3fc68a28 	.word	0x3fc68a28
 801ebe0:	509f79fb 	.word	0x509f79fb
 801ebe4:	3fd34413 	.word	0x3fd34413
 801ebe8:	7ff00000 	.word	0x7ff00000
 801ebec:	08020535 	.word	0x08020535
 801ebf0:	0802052c 	.word	0x0802052c
 801ebf4:	08020509 	.word	0x08020509
 801ebf8:	3ff80000 	.word	0x3ff80000
 801ebfc:	080205c8 	.word	0x080205c8
 801ec00:	080205a0 	.word	0x080205a0
 801ec04:	2301      	movs	r3, #1
 801ec06:	9304      	str	r3, [sp, #16]
 801ec08:	4698      	mov	r8, r3
 801ec0a:	461a      	mov	r2, r3
 801ec0c:	e7da      	b.n	801ebc4 <_dtoa_r+0x2f4>
 801ec0e:	3101      	adds	r1, #1
 801ec10:	6071      	str	r1, [r6, #4]
 801ec12:	0052      	lsls	r2, r2, #1
 801ec14:	e787      	b.n	801eb26 <_dtoa_r+0x256>
 801ec16:	07f1      	lsls	r1, r6, #31
 801ec18:	d508      	bpl.n	801ec2c <_dtoa_r+0x35c>
 801ec1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec22:	f7ef fcc5 	bl	800e5b0 <__aeabi_dmul>
 801ec26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ec2a:	3501      	adds	r5, #1
 801ec2c:	1076      	asrs	r6, r6, #1
 801ec2e:	3708      	adds	r7, #8
 801ec30:	2e00      	cmp	r6, #0
 801ec32:	d1f0      	bne.n	801ec16 <_dtoa_r+0x346>
 801ec34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ec38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec3c:	f7ef fde2 	bl	800e804 <__aeabi_ddiv>
 801ec40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec44:	e01b      	b.n	801ec7e <_dtoa_r+0x3ae>
 801ec46:	2502      	movs	r5, #2
 801ec48:	e7a0      	b.n	801eb8c <_dtoa_r+0x2bc>
 801ec4a:	f000 80a4 	beq.w	801ed96 <_dtoa_r+0x4c6>
 801ec4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801ec52:	f1ca 0600 	rsb	r6, sl, #0
 801ec56:	4ba0      	ldr	r3, [pc, #640]	; (801eed8 <_dtoa_r+0x608>)
 801ec58:	f006 020f 	and.w	r2, r6, #15
 801ec5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec64:	f7ef fca4 	bl	800e5b0 <__aeabi_dmul>
 801ec68:	2502      	movs	r5, #2
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec70:	4f9a      	ldr	r7, [pc, #616]	; (801eedc <_dtoa_r+0x60c>)
 801ec72:	1136      	asrs	r6, r6, #4
 801ec74:	2e00      	cmp	r6, #0
 801ec76:	f040 8083 	bne.w	801ed80 <_dtoa_r+0x4b0>
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d1e0      	bne.n	801ec40 <_dtoa_r+0x370>
 801ec7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	f000 808a 	beq.w	801ed9a <_dtoa_r+0x4ca>
 801ec86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ec8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ec8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec92:	2200      	movs	r2, #0
 801ec94:	4b92      	ldr	r3, [pc, #584]	; (801eee0 <_dtoa_r+0x610>)
 801ec96:	f7ef fefd 	bl	800ea94 <__aeabi_dcmplt>
 801ec9a:	2800      	cmp	r0, #0
 801ec9c:	d07d      	beq.n	801ed9a <_dtoa_r+0x4ca>
 801ec9e:	f1b8 0f00 	cmp.w	r8, #0
 801eca2:	d07a      	beq.n	801ed9a <_dtoa_r+0x4ca>
 801eca4:	9b04      	ldr	r3, [sp, #16]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	dd36      	ble.n	801ed18 <_dtoa_r+0x448>
 801ecaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ecae:	2200      	movs	r2, #0
 801ecb0:	4b8c      	ldr	r3, [pc, #560]	; (801eee4 <_dtoa_r+0x614>)
 801ecb2:	f7ef fc7d 	bl	800e5b0 <__aeabi_dmul>
 801ecb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecba:	9e04      	ldr	r6, [sp, #16]
 801ecbc:	f10a 37ff 	add.w	r7, sl, #4294967295
 801ecc0:	3501      	adds	r5, #1
 801ecc2:	4628      	mov	r0, r5
 801ecc4:	f7ef fc0a 	bl	800e4dc <__aeabi_i2d>
 801ecc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eccc:	f7ef fc70 	bl	800e5b0 <__aeabi_dmul>
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	4b85      	ldr	r3, [pc, #532]	; (801eee8 <_dtoa_r+0x618>)
 801ecd4:	f7ef fab6 	bl	800e244 <__adddf3>
 801ecd8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801ecdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ece0:	950b      	str	r5, [sp, #44]	; 0x2c
 801ece2:	2e00      	cmp	r6, #0
 801ece4:	d15c      	bne.n	801eda0 <_dtoa_r+0x4d0>
 801ece6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ecea:	2200      	movs	r2, #0
 801ecec:	4b7f      	ldr	r3, [pc, #508]	; (801eeec <_dtoa_r+0x61c>)
 801ecee:	f7ef faa7 	bl	800e240 <__aeabi_dsub>
 801ecf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecf4:	462b      	mov	r3, r5
 801ecf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecfa:	f7ef fee9 	bl	800ead0 <__aeabi_dcmpgt>
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	f040 8281 	bne.w	801f206 <_dtoa_r+0x936>
 801ed04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed0a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801ed0e:	f7ef fec1 	bl	800ea94 <__aeabi_dcmplt>
 801ed12:	2800      	cmp	r0, #0
 801ed14:	f040 8275 	bne.w	801f202 <_dtoa_r+0x932>
 801ed18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ed1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed22:	2b00      	cmp	r3, #0
 801ed24:	f2c0 814b 	blt.w	801efbe <_dtoa_r+0x6ee>
 801ed28:	f1ba 0f0e 	cmp.w	sl, #14
 801ed2c:	f300 8147 	bgt.w	801efbe <_dtoa_r+0x6ee>
 801ed30:	4b69      	ldr	r3, [pc, #420]	; (801eed8 <_dtoa_r+0x608>)
 801ed32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ed3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	f280 80d7 	bge.w	801eef4 <_dtoa_r+0x624>
 801ed46:	f1b8 0f00 	cmp.w	r8, #0
 801ed4a:	f300 80d3 	bgt.w	801eef4 <_dtoa_r+0x624>
 801ed4e:	f040 8257 	bne.w	801f200 <_dtoa_r+0x930>
 801ed52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ed56:	2200      	movs	r2, #0
 801ed58:	4b64      	ldr	r3, [pc, #400]	; (801eeec <_dtoa_r+0x61c>)
 801ed5a:	f7ef fc29 	bl	800e5b0 <__aeabi_dmul>
 801ed5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed62:	f7ef feab 	bl	800eabc <__aeabi_dcmpge>
 801ed66:	4646      	mov	r6, r8
 801ed68:	4647      	mov	r7, r8
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	f040 822d 	bne.w	801f1ca <_dtoa_r+0x8fa>
 801ed70:	9b06      	ldr	r3, [sp, #24]
 801ed72:	9a06      	ldr	r2, [sp, #24]
 801ed74:	1c5d      	adds	r5, r3, #1
 801ed76:	2331      	movs	r3, #49	; 0x31
 801ed78:	f10a 0a01 	add.w	sl, sl, #1
 801ed7c:	7013      	strb	r3, [r2, #0]
 801ed7e:	e228      	b.n	801f1d2 <_dtoa_r+0x902>
 801ed80:	07f2      	lsls	r2, r6, #31
 801ed82:	d505      	bpl.n	801ed90 <_dtoa_r+0x4c0>
 801ed84:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed88:	f7ef fc12 	bl	800e5b0 <__aeabi_dmul>
 801ed8c:	2301      	movs	r3, #1
 801ed8e:	3501      	adds	r5, #1
 801ed90:	1076      	asrs	r6, r6, #1
 801ed92:	3708      	adds	r7, #8
 801ed94:	e76e      	b.n	801ec74 <_dtoa_r+0x3a4>
 801ed96:	2502      	movs	r5, #2
 801ed98:	e771      	b.n	801ec7e <_dtoa_r+0x3ae>
 801ed9a:	4657      	mov	r7, sl
 801ed9c:	4646      	mov	r6, r8
 801ed9e:	e790      	b.n	801ecc2 <_dtoa_r+0x3f2>
 801eda0:	4b4d      	ldr	r3, [pc, #308]	; (801eed8 <_dtoa_r+0x608>)
 801eda2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801eda6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801edaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edac:	2b00      	cmp	r3, #0
 801edae:	d048      	beq.n	801ee42 <_dtoa_r+0x572>
 801edb0:	4602      	mov	r2, r0
 801edb2:	460b      	mov	r3, r1
 801edb4:	2000      	movs	r0, #0
 801edb6:	494e      	ldr	r1, [pc, #312]	; (801eef0 <_dtoa_r+0x620>)
 801edb8:	f7ef fd24 	bl	800e804 <__aeabi_ddiv>
 801edbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801edc0:	f7ef fa3e 	bl	800e240 <__aeabi_dsub>
 801edc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801edc8:	9d06      	ldr	r5, [sp, #24]
 801edca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edce:	f7ef fe9f 	bl	800eb10 <__aeabi_d2iz>
 801edd2:	9011      	str	r0, [sp, #68]	; 0x44
 801edd4:	f7ef fb82 	bl	800e4dc <__aeabi_i2d>
 801edd8:	4602      	mov	r2, r0
 801edda:	460b      	mov	r3, r1
 801eddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ede0:	f7ef fa2e 	bl	800e240 <__aeabi_dsub>
 801ede4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ede6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edea:	3330      	adds	r3, #48	; 0x30
 801edec:	f805 3b01 	strb.w	r3, [r5], #1
 801edf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801edf4:	f7ef fe4e 	bl	800ea94 <__aeabi_dcmplt>
 801edf8:	2800      	cmp	r0, #0
 801edfa:	d163      	bne.n	801eec4 <_dtoa_r+0x5f4>
 801edfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ee00:	2000      	movs	r0, #0
 801ee02:	4937      	ldr	r1, [pc, #220]	; (801eee0 <_dtoa_r+0x610>)
 801ee04:	f7ef fa1c 	bl	800e240 <__aeabi_dsub>
 801ee08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ee0c:	f7ef fe42 	bl	800ea94 <__aeabi_dcmplt>
 801ee10:	2800      	cmp	r0, #0
 801ee12:	f040 80b5 	bne.w	801ef80 <_dtoa_r+0x6b0>
 801ee16:	9b06      	ldr	r3, [sp, #24]
 801ee18:	1aeb      	subs	r3, r5, r3
 801ee1a:	429e      	cmp	r6, r3
 801ee1c:	f77f af7c 	ble.w	801ed18 <_dtoa_r+0x448>
 801ee20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee24:	2200      	movs	r2, #0
 801ee26:	4b2f      	ldr	r3, [pc, #188]	; (801eee4 <_dtoa_r+0x614>)
 801ee28:	f7ef fbc2 	bl	800e5b0 <__aeabi_dmul>
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ee32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee36:	4b2b      	ldr	r3, [pc, #172]	; (801eee4 <_dtoa_r+0x614>)
 801ee38:	f7ef fbba 	bl	800e5b0 <__aeabi_dmul>
 801ee3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee40:	e7c3      	b.n	801edca <_dtoa_r+0x4fa>
 801ee42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ee46:	f7ef fbb3 	bl	800e5b0 <__aeabi_dmul>
 801ee4a:	9b06      	ldr	r3, [sp, #24]
 801ee4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ee50:	199d      	adds	r5, r3, r6
 801ee52:	461e      	mov	r6, r3
 801ee54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee58:	f7ef fe5a 	bl	800eb10 <__aeabi_d2iz>
 801ee5c:	9011      	str	r0, [sp, #68]	; 0x44
 801ee5e:	f7ef fb3d 	bl	800e4dc <__aeabi_i2d>
 801ee62:	4602      	mov	r2, r0
 801ee64:	460b      	mov	r3, r1
 801ee66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee6a:	f7ef f9e9 	bl	800e240 <__aeabi_dsub>
 801ee6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ee70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee74:	3330      	adds	r3, #48	; 0x30
 801ee76:	f806 3b01 	strb.w	r3, [r6], #1
 801ee7a:	42ae      	cmp	r6, r5
 801ee7c:	f04f 0200 	mov.w	r2, #0
 801ee80:	d124      	bne.n	801eecc <_dtoa_r+0x5fc>
 801ee82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee86:	4b1a      	ldr	r3, [pc, #104]	; (801eef0 <_dtoa_r+0x620>)
 801ee88:	f7ef f9dc 	bl	800e244 <__adddf3>
 801ee8c:	4602      	mov	r2, r0
 801ee8e:	460b      	mov	r3, r1
 801ee90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee94:	f7ef fe1c 	bl	800ead0 <__aeabi_dcmpgt>
 801ee98:	2800      	cmp	r0, #0
 801ee9a:	d171      	bne.n	801ef80 <_dtoa_r+0x6b0>
 801ee9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eea0:	2000      	movs	r0, #0
 801eea2:	4913      	ldr	r1, [pc, #76]	; (801eef0 <_dtoa_r+0x620>)
 801eea4:	f7ef f9cc 	bl	800e240 <__aeabi_dsub>
 801eea8:	4602      	mov	r2, r0
 801eeaa:	460b      	mov	r3, r1
 801eeac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eeb0:	f7ef fdf0 	bl	800ea94 <__aeabi_dcmplt>
 801eeb4:	2800      	cmp	r0, #0
 801eeb6:	f43f af2f 	beq.w	801ed18 <_dtoa_r+0x448>
 801eeba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801eebe:	1e6a      	subs	r2, r5, #1
 801eec0:	2b30      	cmp	r3, #48	; 0x30
 801eec2:	d001      	beq.n	801eec8 <_dtoa_r+0x5f8>
 801eec4:	46ba      	mov	sl, r7
 801eec6:	e04a      	b.n	801ef5e <_dtoa_r+0x68e>
 801eec8:	4615      	mov	r5, r2
 801eeca:	e7f6      	b.n	801eeba <_dtoa_r+0x5ea>
 801eecc:	4b05      	ldr	r3, [pc, #20]	; (801eee4 <_dtoa_r+0x614>)
 801eece:	f7ef fb6f 	bl	800e5b0 <__aeabi_dmul>
 801eed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eed6:	e7bd      	b.n	801ee54 <_dtoa_r+0x584>
 801eed8:	080205c8 	.word	0x080205c8
 801eedc:	080205a0 	.word	0x080205a0
 801eee0:	3ff00000 	.word	0x3ff00000
 801eee4:	40240000 	.word	0x40240000
 801eee8:	401c0000 	.word	0x401c0000
 801eeec:	40140000 	.word	0x40140000
 801eef0:	3fe00000 	.word	0x3fe00000
 801eef4:	9d06      	ldr	r5, [sp, #24]
 801eef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eefa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801eefe:	4630      	mov	r0, r6
 801ef00:	4639      	mov	r1, r7
 801ef02:	f7ef fc7f 	bl	800e804 <__aeabi_ddiv>
 801ef06:	f7ef fe03 	bl	800eb10 <__aeabi_d2iz>
 801ef0a:	4681      	mov	r9, r0
 801ef0c:	f7ef fae6 	bl	800e4dc <__aeabi_i2d>
 801ef10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ef14:	f7ef fb4c 	bl	800e5b0 <__aeabi_dmul>
 801ef18:	4602      	mov	r2, r0
 801ef1a:	460b      	mov	r3, r1
 801ef1c:	4630      	mov	r0, r6
 801ef1e:	4639      	mov	r1, r7
 801ef20:	f7ef f98e 	bl	800e240 <__aeabi_dsub>
 801ef24:	f109 0630 	add.w	r6, r9, #48	; 0x30
 801ef28:	f805 6b01 	strb.w	r6, [r5], #1
 801ef2c:	9e06      	ldr	r6, [sp, #24]
 801ef2e:	4602      	mov	r2, r0
 801ef30:	1bae      	subs	r6, r5, r6
 801ef32:	45b0      	cmp	r8, r6
 801ef34:	460b      	mov	r3, r1
 801ef36:	d135      	bne.n	801efa4 <_dtoa_r+0x6d4>
 801ef38:	f7ef f984 	bl	800e244 <__adddf3>
 801ef3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ef40:	4606      	mov	r6, r0
 801ef42:	460f      	mov	r7, r1
 801ef44:	f7ef fdc4 	bl	800ead0 <__aeabi_dcmpgt>
 801ef48:	b9c8      	cbnz	r0, 801ef7e <_dtoa_r+0x6ae>
 801ef4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ef4e:	4630      	mov	r0, r6
 801ef50:	4639      	mov	r1, r7
 801ef52:	f7ef fd95 	bl	800ea80 <__aeabi_dcmpeq>
 801ef56:	b110      	cbz	r0, 801ef5e <_dtoa_r+0x68e>
 801ef58:	f019 0f01 	tst.w	r9, #1
 801ef5c:	d10f      	bne.n	801ef7e <_dtoa_r+0x6ae>
 801ef5e:	4659      	mov	r1, fp
 801ef60:	4620      	mov	r0, r4
 801ef62:	f000 fb85 	bl	801f670 <_Bfree>
 801ef66:	2300      	movs	r3, #0
 801ef68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ef6a:	702b      	strb	r3, [r5, #0]
 801ef6c:	f10a 0301 	add.w	r3, sl, #1
 801ef70:	6013      	str	r3, [r2, #0]
 801ef72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	f43f acf3 	beq.w	801e960 <_dtoa_r+0x90>
 801ef7a:	601d      	str	r5, [r3, #0]
 801ef7c:	e4f0      	b.n	801e960 <_dtoa_r+0x90>
 801ef7e:	4657      	mov	r7, sl
 801ef80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ef84:	1e6b      	subs	r3, r5, #1
 801ef86:	2a39      	cmp	r2, #57	; 0x39
 801ef88:	d106      	bne.n	801ef98 <_dtoa_r+0x6c8>
 801ef8a:	9a06      	ldr	r2, [sp, #24]
 801ef8c:	429a      	cmp	r2, r3
 801ef8e:	d107      	bne.n	801efa0 <_dtoa_r+0x6d0>
 801ef90:	2330      	movs	r3, #48	; 0x30
 801ef92:	7013      	strb	r3, [r2, #0]
 801ef94:	4613      	mov	r3, r2
 801ef96:	3701      	adds	r7, #1
 801ef98:	781a      	ldrb	r2, [r3, #0]
 801ef9a:	3201      	adds	r2, #1
 801ef9c:	701a      	strb	r2, [r3, #0]
 801ef9e:	e791      	b.n	801eec4 <_dtoa_r+0x5f4>
 801efa0:	461d      	mov	r5, r3
 801efa2:	e7ed      	b.n	801ef80 <_dtoa_r+0x6b0>
 801efa4:	2200      	movs	r2, #0
 801efa6:	4b99      	ldr	r3, [pc, #612]	; (801f20c <_dtoa_r+0x93c>)
 801efa8:	f7ef fb02 	bl	800e5b0 <__aeabi_dmul>
 801efac:	2200      	movs	r2, #0
 801efae:	2300      	movs	r3, #0
 801efb0:	4606      	mov	r6, r0
 801efb2:	460f      	mov	r7, r1
 801efb4:	f7ef fd64 	bl	800ea80 <__aeabi_dcmpeq>
 801efb8:	2800      	cmp	r0, #0
 801efba:	d09e      	beq.n	801eefa <_dtoa_r+0x62a>
 801efbc:	e7cf      	b.n	801ef5e <_dtoa_r+0x68e>
 801efbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efc0:	2a00      	cmp	r2, #0
 801efc2:	f000 8088 	beq.w	801f0d6 <_dtoa_r+0x806>
 801efc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801efc8:	2a01      	cmp	r2, #1
 801efca:	dc6d      	bgt.n	801f0a8 <_dtoa_r+0x7d8>
 801efcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801efce:	2a00      	cmp	r2, #0
 801efd0:	d066      	beq.n	801f0a0 <_dtoa_r+0x7d0>
 801efd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801efd6:	464d      	mov	r5, r9
 801efd8:	9e08      	ldr	r6, [sp, #32]
 801efda:	9a07      	ldr	r2, [sp, #28]
 801efdc:	2101      	movs	r1, #1
 801efde:	441a      	add	r2, r3
 801efe0:	4620      	mov	r0, r4
 801efe2:	4499      	add	r9, r3
 801efe4:	9207      	str	r2, [sp, #28]
 801efe6:	f000 fbe3 	bl	801f7b0 <__i2b>
 801efea:	4607      	mov	r7, r0
 801efec:	2d00      	cmp	r5, #0
 801efee:	dd0b      	ble.n	801f008 <_dtoa_r+0x738>
 801eff0:	9b07      	ldr	r3, [sp, #28]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	dd08      	ble.n	801f008 <_dtoa_r+0x738>
 801eff6:	42ab      	cmp	r3, r5
 801eff8:	bfa8      	it	ge
 801effa:	462b      	movge	r3, r5
 801effc:	9a07      	ldr	r2, [sp, #28]
 801effe:	eba9 0903 	sub.w	r9, r9, r3
 801f002:	1aed      	subs	r5, r5, r3
 801f004:	1ad3      	subs	r3, r2, r3
 801f006:	9307      	str	r3, [sp, #28]
 801f008:	9b08      	ldr	r3, [sp, #32]
 801f00a:	b1eb      	cbz	r3, 801f048 <_dtoa_r+0x778>
 801f00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d065      	beq.n	801f0de <_dtoa_r+0x80e>
 801f012:	b18e      	cbz	r6, 801f038 <_dtoa_r+0x768>
 801f014:	4639      	mov	r1, r7
 801f016:	4632      	mov	r2, r6
 801f018:	4620      	mov	r0, r4
 801f01a:	f000 fc67 	bl	801f8ec <__pow5mult>
 801f01e:	465a      	mov	r2, fp
 801f020:	4601      	mov	r1, r0
 801f022:	4607      	mov	r7, r0
 801f024:	4620      	mov	r0, r4
 801f026:	f000 fbcc 	bl	801f7c2 <__multiply>
 801f02a:	4659      	mov	r1, fp
 801f02c:	900a      	str	r0, [sp, #40]	; 0x28
 801f02e:	4620      	mov	r0, r4
 801f030:	f000 fb1e 	bl	801f670 <_Bfree>
 801f034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f036:	469b      	mov	fp, r3
 801f038:	9b08      	ldr	r3, [sp, #32]
 801f03a:	1b9a      	subs	r2, r3, r6
 801f03c:	d004      	beq.n	801f048 <_dtoa_r+0x778>
 801f03e:	4659      	mov	r1, fp
 801f040:	4620      	mov	r0, r4
 801f042:	f000 fc53 	bl	801f8ec <__pow5mult>
 801f046:	4683      	mov	fp, r0
 801f048:	2101      	movs	r1, #1
 801f04a:	4620      	mov	r0, r4
 801f04c:	f000 fbb0 	bl	801f7b0 <__i2b>
 801f050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f052:	4606      	mov	r6, r0
 801f054:	2b00      	cmp	r3, #0
 801f056:	f000 81c6 	beq.w	801f3e6 <_dtoa_r+0xb16>
 801f05a:	461a      	mov	r2, r3
 801f05c:	4601      	mov	r1, r0
 801f05e:	4620      	mov	r0, r4
 801f060:	f000 fc44 	bl	801f8ec <__pow5mult>
 801f064:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f066:	4606      	mov	r6, r0
 801f068:	2b01      	cmp	r3, #1
 801f06a:	dc3e      	bgt.n	801f0ea <_dtoa_r+0x81a>
 801f06c:	9b02      	ldr	r3, [sp, #8]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d137      	bne.n	801f0e2 <_dtoa_r+0x812>
 801f072:	9b03      	ldr	r3, [sp, #12]
 801f074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d134      	bne.n	801f0e6 <_dtoa_r+0x816>
 801f07c:	9b03      	ldr	r3, [sp, #12]
 801f07e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f082:	0d1b      	lsrs	r3, r3, #20
 801f084:	051b      	lsls	r3, r3, #20
 801f086:	b12b      	cbz	r3, 801f094 <_dtoa_r+0x7c4>
 801f088:	9b07      	ldr	r3, [sp, #28]
 801f08a:	f109 0901 	add.w	r9, r9, #1
 801f08e:	3301      	adds	r3, #1
 801f090:	9307      	str	r3, [sp, #28]
 801f092:	2301      	movs	r3, #1
 801f094:	9308      	str	r3, [sp, #32]
 801f096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d128      	bne.n	801f0ee <_dtoa_r+0x81e>
 801f09c:	2001      	movs	r0, #1
 801f09e:	e02e      	b.n	801f0fe <_dtoa_r+0x82e>
 801f0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f0a6:	e796      	b.n	801efd6 <_dtoa_r+0x706>
 801f0a8:	9b08      	ldr	r3, [sp, #32]
 801f0aa:	f108 36ff 	add.w	r6, r8, #4294967295
 801f0ae:	42b3      	cmp	r3, r6
 801f0b0:	bfb7      	itett	lt
 801f0b2:	9b08      	ldrlt	r3, [sp, #32]
 801f0b4:	1b9e      	subge	r6, r3, r6
 801f0b6:	1af2      	sublt	r2, r6, r3
 801f0b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801f0ba:	bfbf      	itttt	lt
 801f0bc:	9608      	strlt	r6, [sp, #32]
 801f0be:	189b      	addlt	r3, r3, r2
 801f0c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 801f0c2:	2600      	movlt	r6, #0
 801f0c4:	f1b8 0f00 	cmp.w	r8, #0
 801f0c8:	bfb9      	ittee	lt
 801f0ca:	eba9 0508 	sublt.w	r5, r9, r8
 801f0ce:	2300      	movlt	r3, #0
 801f0d0:	464d      	movge	r5, r9
 801f0d2:	4643      	movge	r3, r8
 801f0d4:	e781      	b.n	801efda <_dtoa_r+0x70a>
 801f0d6:	9e08      	ldr	r6, [sp, #32]
 801f0d8:	464d      	mov	r5, r9
 801f0da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f0dc:	e786      	b.n	801efec <_dtoa_r+0x71c>
 801f0de:	9a08      	ldr	r2, [sp, #32]
 801f0e0:	e7ad      	b.n	801f03e <_dtoa_r+0x76e>
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	e7d6      	b.n	801f094 <_dtoa_r+0x7c4>
 801f0e6:	9b02      	ldr	r3, [sp, #8]
 801f0e8:	e7d4      	b.n	801f094 <_dtoa_r+0x7c4>
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	9308      	str	r3, [sp, #32]
 801f0ee:	6933      	ldr	r3, [r6, #16]
 801f0f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f0f4:	6918      	ldr	r0, [r3, #16]
 801f0f6:	f000 fb0d 	bl	801f714 <__hi0bits>
 801f0fa:	f1c0 0020 	rsb	r0, r0, #32
 801f0fe:	9b07      	ldr	r3, [sp, #28]
 801f100:	4418      	add	r0, r3
 801f102:	f010 001f 	ands.w	r0, r0, #31
 801f106:	d047      	beq.n	801f198 <_dtoa_r+0x8c8>
 801f108:	f1c0 0320 	rsb	r3, r0, #32
 801f10c:	2b04      	cmp	r3, #4
 801f10e:	dd3b      	ble.n	801f188 <_dtoa_r+0x8b8>
 801f110:	9b07      	ldr	r3, [sp, #28]
 801f112:	f1c0 001c 	rsb	r0, r0, #28
 801f116:	4481      	add	r9, r0
 801f118:	4405      	add	r5, r0
 801f11a:	4403      	add	r3, r0
 801f11c:	9307      	str	r3, [sp, #28]
 801f11e:	f1b9 0f00 	cmp.w	r9, #0
 801f122:	dd05      	ble.n	801f130 <_dtoa_r+0x860>
 801f124:	4659      	mov	r1, fp
 801f126:	464a      	mov	r2, r9
 801f128:	4620      	mov	r0, r4
 801f12a:	f000 fc2d 	bl	801f988 <__lshift>
 801f12e:	4683      	mov	fp, r0
 801f130:	9b07      	ldr	r3, [sp, #28]
 801f132:	2b00      	cmp	r3, #0
 801f134:	dd05      	ble.n	801f142 <_dtoa_r+0x872>
 801f136:	4631      	mov	r1, r6
 801f138:	461a      	mov	r2, r3
 801f13a:	4620      	mov	r0, r4
 801f13c:	f000 fc24 	bl	801f988 <__lshift>
 801f140:	4606      	mov	r6, r0
 801f142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f144:	b353      	cbz	r3, 801f19c <_dtoa_r+0x8cc>
 801f146:	4631      	mov	r1, r6
 801f148:	4658      	mov	r0, fp
 801f14a:	f000 fc71 	bl	801fa30 <__mcmp>
 801f14e:	2800      	cmp	r0, #0
 801f150:	da24      	bge.n	801f19c <_dtoa_r+0x8cc>
 801f152:	2300      	movs	r3, #0
 801f154:	4659      	mov	r1, fp
 801f156:	220a      	movs	r2, #10
 801f158:	4620      	mov	r0, r4
 801f15a:	f000 faa0 	bl	801f69e <__multadd>
 801f15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f160:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f164:	4683      	mov	fp, r0
 801f166:	2b00      	cmp	r3, #0
 801f168:	f000 8144 	beq.w	801f3f4 <_dtoa_r+0xb24>
 801f16c:	2300      	movs	r3, #0
 801f16e:	4639      	mov	r1, r7
 801f170:	220a      	movs	r2, #10
 801f172:	4620      	mov	r0, r4
 801f174:	f000 fa93 	bl	801f69e <__multadd>
 801f178:	9b04      	ldr	r3, [sp, #16]
 801f17a:	4607      	mov	r7, r0
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	dc4d      	bgt.n	801f21c <_dtoa_r+0x94c>
 801f180:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f182:	2b02      	cmp	r3, #2
 801f184:	dd4a      	ble.n	801f21c <_dtoa_r+0x94c>
 801f186:	e011      	b.n	801f1ac <_dtoa_r+0x8dc>
 801f188:	d0c9      	beq.n	801f11e <_dtoa_r+0x84e>
 801f18a:	9a07      	ldr	r2, [sp, #28]
 801f18c:	331c      	adds	r3, #28
 801f18e:	441a      	add	r2, r3
 801f190:	4499      	add	r9, r3
 801f192:	441d      	add	r5, r3
 801f194:	4613      	mov	r3, r2
 801f196:	e7c1      	b.n	801f11c <_dtoa_r+0x84c>
 801f198:	4603      	mov	r3, r0
 801f19a:	e7f6      	b.n	801f18a <_dtoa_r+0x8ba>
 801f19c:	f1b8 0f00 	cmp.w	r8, #0
 801f1a0:	dc36      	bgt.n	801f210 <_dtoa_r+0x940>
 801f1a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f1a4:	2b02      	cmp	r3, #2
 801f1a6:	dd33      	ble.n	801f210 <_dtoa_r+0x940>
 801f1a8:	f8cd 8010 	str.w	r8, [sp, #16]
 801f1ac:	9b04      	ldr	r3, [sp, #16]
 801f1ae:	b963      	cbnz	r3, 801f1ca <_dtoa_r+0x8fa>
 801f1b0:	4631      	mov	r1, r6
 801f1b2:	2205      	movs	r2, #5
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f000 fa72 	bl	801f69e <__multadd>
 801f1ba:	4601      	mov	r1, r0
 801f1bc:	4606      	mov	r6, r0
 801f1be:	4658      	mov	r0, fp
 801f1c0:	f000 fc36 	bl	801fa30 <__mcmp>
 801f1c4:	2800      	cmp	r0, #0
 801f1c6:	f73f add3 	bgt.w	801ed70 <_dtoa_r+0x4a0>
 801f1ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f1cc:	9d06      	ldr	r5, [sp, #24]
 801f1ce:	ea6f 0a03 	mvn.w	sl, r3
 801f1d2:	f04f 0900 	mov.w	r9, #0
 801f1d6:	4631      	mov	r1, r6
 801f1d8:	4620      	mov	r0, r4
 801f1da:	f000 fa49 	bl	801f670 <_Bfree>
 801f1de:	2f00      	cmp	r7, #0
 801f1e0:	f43f aebd 	beq.w	801ef5e <_dtoa_r+0x68e>
 801f1e4:	f1b9 0f00 	cmp.w	r9, #0
 801f1e8:	d005      	beq.n	801f1f6 <_dtoa_r+0x926>
 801f1ea:	45b9      	cmp	r9, r7
 801f1ec:	d003      	beq.n	801f1f6 <_dtoa_r+0x926>
 801f1ee:	4649      	mov	r1, r9
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	f000 fa3d 	bl	801f670 <_Bfree>
 801f1f6:	4639      	mov	r1, r7
 801f1f8:	4620      	mov	r0, r4
 801f1fa:	f000 fa39 	bl	801f670 <_Bfree>
 801f1fe:	e6ae      	b.n	801ef5e <_dtoa_r+0x68e>
 801f200:	2600      	movs	r6, #0
 801f202:	4637      	mov	r7, r6
 801f204:	e7e1      	b.n	801f1ca <_dtoa_r+0x8fa>
 801f206:	46ba      	mov	sl, r7
 801f208:	4637      	mov	r7, r6
 801f20a:	e5b1      	b.n	801ed70 <_dtoa_r+0x4a0>
 801f20c:	40240000 	.word	0x40240000
 801f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f212:	f8cd 8010 	str.w	r8, [sp, #16]
 801f216:	2b00      	cmp	r3, #0
 801f218:	f000 80f3 	beq.w	801f402 <_dtoa_r+0xb32>
 801f21c:	2d00      	cmp	r5, #0
 801f21e:	dd05      	ble.n	801f22c <_dtoa_r+0x95c>
 801f220:	4639      	mov	r1, r7
 801f222:	462a      	mov	r2, r5
 801f224:	4620      	mov	r0, r4
 801f226:	f000 fbaf 	bl	801f988 <__lshift>
 801f22a:	4607      	mov	r7, r0
 801f22c:	9b08      	ldr	r3, [sp, #32]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d04c      	beq.n	801f2cc <_dtoa_r+0x9fc>
 801f232:	6879      	ldr	r1, [r7, #4]
 801f234:	4620      	mov	r0, r4
 801f236:	f000 f9e7 	bl	801f608 <_Balloc>
 801f23a:	4605      	mov	r5, r0
 801f23c:	693a      	ldr	r2, [r7, #16]
 801f23e:	f107 010c 	add.w	r1, r7, #12
 801f242:	3202      	adds	r2, #2
 801f244:	0092      	lsls	r2, r2, #2
 801f246:	300c      	adds	r0, #12
 801f248:	f7fe fd7a 	bl	801dd40 <memcpy>
 801f24c:	2201      	movs	r2, #1
 801f24e:	4629      	mov	r1, r5
 801f250:	4620      	mov	r0, r4
 801f252:	f000 fb99 	bl	801f988 <__lshift>
 801f256:	46b9      	mov	r9, r7
 801f258:	4607      	mov	r7, r0
 801f25a:	9b06      	ldr	r3, [sp, #24]
 801f25c:	9307      	str	r3, [sp, #28]
 801f25e:	9b02      	ldr	r3, [sp, #8]
 801f260:	f003 0301 	and.w	r3, r3, #1
 801f264:	9308      	str	r3, [sp, #32]
 801f266:	4631      	mov	r1, r6
 801f268:	4658      	mov	r0, fp
 801f26a:	f7ff faa3 	bl	801e7b4 <quorem>
 801f26e:	4649      	mov	r1, r9
 801f270:	4605      	mov	r5, r0
 801f272:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f276:	4658      	mov	r0, fp
 801f278:	f000 fbda 	bl	801fa30 <__mcmp>
 801f27c:	463a      	mov	r2, r7
 801f27e:	9002      	str	r0, [sp, #8]
 801f280:	4631      	mov	r1, r6
 801f282:	4620      	mov	r0, r4
 801f284:	f000 fbee 	bl	801fa64 <__mdiff>
 801f288:	68c3      	ldr	r3, [r0, #12]
 801f28a:	4602      	mov	r2, r0
 801f28c:	bb03      	cbnz	r3, 801f2d0 <_dtoa_r+0xa00>
 801f28e:	4601      	mov	r1, r0
 801f290:	9009      	str	r0, [sp, #36]	; 0x24
 801f292:	4658      	mov	r0, fp
 801f294:	f000 fbcc 	bl	801fa30 <__mcmp>
 801f298:	4603      	mov	r3, r0
 801f29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f29c:	4611      	mov	r1, r2
 801f29e:	4620      	mov	r0, r4
 801f2a0:	9309      	str	r3, [sp, #36]	; 0x24
 801f2a2:	f000 f9e5 	bl	801f670 <_Bfree>
 801f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2a8:	b9a3      	cbnz	r3, 801f2d4 <_dtoa_r+0xa04>
 801f2aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f2ac:	b992      	cbnz	r2, 801f2d4 <_dtoa_r+0xa04>
 801f2ae:	9a08      	ldr	r2, [sp, #32]
 801f2b0:	b982      	cbnz	r2, 801f2d4 <_dtoa_r+0xa04>
 801f2b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f2b6:	d029      	beq.n	801f30c <_dtoa_r+0xa3c>
 801f2b8:	9b02      	ldr	r3, [sp, #8]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	dd01      	ble.n	801f2c2 <_dtoa_r+0x9f2>
 801f2be:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801f2c2:	9b07      	ldr	r3, [sp, #28]
 801f2c4:	1c5d      	adds	r5, r3, #1
 801f2c6:	f883 8000 	strb.w	r8, [r3]
 801f2ca:	e784      	b.n	801f1d6 <_dtoa_r+0x906>
 801f2cc:	4638      	mov	r0, r7
 801f2ce:	e7c2      	b.n	801f256 <_dtoa_r+0x986>
 801f2d0:	2301      	movs	r3, #1
 801f2d2:	e7e3      	b.n	801f29c <_dtoa_r+0x9cc>
 801f2d4:	9a02      	ldr	r2, [sp, #8]
 801f2d6:	2a00      	cmp	r2, #0
 801f2d8:	db04      	blt.n	801f2e4 <_dtoa_r+0xa14>
 801f2da:	d123      	bne.n	801f324 <_dtoa_r+0xa54>
 801f2dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f2de:	bb0a      	cbnz	r2, 801f324 <_dtoa_r+0xa54>
 801f2e0:	9a08      	ldr	r2, [sp, #32]
 801f2e2:	b9fa      	cbnz	r2, 801f324 <_dtoa_r+0xa54>
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	ddec      	ble.n	801f2c2 <_dtoa_r+0x9f2>
 801f2e8:	4659      	mov	r1, fp
 801f2ea:	2201      	movs	r2, #1
 801f2ec:	4620      	mov	r0, r4
 801f2ee:	f000 fb4b 	bl	801f988 <__lshift>
 801f2f2:	4631      	mov	r1, r6
 801f2f4:	4683      	mov	fp, r0
 801f2f6:	f000 fb9b 	bl	801fa30 <__mcmp>
 801f2fa:	2800      	cmp	r0, #0
 801f2fc:	dc03      	bgt.n	801f306 <_dtoa_r+0xa36>
 801f2fe:	d1e0      	bne.n	801f2c2 <_dtoa_r+0x9f2>
 801f300:	f018 0f01 	tst.w	r8, #1
 801f304:	d0dd      	beq.n	801f2c2 <_dtoa_r+0x9f2>
 801f306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f30a:	d1d8      	bne.n	801f2be <_dtoa_r+0x9ee>
 801f30c:	9b07      	ldr	r3, [sp, #28]
 801f30e:	9a07      	ldr	r2, [sp, #28]
 801f310:	1c5d      	adds	r5, r3, #1
 801f312:	2339      	movs	r3, #57	; 0x39
 801f314:	7013      	strb	r3, [r2, #0]
 801f316:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f31a:	1e6a      	subs	r2, r5, #1
 801f31c:	2b39      	cmp	r3, #57	; 0x39
 801f31e:	d04d      	beq.n	801f3bc <_dtoa_r+0xaec>
 801f320:	3301      	adds	r3, #1
 801f322:	e052      	b.n	801f3ca <_dtoa_r+0xafa>
 801f324:	9a07      	ldr	r2, [sp, #28]
 801f326:	2b00      	cmp	r3, #0
 801f328:	f102 0501 	add.w	r5, r2, #1
 801f32c:	dd06      	ble.n	801f33c <_dtoa_r+0xa6c>
 801f32e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f332:	d0eb      	beq.n	801f30c <_dtoa_r+0xa3c>
 801f334:	f108 0801 	add.w	r8, r8, #1
 801f338:	9b07      	ldr	r3, [sp, #28]
 801f33a:	e7c4      	b.n	801f2c6 <_dtoa_r+0x9f6>
 801f33c:	9b06      	ldr	r3, [sp, #24]
 801f33e:	9a04      	ldr	r2, [sp, #16]
 801f340:	1aeb      	subs	r3, r5, r3
 801f342:	4293      	cmp	r3, r2
 801f344:	f805 8c01 	strb.w	r8, [r5, #-1]
 801f348:	d021      	beq.n	801f38e <_dtoa_r+0xabe>
 801f34a:	4659      	mov	r1, fp
 801f34c:	2300      	movs	r3, #0
 801f34e:	220a      	movs	r2, #10
 801f350:	4620      	mov	r0, r4
 801f352:	f000 f9a4 	bl	801f69e <__multadd>
 801f356:	45b9      	cmp	r9, r7
 801f358:	4683      	mov	fp, r0
 801f35a:	f04f 0300 	mov.w	r3, #0
 801f35e:	f04f 020a 	mov.w	r2, #10
 801f362:	4649      	mov	r1, r9
 801f364:	4620      	mov	r0, r4
 801f366:	d105      	bne.n	801f374 <_dtoa_r+0xaa4>
 801f368:	f000 f999 	bl	801f69e <__multadd>
 801f36c:	4681      	mov	r9, r0
 801f36e:	4607      	mov	r7, r0
 801f370:	9507      	str	r5, [sp, #28]
 801f372:	e778      	b.n	801f266 <_dtoa_r+0x996>
 801f374:	f000 f993 	bl	801f69e <__multadd>
 801f378:	4639      	mov	r1, r7
 801f37a:	4681      	mov	r9, r0
 801f37c:	2300      	movs	r3, #0
 801f37e:	220a      	movs	r2, #10
 801f380:	4620      	mov	r0, r4
 801f382:	f000 f98c 	bl	801f69e <__multadd>
 801f386:	4607      	mov	r7, r0
 801f388:	e7f2      	b.n	801f370 <_dtoa_r+0xaa0>
 801f38a:	f04f 0900 	mov.w	r9, #0
 801f38e:	4659      	mov	r1, fp
 801f390:	2201      	movs	r2, #1
 801f392:	4620      	mov	r0, r4
 801f394:	f000 faf8 	bl	801f988 <__lshift>
 801f398:	4631      	mov	r1, r6
 801f39a:	4683      	mov	fp, r0
 801f39c:	f000 fb48 	bl	801fa30 <__mcmp>
 801f3a0:	2800      	cmp	r0, #0
 801f3a2:	dcb8      	bgt.n	801f316 <_dtoa_r+0xa46>
 801f3a4:	d102      	bne.n	801f3ac <_dtoa_r+0xadc>
 801f3a6:	f018 0f01 	tst.w	r8, #1
 801f3aa:	d1b4      	bne.n	801f316 <_dtoa_r+0xa46>
 801f3ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f3b0:	1e6a      	subs	r2, r5, #1
 801f3b2:	2b30      	cmp	r3, #48	; 0x30
 801f3b4:	f47f af0f 	bne.w	801f1d6 <_dtoa_r+0x906>
 801f3b8:	4615      	mov	r5, r2
 801f3ba:	e7f7      	b.n	801f3ac <_dtoa_r+0xadc>
 801f3bc:	9b06      	ldr	r3, [sp, #24]
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	d105      	bne.n	801f3ce <_dtoa_r+0xafe>
 801f3c2:	2331      	movs	r3, #49	; 0x31
 801f3c4:	9a06      	ldr	r2, [sp, #24]
 801f3c6:	f10a 0a01 	add.w	sl, sl, #1
 801f3ca:	7013      	strb	r3, [r2, #0]
 801f3cc:	e703      	b.n	801f1d6 <_dtoa_r+0x906>
 801f3ce:	4615      	mov	r5, r2
 801f3d0:	e7a1      	b.n	801f316 <_dtoa_r+0xa46>
 801f3d2:	4b17      	ldr	r3, [pc, #92]	; (801f430 <_dtoa_r+0xb60>)
 801f3d4:	f7ff bae1 	b.w	801e99a <_dtoa_r+0xca>
 801f3d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	f47f aabb 	bne.w	801e956 <_dtoa_r+0x86>
 801f3e0:	4b14      	ldr	r3, [pc, #80]	; (801f434 <_dtoa_r+0xb64>)
 801f3e2:	f7ff bada 	b.w	801e99a <_dtoa_r+0xca>
 801f3e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3e8:	2b01      	cmp	r3, #1
 801f3ea:	f77f ae3f 	ble.w	801f06c <_dtoa_r+0x79c>
 801f3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3f0:	9308      	str	r3, [sp, #32]
 801f3f2:	e653      	b.n	801f09c <_dtoa_r+0x7cc>
 801f3f4:	9b04      	ldr	r3, [sp, #16]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	dc03      	bgt.n	801f402 <_dtoa_r+0xb32>
 801f3fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3fc:	2b02      	cmp	r3, #2
 801f3fe:	f73f aed5 	bgt.w	801f1ac <_dtoa_r+0x8dc>
 801f402:	9d06      	ldr	r5, [sp, #24]
 801f404:	4631      	mov	r1, r6
 801f406:	4658      	mov	r0, fp
 801f408:	f7ff f9d4 	bl	801e7b4 <quorem>
 801f40c:	9b06      	ldr	r3, [sp, #24]
 801f40e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f412:	f805 8b01 	strb.w	r8, [r5], #1
 801f416:	9a04      	ldr	r2, [sp, #16]
 801f418:	1aeb      	subs	r3, r5, r3
 801f41a:	429a      	cmp	r2, r3
 801f41c:	ddb5      	ble.n	801f38a <_dtoa_r+0xaba>
 801f41e:	4659      	mov	r1, fp
 801f420:	2300      	movs	r3, #0
 801f422:	220a      	movs	r2, #10
 801f424:	4620      	mov	r0, r4
 801f426:	f000 f93a 	bl	801f69e <__multadd>
 801f42a:	4683      	mov	fp, r0
 801f42c:	e7ea      	b.n	801f404 <_dtoa_r+0xb34>
 801f42e:	bf00      	nop
 801f430:	08020508 	.word	0x08020508
 801f434:	0802052c 	.word	0x0802052c

0801f438 <std>:
 801f438:	2300      	movs	r3, #0
 801f43a:	b510      	push	{r4, lr}
 801f43c:	4604      	mov	r4, r0
 801f43e:	e9c0 3300 	strd	r3, r3, [r0]
 801f442:	6083      	str	r3, [r0, #8]
 801f444:	8181      	strh	r1, [r0, #12]
 801f446:	6643      	str	r3, [r0, #100]	; 0x64
 801f448:	81c2      	strh	r2, [r0, #14]
 801f44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f44e:	6183      	str	r3, [r0, #24]
 801f450:	4619      	mov	r1, r3
 801f452:	2208      	movs	r2, #8
 801f454:	305c      	adds	r0, #92	; 0x5c
 801f456:	f7fe fc7e 	bl	801dd56 <memset>
 801f45a:	4b05      	ldr	r3, [pc, #20]	; (801f470 <std+0x38>)
 801f45c:	6224      	str	r4, [r4, #32]
 801f45e:	6263      	str	r3, [r4, #36]	; 0x24
 801f460:	4b04      	ldr	r3, [pc, #16]	; (801f474 <std+0x3c>)
 801f462:	62a3      	str	r3, [r4, #40]	; 0x28
 801f464:	4b04      	ldr	r3, [pc, #16]	; (801f478 <std+0x40>)
 801f466:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f468:	4b04      	ldr	r3, [pc, #16]	; (801f47c <std+0x44>)
 801f46a:	6323      	str	r3, [r4, #48]	; 0x30
 801f46c:	bd10      	pop	{r4, pc}
 801f46e:	bf00      	nop
 801f470:	0801fea1 	.word	0x0801fea1
 801f474:	0801fec3 	.word	0x0801fec3
 801f478:	0801fefb 	.word	0x0801fefb
 801f47c:	0801ff1f 	.word	0x0801ff1f

0801f480 <_cleanup_r>:
 801f480:	4901      	ldr	r1, [pc, #4]	; (801f488 <_cleanup_r+0x8>)
 801f482:	f000 b885 	b.w	801f590 <_fwalk_reent>
 801f486:	bf00      	nop
 801f488:	080201f9 	.word	0x080201f9

0801f48c <__sfmoreglue>:
 801f48c:	b570      	push	{r4, r5, r6, lr}
 801f48e:	2568      	movs	r5, #104	; 0x68
 801f490:	1e4a      	subs	r2, r1, #1
 801f492:	4355      	muls	r5, r2
 801f494:	460e      	mov	r6, r1
 801f496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f49a:	f7fe fcb1 	bl	801de00 <_malloc_r>
 801f49e:	4604      	mov	r4, r0
 801f4a0:	b140      	cbz	r0, 801f4b4 <__sfmoreglue+0x28>
 801f4a2:	2100      	movs	r1, #0
 801f4a4:	e9c0 1600 	strd	r1, r6, [r0]
 801f4a8:	300c      	adds	r0, #12
 801f4aa:	60a0      	str	r0, [r4, #8]
 801f4ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f4b0:	f7fe fc51 	bl	801dd56 <memset>
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	bd70      	pop	{r4, r5, r6, pc}

0801f4b8 <__sinit>:
 801f4b8:	6983      	ldr	r3, [r0, #24]
 801f4ba:	b510      	push	{r4, lr}
 801f4bc:	4604      	mov	r4, r0
 801f4be:	bb33      	cbnz	r3, 801f50e <__sinit+0x56>
 801f4c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801f4c4:	6503      	str	r3, [r0, #80]	; 0x50
 801f4c6:	4b12      	ldr	r3, [pc, #72]	; (801f510 <__sinit+0x58>)
 801f4c8:	4a12      	ldr	r2, [pc, #72]	; (801f514 <__sinit+0x5c>)
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	6282      	str	r2, [r0, #40]	; 0x28
 801f4ce:	4298      	cmp	r0, r3
 801f4d0:	bf04      	itt	eq
 801f4d2:	2301      	moveq	r3, #1
 801f4d4:	6183      	streq	r3, [r0, #24]
 801f4d6:	f000 f81f 	bl	801f518 <__sfp>
 801f4da:	6060      	str	r0, [r4, #4]
 801f4dc:	4620      	mov	r0, r4
 801f4de:	f000 f81b 	bl	801f518 <__sfp>
 801f4e2:	60a0      	str	r0, [r4, #8]
 801f4e4:	4620      	mov	r0, r4
 801f4e6:	f000 f817 	bl	801f518 <__sfp>
 801f4ea:	2200      	movs	r2, #0
 801f4ec:	60e0      	str	r0, [r4, #12]
 801f4ee:	2104      	movs	r1, #4
 801f4f0:	6860      	ldr	r0, [r4, #4]
 801f4f2:	f7ff ffa1 	bl	801f438 <std>
 801f4f6:	2201      	movs	r2, #1
 801f4f8:	2109      	movs	r1, #9
 801f4fa:	68a0      	ldr	r0, [r4, #8]
 801f4fc:	f7ff ff9c 	bl	801f438 <std>
 801f500:	2202      	movs	r2, #2
 801f502:	2112      	movs	r1, #18
 801f504:	68e0      	ldr	r0, [r4, #12]
 801f506:	f7ff ff97 	bl	801f438 <std>
 801f50a:	2301      	movs	r3, #1
 801f50c:	61a3      	str	r3, [r4, #24]
 801f50e:	bd10      	pop	{r4, pc}
 801f510:	080204f4 	.word	0x080204f4
 801f514:	0801f481 	.word	0x0801f481

0801f518 <__sfp>:
 801f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f51a:	4b1b      	ldr	r3, [pc, #108]	; (801f588 <__sfp+0x70>)
 801f51c:	4607      	mov	r7, r0
 801f51e:	681e      	ldr	r6, [r3, #0]
 801f520:	69b3      	ldr	r3, [r6, #24]
 801f522:	b913      	cbnz	r3, 801f52a <__sfp+0x12>
 801f524:	4630      	mov	r0, r6
 801f526:	f7ff ffc7 	bl	801f4b8 <__sinit>
 801f52a:	3648      	adds	r6, #72	; 0x48
 801f52c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f530:	3b01      	subs	r3, #1
 801f532:	d503      	bpl.n	801f53c <__sfp+0x24>
 801f534:	6833      	ldr	r3, [r6, #0]
 801f536:	b133      	cbz	r3, 801f546 <__sfp+0x2e>
 801f538:	6836      	ldr	r6, [r6, #0]
 801f53a:	e7f7      	b.n	801f52c <__sfp+0x14>
 801f53c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f540:	b16d      	cbz	r5, 801f55e <__sfp+0x46>
 801f542:	3468      	adds	r4, #104	; 0x68
 801f544:	e7f4      	b.n	801f530 <__sfp+0x18>
 801f546:	2104      	movs	r1, #4
 801f548:	4638      	mov	r0, r7
 801f54a:	f7ff ff9f 	bl	801f48c <__sfmoreglue>
 801f54e:	6030      	str	r0, [r6, #0]
 801f550:	2800      	cmp	r0, #0
 801f552:	d1f1      	bne.n	801f538 <__sfp+0x20>
 801f554:	230c      	movs	r3, #12
 801f556:	4604      	mov	r4, r0
 801f558:	603b      	str	r3, [r7, #0]
 801f55a:	4620      	mov	r0, r4
 801f55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f55e:	4b0b      	ldr	r3, [pc, #44]	; (801f58c <__sfp+0x74>)
 801f560:	6665      	str	r5, [r4, #100]	; 0x64
 801f562:	e9c4 5500 	strd	r5, r5, [r4]
 801f566:	60a5      	str	r5, [r4, #8]
 801f568:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801f56c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801f570:	2208      	movs	r2, #8
 801f572:	4629      	mov	r1, r5
 801f574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f578:	f7fe fbed 	bl	801dd56 <memset>
 801f57c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f584:	e7e9      	b.n	801f55a <__sfp+0x42>
 801f586:	bf00      	nop
 801f588:	080204f4 	.word	0x080204f4
 801f58c:	ffff0001 	.word	0xffff0001

0801f590 <_fwalk_reent>:
 801f590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f594:	4680      	mov	r8, r0
 801f596:	4689      	mov	r9, r1
 801f598:	2600      	movs	r6, #0
 801f59a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f59e:	b914      	cbnz	r4, 801f5a6 <_fwalk_reent+0x16>
 801f5a0:	4630      	mov	r0, r6
 801f5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801f5aa:	3f01      	subs	r7, #1
 801f5ac:	d501      	bpl.n	801f5b2 <_fwalk_reent+0x22>
 801f5ae:	6824      	ldr	r4, [r4, #0]
 801f5b0:	e7f5      	b.n	801f59e <_fwalk_reent+0xe>
 801f5b2:	89ab      	ldrh	r3, [r5, #12]
 801f5b4:	2b01      	cmp	r3, #1
 801f5b6:	d907      	bls.n	801f5c8 <_fwalk_reent+0x38>
 801f5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f5bc:	3301      	adds	r3, #1
 801f5be:	d003      	beq.n	801f5c8 <_fwalk_reent+0x38>
 801f5c0:	4629      	mov	r1, r5
 801f5c2:	4640      	mov	r0, r8
 801f5c4:	47c8      	blx	r9
 801f5c6:	4306      	orrs	r6, r0
 801f5c8:	3568      	adds	r5, #104	; 0x68
 801f5ca:	e7ee      	b.n	801f5aa <_fwalk_reent+0x1a>

0801f5cc <_localeconv_r>:
 801f5cc:	4b04      	ldr	r3, [pc, #16]	; (801f5e0 <_localeconv_r+0x14>)
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	6a18      	ldr	r0, [r3, #32]
 801f5d2:	4b04      	ldr	r3, [pc, #16]	; (801f5e4 <_localeconv_r+0x18>)
 801f5d4:	2800      	cmp	r0, #0
 801f5d6:	bf08      	it	eq
 801f5d8:	4618      	moveq	r0, r3
 801f5da:	30f0      	adds	r0, #240	; 0xf0
 801f5dc:	4770      	bx	lr
 801f5de:	bf00      	nop
 801f5e0:	200003d8 	.word	0x200003d8
 801f5e4:	2000043c 	.word	0x2000043c

0801f5e8 <memchr>:
 801f5e8:	b510      	push	{r4, lr}
 801f5ea:	b2c9      	uxtb	r1, r1
 801f5ec:	4402      	add	r2, r0
 801f5ee:	4290      	cmp	r0, r2
 801f5f0:	4603      	mov	r3, r0
 801f5f2:	d101      	bne.n	801f5f8 <memchr+0x10>
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	e003      	b.n	801f600 <memchr+0x18>
 801f5f8:	781c      	ldrb	r4, [r3, #0]
 801f5fa:	3001      	adds	r0, #1
 801f5fc:	428c      	cmp	r4, r1
 801f5fe:	d1f6      	bne.n	801f5ee <memchr+0x6>
 801f600:	4618      	mov	r0, r3
 801f602:	bd10      	pop	{r4, pc}

0801f604 <__malloc_lock>:
 801f604:	4770      	bx	lr

0801f606 <__malloc_unlock>:
 801f606:	4770      	bx	lr

0801f608 <_Balloc>:
 801f608:	b570      	push	{r4, r5, r6, lr}
 801f60a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f60c:	4604      	mov	r4, r0
 801f60e:	460e      	mov	r6, r1
 801f610:	b93d      	cbnz	r5, 801f622 <_Balloc+0x1a>
 801f612:	2010      	movs	r0, #16
 801f614:	f7fe fb8c 	bl	801dd30 <malloc>
 801f618:	6260      	str	r0, [r4, #36]	; 0x24
 801f61a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f61e:	6005      	str	r5, [r0, #0]
 801f620:	60c5      	str	r5, [r0, #12]
 801f622:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f624:	68eb      	ldr	r3, [r5, #12]
 801f626:	b183      	cbz	r3, 801f64a <_Balloc+0x42>
 801f628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f62a:	68db      	ldr	r3, [r3, #12]
 801f62c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f630:	b9b8      	cbnz	r0, 801f662 <_Balloc+0x5a>
 801f632:	2101      	movs	r1, #1
 801f634:	fa01 f506 	lsl.w	r5, r1, r6
 801f638:	1d6a      	adds	r2, r5, #5
 801f63a:	0092      	lsls	r2, r2, #2
 801f63c:	4620      	mov	r0, r4
 801f63e:	f000 fabe 	bl	801fbbe <_calloc_r>
 801f642:	b160      	cbz	r0, 801f65e <_Balloc+0x56>
 801f644:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801f648:	e00e      	b.n	801f668 <_Balloc+0x60>
 801f64a:	2221      	movs	r2, #33	; 0x21
 801f64c:	2104      	movs	r1, #4
 801f64e:	4620      	mov	r0, r4
 801f650:	f000 fab5 	bl	801fbbe <_calloc_r>
 801f654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f656:	60e8      	str	r0, [r5, #12]
 801f658:	68db      	ldr	r3, [r3, #12]
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d1e4      	bne.n	801f628 <_Balloc+0x20>
 801f65e:	2000      	movs	r0, #0
 801f660:	bd70      	pop	{r4, r5, r6, pc}
 801f662:	6802      	ldr	r2, [r0, #0]
 801f664:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801f668:	2300      	movs	r3, #0
 801f66a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f66e:	e7f7      	b.n	801f660 <_Balloc+0x58>

0801f670 <_Bfree>:
 801f670:	b570      	push	{r4, r5, r6, lr}
 801f672:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801f674:	4606      	mov	r6, r0
 801f676:	460d      	mov	r5, r1
 801f678:	b93c      	cbnz	r4, 801f68a <_Bfree+0x1a>
 801f67a:	2010      	movs	r0, #16
 801f67c:	f7fe fb58 	bl	801dd30 <malloc>
 801f680:	6270      	str	r0, [r6, #36]	; 0x24
 801f682:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f686:	6004      	str	r4, [r0, #0]
 801f688:	60c4      	str	r4, [r0, #12]
 801f68a:	b13d      	cbz	r5, 801f69c <_Bfree+0x2c>
 801f68c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f68e:	686a      	ldr	r2, [r5, #4]
 801f690:	68db      	ldr	r3, [r3, #12]
 801f692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f696:	6029      	str	r1, [r5, #0]
 801f698:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801f69c:	bd70      	pop	{r4, r5, r6, pc}

0801f69e <__multadd>:
 801f69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6a2:	461f      	mov	r7, r3
 801f6a4:	4606      	mov	r6, r0
 801f6a6:	460c      	mov	r4, r1
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	690d      	ldr	r5, [r1, #16]
 801f6ac:	f101 0c14 	add.w	ip, r1, #20
 801f6b0:	f8dc 0000 	ldr.w	r0, [ip]
 801f6b4:	3301      	adds	r3, #1
 801f6b6:	b281      	uxth	r1, r0
 801f6b8:	fb02 7101 	mla	r1, r2, r1, r7
 801f6bc:	0c00      	lsrs	r0, r0, #16
 801f6be:	0c0f      	lsrs	r7, r1, #16
 801f6c0:	fb02 7000 	mla	r0, r2, r0, r7
 801f6c4:	b289      	uxth	r1, r1
 801f6c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801f6ca:	429d      	cmp	r5, r3
 801f6cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801f6d0:	f84c 1b04 	str.w	r1, [ip], #4
 801f6d4:	dcec      	bgt.n	801f6b0 <__multadd+0x12>
 801f6d6:	b1d7      	cbz	r7, 801f70e <__multadd+0x70>
 801f6d8:	68a3      	ldr	r3, [r4, #8]
 801f6da:	42ab      	cmp	r3, r5
 801f6dc:	dc12      	bgt.n	801f704 <__multadd+0x66>
 801f6de:	6861      	ldr	r1, [r4, #4]
 801f6e0:	4630      	mov	r0, r6
 801f6e2:	3101      	adds	r1, #1
 801f6e4:	f7ff ff90 	bl	801f608 <_Balloc>
 801f6e8:	4680      	mov	r8, r0
 801f6ea:	6922      	ldr	r2, [r4, #16]
 801f6ec:	f104 010c 	add.w	r1, r4, #12
 801f6f0:	3202      	adds	r2, #2
 801f6f2:	0092      	lsls	r2, r2, #2
 801f6f4:	300c      	adds	r0, #12
 801f6f6:	f7fe fb23 	bl	801dd40 <memcpy>
 801f6fa:	4621      	mov	r1, r4
 801f6fc:	4630      	mov	r0, r6
 801f6fe:	f7ff ffb7 	bl	801f670 <_Bfree>
 801f702:	4644      	mov	r4, r8
 801f704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f708:	3501      	adds	r5, #1
 801f70a:	615f      	str	r7, [r3, #20]
 801f70c:	6125      	str	r5, [r4, #16]
 801f70e:	4620      	mov	r0, r4
 801f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f714 <__hi0bits>:
 801f714:	0c02      	lsrs	r2, r0, #16
 801f716:	0412      	lsls	r2, r2, #16
 801f718:	4603      	mov	r3, r0
 801f71a:	b9b2      	cbnz	r2, 801f74a <__hi0bits+0x36>
 801f71c:	0403      	lsls	r3, r0, #16
 801f71e:	2010      	movs	r0, #16
 801f720:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f724:	bf04      	itt	eq
 801f726:	021b      	lsleq	r3, r3, #8
 801f728:	3008      	addeq	r0, #8
 801f72a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f72e:	bf04      	itt	eq
 801f730:	011b      	lsleq	r3, r3, #4
 801f732:	3004      	addeq	r0, #4
 801f734:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f738:	bf04      	itt	eq
 801f73a:	009b      	lsleq	r3, r3, #2
 801f73c:	3002      	addeq	r0, #2
 801f73e:	2b00      	cmp	r3, #0
 801f740:	db06      	blt.n	801f750 <__hi0bits+0x3c>
 801f742:	005b      	lsls	r3, r3, #1
 801f744:	d503      	bpl.n	801f74e <__hi0bits+0x3a>
 801f746:	3001      	adds	r0, #1
 801f748:	4770      	bx	lr
 801f74a:	2000      	movs	r0, #0
 801f74c:	e7e8      	b.n	801f720 <__hi0bits+0xc>
 801f74e:	2020      	movs	r0, #32
 801f750:	4770      	bx	lr

0801f752 <__lo0bits>:
 801f752:	6803      	ldr	r3, [r0, #0]
 801f754:	4601      	mov	r1, r0
 801f756:	f013 0207 	ands.w	r2, r3, #7
 801f75a:	d00b      	beq.n	801f774 <__lo0bits+0x22>
 801f75c:	07da      	lsls	r2, r3, #31
 801f75e:	d423      	bmi.n	801f7a8 <__lo0bits+0x56>
 801f760:	0798      	lsls	r0, r3, #30
 801f762:	bf49      	itett	mi
 801f764:	085b      	lsrmi	r3, r3, #1
 801f766:	089b      	lsrpl	r3, r3, #2
 801f768:	2001      	movmi	r0, #1
 801f76a:	600b      	strmi	r3, [r1, #0]
 801f76c:	bf5c      	itt	pl
 801f76e:	600b      	strpl	r3, [r1, #0]
 801f770:	2002      	movpl	r0, #2
 801f772:	4770      	bx	lr
 801f774:	b298      	uxth	r0, r3
 801f776:	b9a8      	cbnz	r0, 801f7a4 <__lo0bits+0x52>
 801f778:	2010      	movs	r0, #16
 801f77a:	0c1b      	lsrs	r3, r3, #16
 801f77c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f780:	bf04      	itt	eq
 801f782:	0a1b      	lsreq	r3, r3, #8
 801f784:	3008      	addeq	r0, #8
 801f786:	071a      	lsls	r2, r3, #28
 801f788:	bf04      	itt	eq
 801f78a:	091b      	lsreq	r3, r3, #4
 801f78c:	3004      	addeq	r0, #4
 801f78e:	079a      	lsls	r2, r3, #30
 801f790:	bf04      	itt	eq
 801f792:	089b      	lsreq	r3, r3, #2
 801f794:	3002      	addeq	r0, #2
 801f796:	07da      	lsls	r2, r3, #31
 801f798:	d402      	bmi.n	801f7a0 <__lo0bits+0x4e>
 801f79a:	085b      	lsrs	r3, r3, #1
 801f79c:	d006      	beq.n	801f7ac <__lo0bits+0x5a>
 801f79e:	3001      	adds	r0, #1
 801f7a0:	600b      	str	r3, [r1, #0]
 801f7a2:	4770      	bx	lr
 801f7a4:	4610      	mov	r0, r2
 801f7a6:	e7e9      	b.n	801f77c <__lo0bits+0x2a>
 801f7a8:	2000      	movs	r0, #0
 801f7aa:	4770      	bx	lr
 801f7ac:	2020      	movs	r0, #32
 801f7ae:	4770      	bx	lr

0801f7b0 <__i2b>:
 801f7b0:	b510      	push	{r4, lr}
 801f7b2:	460c      	mov	r4, r1
 801f7b4:	2101      	movs	r1, #1
 801f7b6:	f7ff ff27 	bl	801f608 <_Balloc>
 801f7ba:	2201      	movs	r2, #1
 801f7bc:	6144      	str	r4, [r0, #20]
 801f7be:	6102      	str	r2, [r0, #16]
 801f7c0:	bd10      	pop	{r4, pc}

0801f7c2 <__multiply>:
 801f7c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c6:	4614      	mov	r4, r2
 801f7c8:	690a      	ldr	r2, [r1, #16]
 801f7ca:	6923      	ldr	r3, [r4, #16]
 801f7cc:	4688      	mov	r8, r1
 801f7ce:	429a      	cmp	r2, r3
 801f7d0:	bfbe      	ittt	lt
 801f7d2:	460b      	movlt	r3, r1
 801f7d4:	46a0      	movlt	r8, r4
 801f7d6:	461c      	movlt	r4, r3
 801f7d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f7dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f7e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f7e8:	eb07 0609 	add.w	r6, r7, r9
 801f7ec:	42b3      	cmp	r3, r6
 801f7ee:	bfb8      	it	lt
 801f7f0:	3101      	addlt	r1, #1
 801f7f2:	f7ff ff09 	bl	801f608 <_Balloc>
 801f7f6:	f100 0514 	add.w	r5, r0, #20
 801f7fa:	462b      	mov	r3, r5
 801f7fc:	2200      	movs	r2, #0
 801f7fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801f802:	4573      	cmp	r3, lr
 801f804:	d316      	bcc.n	801f834 <__multiply+0x72>
 801f806:	f104 0214 	add.w	r2, r4, #20
 801f80a:	f108 0114 	add.w	r1, r8, #20
 801f80e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801f812:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801f816:	9300      	str	r3, [sp, #0]
 801f818:	9b00      	ldr	r3, [sp, #0]
 801f81a:	9201      	str	r2, [sp, #4]
 801f81c:	4293      	cmp	r3, r2
 801f81e:	d80c      	bhi.n	801f83a <__multiply+0x78>
 801f820:	2e00      	cmp	r6, #0
 801f822:	dd03      	ble.n	801f82c <__multiply+0x6a>
 801f824:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d05d      	beq.n	801f8e8 <__multiply+0x126>
 801f82c:	6106      	str	r6, [r0, #16]
 801f82e:	b003      	add	sp, #12
 801f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f834:	f843 2b04 	str.w	r2, [r3], #4
 801f838:	e7e3      	b.n	801f802 <__multiply+0x40>
 801f83a:	f8b2 b000 	ldrh.w	fp, [r2]
 801f83e:	f1bb 0f00 	cmp.w	fp, #0
 801f842:	d023      	beq.n	801f88c <__multiply+0xca>
 801f844:	4689      	mov	r9, r1
 801f846:	46ac      	mov	ip, r5
 801f848:	f04f 0800 	mov.w	r8, #0
 801f84c:	f859 4b04 	ldr.w	r4, [r9], #4
 801f850:	f8dc a000 	ldr.w	sl, [ip]
 801f854:	b2a3      	uxth	r3, r4
 801f856:	fa1f fa8a 	uxth.w	sl, sl
 801f85a:	fb0b a303 	mla	r3, fp, r3, sl
 801f85e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f862:	f8dc 4000 	ldr.w	r4, [ip]
 801f866:	4443      	add	r3, r8
 801f868:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801f86c:	fb0b 840a 	mla	r4, fp, sl, r8
 801f870:	46e2      	mov	sl, ip
 801f872:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801f876:	b29b      	uxth	r3, r3
 801f878:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f87c:	454f      	cmp	r7, r9
 801f87e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801f882:	f84a 3b04 	str.w	r3, [sl], #4
 801f886:	d82b      	bhi.n	801f8e0 <__multiply+0x11e>
 801f888:	f8cc 8004 	str.w	r8, [ip, #4]
 801f88c:	9b01      	ldr	r3, [sp, #4]
 801f88e:	3204      	adds	r2, #4
 801f890:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801f894:	f1ba 0f00 	cmp.w	sl, #0
 801f898:	d020      	beq.n	801f8dc <__multiply+0x11a>
 801f89a:	4689      	mov	r9, r1
 801f89c:	46a8      	mov	r8, r5
 801f89e:	f04f 0b00 	mov.w	fp, #0
 801f8a2:	682b      	ldr	r3, [r5, #0]
 801f8a4:	f8b9 c000 	ldrh.w	ip, [r9]
 801f8a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	fb0a 440c 	mla	r4, sl, ip, r4
 801f8b2:	46c4      	mov	ip, r8
 801f8b4:	445c      	add	r4, fp
 801f8b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f8ba:	f84c 3b04 	str.w	r3, [ip], #4
 801f8be:	f859 3b04 	ldr.w	r3, [r9], #4
 801f8c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801f8c6:	0c1b      	lsrs	r3, r3, #16
 801f8c8:	fb0a b303 	mla	r3, sl, r3, fp
 801f8cc:	454f      	cmp	r7, r9
 801f8ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801f8d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801f8d6:	d805      	bhi.n	801f8e4 <__multiply+0x122>
 801f8d8:	f8c8 3004 	str.w	r3, [r8, #4]
 801f8dc:	3504      	adds	r5, #4
 801f8de:	e79b      	b.n	801f818 <__multiply+0x56>
 801f8e0:	46d4      	mov	ip, sl
 801f8e2:	e7b3      	b.n	801f84c <__multiply+0x8a>
 801f8e4:	46e0      	mov	r8, ip
 801f8e6:	e7dd      	b.n	801f8a4 <__multiply+0xe2>
 801f8e8:	3e01      	subs	r6, #1
 801f8ea:	e799      	b.n	801f820 <__multiply+0x5e>

0801f8ec <__pow5mult>:
 801f8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f8f0:	4615      	mov	r5, r2
 801f8f2:	f012 0203 	ands.w	r2, r2, #3
 801f8f6:	4606      	mov	r6, r0
 801f8f8:	460f      	mov	r7, r1
 801f8fa:	d007      	beq.n	801f90c <__pow5mult+0x20>
 801f8fc:	4c21      	ldr	r4, [pc, #132]	; (801f984 <__pow5mult+0x98>)
 801f8fe:	3a01      	subs	r2, #1
 801f900:	2300      	movs	r3, #0
 801f902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f906:	f7ff feca 	bl	801f69e <__multadd>
 801f90a:	4607      	mov	r7, r0
 801f90c:	10ad      	asrs	r5, r5, #2
 801f90e:	d035      	beq.n	801f97c <__pow5mult+0x90>
 801f910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f912:	b93c      	cbnz	r4, 801f924 <__pow5mult+0x38>
 801f914:	2010      	movs	r0, #16
 801f916:	f7fe fa0b 	bl	801dd30 <malloc>
 801f91a:	6270      	str	r0, [r6, #36]	; 0x24
 801f91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f920:	6004      	str	r4, [r0, #0]
 801f922:	60c4      	str	r4, [r0, #12]
 801f924:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f92c:	b94c      	cbnz	r4, 801f942 <__pow5mult+0x56>
 801f92e:	f240 2171 	movw	r1, #625	; 0x271
 801f932:	4630      	mov	r0, r6
 801f934:	f7ff ff3c 	bl	801f7b0 <__i2b>
 801f938:	2300      	movs	r3, #0
 801f93a:	4604      	mov	r4, r0
 801f93c:	f8c8 0008 	str.w	r0, [r8, #8]
 801f940:	6003      	str	r3, [r0, #0]
 801f942:	f04f 0800 	mov.w	r8, #0
 801f946:	07eb      	lsls	r3, r5, #31
 801f948:	d50a      	bpl.n	801f960 <__pow5mult+0x74>
 801f94a:	4639      	mov	r1, r7
 801f94c:	4622      	mov	r2, r4
 801f94e:	4630      	mov	r0, r6
 801f950:	f7ff ff37 	bl	801f7c2 <__multiply>
 801f954:	4681      	mov	r9, r0
 801f956:	4639      	mov	r1, r7
 801f958:	4630      	mov	r0, r6
 801f95a:	f7ff fe89 	bl	801f670 <_Bfree>
 801f95e:	464f      	mov	r7, r9
 801f960:	106d      	asrs	r5, r5, #1
 801f962:	d00b      	beq.n	801f97c <__pow5mult+0x90>
 801f964:	6820      	ldr	r0, [r4, #0]
 801f966:	b938      	cbnz	r0, 801f978 <__pow5mult+0x8c>
 801f968:	4622      	mov	r2, r4
 801f96a:	4621      	mov	r1, r4
 801f96c:	4630      	mov	r0, r6
 801f96e:	f7ff ff28 	bl	801f7c2 <__multiply>
 801f972:	6020      	str	r0, [r4, #0]
 801f974:	f8c0 8000 	str.w	r8, [r0]
 801f978:	4604      	mov	r4, r0
 801f97a:	e7e4      	b.n	801f946 <__pow5mult+0x5a>
 801f97c:	4638      	mov	r0, r7
 801f97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f982:	bf00      	nop
 801f984:	08020690 	.word	0x08020690

0801f988 <__lshift>:
 801f988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f98c:	460c      	mov	r4, r1
 801f98e:	4607      	mov	r7, r0
 801f990:	4616      	mov	r6, r2
 801f992:	6923      	ldr	r3, [r4, #16]
 801f994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f998:	eb0a 0903 	add.w	r9, sl, r3
 801f99c:	6849      	ldr	r1, [r1, #4]
 801f99e:	68a3      	ldr	r3, [r4, #8]
 801f9a0:	f109 0501 	add.w	r5, r9, #1
 801f9a4:	42ab      	cmp	r3, r5
 801f9a6:	db32      	blt.n	801fa0e <__lshift+0x86>
 801f9a8:	4638      	mov	r0, r7
 801f9aa:	f7ff fe2d 	bl	801f608 <_Balloc>
 801f9ae:	2300      	movs	r3, #0
 801f9b0:	4680      	mov	r8, r0
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	f100 0114 	add.w	r1, r0, #20
 801f9b8:	4553      	cmp	r3, sl
 801f9ba:	db2b      	blt.n	801fa14 <__lshift+0x8c>
 801f9bc:	6920      	ldr	r0, [r4, #16]
 801f9be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f9c2:	f104 0314 	add.w	r3, r4, #20
 801f9c6:	f016 021f 	ands.w	r2, r6, #31
 801f9ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f9ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f9d2:	d025      	beq.n	801fa20 <__lshift+0x98>
 801f9d4:	2000      	movs	r0, #0
 801f9d6:	f1c2 0e20 	rsb	lr, r2, #32
 801f9da:	468a      	mov	sl, r1
 801f9dc:	681e      	ldr	r6, [r3, #0]
 801f9de:	4096      	lsls	r6, r2
 801f9e0:	4330      	orrs	r0, r6
 801f9e2:	f84a 0b04 	str.w	r0, [sl], #4
 801f9e6:	f853 0b04 	ldr.w	r0, [r3], #4
 801f9ea:	459c      	cmp	ip, r3
 801f9ec:	fa20 f00e 	lsr.w	r0, r0, lr
 801f9f0:	d814      	bhi.n	801fa1c <__lshift+0x94>
 801f9f2:	6048      	str	r0, [r1, #4]
 801f9f4:	b108      	cbz	r0, 801f9fa <__lshift+0x72>
 801f9f6:	f109 0502 	add.w	r5, r9, #2
 801f9fa:	3d01      	subs	r5, #1
 801f9fc:	4638      	mov	r0, r7
 801f9fe:	f8c8 5010 	str.w	r5, [r8, #16]
 801fa02:	4621      	mov	r1, r4
 801fa04:	f7ff fe34 	bl	801f670 <_Bfree>
 801fa08:	4640      	mov	r0, r8
 801fa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa0e:	3101      	adds	r1, #1
 801fa10:	005b      	lsls	r3, r3, #1
 801fa12:	e7c7      	b.n	801f9a4 <__lshift+0x1c>
 801fa14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801fa18:	3301      	adds	r3, #1
 801fa1a:	e7cd      	b.n	801f9b8 <__lshift+0x30>
 801fa1c:	4651      	mov	r1, sl
 801fa1e:	e7dc      	b.n	801f9da <__lshift+0x52>
 801fa20:	3904      	subs	r1, #4
 801fa22:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa26:	459c      	cmp	ip, r3
 801fa28:	f841 2f04 	str.w	r2, [r1, #4]!
 801fa2c:	d8f9      	bhi.n	801fa22 <__lshift+0x9a>
 801fa2e:	e7e4      	b.n	801f9fa <__lshift+0x72>

0801fa30 <__mcmp>:
 801fa30:	6903      	ldr	r3, [r0, #16]
 801fa32:	690a      	ldr	r2, [r1, #16]
 801fa34:	b530      	push	{r4, r5, lr}
 801fa36:	1a9b      	subs	r3, r3, r2
 801fa38:	d10c      	bne.n	801fa54 <__mcmp+0x24>
 801fa3a:	0092      	lsls	r2, r2, #2
 801fa3c:	3014      	adds	r0, #20
 801fa3e:	3114      	adds	r1, #20
 801fa40:	1884      	adds	r4, r0, r2
 801fa42:	4411      	add	r1, r2
 801fa44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fa48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fa4c:	4295      	cmp	r5, r2
 801fa4e:	d003      	beq.n	801fa58 <__mcmp+0x28>
 801fa50:	d305      	bcc.n	801fa5e <__mcmp+0x2e>
 801fa52:	2301      	movs	r3, #1
 801fa54:	4618      	mov	r0, r3
 801fa56:	bd30      	pop	{r4, r5, pc}
 801fa58:	42a0      	cmp	r0, r4
 801fa5a:	d3f3      	bcc.n	801fa44 <__mcmp+0x14>
 801fa5c:	e7fa      	b.n	801fa54 <__mcmp+0x24>
 801fa5e:	f04f 33ff 	mov.w	r3, #4294967295
 801fa62:	e7f7      	b.n	801fa54 <__mcmp+0x24>

0801fa64 <__mdiff>:
 801fa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa68:	460d      	mov	r5, r1
 801fa6a:	4607      	mov	r7, r0
 801fa6c:	4611      	mov	r1, r2
 801fa6e:	4628      	mov	r0, r5
 801fa70:	4614      	mov	r4, r2
 801fa72:	f7ff ffdd 	bl	801fa30 <__mcmp>
 801fa76:	1e06      	subs	r6, r0, #0
 801fa78:	d108      	bne.n	801fa8c <__mdiff+0x28>
 801fa7a:	4631      	mov	r1, r6
 801fa7c:	4638      	mov	r0, r7
 801fa7e:	f7ff fdc3 	bl	801f608 <_Balloc>
 801fa82:	2301      	movs	r3, #1
 801fa84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801fa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa8c:	bfa4      	itt	ge
 801fa8e:	4623      	movge	r3, r4
 801fa90:	462c      	movge	r4, r5
 801fa92:	4638      	mov	r0, r7
 801fa94:	6861      	ldr	r1, [r4, #4]
 801fa96:	bfa6      	itte	ge
 801fa98:	461d      	movge	r5, r3
 801fa9a:	2600      	movge	r6, #0
 801fa9c:	2601      	movlt	r6, #1
 801fa9e:	f7ff fdb3 	bl	801f608 <_Balloc>
 801faa2:	f04f 0e00 	mov.w	lr, #0
 801faa6:	60c6      	str	r6, [r0, #12]
 801faa8:	692b      	ldr	r3, [r5, #16]
 801faaa:	6926      	ldr	r6, [r4, #16]
 801faac:	f104 0214 	add.w	r2, r4, #20
 801fab0:	f105 0914 	add.w	r9, r5, #20
 801fab4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801fab8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801fabc:	f100 0114 	add.w	r1, r0, #20
 801fac0:	f852 ab04 	ldr.w	sl, [r2], #4
 801fac4:	f859 5b04 	ldr.w	r5, [r9], #4
 801fac8:	fa1f f38a 	uxth.w	r3, sl
 801facc:	4473      	add	r3, lr
 801face:	b2ac      	uxth	r4, r5
 801fad0:	1b1b      	subs	r3, r3, r4
 801fad2:	0c2c      	lsrs	r4, r5, #16
 801fad4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 801fad8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 801fadc:	b29b      	uxth	r3, r3
 801fade:	ea4f 4e24 	mov.w	lr, r4, asr #16
 801fae2:	45c8      	cmp	r8, r9
 801fae4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801fae8:	4694      	mov	ip, r2
 801faea:	f841 4b04 	str.w	r4, [r1], #4
 801faee:	d8e7      	bhi.n	801fac0 <__mdiff+0x5c>
 801faf0:	45bc      	cmp	ip, r7
 801faf2:	d304      	bcc.n	801fafe <__mdiff+0x9a>
 801faf4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801faf8:	b183      	cbz	r3, 801fb1c <__mdiff+0xb8>
 801fafa:	6106      	str	r6, [r0, #16]
 801fafc:	e7c4      	b.n	801fa88 <__mdiff+0x24>
 801fafe:	f85c 4b04 	ldr.w	r4, [ip], #4
 801fb02:	b2a2      	uxth	r2, r4
 801fb04:	4472      	add	r2, lr
 801fb06:	1413      	asrs	r3, r2, #16
 801fb08:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801fb0c:	b292      	uxth	r2, r2
 801fb0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801fb12:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801fb16:	f841 2b04 	str.w	r2, [r1], #4
 801fb1a:	e7e9      	b.n	801faf0 <__mdiff+0x8c>
 801fb1c:	3e01      	subs	r6, #1
 801fb1e:	e7e9      	b.n	801faf4 <__mdiff+0x90>

0801fb20 <__d2b>:
 801fb20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801fb24:	461c      	mov	r4, r3
 801fb26:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 801fb2a:	2101      	movs	r1, #1
 801fb2c:	4690      	mov	r8, r2
 801fb2e:	f7ff fd6b 	bl	801f608 <_Balloc>
 801fb32:	f3c4 0213 	ubfx	r2, r4, #0, #20
 801fb36:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801fb3a:	4607      	mov	r7, r0
 801fb3c:	bb34      	cbnz	r4, 801fb8c <__d2b+0x6c>
 801fb3e:	9201      	str	r2, [sp, #4]
 801fb40:	f1b8 0200 	subs.w	r2, r8, #0
 801fb44:	d027      	beq.n	801fb96 <__d2b+0x76>
 801fb46:	a802      	add	r0, sp, #8
 801fb48:	f840 2d08 	str.w	r2, [r0, #-8]!
 801fb4c:	f7ff fe01 	bl	801f752 <__lo0bits>
 801fb50:	9900      	ldr	r1, [sp, #0]
 801fb52:	b1f0      	cbz	r0, 801fb92 <__d2b+0x72>
 801fb54:	9a01      	ldr	r2, [sp, #4]
 801fb56:	f1c0 0320 	rsb	r3, r0, #32
 801fb5a:	fa02 f303 	lsl.w	r3, r2, r3
 801fb5e:	430b      	orrs	r3, r1
 801fb60:	40c2      	lsrs	r2, r0
 801fb62:	617b      	str	r3, [r7, #20]
 801fb64:	9201      	str	r2, [sp, #4]
 801fb66:	9b01      	ldr	r3, [sp, #4]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	bf14      	ite	ne
 801fb6c:	2102      	movne	r1, #2
 801fb6e:	2101      	moveq	r1, #1
 801fb70:	61bb      	str	r3, [r7, #24]
 801fb72:	6139      	str	r1, [r7, #16]
 801fb74:	b1c4      	cbz	r4, 801fba8 <__d2b+0x88>
 801fb76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801fb7a:	4404      	add	r4, r0
 801fb7c:	6034      	str	r4, [r6, #0]
 801fb7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fb82:	6028      	str	r0, [r5, #0]
 801fb84:	4638      	mov	r0, r7
 801fb86:	b002      	add	sp, #8
 801fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801fb90:	e7d5      	b.n	801fb3e <__d2b+0x1e>
 801fb92:	6179      	str	r1, [r7, #20]
 801fb94:	e7e7      	b.n	801fb66 <__d2b+0x46>
 801fb96:	a801      	add	r0, sp, #4
 801fb98:	f7ff fddb 	bl	801f752 <__lo0bits>
 801fb9c:	2101      	movs	r1, #1
 801fb9e:	9b01      	ldr	r3, [sp, #4]
 801fba0:	6139      	str	r1, [r7, #16]
 801fba2:	617b      	str	r3, [r7, #20]
 801fba4:	3020      	adds	r0, #32
 801fba6:	e7e5      	b.n	801fb74 <__d2b+0x54>
 801fba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fbac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801fbb0:	6030      	str	r0, [r6, #0]
 801fbb2:	6918      	ldr	r0, [r3, #16]
 801fbb4:	f7ff fdae 	bl	801f714 <__hi0bits>
 801fbb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801fbbc:	e7e1      	b.n	801fb82 <__d2b+0x62>

0801fbbe <_calloc_r>:
 801fbbe:	b538      	push	{r3, r4, r5, lr}
 801fbc0:	fb02 f401 	mul.w	r4, r2, r1
 801fbc4:	4621      	mov	r1, r4
 801fbc6:	f7fe f91b 	bl	801de00 <_malloc_r>
 801fbca:	4605      	mov	r5, r0
 801fbcc:	b118      	cbz	r0, 801fbd6 <_calloc_r+0x18>
 801fbce:	4622      	mov	r2, r4
 801fbd0:	2100      	movs	r1, #0
 801fbd2:	f7fe f8c0 	bl	801dd56 <memset>
 801fbd6:	4628      	mov	r0, r5
 801fbd8:	bd38      	pop	{r3, r4, r5, pc}

0801fbda <_realloc_r>:
 801fbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbdc:	4607      	mov	r7, r0
 801fbde:	4614      	mov	r4, r2
 801fbe0:	460e      	mov	r6, r1
 801fbe2:	b921      	cbnz	r1, 801fbee <_realloc_r+0x14>
 801fbe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fbe8:	4611      	mov	r1, r2
 801fbea:	f7fe b909 	b.w	801de00 <_malloc_r>
 801fbee:	b922      	cbnz	r2, 801fbfa <_realloc_r+0x20>
 801fbf0:	f7fe f8ba 	bl	801dd68 <_free_r>
 801fbf4:	4625      	mov	r5, r4
 801fbf6:	4628      	mov	r0, r5
 801fbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbfa:	f000 fbaf 	bl	802035c <_malloc_usable_size_r>
 801fbfe:	42a0      	cmp	r0, r4
 801fc00:	d20f      	bcs.n	801fc22 <_realloc_r+0x48>
 801fc02:	4621      	mov	r1, r4
 801fc04:	4638      	mov	r0, r7
 801fc06:	f7fe f8fb 	bl	801de00 <_malloc_r>
 801fc0a:	4605      	mov	r5, r0
 801fc0c:	2800      	cmp	r0, #0
 801fc0e:	d0f2      	beq.n	801fbf6 <_realloc_r+0x1c>
 801fc10:	4631      	mov	r1, r6
 801fc12:	4622      	mov	r2, r4
 801fc14:	f7fe f894 	bl	801dd40 <memcpy>
 801fc18:	4631      	mov	r1, r6
 801fc1a:	4638      	mov	r0, r7
 801fc1c:	f7fe f8a4 	bl	801dd68 <_free_r>
 801fc20:	e7e9      	b.n	801fbf6 <_realloc_r+0x1c>
 801fc22:	4635      	mov	r5, r6
 801fc24:	e7e7      	b.n	801fbf6 <_realloc_r+0x1c>

0801fc26 <__sfputc_r>:
 801fc26:	6893      	ldr	r3, [r2, #8]
 801fc28:	b410      	push	{r4}
 801fc2a:	3b01      	subs	r3, #1
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	6093      	str	r3, [r2, #8]
 801fc30:	da07      	bge.n	801fc42 <__sfputc_r+0x1c>
 801fc32:	6994      	ldr	r4, [r2, #24]
 801fc34:	42a3      	cmp	r3, r4
 801fc36:	db01      	blt.n	801fc3c <__sfputc_r+0x16>
 801fc38:	290a      	cmp	r1, #10
 801fc3a:	d102      	bne.n	801fc42 <__sfputc_r+0x1c>
 801fc3c:	bc10      	pop	{r4}
 801fc3e:	f000 b973 	b.w	801ff28 <__swbuf_r>
 801fc42:	6813      	ldr	r3, [r2, #0]
 801fc44:	1c58      	adds	r0, r3, #1
 801fc46:	6010      	str	r0, [r2, #0]
 801fc48:	7019      	strb	r1, [r3, #0]
 801fc4a:	4608      	mov	r0, r1
 801fc4c:	bc10      	pop	{r4}
 801fc4e:	4770      	bx	lr

0801fc50 <__sfputs_r>:
 801fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc52:	4606      	mov	r6, r0
 801fc54:	460f      	mov	r7, r1
 801fc56:	4614      	mov	r4, r2
 801fc58:	18d5      	adds	r5, r2, r3
 801fc5a:	42ac      	cmp	r4, r5
 801fc5c:	d101      	bne.n	801fc62 <__sfputs_r+0x12>
 801fc5e:	2000      	movs	r0, #0
 801fc60:	e007      	b.n	801fc72 <__sfputs_r+0x22>
 801fc62:	463a      	mov	r2, r7
 801fc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc68:	4630      	mov	r0, r6
 801fc6a:	f7ff ffdc 	bl	801fc26 <__sfputc_r>
 801fc6e:	1c43      	adds	r3, r0, #1
 801fc70:	d1f3      	bne.n	801fc5a <__sfputs_r+0xa>
 801fc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fc74 <_vfiprintf_r>:
 801fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc78:	460c      	mov	r4, r1
 801fc7a:	b09d      	sub	sp, #116	; 0x74
 801fc7c:	4617      	mov	r7, r2
 801fc7e:	461d      	mov	r5, r3
 801fc80:	4606      	mov	r6, r0
 801fc82:	b118      	cbz	r0, 801fc8c <_vfiprintf_r+0x18>
 801fc84:	6983      	ldr	r3, [r0, #24]
 801fc86:	b90b      	cbnz	r3, 801fc8c <_vfiprintf_r+0x18>
 801fc88:	f7ff fc16 	bl	801f4b8 <__sinit>
 801fc8c:	4b7c      	ldr	r3, [pc, #496]	; (801fe80 <_vfiprintf_r+0x20c>)
 801fc8e:	429c      	cmp	r4, r3
 801fc90:	d158      	bne.n	801fd44 <_vfiprintf_r+0xd0>
 801fc92:	6874      	ldr	r4, [r6, #4]
 801fc94:	89a3      	ldrh	r3, [r4, #12]
 801fc96:	0718      	lsls	r0, r3, #28
 801fc98:	d55e      	bpl.n	801fd58 <_vfiprintf_r+0xe4>
 801fc9a:	6923      	ldr	r3, [r4, #16]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d05b      	beq.n	801fd58 <_vfiprintf_r+0xe4>
 801fca0:	2300      	movs	r3, #0
 801fca2:	9309      	str	r3, [sp, #36]	; 0x24
 801fca4:	2320      	movs	r3, #32
 801fca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fcaa:	2330      	movs	r3, #48	; 0x30
 801fcac:	f04f 0b01 	mov.w	fp, #1
 801fcb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fcb4:	9503      	str	r5, [sp, #12]
 801fcb6:	46b8      	mov	r8, r7
 801fcb8:	4645      	mov	r5, r8
 801fcba:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fcbe:	b10b      	cbz	r3, 801fcc4 <_vfiprintf_r+0x50>
 801fcc0:	2b25      	cmp	r3, #37	; 0x25
 801fcc2:	d154      	bne.n	801fd6e <_vfiprintf_r+0xfa>
 801fcc4:	ebb8 0a07 	subs.w	sl, r8, r7
 801fcc8:	d00b      	beq.n	801fce2 <_vfiprintf_r+0x6e>
 801fcca:	4653      	mov	r3, sl
 801fccc:	463a      	mov	r2, r7
 801fcce:	4621      	mov	r1, r4
 801fcd0:	4630      	mov	r0, r6
 801fcd2:	f7ff ffbd 	bl	801fc50 <__sfputs_r>
 801fcd6:	3001      	adds	r0, #1
 801fcd8:	f000 80c2 	beq.w	801fe60 <_vfiprintf_r+0x1ec>
 801fcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcde:	4453      	add	r3, sl
 801fce0:	9309      	str	r3, [sp, #36]	; 0x24
 801fce2:	f898 3000 	ldrb.w	r3, [r8]
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	f000 80ba 	beq.w	801fe60 <_vfiprintf_r+0x1ec>
 801fcec:	2300      	movs	r3, #0
 801fcee:	f04f 32ff 	mov.w	r2, #4294967295
 801fcf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fcf6:	9304      	str	r3, [sp, #16]
 801fcf8:	9307      	str	r3, [sp, #28]
 801fcfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fcfe:	931a      	str	r3, [sp, #104]	; 0x68
 801fd00:	46a8      	mov	r8, r5
 801fd02:	2205      	movs	r2, #5
 801fd04:	f818 1b01 	ldrb.w	r1, [r8], #1
 801fd08:	485e      	ldr	r0, [pc, #376]	; (801fe84 <_vfiprintf_r+0x210>)
 801fd0a:	f7ff fc6d 	bl	801f5e8 <memchr>
 801fd0e:	9b04      	ldr	r3, [sp, #16]
 801fd10:	bb78      	cbnz	r0, 801fd72 <_vfiprintf_r+0xfe>
 801fd12:	06d9      	lsls	r1, r3, #27
 801fd14:	bf44      	itt	mi
 801fd16:	2220      	movmi	r2, #32
 801fd18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fd1c:	071a      	lsls	r2, r3, #28
 801fd1e:	bf44      	itt	mi
 801fd20:	222b      	movmi	r2, #43	; 0x2b
 801fd22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fd26:	782a      	ldrb	r2, [r5, #0]
 801fd28:	2a2a      	cmp	r2, #42	; 0x2a
 801fd2a:	d02a      	beq.n	801fd82 <_vfiprintf_r+0x10e>
 801fd2c:	46a8      	mov	r8, r5
 801fd2e:	2000      	movs	r0, #0
 801fd30:	250a      	movs	r5, #10
 801fd32:	9a07      	ldr	r2, [sp, #28]
 801fd34:	4641      	mov	r1, r8
 801fd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd3a:	3b30      	subs	r3, #48	; 0x30
 801fd3c:	2b09      	cmp	r3, #9
 801fd3e:	d969      	bls.n	801fe14 <_vfiprintf_r+0x1a0>
 801fd40:	b360      	cbz	r0, 801fd9c <_vfiprintf_r+0x128>
 801fd42:	e024      	b.n	801fd8e <_vfiprintf_r+0x11a>
 801fd44:	4b50      	ldr	r3, [pc, #320]	; (801fe88 <_vfiprintf_r+0x214>)
 801fd46:	429c      	cmp	r4, r3
 801fd48:	d101      	bne.n	801fd4e <_vfiprintf_r+0xda>
 801fd4a:	68b4      	ldr	r4, [r6, #8]
 801fd4c:	e7a2      	b.n	801fc94 <_vfiprintf_r+0x20>
 801fd4e:	4b4f      	ldr	r3, [pc, #316]	; (801fe8c <_vfiprintf_r+0x218>)
 801fd50:	429c      	cmp	r4, r3
 801fd52:	bf08      	it	eq
 801fd54:	68f4      	ldreq	r4, [r6, #12]
 801fd56:	e79d      	b.n	801fc94 <_vfiprintf_r+0x20>
 801fd58:	4621      	mov	r1, r4
 801fd5a:	4630      	mov	r0, r6
 801fd5c:	f000 f948 	bl	801fff0 <__swsetup_r>
 801fd60:	2800      	cmp	r0, #0
 801fd62:	d09d      	beq.n	801fca0 <_vfiprintf_r+0x2c>
 801fd64:	f04f 30ff 	mov.w	r0, #4294967295
 801fd68:	b01d      	add	sp, #116	; 0x74
 801fd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd6e:	46a8      	mov	r8, r5
 801fd70:	e7a2      	b.n	801fcb8 <_vfiprintf_r+0x44>
 801fd72:	4a44      	ldr	r2, [pc, #272]	; (801fe84 <_vfiprintf_r+0x210>)
 801fd74:	4645      	mov	r5, r8
 801fd76:	1a80      	subs	r0, r0, r2
 801fd78:	fa0b f000 	lsl.w	r0, fp, r0
 801fd7c:	4318      	orrs	r0, r3
 801fd7e:	9004      	str	r0, [sp, #16]
 801fd80:	e7be      	b.n	801fd00 <_vfiprintf_r+0x8c>
 801fd82:	9a03      	ldr	r2, [sp, #12]
 801fd84:	1d11      	adds	r1, r2, #4
 801fd86:	6812      	ldr	r2, [r2, #0]
 801fd88:	9103      	str	r1, [sp, #12]
 801fd8a:	2a00      	cmp	r2, #0
 801fd8c:	db01      	blt.n	801fd92 <_vfiprintf_r+0x11e>
 801fd8e:	9207      	str	r2, [sp, #28]
 801fd90:	e004      	b.n	801fd9c <_vfiprintf_r+0x128>
 801fd92:	4252      	negs	r2, r2
 801fd94:	f043 0302 	orr.w	r3, r3, #2
 801fd98:	9207      	str	r2, [sp, #28]
 801fd9a:	9304      	str	r3, [sp, #16]
 801fd9c:	f898 3000 	ldrb.w	r3, [r8]
 801fda0:	2b2e      	cmp	r3, #46	; 0x2e
 801fda2:	d10e      	bne.n	801fdc2 <_vfiprintf_r+0x14e>
 801fda4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801fda8:	2b2a      	cmp	r3, #42	; 0x2a
 801fdaa:	d138      	bne.n	801fe1e <_vfiprintf_r+0x1aa>
 801fdac:	9b03      	ldr	r3, [sp, #12]
 801fdae:	f108 0802 	add.w	r8, r8, #2
 801fdb2:	1d1a      	adds	r2, r3, #4
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	9203      	str	r2, [sp, #12]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	bfb8      	it	lt
 801fdbc:	f04f 33ff 	movlt.w	r3, #4294967295
 801fdc0:	9305      	str	r3, [sp, #20]
 801fdc2:	4d33      	ldr	r5, [pc, #204]	; (801fe90 <_vfiprintf_r+0x21c>)
 801fdc4:	2203      	movs	r2, #3
 801fdc6:	f898 1000 	ldrb.w	r1, [r8]
 801fdca:	4628      	mov	r0, r5
 801fdcc:	f7ff fc0c 	bl	801f5e8 <memchr>
 801fdd0:	b140      	cbz	r0, 801fde4 <_vfiprintf_r+0x170>
 801fdd2:	2340      	movs	r3, #64	; 0x40
 801fdd4:	1b40      	subs	r0, r0, r5
 801fdd6:	fa03 f000 	lsl.w	r0, r3, r0
 801fdda:	9b04      	ldr	r3, [sp, #16]
 801fddc:	f108 0801 	add.w	r8, r8, #1
 801fde0:	4303      	orrs	r3, r0
 801fde2:	9304      	str	r3, [sp, #16]
 801fde4:	f898 1000 	ldrb.w	r1, [r8]
 801fde8:	2206      	movs	r2, #6
 801fdea:	482a      	ldr	r0, [pc, #168]	; (801fe94 <_vfiprintf_r+0x220>)
 801fdec:	f108 0701 	add.w	r7, r8, #1
 801fdf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fdf4:	f7ff fbf8 	bl	801f5e8 <memchr>
 801fdf8:	2800      	cmp	r0, #0
 801fdfa:	d037      	beq.n	801fe6c <_vfiprintf_r+0x1f8>
 801fdfc:	4b26      	ldr	r3, [pc, #152]	; (801fe98 <_vfiprintf_r+0x224>)
 801fdfe:	bb1b      	cbnz	r3, 801fe48 <_vfiprintf_r+0x1d4>
 801fe00:	9b03      	ldr	r3, [sp, #12]
 801fe02:	3307      	adds	r3, #7
 801fe04:	f023 0307 	bic.w	r3, r3, #7
 801fe08:	3308      	adds	r3, #8
 801fe0a:	9303      	str	r3, [sp, #12]
 801fe0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe0e:	444b      	add	r3, r9
 801fe10:	9309      	str	r3, [sp, #36]	; 0x24
 801fe12:	e750      	b.n	801fcb6 <_vfiprintf_r+0x42>
 801fe14:	fb05 3202 	mla	r2, r5, r2, r3
 801fe18:	2001      	movs	r0, #1
 801fe1a:	4688      	mov	r8, r1
 801fe1c:	e78a      	b.n	801fd34 <_vfiprintf_r+0xc0>
 801fe1e:	2300      	movs	r3, #0
 801fe20:	250a      	movs	r5, #10
 801fe22:	4619      	mov	r1, r3
 801fe24:	f108 0801 	add.w	r8, r8, #1
 801fe28:	9305      	str	r3, [sp, #20]
 801fe2a:	4640      	mov	r0, r8
 801fe2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe30:	3a30      	subs	r2, #48	; 0x30
 801fe32:	2a09      	cmp	r2, #9
 801fe34:	d903      	bls.n	801fe3e <_vfiprintf_r+0x1ca>
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	d0c3      	beq.n	801fdc2 <_vfiprintf_r+0x14e>
 801fe3a:	9105      	str	r1, [sp, #20]
 801fe3c:	e7c1      	b.n	801fdc2 <_vfiprintf_r+0x14e>
 801fe3e:	fb05 2101 	mla	r1, r5, r1, r2
 801fe42:	2301      	movs	r3, #1
 801fe44:	4680      	mov	r8, r0
 801fe46:	e7f0      	b.n	801fe2a <_vfiprintf_r+0x1b6>
 801fe48:	ab03      	add	r3, sp, #12
 801fe4a:	9300      	str	r3, [sp, #0]
 801fe4c:	4622      	mov	r2, r4
 801fe4e:	4b13      	ldr	r3, [pc, #76]	; (801fe9c <_vfiprintf_r+0x228>)
 801fe50:	a904      	add	r1, sp, #16
 801fe52:	4630      	mov	r0, r6
 801fe54:	f7fe f8c0 	bl	801dfd8 <_printf_float>
 801fe58:	f1b0 3fff 	cmp.w	r0, #4294967295
 801fe5c:	4681      	mov	r9, r0
 801fe5e:	d1d5      	bne.n	801fe0c <_vfiprintf_r+0x198>
 801fe60:	89a3      	ldrh	r3, [r4, #12]
 801fe62:	065b      	lsls	r3, r3, #25
 801fe64:	f53f af7e 	bmi.w	801fd64 <_vfiprintf_r+0xf0>
 801fe68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe6a:	e77d      	b.n	801fd68 <_vfiprintf_r+0xf4>
 801fe6c:	ab03      	add	r3, sp, #12
 801fe6e:	9300      	str	r3, [sp, #0]
 801fe70:	4622      	mov	r2, r4
 801fe72:	4b0a      	ldr	r3, [pc, #40]	; (801fe9c <_vfiprintf_r+0x228>)
 801fe74:	a904      	add	r1, sp, #16
 801fe76:	4630      	mov	r0, r6
 801fe78:	f7fe fb5a 	bl	801e530 <_printf_i>
 801fe7c:	e7ec      	b.n	801fe58 <_vfiprintf_r+0x1e4>
 801fe7e:	bf00      	nop
 801fe80:	0802055c 	.word	0x0802055c
 801fe84:	0802069c 	.word	0x0802069c
 801fe88:	0802057c 	.word	0x0802057c
 801fe8c:	0802053c 	.word	0x0802053c
 801fe90:	080206a2 	.word	0x080206a2
 801fe94:	080206a6 	.word	0x080206a6
 801fe98:	0801dfd9 	.word	0x0801dfd9
 801fe9c:	0801fc51 	.word	0x0801fc51

0801fea0 <__sread>:
 801fea0:	b510      	push	{r4, lr}
 801fea2:	460c      	mov	r4, r1
 801fea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fea8:	f000 fa60 	bl	802036c <_read_r>
 801feac:	2800      	cmp	r0, #0
 801feae:	bfab      	itete	ge
 801feb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801feb2:	89a3      	ldrhlt	r3, [r4, #12]
 801feb4:	181b      	addge	r3, r3, r0
 801feb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801feba:	bfac      	ite	ge
 801febc:	6563      	strge	r3, [r4, #84]	; 0x54
 801febe:	81a3      	strhlt	r3, [r4, #12]
 801fec0:	bd10      	pop	{r4, pc}

0801fec2 <__swrite>:
 801fec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fec6:	461f      	mov	r7, r3
 801fec8:	898b      	ldrh	r3, [r1, #12]
 801feca:	4605      	mov	r5, r0
 801fecc:	05db      	lsls	r3, r3, #23
 801fece:	460c      	mov	r4, r1
 801fed0:	4616      	mov	r6, r2
 801fed2:	d505      	bpl.n	801fee0 <__swrite+0x1e>
 801fed4:	2302      	movs	r3, #2
 801fed6:	2200      	movs	r2, #0
 801fed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fedc:	f000 f9b6 	bl	802024c <_lseek_r>
 801fee0:	89a3      	ldrh	r3, [r4, #12]
 801fee2:	4632      	mov	r2, r6
 801fee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fee8:	81a3      	strh	r3, [r4, #12]
 801feea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801feee:	463b      	mov	r3, r7
 801fef0:	4628      	mov	r0, r5
 801fef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fef6:	f000 b869 	b.w	801ffcc <_write_r>

0801fefa <__sseek>:
 801fefa:	b510      	push	{r4, lr}
 801fefc:	460c      	mov	r4, r1
 801fefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff02:	f000 f9a3 	bl	802024c <_lseek_r>
 801ff06:	1c43      	adds	r3, r0, #1
 801ff08:	89a3      	ldrh	r3, [r4, #12]
 801ff0a:	bf15      	itete	ne
 801ff0c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ff0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ff12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ff16:	81a3      	strheq	r3, [r4, #12]
 801ff18:	bf18      	it	ne
 801ff1a:	81a3      	strhne	r3, [r4, #12]
 801ff1c:	bd10      	pop	{r4, pc}

0801ff1e <__sclose>:
 801ff1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff22:	f000 b8d3 	b.w	80200cc <_close_r>
	...

0801ff28 <__swbuf_r>:
 801ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff2a:	460e      	mov	r6, r1
 801ff2c:	4614      	mov	r4, r2
 801ff2e:	4605      	mov	r5, r0
 801ff30:	b118      	cbz	r0, 801ff3a <__swbuf_r+0x12>
 801ff32:	6983      	ldr	r3, [r0, #24]
 801ff34:	b90b      	cbnz	r3, 801ff3a <__swbuf_r+0x12>
 801ff36:	f7ff fabf 	bl	801f4b8 <__sinit>
 801ff3a:	4b21      	ldr	r3, [pc, #132]	; (801ffc0 <__swbuf_r+0x98>)
 801ff3c:	429c      	cmp	r4, r3
 801ff3e:	d12a      	bne.n	801ff96 <__swbuf_r+0x6e>
 801ff40:	686c      	ldr	r4, [r5, #4]
 801ff42:	69a3      	ldr	r3, [r4, #24]
 801ff44:	60a3      	str	r3, [r4, #8]
 801ff46:	89a3      	ldrh	r3, [r4, #12]
 801ff48:	071a      	lsls	r2, r3, #28
 801ff4a:	d52e      	bpl.n	801ffaa <__swbuf_r+0x82>
 801ff4c:	6923      	ldr	r3, [r4, #16]
 801ff4e:	b363      	cbz	r3, 801ffaa <__swbuf_r+0x82>
 801ff50:	6923      	ldr	r3, [r4, #16]
 801ff52:	6820      	ldr	r0, [r4, #0]
 801ff54:	b2f6      	uxtb	r6, r6
 801ff56:	1ac0      	subs	r0, r0, r3
 801ff58:	6963      	ldr	r3, [r4, #20]
 801ff5a:	4637      	mov	r7, r6
 801ff5c:	4283      	cmp	r3, r0
 801ff5e:	dc04      	bgt.n	801ff6a <__swbuf_r+0x42>
 801ff60:	4621      	mov	r1, r4
 801ff62:	4628      	mov	r0, r5
 801ff64:	f000 f948 	bl	80201f8 <_fflush_r>
 801ff68:	bb28      	cbnz	r0, 801ffb6 <__swbuf_r+0x8e>
 801ff6a:	68a3      	ldr	r3, [r4, #8]
 801ff6c:	3001      	adds	r0, #1
 801ff6e:	3b01      	subs	r3, #1
 801ff70:	60a3      	str	r3, [r4, #8]
 801ff72:	6823      	ldr	r3, [r4, #0]
 801ff74:	1c5a      	adds	r2, r3, #1
 801ff76:	6022      	str	r2, [r4, #0]
 801ff78:	701e      	strb	r6, [r3, #0]
 801ff7a:	6963      	ldr	r3, [r4, #20]
 801ff7c:	4283      	cmp	r3, r0
 801ff7e:	d004      	beq.n	801ff8a <__swbuf_r+0x62>
 801ff80:	89a3      	ldrh	r3, [r4, #12]
 801ff82:	07db      	lsls	r3, r3, #31
 801ff84:	d519      	bpl.n	801ffba <__swbuf_r+0x92>
 801ff86:	2e0a      	cmp	r6, #10
 801ff88:	d117      	bne.n	801ffba <__swbuf_r+0x92>
 801ff8a:	4621      	mov	r1, r4
 801ff8c:	4628      	mov	r0, r5
 801ff8e:	f000 f933 	bl	80201f8 <_fflush_r>
 801ff92:	b190      	cbz	r0, 801ffba <__swbuf_r+0x92>
 801ff94:	e00f      	b.n	801ffb6 <__swbuf_r+0x8e>
 801ff96:	4b0b      	ldr	r3, [pc, #44]	; (801ffc4 <__swbuf_r+0x9c>)
 801ff98:	429c      	cmp	r4, r3
 801ff9a:	d101      	bne.n	801ffa0 <__swbuf_r+0x78>
 801ff9c:	68ac      	ldr	r4, [r5, #8]
 801ff9e:	e7d0      	b.n	801ff42 <__swbuf_r+0x1a>
 801ffa0:	4b09      	ldr	r3, [pc, #36]	; (801ffc8 <__swbuf_r+0xa0>)
 801ffa2:	429c      	cmp	r4, r3
 801ffa4:	bf08      	it	eq
 801ffa6:	68ec      	ldreq	r4, [r5, #12]
 801ffa8:	e7cb      	b.n	801ff42 <__swbuf_r+0x1a>
 801ffaa:	4621      	mov	r1, r4
 801ffac:	4628      	mov	r0, r5
 801ffae:	f000 f81f 	bl	801fff0 <__swsetup_r>
 801ffb2:	2800      	cmp	r0, #0
 801ffb4:	d0cc      	beq.n	801ff50 <__swbuf_r+0x28>
 801ffb6:	f04f 37ff 	mov.w	r7, #4294967295
 801ffba:	4638      	mov	r0, r7
 801ffbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffbe:	bf00      	nop
 801ffc0:	0802055c 	.word	0x0802055c
 801ffc4:	0802057c 	.word	0x0802057c
 801ffc8:	0802053c 	.word	0x0802053c

0801ffcc <_write_r>:
 801ffcc:	b538      	push	{r3, r4, r5, lr}
 801ffce:	4605      	mov	r5, r0
 801ffd0:	4608      	mov	r0, r1
 801ffd2:	4611      	mov	r1, r2
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	4c05      	ldr	r4, [pc, #20]	; (801ffec <_write_r+0x20>)
 801ffd8:	6022      	str	r2, [r4, #0]
 801ffda:	461a      	mov	r2, r3
 801ffdc:	f7f4 ff91 	bl	8014f02 <_write>
 801ffe0:	1c43      	adds	r3, r0, #1
 801ffe2:	d102      	bne.n	801ffea <_write_r+0x1e>
 801ffe4:	6823      	ldr	r3, [r4, #0]
 801ffe6:	b103      	cbz	r3, 801ffea <_write_r+0x1e>
 801ffe8:	602b      	str	r3, [r5, #0]
 801ffea:	bd38      	pop	{r3, r4, r5, pc}
 801ffec:	20001cc4 	.word	0x20001cc4

0801fff0 <__swsetup_r>:
 801fff0:	4b32      	ldr	r3, [pc, #200]	; (80200bc <__swsetup_r+0xcc>)
 801fff2:	b570      	push	{r4, r5, r6, lr}
 801fff4:	681d      	ldr	r5, [r3, #0]
 801fff6:	4606      	mov	r6, r0
 801fff8:	460c      	mov	r4, r1
 801fffa:	b125      	cbz	r5, 8020006 <__swsetup_r+0x16>
 801fffc:	69ab      	ldr	r3, [r5, #24]
 801fffe:	b913      	cbnz	r3, 8020006 <__swsetup_r+0x16>
 8020000:	4628      	mov	r0, r5
 8020002:	f7ff fa59 	bl	801f4b8 <__sinit>
 8020006:	4b2e      	ldr	r3, [pc, #184]	; (80200c0 <__swsetup_r+0xd0>)
 8020008:	429c      	cmp	r4, r3
 802000a:	d10f      	bne.n	802002c <__swsetup_r+0x3c>
 802000c:	686c      	ldr	r4, [r5, #4]
 802000e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020012:	b29a      	uxth	r2, r3
 8020014:	0715      	lsls	r5, r2, #28
 8020016:	d42c      	bmi.n	8020072 <__swsetup_r+0x82>
 8020018:	06d0      	lsls	r0, r2, #27
 802001a:	d411      	bmi.n	8020040 <__swsetup_r+0x50>
 802001c:	2209      	movs	r2, #9
 802001e:	6032      	str	r2, [r6, #0]
 8020020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020024:	81a3      	strh	r3, [r4, #12]
 8020026:	f04f 30ff 	mov.w	r0, #4294967295
 802002a:	e03e      	b.n	80200aa <__swsetup_r+0xba>
 802002c:	4b25      	ldr	r3, [pc, #148]	; (80200c4 <__swsetup_r+0xd4>)
 802002e:	429c      	cmp	r4, r3
 8020030:	d101      	bne.n	8020036 <__swsetup_r+0x46>
 8020032:	68ac      	ldr	r4, [r5, #8]
 8020034:	e7eb      	b.n	802000e <__swsetup_r+0x1e>
 8020036:	4b24      	ldr	r3, [pc, #144]	; (80200c8 <__swsetup_r+0xd8>)
 8020038:	429c      	cmp	r4, r3
 802003a:	bf08      	it	eq
 802003c:	68ec      	ldreq	r4, [r5, #12]
 802003e:	e7e6      	b.n	802000e <__swsetup_r+0x1e>
 8020040:	0751      	lsls	r1, r2, #29
 8020042:	d512      	bpl.n	802006a <__swsetup_r+0x7a>
 8020044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020046:	b141      	cbz	r1, 802005a <__swsetup_r+0x6a>
 8020048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802004c:	4299      	cmp	r1, r3
 802004e:	d002      	beq.n	8020056 <__swsetup_r+0x66>
 8020050:	4630      	mov	r0, r6
 8020052:	f7fd fe89 	bl	801dd68 <_free_r>
 8020056:	2300      	movs	r3, #0
 8020058:	6363      	str	r3, [r4, #52]	; 0x34
 802005a:	89a3      	ldrh	r3, [r4, #12]
 802005c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020060:	81a3      	strh	r3, [r4, #12]
 8020062:	2300      	movs	r3, #0
 8020064:	6063      	str	r3, [r4, #4]
 8020066:	6923      	ldr	r3, [r4, #16]
 8020068:	6023      	str	r3, [r4, #0]
 802006a:	89a3      	ldrh	r3, [r4, #12]
 802006c:	f043 0308 	orr.w	r3, r3, #8
 8020070:	81a3      	strh	r3, [r4, #12]
 8020072:	6923      	ldr	r3, [r4, #16]
 8020074:	b94b      	cbnz	r3, 802008a <__swsetup_r+0x9a>
 8020076:	89a3      	ldrh	r3, [r4, #12]
 8020078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802007c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020080:	d003      	beq.n	802008a <__swsetup_r+0x9a>
 8020082:	4621      	mov	r1, r4
 8020084:	4630      	mov	r0, r6
 8020086:	f000 f917 	bl	80202b8 <__smakebuf_r>
 802008a:	89a2      	ldrh	r2, [r4, #12]
 802008c:	f012 0301 	ands.w	r3, r2, #1
 8020090:	d00c      	beq.n	80200ac <__swsetup_r+0xbc>
 8020092:	2300      	movs	r3, #0
 8020094:	60a3      	str	r3, [r4, #8]
 8020096:	6963      	ldr	r3, [r4, #20]
 8020098:	425b      	negs	r3, r3
 802009a:	61a3      	str	r3, [r4, #24]
 802009c:	6923      	ldr	r3, [r4, #16]
 802009e:	b953      	cbnz	r3, 80200b6 <__swsetup_r+0xc6>
 80200a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80200a8:	d1ba      	bne.n	8020020 <__swsetup_r+0x30>
 80200aa:	bd70      	pop	{r4, r5, r6, pc}
 80200ac:	0792      	lsls	r2, r2, #30
 80200ae:	bf58      	it	pl
 80200b0:	6963      	ldrpl	r3, [r4, #20]
 80200b2:	60a3      	str	r3, [r4, #8]
 80200b4:	e7f2      	b.n	802009c <__swsetup_r+0xac>
 80200b6:	2000      	movs	r0, #0
 80200b8:	e7f7      	b.n	80200aa <__swsetup_r+0xba>
 80200ba:	bf00      	nop
 80200bc:	200003d8 	.word	0x200003d8
 80200c0:	0802055c 	.word	0x0802055c
 80200c4:	0802057c 	.word	0x0802057c
 80200c8:	0802053c 	.word	0x0802053c

080200cc <_close_r>:
 80200cc:	b538      	push	{r3, r4, r5, lr}
 80200ce:	2300      	movs	r3, #0
 80200d0:	4c05      	ldr	r4, [pc, #20]	; (80200e8 <_close_r+0x1c>)
 80200d2:	4605      	mov	r5, r0
 80200d4:	4608      	mov	r0, r1
 80200d6:	6023      	str	r3, [r4, #0]
 80200d8:	f7f4 ff2f 	bl	8014f3a <_close>
 80200dc:	1c43      	adds	r3, r0, #1
 80200de:	d102      	bne.n	80200e6 <_close_r+0x1a>
 80200e0:	6823      	ldr	r3, [r4, #0]
 80200e2:	b103      	cbz	r3, 80200e6 <_close_r+0x1a>
 80200e4:	602b      	str	r3, [r5, #0]
 80200e6:	bd38      	pop	{r3, r4, r5, pc}
 80200e8:	20001cc4 	.word	0x20001cc4

080200ec <__sflush_r>:
 80200ec:	898a      	ldrh	r2, [r1, #12]
 80200ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200f2:	4605      	mov	r5, r0
 80200f4:	0710      	lsls	r0, r2, #28
 80200f6:	460c      	mov	r4, r1
 80200f8:	d458      	bmi.n	80201ac <__sflush_r+0xc0>
 80200fa:	684b      	ldr	r3, [r1, #4]
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	dc05      	bgt.n	802010c <__sflush_r+0x20>
 8020100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020102:	2b00      	cmp	r3, #0
 8020104:	dc02      	bgt.n	802010c <__sflush_r+0x20>
 8020106:	2000      	movs	r0, #0
 8020108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802010c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802010e:	2e00      	cmp	r6, #0
 8020110:	d0f9      	beq.n	8020106 <__sflush_r+0x1a>
 8020112:	2300      	movs	r3, #0
 8020114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020118:	682f      	ldr	r7, [r5, #0]
 802011a:	6a21      	ldr	r1, [r4, #32]
 802011c:	602b      	str	r3, [r5, #0]
 802011e:	d032      	beq.n	8020186 <__sflush_r+0x9a>
 8020120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020122:	89a3      	ldrh	r3, [r4, #12]
 8020124:	075a      	lsls	r2, r3, #29
 8020126:	d505      	bpl.n	8020134 <__sflush_r+0x48>
 8020128:	6863      	ldr	r3, [r4, #4]
 802012a:	1ac0      	subs	r0, r0, r3
 802012c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802012e:	b10b      	cbz	r3, 8020134 <__sflush_r+0x48>
 8020130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020132:	1ac0      	subs	r0, r0, r3
 8020134:	2300      	movs	r3, #0
 8020136:	4602      	mov	r2, r0
 8020138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802013a:	6a21      	ldr	r1, [r4, #32]
 802013c:	4628      	mov	r0, r5
 802013e:	47b0      	blx	r6
 8020140:	1c43      	adds	r3, r0, #1
 8020142:	89a3      	ldrh	r3, [r4, #12]
 8020144:	d106      	bne.n	8020154 <__sflush_r+0x68>
 8020146:	6829      	ldr	r1, [r5, #0]
 8020148:	291d      	cmp	r1, #29
 802014a:	d848      	bhi.n	80201de <__sflush_r+0xf2>
 802014c:	4a29      	ldr	r2, [pc, #164]	; (80201f4 <__sflush_r+0x108>)
 802014e:	40ca      	lsrs	r2, r1
 8020150:	07d6      	lsls	r6, r2, #31
 8020152:	d544      	bpl.n	80201de <__sflush_r+0xf2>
 8020154:	2200      	movs	r2, #0
 8020156:	6062      	str	r2, [r4, #4]
 8020158:	6922      	ldr	r2, [r4, #16]
 802015a:	04d9      	lsls	r1, r3, #19
 802015c:	6022      	str	r2, [r4, #0]
 802015e:	d504      	bpl.n	802016a <__sflush_r+0x7e>
 8020160:	1c42      	adds	r2, r0, #1
 8020162:	d101      	bne.n	8020168 <__sflush_r+0x7c>
 8020164:	682b      	ldr	r3, [r5, #0]
 8020166:	b903      	cbnz	r3, 802016a <__sflush_r+0x7e>
 8020168:	6560      	str	r0, [r4, #84]	; 0x54
 802016a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802016c:	602f      	str	r7, [r5, #0]
 802016e:	2900      	cmp	r1, #0
 8020170:	d0c9      	beq.n	8020106 <__sflush_r+0x1a>
 8020172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020176:	4299      	cmp	r1, r3
 8020178:	d002      	beq.n	8020180 <__sflush_r+0x94>
 802017a:	4628      	mov	r0, r5
 802017c:	f7fd fdf4 	bl	801dd68 <_free_r>
 8020180:	2000      	movs	r0, #0
 8020182:	6360      	str	r0, [r4, #52]	; 0x34
 8020184:	e7c0      	b.n	8020108 <__sflush_r+0x1c>
 8020186:	2301      	movs	r3, #1
 8020188:	4628      	mov	r0, r5
 802018a:	47b0      	blx	r6
 802018c:	1c41      	adds	r1, r0, #1
 802018e:	d1c8      	bne.n	8020122 <__sflush_r+0x36>
 8020190:	682b      	ldr	r3, [r5, #0]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d0c5      	beq.n	8020122 <__sflush_r+0x36>
 8020196:	2b1d      	cmp	r3, #29
 8020198:	d001      	beq.n	802019e <__sflush_r+0xb2>
 802019a:	2b16      	cmp	r3, #22
 802019c:	d101      	bne.n	80201a2 <__sflush_r+0xb6>
 802019e:	602f      	str	r7, [r5, #0]
 80201a0:	e7b1      	b.n	8020106 <__sflush_r+0x1a>
 80201a2:	89a3      	ldrh	r3, [r4, #12]
 80201a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80201a8:	81a3      	strh	r3, [r4, #12]
 80201aa:	e7ad      	b.n	8020108 <__sflush_r+0x1c>
 80201ac:	690f      	ldr	r7, [r1, #16]
 80201ae:	2f00      	cmp	r7, #0
 80201b0:	d0a9      	beq.n	8020106 <__sflush_r+0x1a>
 80201b2:	0793      	lsls	r3, r2, #30
 80201b4:	bf18      	it	ne
 80201b6:	2300      	movne	r3, #0
 80201b8:	680e      	ldr	r6, [r1, #0]
 80201ba:	bf08      	it	eq
 80201bc:	694b      	ldreq	r3, [r1, #20]
 80201be:	eba6 0807 	sub.w	r8, r6, r7
 80201c2:	600f      	str	r7, [r1, #0]
 80201c4:	608b      	str	r3, [r1, #8]
 80201c6:	f1b8 0f00 	cmp.w	r8, #0
 80201ca:	dd9c      	ble.n	8020106 <__sflush_r+0x1a>
 80201cc:	4643      	mov	r3, r8
 80201ce:	463a      	mov	r2, r7
 80201d0:	6a21      	ldr	r1, [r4, #32]
 80201d2:	4628      	mov	r0, r5
 80201d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80201d6:	47b0      	blx	r6
 80201d8:	2800      	cmp	r0, #0
 80201da:	dc06      	bgt.n	80201ea <__sflush_r+0xfe>
 80201dc:	89a3      	ldrh	r3, [r4, #12]
 80201de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80201e2:	81a3      	strh	r3, [r4, #12]
 80201e4:	f04f 30ff 	mov.w	r0, #4294967295
 80201e8:	e78e      	b.n	8020108 <__sflush_r+0x1c>
 80201ea:	4407      	add	r7, r0
 80201ec:	eba8 0800 	sub.w	r8, r8, r0
 80201f0:	e7e9      	b.n	80201c6 <__sflush_r+0xda>
 80201f2:	bf00      	nop
 80201f4:	20400001 	.word	0x20400001

080201f8 <_fflush_r>:
 80201f8:	b538      	push	{r3, r4, r5, lr}
 80201fa:	690b      	ldr	r3, [r1, #16]
 80201fc:	4605      	mov	r5, r0
 80201fe:	460c      	mov	r4, r1
 8020200:	b1db      	cbz	r3, 802023a <_fflush_r+0x42>
 8020202:	b118      	cbz	r0, 802020c <_fflush_r+0x14>
 8020204:	6983      	ldr	r3, [r0, #24]
 8020206:	b90b      	cbnz	r3, 802020c <_fflush_r+0x14>
 8020208:	f7ff f956 	bl	801f4b8 <__sinit>
 802020c:	4b0c      	ldr	r3, [pc, #48]	; (8020240 <_fflush_r+0x48>)
 802020e:	429c      	cmp	r4, r3
 8020210:	d109      	bne.n	8020226 <_fflush_r+0x2e>
 8020212:	686c      	ldr	r4, [r5, #4]
 8020214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020218:	b17b      	cbz	r3, 802023a <_fflush_r+0x42>
 802021a:	4621      	mov	r1, r4
 802021c:	4628      	mov	r0, r5
 802021e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020222:	f7ff bf63 	b.w	80200ec <__sflush_r>
 8020226:	4b07      	ldr	r3, [pc, #28]	; (8020244 <_fflush_r+0x4c>)
 8020228:	429c      	cmp	r4, r3
 802022a:	d101      	bne.n	8020230 <_fflush_r+0x38>
 802022c:	68ac      	ldr	r4, [r5, #8]
 802022e:	e7f1      	b.n	8020214 <_fflush_r+0x1c>
 8020230:	4b05      	ldr	r3, [pc, #20]	; (8020248 <_fflush_r+0x50>)
 8020232:	429c      	cmp	r4, r3
 8020234:	bf08      	it	eq
 8020236:	68ec      	ldreq	r4, [r5, #12]
 8020238:	e7ec      	b.n	8020214 <_fflush_r+0x1c>
 802023a:	2000      	movs	r0, #0
 802023c:	bd38      	pop	{r3, r4, r5, pc}
 802023e:	bf00      	nop
 8020240:	0802055c 	.word	0x0802055c
 8020244:	0802057c 	.word	0x0802057c
 8020248:	0802053c 	.word	0x0802053c

0802024c <_lseek_r>:
 802024c:	b538      	push	{r3, r4, r5, lr}
 802024e:	4605      	mov	r5, r0
 8020250:	4608      	mov	r0, r1
 8020252:	4611      	mov	r1, r2
 8020254:	2200      	movs	r2, #0
 8020256:	4c05      	ldr	r4, [pc, #20]	; (802026c <_lseek_r+0x20>)
 8020258:	6022      	str	r2, [r4, #0]
 802025a:	461a      	mov	r2, r3
 802025c:	f7f4 fe91 	bl	8014f82 <_lseek>
 8020260:	1c43      	adds	r3, r0, #1
 8020262:	d102      	bne.n	802026a <_lseek_r+0x1e>
 8020264:	6823      	ldr	r3, [r4, #0]
 8020266:	b103      	cbz	r3, 802026a <_lseek_r+0x1e>
 8020268:	602b      	str	r3, [r5, #0]
 802026a:	bd38      	pop	{r3, r4, r5, pc}
 802026c:	20001cc4 	.word	0x20001cc4

08020270 <__swhatbuf_r>:
 8020270:	b570      	push	{r4, r5, r6, lr}
 8020272:	460e      	mov	r6, r1
 8020274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020278:	b096      	sub	sp, #88	; 0x58
 802027a:	2900      	cmp	r1, #0
 802027c:	4614      	mov	r4, r2
 802027e:	461d      	mov	r5, r3
 8020280:	da07      	bge.n	8020292 <__swhatbuf_r+0x22>
 8020282:	2300      	movs	r3, #0
 8020284:	602b      	str	r3, [r5, #0]
 8020286:	89b3      	ldrh	r3, [r6, #12]
 8020288:	061a      	lsls	r2, r3, #24
 802028a:	d410      	bmi.n	80202ae <__swhatbuf_r+0x3e>
 802028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020290:	e00e      	b.n	80202b0 <__swhatbuf_r+0x40>
 8020292:	466a      	mov	r2, sp
 8020294:	f000 f88a 	bl	80203ac <_fstat_r>
 8020298:	2800      	cmp	r0, #0
 802029a:	dbf2      	blt.n	8020282 <__swhatbuf_r+0x12>
 802029c:	9a01      	ldr	r2, [sp, #4]
 802029e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80202a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80202a6:	425a      	negs	r2, r3
 80202a8:	415a      	adcs	r2, r3
 80202aa:	602a      	str	r2, [r5, #0]
 80202ac:	e7ee      	b.n	802028c <__swhatbuf_r+0x1c>
 80202ae:	2340      	movs	r3, #64	; 0x40
 80202b0:	2000      	movs	r0, #0
 80202b2:	6023      	str	r3, [r4, #0]
 80202b4:	b016      	add	sp, #88	; 0x58
 80202b6:	bd70      	pop	{r4, r5, r6, pc}

080202b8 <__smakebuf_r>:
 80202b8:	898b      	ldrh	r3, [r1, #12]
 80202ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80202bc:	079d      	lsls	r5, r3, #30
 80202be:	4606      	mov	r6, r0
 80202c0:	460c      	mov	r4, r1
 80202c2:	d507      	bpl.n	80202d4 <__smakebuf_r+0x1c>
 80202c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80202c8:	6023      	str	r3, [r4, #0]
 80202ca:	6123      	str	r3, [r4, #16]
 80202cc:	2301      	movs	r3, #1
 80202ce:	6163      	str	r3, [r4, #20]
 80202d0:	b002      	add	sp, #8
 80202d2:	bd70      	pop	{r4, r5, r6, pc}
 80202d4:	ab01      	add	r3, sp, #4
 80202d6:	466a      	mov	r2, sp
 80202d8:	f7ff ffca 	bl	8020270 <__swhatbuf_r>
 80202dc:	9900      	ldr	r1, [sp, #0]
 80202de:	4605      	mov	r5, r0
 80202e0:	4630      	mov	r0, r6
 80202e2:	f7fd fd8d 	bl	801de00 <_malloc_r>
 80202e6:	b948      	cbnz	r0, 80202fc <__smakebuf_r+0x44>
 80202e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80202ec:	059a      	lsls	r2, r3, #22
 80202ee:	d4ef      	bmi.n	80202d0 <__smakebuf_r+0x18>
 80202f0:	f023 0303 	bic.w	r3, r3, #3
 80202f4:	f043 0302 	orr.w	r3, r3, #2
 80202f8:	81a3      	strh	r3, [r4, #12]
 80202fa:	e7e3      	b.n	80202c4 <__smakebuf_r+0xc>
 80202fc:	4b0d      	ldr	r3, [pc, #52]	; (8020334 <__smakebuf_r+0x7c>)
 80202fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8020300:	89a3      	ldrh	r3, [r4, #12]
 8020302:	6020      	str	r0, [r4, #0]
 8020304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020308:	81a3      	strh	r3, [r4, #12]
 802030a:	9b00      	ldr	r3, [sp, #0]
 802030c:	6120      	str	r0, [r4, #16]
 802030e:	6163      	str	r3, [r4, #20]
 8020310:	9b01      	ldr	r3, [sp, #4]
 8020312:	b15b      	cbz	r3, 802032c <__smakebuf_r+0x74>
 8020314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020318:	4630      	mov	r0, r6
 802031a:	f000 f859 	bl	80203d0 <_isatty_r>
 802031e:	b128      	cbz	r0, 802032c <__smakebuf_r+0x74>
 8020320:	89a3      	ldrh	r3, [r4, #12]
 8020322:	f023 0303 	bic.w	r3, r3, #3
 8020326:	f043 0301 	orr.w	r3, r3, #1
 802032a:	81a3      	strh	r3, [r4, #12]
 802032c:	89a3      	ldrh	r3, [r4, #12]
 802032e:	431d      	orrs	r5, r3
 8020330:	81a5      	strh	r5, [r4, #12]
 8020332:	e7cd      	b.n	80202d0 <__smakebuf_r+0x18>
 8020334:	0801f481 	.word	0x0801f481

08020338 <__ascii_mbtowc>:
 8020338:	b082      	sub	sp, #8
 802033a:	b901      	cbnz	r1, 802033e <__ascii_mbtowc+0x6>
 802033c:	a901      	add	r1, sp, #4
 802033e:	b142      	cbz	r2, 8020352 <__ascii_mbtowc+0x1a>
 8020340:	b14b      	cbz	r3, 8020356 <__ascii_mbtowc+0x1e>
 8020342:	7813      	ldrb	r3, [r2, #0]
 8020344:	600b      	str	r3, [r1, #0]
 8020346:	7812      	ldrb	r2, [r2, #0]
 8020348:	1c10      	adds	r0, r2, #0
 802034a:	bf18      	it	ne
 802034c:	2001      	movne	r0, #1
 802034e:	b002      	add	sp, #8
 8020350:	4770      	bx	lr
 8020352:	4610      	mov	r0, r2
 8020354:	e7fb      	b.n	802034e <__ascii_mbtowc+0x16>
 8020356:	f06f 0001 	mvn.w	r0, #1
 802035a:	e7f8      	b.n	802034e <__ascii_mbtowc+0x16>

0802035c <_malloc_usable_size_r>:
 802035c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020360:	1f18      	subs	r0, r3, #4
 8020362:	2b00      	cmp	r3, #0
 8020364:	bfbc      	itt	lt
 8020366:	580b      	ldrlt	r3, [r1, r0]
 8020368:	18c0      	addlt	r0, r0, r3
 802036a:	4770      	bx	lr

0802036c <_read_r>:
 802036c:	b538      	push	{r3, r4, r5, lr}
 802036e:	4605      	mov	r5, r0
 8020370:	4608      	mov	r0, r1
 8020372:	4611      	mov	r1, r2
 8020374:	2200      	movs	r2, #0
 8020376:	4c05      	ldr	r4, [pc, #20]	; (802038c <_read_r+0x20>)
 8020378:	6022      	str	r2, [r4, #0]
 802037a:	461a      	mov	r2, r3
 802037c:	f7f4 fda4 	bl	8014ec8 <_read>
 8020380:	1c43      	adds	r3, r0, #1
 8020382:	d102      	bne.n	802038a <_read_r+0x1e>
 8020384:	6823      	ldr	r3, [r4, #0]
 8020386:	b103      	cbz	r3, 802038a <_read_r+0x1e>
 8020388:	602b      	str	r3, [r5, #0]
 802038a:	bd38      	pop	{r3, r4, r5, pc}
 802038c:	20001cc4 	.word	0x20001cc4

08020390 <__ascii_wctomb>:
 8020390:	b149      	cbz	r1, 80203a6 <__ascii_wctomb+0x16>
 8020392:	2aff      	cmp	r2, #255	; 0xff
 8020394:	bf8b      	itete	hi
 8020396:	238a      	movhi	r3, #138	; 0x8a
 8020398:	700a      	strbls	r2, [r1, #0]
 802039a:	6003      	strhi	r3, [r0, #0]
 802039c:	2001      	movls	r0, #1
 802039e:	bf88      	it	hi
 80203a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80203a4:	4770      	bx	lr
 80203a6:	4608      	mov	r0, r1
 80203a8:	4770      	bx	lr
	...

080203ac <_fstat_r>:
 80203ac:	b538      	push	{r3, r4, r5, lr}
 80203ae:	2300      	movs	r3, #0
 80203b0:	4c06      	ldr	r4, [pc, #24]	; (80203cc <_fstat_r+0x20>)
 80203b2:	4605      	mov	r5, r0
 80203b4:	4608      	mov	r0, r1
 80203b6:	4611      	mov	r1, r2
 80203b8:	6023      	str	r3, [r4, #0]
 80203ba:	f7f4 fdc9 	bl	8014f50 <_fstat>
 80203be:	1c43      	adds	r3, r0, #1
 80203c0:	d102      	bne.n	80203c8 <_fstat_r+0x1c>
 80203c2:	6823      	ldr	r3, [r4, #0]
 80203c4:	b103      	cbz	r3, 80203c8 <_fstat_r+0x1c>
 80203c6:	602b      	str	r3, [r5, #0]
 80203c8:	bd38      	pop	{r3, r4, r5, pc}
 80203ca:	bf00      	nop
 80203cc:	20001cc4 	.word	0x20001cc4

080203d0 <_isatty_r>:
 80203d0:	b538      	push	{r3, r4, r5, lr}
 80203d2:	2300      	movs	r3, #0
 80203d4:	4c05      	ldr	r4, [pc, #20]	; (80203ec <_isatty_r+0x1c>)
 80203d6:	4605      	mov	r5, r0
 80203d8:	4608      	mov	r0, r1
 80203da:	6023      	str	r3, [r4, #0]
 80203dc:	f7f4 fdc7 	bl	8014f6e <_isatty>
 80203e0:	1c43      	adds	r3, r0, #1
 80203e2:	d102      	bne.n	80203ea <_isatty_r+0x1a>
 80203e4:	6823      	ldr	r3, [r4, #0]
 80203e6:	b103      	cbz	r3, 80203ea <_isatty_r+0x1a>
 80203e8:	602b      	str	r3, [r5, #0]
 80203ea:	bd38      	pop	{r3, r4, r5, pc}
 80203ec:	20001cc4 	.word	0x20001cc4

080203f0 <_init>:
 80203f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203f2:	bf00      	nop
 80203f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80203f6:	bc08      	pop	{r3}
 80203f8:	469e      	mov	lr, r3
 80203fa:	4770      	bx	lr

080203fc <_fini>:
 80203fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203fe:	bf00      	nop
 8020400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020402:	bc08      	pop	{r3}
 8020404:	469e      	mov	lr, r3
 8020406:	4770      	bx	lr
