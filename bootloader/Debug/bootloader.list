
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000800c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008264  08008264  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008264  08008264  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008264  08008264  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800826c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  20000180  080083ec  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  080083ec  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e9f  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035fc  00000000  00000000  00038048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003b648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003c960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cba7  00000000  00000000  0003dae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015126  00000000  00000000  0005a687  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d85a  00000000  00000000  0006f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  0010d084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000180 	.word	0x20000180
 8000200:	00000000 	.word	0x00000000
 8000204:	080081d8 	.word	0x080081d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000184 	.word	0x20000184
 8000220:	080081d8 	.word	0x080081d8

08000224 <userAppStart>:
uint8_t flash_flag=0;
uint8_t flag=0;



void userAppStart(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	  for(int i=0;i<2;i++){
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e014      	b.n	800025a <userAppStart+0x36>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000230:	2201      	movs	r2, #1
 8000232:	2101      	movs	r1, #1
 8000234:	4824      	ldr	r0, [pc, #144]	; (80002c8 <userAppStart+0xa4>)
 8000236:	f001 f8f1 	bl	800141c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 fc53 	bl	8000ae8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	4820      	ldr	r0, [pc, #128]	; (80002c8 <userAppStart+0xa4>)
 8000248:	f001 f8e8 	bl	800141c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800024c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000250:	f000 fc4a 	bl	8000ae8 <HAL_Delay>
	  for(int i=0;i<2;i++){
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3301      	adds	r3, #1
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2b01      	cmp	r3, #1
 800025e:	dde7      	ble.n	8000230 <userAppStart+0xc>
	  }
    for(int i = 0; i < 8; i++) {
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	e010      	b.n	8000288 <userAppStart+0x64>
	   NVIC->ICER[i] = 0xFFFFFFFF; // 关闭中断
 8000266:	4a19      	ldr	r2, [pc, #100]	; (80002cc <userAppStart+0xa8>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3320      	adds	r3, #32
 800026c:	f04f 31ff 	mov.w	r1, #4294967295
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	   NVIC->ICPR[i] = 0xFFFFFFFF; // 清除中断标志位
 8000274:	4a15      	ldr	r2, [pc, #84]	; (80002cc <userAppStart+0xa8>)
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	3360      	adds	r3, #96	; 0x60
 800027a:	f04f 31ff 	mov.w	r1, #4294967295
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < 8; i++) {
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	2b07      	cmp	r3, #7
 800028c:	ddeb      	ble.n	8000266 <userAppStart+0x42>
    }
	if(((*(__IO uint32_t *)ApplicationAddress) & 0x2FFE0000) == 0x20000000){
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <userAppStart+0xac>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <userAppStart+0xb0>)
 8000294:	4013      	ands	r3, r2
 8000296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800029a:	d111      	bne.n	80002c0 <userAppStart+0x9c>
		jumpAddress = *(__IO uint32_t *)(ApplicationAddress +4);
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <userAppStart+0xb4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <userAppStart+0xb8>)
 80002a2:	6013      	str	r3, [r2, #0]
		jump_To_Application  = (pFunction) jumpAddress;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <userAppStart+0xb8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <userAppStart+0xbc>)
 80002ac:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t *) ApplicationAddress);
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <userAppStart+0xac>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f383 8808 	msr	MSP, r3
		jump_To_Application();
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <userAppStart+0xbc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4798      	blx	r3
	}
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	0800e000 	.word	0x0800e000
 80002d4:	2ffe0000 	.word	0x2ffe0000
 80002d8:	0800e004 	.word	0x0800e004
 80002dc:	20000454 	.word	0x20000454
 80002e0:	200003c4 	.word	0x200003c4

080002e4 <erasureflash>:

void erasureflash(uint8_t page){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Unlock();
 80002ee:	f000 fd9b 	bl	8000e28 <HAL_FLASH_Unlock>
	//2、擦除FLASH
	//初始化FLASH_EraseInitTypeDef
	FLASH_EraseInitTypeDef f;
	f.TypeErase = FLASH_TYPEERASE_PAGES;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
	f.PageAddress = addr;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <erasureflash+0x3c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	61bb      	str	r3, [r7, #24]
	f.NbPages = page;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	61fb      	str	r3, [r7, #28]
	//设置PageError
	uint32_t PageError = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
	//调用擦除函数
	HAL_FLASHEx_Erase(&f, &PageError);
 8000304:	f107 020c 	add.w	r2, r7, #12
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fe72 	bl	8000ff8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000314:	f000 fdae 	bl	8000e74 <HAL_FLASH_Lock>
}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000000 	.word	0x20000000

08000324 <writeFlashTest>:
	HAL_FLASH_Program(TYPEPROGRAM_WORD, addr,data);
	addr+=4;
//	HAL_FLASH_Lock();
}

void writeFlashTest(void){
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    //1、解锁FLASH
	HAL_FLASH_Unlock();
 800032a:	f000 fd7d 	bl	8000e28 <HAL_FLASH_Unlock>
//	//设置PageError
//	uint32_t PageError = 0;
//	//调用擦除函数
//	HAL_FLASHEx_Erase(&f, &PageError);
	//3、对FLASH烧写
	for(int i=0;i<valid_data;i++){
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e014      	b.n	800035e <writeFlashTest+0x3a>
		HAL_FLASH_Program(TYPEPROGRAM_WORD, addr, writeFlashData[i]);
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <writeFlashTest+0x50>)
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <writeFlashTest+0x54>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	f04f 0400 	mov.w	r4, #0
 8000344:	461a      	mov	r2, r3
 8000346:	4623      	mov	r3, r4
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fcfd 	bl	8000d48 <HAL_FLASH_Program>
		addr+=4;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <writeFlashTest+0x50>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3304      	adds	r3, #4
 8000354:	4a07      	ldr	r2, [pc, #28]	; (8000374 <writeFlashTest+0x50>)
 8000356:	6013      	str	r3, [r2, #0]
	for(int i=0;i<valid_data;i++){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <writeFlashTest+0x58>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	dbe5      	blt.n	8000334 <writeFlashTest+0x10>
	}
	//4、锁住FLASH
	HAL_FLASH_Lock();
 8000368:	f000 fd84 	bl	8000e74 <HAL_FLASH_Lock>
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bd90      	pop	{r4, r7, pc}
 8000374:	20000000 	.word	0x20000000
 8000378:	20000750 	.word	0x20000750
 800037c:	20000748 	.word	0x20000748

08000380 <firmware_update>:
	}
#endif
}

int c;
void  firmware_update(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  if(flag3==1){
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <firmware_update+0x58>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d10b      	bne.n	80003a4 <firmware_update+0x24>
	  flash_flag=0;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <firmware_update+0x5c>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
	  erasureflash(SIZE);
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <firmware_update+0x60>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ffa3 	bl	80002e4 <erasureflash>
	  flag3=0;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <firmware_update+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
  }
  if(flag2==1){
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <firmware_update+0x64>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d113      	bne.n	80003d4 <firmware_update+0x54>
	  flash_flag=0;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <firmware_update+0x5c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT((TIM_HandleTypeDef *)&htim1);
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <firmware_update+0x68>)
 80003b4:	f003 f950 	bl	8003658 <HAL_TIM_Base_Stop_IT>
	  if(my_RxLength<64){
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <firmware_update+0x6c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b3f      	cmp	r3, #63	; 0x3f
 80003be:	d804      	bhi.n	80003ca <firmware_update+0x4a>
		  writeFlashTest();
 80003c0:	f7ff ffb0 	bl	8000324 <writeFlashTest>
//		  printFlashTest();
		  userAppStart();
 80003c4:	f7ff ff2e 	bl	8000224 <userAppStart>
 80003c8:	e001      	b.n	80003ce <firmware_update+0x4e>
	  }else{
		  writeFlashTest();
 80003ca:	f7ff ffab 	bl	8000324 <writeFlashTest>
			temp_count=0;
			count=0;
		}
	}
	*/
	flag2=0;
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <firmware_update+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
  }
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000f58 	.word	0x20000f58
 80003dc:	200001a0 	.word	0x200001a0
 80003e0:	20000744 	.word	0x20000744
 80003e4:	2000074c 	.word	0x2000074c
 80003e8:	2000040c 	.word	0x2000040c
 80003ec:	20000f50 	.word	0x20000f50

080003f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d10c      	bne.n	800041c <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(flash_flag>0)
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <HAL_TIM_PeriodElapsedCallback+0x20>
		  HAL_TIM_Base_Stop_IT((TIM_HandleTypeDef *)&htim1);
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800040c:	f003 f924 	bl	8003658 <HAL_TIM_Base_Stop_IT>
		flash_flag++;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800041a:	701a      	strb	r2, [r3, #0]
	}
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40012c00 	.word	0x40012c00
 8000428:	200001a0 	.word	0x200001a0
 800042c:	2000040c 	.word	0x2000040c

08000430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000434:	f000 faf6 	bl	8000a24 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000438:	f000 f826 	bl	8000488 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,0);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000442:	480e      	ldr	r0, [pc, #56]	; (800047c <main+0x4c>)
 8000444:	f000 ffea 	bl	800141c <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000448:	f000 f8f8 	bl	800063c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800044c:	f000 f8cc 	bl	80005e8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000450:	f007 f960 	bl	8007714 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000454:	f000 f876 	bl	8000544 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,1);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800045e:	4807      	ldr	r0, [pc, #28]	; (800047c <main+0x4c>)
 8000460:	f000 ffdc 	bl	800141c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim1);
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <main+0x50>)
 8000466:	f003 f897 	bl	8003598 <HAL_TIM_Base_Start_IT>
//  printFlashTest();
  while (1)
  {
	if(flash_flag>1)
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <main+0x54>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d901      	bls.n	8000476 <main+0x46>
	  userAppStart();
 8000472:	f7ff fed7 	bl	8000224 <userAppStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	firmware_update();
 8000476:	f7ff ff83 	bl	8000380 <firmware_update>
	if(flash_flag>1)
 800047a:	e7f6      	b.n	800046a <main+0x3a>
 800047c:	40011000 	.word	0x40011000
 8000480:	2000040c 	.word	0x2000040c
 8000484:	200001a0 	.word	0x200001a0

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b096      	sub	sp, #88	; 0x58
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f007 fe96 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]
 80004ba:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004bc:	2301      	movs	r3, #1
 80004be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fb36 	bl	8002b54 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004ee:	f000 f94f 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	230f      	movs	r3, #15
 80004f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2302      	movs	r3, #2
 80004f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000508:	f107 031c 	add.w	r3, r7, #28
 800050c:	2101      	movs	r1, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fda0 	bl	8003054 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800051a:	f000 f939 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800051e:	2310      	movs	r3, #16
 8000520:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000526:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f002 ff2e 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000536:	f000 f92b 	bl	8000790 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3758      	adds	r7, #88	; 0x58
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000562:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000564:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000568:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800056c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000576:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800057a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_TIM1_Init+0x9c>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_TIM1_Init+0x9c>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <MX_TIM1_Init+0x9c>)
 8000590:	f002 ffb2 	bl	80034f8 <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800059a:	f000 f8f9 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <MX_TIM1_Init+0x9c>)
 80005ac:	f003 f98a 	bl	80038c4 <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005b6:	f000 f8eb 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_TIM1_Init+0x9c>)
 80005c8:	f003 fb68 	bl	8003c9c <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80005d2:	f000 f8dd 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000040c 	.word	0x2000040c
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_USART1_UART_Init+0x50>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000620:	f003 fbba 	bl	8003d98 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062a:	f000 f8b1 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200003c8 	.word	0x200003c8
 8000638:	40013800 	.word	0x40013800

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <MX_GPIO_Init+0x140>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a49      	ldr	r2, [pc, #292]	; (800077c <MX_GPIO_Init+0x140>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <MX_GPIO_Init+0x140>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <MX_GPIO_Init+0x140>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <MX_GPIO_Init+0x140>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <MX_GPIO_Init+0x140>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b3e      	ldr	r3, [pc, #248]	; (800077c <MX_GPIO_Init+0x140>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a3d      	ldr	r2, [pc, #244]	; (800077c <MX_GPIO_Init+0x140>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <MX_GPIO_Init+0x140>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <MX_GPIO_Init+0x140>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a37      	ldr	r2, [pc, #220]	; (800077c <MX_GPIO_Init+0x140>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <MX_GPIO_Init+0x140>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4832      	ldr	r0, [pc, #200]	; (8000780 <MX_GPIO_Init+0x144>)
 80006b6:	f000 feb1 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	4831      	ldr	r0, [pc, #196]	; (8000784 <MX_GPIO_Init+0x148>)
 80006c0:	f000 feac 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ca:	482f      	ldr	r0, [pc, #188]	; (8000788 <MX_GPIO_Init+0x14c>)
 80006cc:	f000 fea6 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4826      	ldr	r0, [pc, #152]	; (8000780 <MX_GPIO_Init+0x144>)
 80006e8:	f000 fd2e 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ec:	2301      	movs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4820      	ldr	r0, [pc, #128]	; (8000784 <MX_GPIO_Init+0x148>)
 8000704:	f000 fd20 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_GPIO_Init+0x144>)
 800071e:	f000 fd13 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <MX_GPIO_Init+0x14c>)
 8000738:	f000 fd06 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800073c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2302      	movs	r3, #2
 800074c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0x14c>)
 8000756:	f000 fcf7 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <MX_GPIO_Init+0x150>)
 800076e:	f000 fceb 	bl	8001148 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40011000 	.word	0x40011000
 800078c:	40011400 	.word	0x40011400

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x60>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_MspInit+0x60>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_TIM_Base_MspInit+0x74>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12b      	bne.n	800086a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_TIM_Base_MspInit+0x78>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <HAL_TIM_Base_MspInit+0x78>)
 8000818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_TIM_Base_MspInit+0x78>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2018      	movs	r0, #24
 8000830:	f000 fa53 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000834:	2018      	movs	r0, #24
 8000836:	f000 fa6c 	bl	8000d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2019      	movs	r0, #25
 8000840:	f000 fa4b 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000844:	2019      	movs	r0, #25
 8000846:	f000 fa64 	bl	8000d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	201a      	movs	r0, #26
 8000850:	f000 fa43 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000854:	201a      	movs	r0, #26
 8000856:	f000 fa5c 	bl	8000d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	201b      	movs	r0, #27
 8000860:	f000 fa3b 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000864:	201b      	movs	r0, #27
 8000866:	f000 fa54 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40012c00 	.word	0x40012c00
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <HAL_UART_MspInit+0x8c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d131      	bne.n	8000900 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_MspInit+0x90>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_UART_MspInit+0x90>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x90>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_UART_MspInit+0x90>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x90>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008e2:	f000 fc31 	bl	8001148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008fc:	f000 fc24 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <HardFault_Handler+0x4>

08000926 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <BusFault_Handler+0x4>

08000932 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8a6 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800096e:	f000 fe9e 	bl	80016ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000196c 	.word	0x2000196c

0800097c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM1_BRK_IRQHandler+0x10>)
 8000982:	f002 fe97 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000040c 	.word	0x2000040c

08000990 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <TIM1_UP_IRQHandler+0x10>)
 8000996:	f002 fe8d 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000040c 	.word	0x2000040c

080009a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80009aa:	f002 fe83 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000040c 	.word	0x2000040c

080009b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM1_CC_IRQHandler+0x10>)
 80009be:	f002 fe79 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000040c 	.word	0x2000040c

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009da:	e003      	b.n	80009e4 <LoopCopyDataInit>

080009dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009e2:	3104      	adds	r1, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009ec:	d3f6      	bcc.n	80009dc <CopyDataInit>
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009f0:	e002      	b.n	80009f8 <LoopFillZerobss>

080009f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009f4:	f842 3b04 	str.w	r3, [r2], #4

080009f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009fc:	d3f9      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fe:	f7ff ffe5 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f007 fbbd 	bl	8008180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fd13 	bl	8000430 <main>
  bx lr
 8000a0a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a0c:	0800826c 	.word	0x0800826c
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a14:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000a18:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000a1c:	20001c58 	.word	0x20001c58

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x28>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f945 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff feac 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f95d 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f925 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	20000008 	.word	0x20000008

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000458 	.word	0x20000458

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000458 	.word	0x20000458

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fff0 	bl	8000ad4 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_Delay+0x40>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffe0 	bl	8000ad4 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000000c 	.word	0x2000000c

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <__NVIC_EnableIRQ+0x34>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2d 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff42 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff35 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <HAL_FLASH_Program+0xd8>)
 8000d64:	7e1b      	ldrb	r3, [r3, #24]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <HAL_FLASH_Program+0x26>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e054      	b.n	8000e18 <HAL_FLASH_Program+0xd0>
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_FLASH_Program+0xd8>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d78:	f000 f8a8 	bl	8000ecc <FLASH_WaitForLastOperation>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d144      	bne.n	8000e10 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d102      	bne.n	8000d92 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	757b      	strb	r3, [r7, #21]
 8000d90:	e007      	b.n	8000da2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d102      	bne.n	8000d9e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	757b      	strb	r3, [r7, #21]
 8000d9c:	e001      	b.n	8000da2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	75bb      	strb	r3, [r7, #22]
 8000da6:	e02d      	b.n	8000e04 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000da8:	7dbb      	ldrb	r3, [r7, #22]
 8000daa:	005a      	lsls	r2, r3, #1
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	eb02 0c03 	add.w	ip, r2, r3
 8000db2:	7dbb      	ldrb	r3, [r7, #22]
 8000db4:	0119      	lsls	r1, r3, #4
 8000db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dba:	f1c1 0620 	rsb	r6, r1, #32
 8000dbe:	f1a1 0020 	sub.w	r0, r1, #32
 8000dc2:	fa22 f401 	lsr.w	r4, r2, r1
 8000dc6:	fa03 f606 	lsl.w	r6, r3, r6
 8000dca:	4334      	orrs	r4, r6
 8000dcc:	fa23 f000 	lsr.w	r0, r3, r0
 8000dd0:	4304      	orrs	r4, r0
 8000dd2:	fa23 f501 	lsr.w	r5, r3, r1
 8000dd6:	b2a3      	uxth	r3, r4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4660      	mov	r0, ip
 8000ddc:	f000 f85a 	bl	8000e94 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000de0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000de4:	f000 f872 	bl	8000ecc <FLASH_WaitForLastOperation>
 8000de8:	4603      	mov	r3, r0
 8000dea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_FLASH_Program+0xdc>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <HAL_FLASH_Program+0xdc>)
 8000df2:	f023 0301 	bic.w	r3, r3, #1
 8000df6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	3301      	adds	r3, #1
 8000e02:	75bb      	strb	r3, [r7, #22]
 8000e04:	7dba      	ldrb	r2, [r7, #22]
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3cd      	bcc.n	8000da8 <HAL_FLASH_Program+0x60>
 8000e0c:	e000      	b.n	8000e10 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e0e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_FLASH_Program+0xd8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	761a      	strb	r2, [r3, #24]

  return status;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	20000460 	.word	0x20000460
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_FLASH_Unlock+0x40>)
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00d      	beq.n	8000e5a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_FLASH_Unlock+0x40>)
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_FLASH_Unlock+0x44>)
 8000e42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_FLASH_Unlock+0x40>)
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_FLASH_Unlock+0x48>)
 8000e48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_FLASH_Unlock+0x40>)
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	45670123 	.word	0x45670123
 8000e70:	cdef89ab 	.word	0xcdef89ab

08000e74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_FLASH_Lock+0x1c>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_FLASH_Lock+0x1c>)
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <FLASH_Program_HalfWord+0x30>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <FLASH_Program_HalfWord+0x34>)
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <FLASH_Program_HalfWord+0x34>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	801a      	strh	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000460 	.word	0x20000460
 8000ec8:	40022000 	.word	0x40022000

08000ecc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fdfe 	bl	8000ad4 <HAL_GetTick>
 8000ed8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eda:	e010      	b.n	8000efe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee2:	d00c      	beq.n	8000efe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <FLASH_WaitForLastOperation+0x2e>
 8000eea:	f7ff fdf3 	bl	8000ad4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d201      	bcs.n	8000efe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e025      	b.n	8000f4a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1e8      	bne.n	8000edc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10b      	bne.n	8000f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <FLASH_WaitForLastOperation+0x88>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f40:	f000 f80a 	bl	8000f58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000f78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000f98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <FLASH_SetErrorCode+0x9c>)
 8000fb8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f240 1201 	movw	r2, #257	; 0x101
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d106      	bne.n	8000fde <FLASH_SetErrorCode+0x86>
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	61d3      	str	r3, [r2, #28]
}  
 8000fdc:	e002      	b.n	8000fe4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <FLASH_SetErrorCode+0x98>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60d3      	str	r3, [r2, #12]
}  
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	20000460 	.word	0x20000460

08000ff8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_FLASHEx_Erase+0xd0>)
 800100c:	7e1b      	ldrb	r3, [r3, #24]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_FLASHEx_Erase+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e053      	b.n	80010be <HAL_FLASHEx_Erase+0xc6>
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_FLASHEx_Erase+0xd0>)
 8001018:	2201      	movs	r2, #1
 800101a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d116      	bne.n	8001052 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001028:	f7ff ff50 	bl	8000ecc <FLASH_WaitForLastOperation>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d141      	bne.n	80010b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 f84c 	bl	80010d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800103c:	f7ff ff46 	bl	8000ecc <FLASH_WaitForLastOperation>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_FLASHEx_Erase+0xd4>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_FLASHEx_Erase+0xd4>)
 800104a:	f023 0304 	bic.w	r3, r3, #4
 800104e:	6113      	str	r3, [r2, #16]
 8001050:	e031      	b.n	80010b6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001052:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001056:	f7ff ff39 	bl	8000ecc <FLASH_WaitForLastOperation>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d12a      	bne.n	80010b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e019      	b.n	80010a4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f000 f849 	bl	8001108 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001076:	f24c 3050 	movw	r0, #50000	; 0xc350
 800107a:	f7ff ff27 	bl	8000ecc <FLASH_WaitForLastOperation>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_FLASHEx_Erase+0xd4>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_FLASHEx_Erase+0xd4>)
 8001088:	f023 0302 	bic.w	r3, r3, #2
 800108c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
            break;
 800109a:	e00c      	b.n	80010b6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010a2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	02da      	lsls	r2, r3, #11
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3dc      	bcc.n	8001070 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_FLASHEx_Erase+0xd0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	761a      	strb	r2, [r3, #24]

  return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000460 	.word	0x20000460
 80010cc:	40022000 	.word	0x40022000

080010d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <FLASH_MassErase+0x30>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <FLASH_MassErase+0x34>)
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <FLASH_MassErase+0x34>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <FLASH_MassErase+0x34>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <FLASH_MassErase+0x34>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000460 	.word	0x20000460
 8001104:	40022000 	.word	0x40022000

08001108 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <FLASH_PageErase+0x38>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <FLASH_PageErase+0x3c>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <FLASH_PageErase+0x3c>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <FLASH_PageErase+0x3c>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <FLASH_PageErase+0x3c>)
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <FLASH_PageErase+0x3c>)
 800112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001132:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000460 	.word	0x20000460
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e133      	b.n	80013c4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8122 	bne.w	80013be <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b12      	cmp	r3, #18
 8001180:	d034      	beq.n	80011ec <HAL_GPIO_Init+0xa4>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d80d      	bhi.n	80011a2 <HAL_GPIO_Init+0x5a>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x9a>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d804      	bhi.n	8001198 <HAL_GPIO_Init+0x50>
 800118e:	2b00      	cmp	r3, #0
 8001190:	d031      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 8001192:	2b01      	cmp	r3, #1
 8001194:	d01c      	beq.n	80011d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001196:	e048      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001198:	2b03      	cmp	r3, #3
 800119a:	d043      	beq.n	8001224 <HAL_GPIO_Init+0xdc>
 800119c:	2b11      	cmp	r3, #17
 800119e:	d01b      	beq.n	80011d8 <HAL_GPIO_Init+0x90>
          break;
 80011a0:	e043      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a2:	4a8f      	ldr	r2, [pc, #572]	; (80013e0 <HAL_GPIO_Init+0x298>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d026      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011a8:	4a8d      	ldr	r2, [pc, #564]	; (80013e0 <HAL_GPIO_Init+0x298>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d806      	bhi.n	80011bc <HAL_GPIO_Init+0x74>
 80011ae:	4a8d      	ldr	r2, [pc, #564]	; (80013e4 <HAL_GPIO_Init+0x29c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d020      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011b4:	4a8c      	ldr	r2, [pc, #560]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01d      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
          break;
 80011ba:	e036      	b.n	800122a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011bc:	4a8b      	ldr	r2, [pc, #556]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011c2:	4a8b      	ldr	r2, [pc, #556]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d016      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
 80011c8:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xae>
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e028      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e023      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01e      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e019      	b.n	800122a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e012      	b.n	800122a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2bff      	cmp	r3, #255	; 0xff
 800122e:	d801      	bhi.n	8001234 <HAL_GPIO_Init+0xec>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	e001      	b.n	8001238 <HAL_GPIO_Init+0xf0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3304      	adds	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2bff      	cmp	r3, #255	; 0xff
 800123e:	d802      	bhi.n	8001246 <HAL_GPIO_Init+0xfe>
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x104>
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3b08      	subs	r3, #8
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	210f      	movs	r1, #15
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	401a      	ands	r2, r3
 800125e:	6a39      	ldr	r1, [r7, #32]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	431a      	orrs	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a2 	beq.w	80013be <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001292:	4a5a      	ldr	r2, [pc, #360]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x1b6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x1b2>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1ae>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x2c4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1aa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x2c8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1a6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x2cc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1a2>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x1b8>
 80012fe:	2300      	movs	r3, #0
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001310:	493a      	ldr	r1, [pc, #232]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	493a      	ldr	r1, [pc, #232]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	43db      	mvns	r3, r3
 8001340:	4935      	ldr	r1, [pc, #212]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001342:	4013      	ands	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4930      	ldr	r1, [pc, #192]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	43db      	mvns	r3, r3
 8001368:	492b      	ldr	r1, [pc, #172]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800136a:	4013      	ands	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4926      	ldr	r1, [pc, #152]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	43db      	mvns	r3, r3
 8001390:	4921      	ldr	r1, [pc, #132]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001392:	4013      	ands	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	491c      	ldr	r1, [pc, #112]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4917      	ldr	r1, [pc, #92]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	3301      	adds	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f aec4 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 80013d4:	bf00      	nop
 80013d6:	372c      	adds	r7, #44	; 0x2c
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10110000 	.word	0x10110000
 80013e8:	10120000 	.word	0x10120000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10320000 	.word	0x10320000
 80013f4:	10220000 	.word	0x10220000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	40010800 	.word	0x40010800
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40011000 	.word	0x40011000
 800140c:	40011400 	.word	0x40011400
 8001410:	40011800 	.word	0x40011800
 8001414:	40011c00 	.word	0x40011c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	041a      	lsls	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	611a      	str	r2, [r3, #16]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af06      	add	r7, sp, #24
 8001452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0fd      	b.n	800165a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f006 fbda 	bl	8007c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fd89 	bl	8003f9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	687e      	ldr	r6, [r7, #4]
 8001492:	466d      	mov	r5, sp
 8001494:	f106 0410 	add.w	r4, r6, #16
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	1d33      	adds	r3, r6, #4
 80014a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f002 fd53 	bl	8003f50 <USB_CoreInit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0ce      	b.n	800165a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fd84 	bl	8003fd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e04c      	b.n	8001568 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3301      	adds	r3, #1
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	b298      	uxth	r0, r3
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3336      	adds	r3, #54	; 0x36
 800150c:	4602      	mov	r2, r0
 800150e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3303      	adds	r3, #3
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3338      	adds	r3, #56	; 0x38
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	333c      	adds	r3, #60	; 0x3c
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3340      	adds	r3, #64	; 0x40
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ad      	bcc.n	80014ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e044      	b.n	8001602 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f203 1369 	addw	r3, r3, #361	; 0x169
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3b5      	bcc.n	8001578 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	602b      	str	r3, [r5, #0]
 8001622:	1d33      	adds	r3, r6, #4
 8001624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001626:	6838      	ldr	r0, [r7, #0]
 8001628:	f002 fcde 	bl	8003fe8 <USB_DevInit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00d      	b.n	800165a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fc78 	bl	8005f48 <USB_DevDisconnect>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001662 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_PCD_Start+0x16>
 8001674:	2302      	movs	r3, #2
 8001676:	e016      	b.n	80016a6 <HAL_PCD_Start+0x44>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fc73 	bl	8003f70 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f006 fd40 	bl	8008112 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc4c 	bl	8005f34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b088      	sub	sp, #32
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fc4e 	bl	8005f5c <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ca:	d102      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fb61 	bl	8001d94 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc40 	bl	8005f5c <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d112      	bne.n	800170e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fa:	b292      	uxth	r2, r2
 80016fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f006 fb0e 	bl	8007d22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f925 	bl	8001958 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fc22 	bl	8005f5c <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001722:	d10b      	bne.n	800173c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fc0b 	bl	8005f5c <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001750:	d10b      	bne.n	800176a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fbf4 	bl	8005f5c <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177e:	d126      	bne.n	80017ce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0204 	bic.w	r2, r2, #4
 8001792:	b292      	uxth	r2, r2
 8001794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0208 	bic.w	r2, r2, #8
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f006 faef 	bl	8007d94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fbc2 	bl	8005f5c <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e2:	f040 8084 	bne.w	80018ee <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	77fb      	strb	r3, [r7, #31]
 80017ea:	e011      	b.n	8001810 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	441a      	add	r2, r3
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	b292      	uxth	r2, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f107 0120 	add.w	r1, r7, #32
 8001804:	440b      	add	r3, r1
 8001806:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	3301      	adds	r3, #1
 800180e:	77fb      	strb	r3, [r7, #31]
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b07      	cmp	r3, #7
 8001814:	d9ea      	bls.n	80017ec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	b292      	uxth	r2, r2
 800182a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	b292      	uxth	r2, r2
 8001842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001846:	bf00      	nop
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29b      	uxth	r3, r3
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f6      	beq.n	8001848 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	77fb      	strb	r3, [r7, #31]
 8001876:	e010      	b.n	800189a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001878:	7ffb      	ldrb	r3, [r7, #31]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4611      	mov	r1, r2
 8001880:	7ffa      	ldrb	r2, [r7, #31]
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	440a      	add	r2, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	f107 0120 	add.w	r1, r7, #32
 800188c:	440b      	add	r3, r1
 800188e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001892:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	3301      	adds	r3, #1
 8001898:	77fb      	strb	r3, [r7, #31]
 800189a:	7ffb      	ldrb	r3, [r7, #31]
 800189c:	2b07      	cmp	r3, #7
 800189e:	d9eb      	bls.n	8001878 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0208 	orr.w	r2, r2, #8
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	b292      	uxth	r2, r2
 80018cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0204 	orr.w	r2, r2, #4
 80018e2:	b292      	uxth	r2, r2
 80018e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f006 fa39 	bl	8007d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 fb32 	bl	8005f5c <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001902:	d10e      	bne.n	8001922 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001916:	b292      	uxth	r2, r2
 8001918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f006 f9f2 	bl	8007d06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fb18 	bl	8005f5c <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001936:	d10b      	bne.n	8001950 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_PCD_SetAddress+0x1a>
 800196e:	2302      	movs	r3, #2
 8001970:	e013      	b.n	800199a <HAL_PCD_SetAddress+0x42>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fabf 	bl	8005f0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	4608      	mov	r0, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	70fb      	strb	r3, [r7, #3]
 80019b4:	460b      	mov	r3, r1
 80019b6:	803b      	strh	r3, [r7, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da0e      	bge.n	80019e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	705a      	strb	r2, [r3, #1]
 80019e4:	e00e      	b.n	8001a04 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0207 	and.w	r2, r3, #7
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a10:	883a      	ldrh	r2, [r7, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	78ba      	ldrb	r2, [r7, #2]
 8001a1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	785b      	ldrb	r3, [r3, #1]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a2e:	78bb      	ldrb	r3, [r7, #2]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d102      	bne.n	8001a3a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_PCD_EP_Open+0xa6>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e00e      	b.n	8001a66 <HAL_PCD_EP_Open+0xc4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fae6 	bl	8004028 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a64:	7afb      	ldrb	r3, [r7, #11]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da0e      	bge.n	8001aa0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	705a      	strb	r2, [r3, #1]
 8001a9e:	e00e      	b.n	8001abe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 0207 	and.w	r2, r3, #7
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Close+0x6a>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Close+0x88>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fe08 	bl	80046fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 0207 	and.w	r2, r3, #7
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 ffba 	bl	8004ad4 <USB_EPStartXfer>
 8001b60:	e005      	b.n	8001b6e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 ffb3 	bl	8004ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6979      	ldr	r1, [r7, #20]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 ff60 	bl	8004ad4 <USB_EPStartXfer>
 8001c14:	e005      	b.n	8001c22 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6979      	ldr	r1, [r7, #20]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 ff59 	bl	8004ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d901      	bls.n	8001c4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e04c      	b.n	8001ce4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0e      	bge.n	8001c70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	705a      	strb	r2, [r3, #1]
 8001c6e:	e00c      	b.n	8001c8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_EP_SetStall+0x7e>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e01c      	b.n	8001ce4 <HAL_PCD_EP_SetStall+0xb8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f82b 	bl	8005d14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f004 f950 	bl	8005f7a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d901      	bls.n	8001d0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e040      	b.n	8001d8c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0e      	bge.n	8001d30 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00e      	b.n	8001d4e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0207 	and.w	r2, r3, #7
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_PCD_EP_ClrStall+0x82>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e00e      	b.n	8001d8c <HAL_PCD_EP_ClrStall+0xa0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 f819 	bl	8005db4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d9c:	e2df      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001da8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001db4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 8158 	bne.w	800206e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d152      	bne.n	8001e6e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd8:	81fb      	strh	r3, [r7, #14]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3328      	adds	r3, #40	; 0x28
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	3302      	adds	r3, #2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	441a      	add	r2, r3
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f005 ff4f 	bl	8007cd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 828e 	beq.w	800235e <PCD_EP_ISR_Handler+0x5ca>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8289 	bne.w	800235e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e6c:	e277      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d034      	beq.n	8001ef2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f004 f8a6 	bl	8006018 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed8:	4013      	ands	r3, r2
 8001eda:	823b      	strh	r3, [r7, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	8a3a      	ldrh	r2, [r7, #16]
 8001ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f005 fec4 	bl	8007c78 <HAL_PCD_SetupStageCallback>
 8001ef0:	e235      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ef2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f280 8231 	bge.w	800235e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f08:	4013      	ands	r3, r2
 8001f0a:	83bb      	strh	r3, [r7, #28]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	8bba      	ldrh	r2, [r7, #28]
 8001f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f16:	b292      	uxth	r2, r2
 8001f18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3306      	adds	r3, #6
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <PCD_EP_ISR_Handler+0x1ee>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	6959      	ldr	r1, [r3, #20]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f004 f856 	bl	8006018 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	441a      	add	r2, r3
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f005 fe8d 	bl	8007c9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <PCD_EP_ISR_Handler+0x23c>
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e02f      	b.n	8002030 <PCD_EP_ISR_Handler+0x29c>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8001fd6:	d813      	bhi.n	8002000 <PCD_EP_ISR_Handler+0x26c>
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <PCD_EP_ISR_Handler+0x25e>
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	3301      	adds	r3, #1
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	e017      	b.n	8002030 <PCD_EP_ISR_Handler+0x29c>
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <PCD_EP_ISR_Handler+0x286>
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	3b01      	subs	r3, #1
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	b29b      	uxth	r3, r3
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	b29b      	uxth	r3, r3
 8002022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202a:	b29a      	uxth	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002048:	827b      	strh	r3, [r7, #18]
 800204a:	8a7b      	ldrh	r3, [r7, #18]
 800204c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002050:	827b      	strh	r3, [r7, #18]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	8a7b      	ldrh	r3, [r7, #18]
 8002058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	b29b      	uxth	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]
 800206c:	e177      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002080:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002084:	2b00      	cmp	r3, #0
 8002086:	f280 80ea 	bge.w	800225e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020a0:	4013      	ands	r3, r2
 80020a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b8:	b292      	uxth	r2, r2
 80020ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	7b1b      	ldrb	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d122      	bne.n	8002120 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3306      	adds	r3, #6
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002102:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002104:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	6959      	ldr	r1, [r3, #20]
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	88da      	ldrh	r2, [r3, #6]
 8002118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800211a:	f003 ff7d 	bl	8006018 <USB_ReadPMA>
 800211e:	e07c      	b.n	800221a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	78db      	ldrb	r3, [r3, #3]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d108      	bne.n	800213a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002128:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800212a:	461a      	mov	r2, r3
 800212c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f923 	bl	800237a <HAL_PCD_EP_DB_Receive>
 8002134:	4603      	mov	r3, r0
 8002136:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002138:	e06f      	b.n	800221a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002154:	847b      	strh	r3, [r7, #34]	; 0x22
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002176:	b29b      	uxth	r3, r3
 8002178:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	3302      	adds	r3, #2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02a      	beq.n	800221a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	6959      	ldr	r1, [r3, #20]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	891a      	ldrh	r2, [r3, #8]
 80021d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021d2:	f003 ff21 	bl	8006018 <USB_ReadPMA>
 80021d6:	e020      	b.n	800221a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3306      	adds	r3, #6
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002200:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	6959      	ldr	r1, [r3, #20]
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	895a      	ldrh	r2, [r3, #10]
 8002214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002216:	f003 feff 	bl	8006018 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002220:	441a      	add	r2, r3
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800222c:	441a      	add	r2, r3
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <PCD_EP_ISR_Handler+0x4b0>
 800223a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d206      	bcs.n	8002252 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f005 fd26 	bl	8007c9c <HAL_PCD_DataOutStageCallback>
 8002250:	e005      	b.n	800225e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fc3b 	bl	8004ad4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800225e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d07a      	beq.n	800235e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002268:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002296:	843b      	strh	r3, [r7, #32]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	8c3b      	ldrh	r3, [r7, #32]
 80022a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d108      	bne.n	80022ce <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d141      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	3302      	adds	r3, #2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	8bfb      	ldrh	r3, [r7, #30]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d906      	bls.n	8002310 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	8bfb      	ldrh	r3, [r7, #30]
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	e002      	b.n	8002316 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fcd4 	bl	8007cd2 <HAL_PCD_DataInStageCallback>
 800232a:	e018      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	8bfb      	ldrh	r3, [r7, #30]
 8002332:	441a      	add	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	441a      	add	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fbc2 	bl	8004ad4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002350:	e005      	b.n	800235e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002352:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002354:	461a      	mov	r2, r3
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f91b 	bl	8002594 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002366:	b29b      	uxth	r3, r3
 8002368:	b21b      	sxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f6ff ad17 	blt.w	8001d9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d07e      	beq.n	8002490 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	3302      	adds	r3, #2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	8b7b      	ldrh	r3, [r7, #26]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d306      	bcc.n	80023d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e002      	b.n	80023da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d123      	bne.n	800242a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fc:	833b      	strh	r3, [r7, #24]
 80023fe:	8b3b      	ldrh	r3, [r7, #24]
 8002400:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002404:	833b      	strh	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	8b3b      	ldrh	r3, [r7, #24]
 8002416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002426:	b29b      	uxth	r3, r3
 8002428:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01f      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	82fb      	strh	r3, [r7, #22]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	8afb      	ldrh	r3, [r7, #22]
 8002460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002474:	8b7b      	ldrh	r3, [r7, #26]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	891a      	ldrh	r2, [r3, #8]
 8002488:	8b7b      	ldrh	r3, [r7, #26]
 800248a:	f003 fdc5 	bl	8006018 <USB_ReadPMA>
 800248e:	e07c      	b.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3306      	adds	r3, #6
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	8b7b      	ldrh	r3, [r7, #26]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d306      	bcc.n	80024d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	8b7b      	ldrh	r3, [r7, #26]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e002      	b.n	80024d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d123      	bne.n	8002528 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	83fb      	strh	r3, [r7, #30]
 80024fc:	8bfb      	ldrh	r3, [r7, #30]
 80024fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002502:	83fb      	strh	r3, [r7, #30]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8bfb      	ldrh	r3, [r7, #30]
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	83bb      	strh	r3, [r7, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8bbb      	ldrh	r3, [r7, #28]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002572:	8b7b      	ldrh	r3, [r7, #26]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	895a      	ldrh	r2, [r3, #10]
 8002584:	8b7b      	ldrh	r3, [r7, #26]
 8002586:	f003 fd47 	bl	8006018 <USB_ReadPMA>
    }
  }

  return count;
 800258a:	8b7b      	ldrh	r3, [r7, #26]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b092      	sub	sp, #72	; 0x48
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8132 	beq.w	8002812 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3302      	adds	r3, #2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025de:	429a      	cmp	r2, r3
 80025e0:	d906      	bls.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	e002      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12c      	bne.n	8002658 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f005 fb64 	bl	8007cd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 822f 	beq.w	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002630:	827b      	strh	r3, [r7, #18]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	441a      	add	r2, r3
 8002640:	8a7b      	ldrh	r3, [r7, #18]
 8002642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800264e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002652:	b29b      	uxth	r3, r3
 8002654:	8013      	strh	r3, [r2, #0]
 8002656:	e20d      	b.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01f      	beq.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 81e3 	bne.w	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026b4:	441a      	add	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026c0:	441a      	add	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d309      	bcc.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	621a      	str	r2, [r3, #32]
 80026e4:	e014      	b.n	8002710 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80026ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026fa:	e009      	b.n	8002710 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d155      	bne.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	011a      	lsls	r2, r3, #4
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	2b00      	cmp	r3, #0
 8002744:	d112      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002750:	b29a      	uxth	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002764:	b29a      	uxth	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	e047      	b.n	80027fc <HAL_PCD_EP_DB_Transmit+0x268>
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	2b3e      	cmp	r3, #62	; 0x3e
 8002770:	d811      	bhi.n	8002796 <HAL_PCD_EP_DB_Transmit+0x202>
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	3301      	adds	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	b29b      	uxth	r3, r3
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	b29a      	uxth	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e032      	b.n	80027fc <HAL_PCD_EP_DB_Transmit+0x268>
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_PCD_EP_DB_Transmit+0x218>
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	029b      	lsls	r3, r3, #10
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027bc:	b29a      	uxth	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	e01b      	b.n	80027fc <HAL_PCD_EP_DB_Transmit+0x268>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d117      	bne.n	80027fc <HAL_PCD_EP_DB_Transmit+0x268>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	4413      	add	r3, r2
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	891a      	ldrh	r2, [r3, #8]
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	b29b      	uxth	r3, r3
 800280c:	f003 fbc0 	bl	8005f90 <USB_WritePMA>
 8002810:	e130      	b.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	3306      	adds	r3, #6
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002842:	429a      	cmp	r2, r3
 8002844:	d306      	bcc.n	8002854 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800284c:	1ad2      	subs	r2, r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	619a      	str	r2, [r3, #24]
 8002852:	e002      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12c      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f005 fa32 	bl	8007cd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 80fd 	bne.w	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	441a      	add	r2, r3
 80028a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	8013      	strh	r3, [r2, #0]
 80028ba:	e0db      	b.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	441a      	add	r2, r3
 80028f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80028f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002902:	b29b      	uxth	r3, r3
 8002904:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290c:	2b01      	cmp	r3, #1
 800290e:	f040 80b1 	bne.w	8002a74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002918:	441a      	add	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002924:	441a      	add	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	429a      	cmp	r2, r3
 8002934:	d309      	bcc.n	800294a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	1ad2      	subs	r2, r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	621a      	str	r2, [r3, #32]
 8002948:	e014      	b.n	8002974 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800295e:	e009      	b.n	8002974 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d155      	bne.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	4413      	add	r3, r2
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	011a      	lsls	r2, r3, #4
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	4413      	add	r3, r2
 80029a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x442>
 80029b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e044      	b.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	2b3e      	cmp	r3, #62	; 0x3e
 80029da:	d811      	bhi.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x46c>
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x45e>
 80029ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ee:	3301      	adds	r3, #1
 80029f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	029b      	lsls	r3, r3, #10
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fc:	801a      	strh	r2, [r3, #0]
 80029fe:	e02f      	b.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x482>
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	3b01      	subs	r3, #1
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	e018      	b.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d114      	bne.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	4413      	add	r3, r2
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6959      	ldr	r1, [r3, #20]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	895a      	ldrh	r2, [r3, #10]
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f003 fa8e 	bl	8005f90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8e:	823b      	strh	r3, [r7, #16]
 8002a90:	8a3b      	ldrh	r3, [r7, #16]
 8002a92:	f083 0310 	eor.w	r3, r3, #16
 8002a96:	823b      	strh	r3, [r7, #16]
 8002a98:	8a3b      	ldrh	r3, [r7, #16]
 8002a9a:	f083 0320 	eor.w	r3, r3, #32
 8002a9e:	823b      	strh	r3, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	8a3b      	ldrh	r3, [r7, #16]
 8002ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3748      	adds	r7, #72	; 0x48
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e009      	b.n	8002b18 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b04:	897a      	ldrh	r2, [r7, #10]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b18:	893b      	ldrh	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	80da      	strh	r2, [r3, #6]
 8002b2c:	e00b      	b.n	8002b46 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2201      	movs	r2, #1
 8002b32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e26c      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b80:	4b8f      	ldr	r3, [pc, #572]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x12c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e246      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x76>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b7b      	ldr	r3, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7a      	ldr	r2, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a77      	ldr	r2, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xbc>
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a71      	ldr	r2, [pc, #452]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002c10:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6a      	ldr	r2, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd ff50 	bl	8000ad4 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fd ff4c 	bl	8000ad4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1fa      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe4>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fd ff3c 	bl	8000ad4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fd ff38 	bl	8000ad4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1e6      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x10c>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d063      	beq.n	8002d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1ba      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4939      	ldr	r1, [pc, #228]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e03a      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fd fef1 	bl	8000ad4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fd feed 	bl	8000ad4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e19b      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4927      	ldr	r1, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fd fed0 	bl	8000ad4 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fd fecc 	bl	8000ad4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e17a      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03a      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fd feb0 	bl	8000ad4 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fd feac 	bl	8000ad4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e15a      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 fada 	bl	8003350 <RCC_Delay>
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fd fe96 	bl	8000ad4 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002daa:	e00f      	b.n	8002dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fd fe92 	bl	8000ad4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d908      	bls.n	8002dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e140      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	42420000 	.word	0x42420000
 8002dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b9e      	ldr	r3, [pc, #632]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e9      	bne.n	8002dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a6 	beq.w	8002f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b97      	ldr	r3, [pc, #604]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b94      	ldr	r3, [pc, #592]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a93      	ldr	r2, [pc, #588]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b91      	ldr	r3, [pc, #580]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b8e      	ldr	r3, [pc, #568]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fd fe53 	bl	8000ad4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fd fe4f 	bl	8000ad4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0fd      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x312>
 8002e58:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a7a      	ldr	r2, [pc, #488]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	e02d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x334>
 8002e6e:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a75      	ldr	r2, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4b73      	ldr	r3, [pc, #460]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a72      	ldr	r2, [pc, #456]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x356>
 8002e90:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a6c      	ldr	r2, [pc, #432]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a66      	ldr	r2, [pc, #408]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fd fe03 	bl	8000ad4 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fd fdff 	bl	8000ad4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0ab      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x37e>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd fded 	bl	8000ad4 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd fde9 	bl	8000ad4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e095      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a47      	ldr	r2, [pc, #284]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8081 	beq.w	800303e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d061      	beq.n	800300c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d146      	bne.n	8002fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fd fdbd 	bl	8000ad4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fd fdb9 	bl	8000ad4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e067      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f86:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	492d      	ldr	r1, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a19      	ldr	r1, [r3, #32]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	4927      	ldr	r1, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fd8d 	bl	8000ad4 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fd fd89 	bl	8000ad4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e037      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46a>
 8002fdc:	e02f      	b.n	800303e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fd76 	bl	8000ad4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd fd72 	bl	8000ad4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e020      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x498>
 800300a:	e018      	b.n	800303e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e013      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	42420060 	.word	0x42420060

08003054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4965      	ldr	r1, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fd fcc6 	bl	8000ad4 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd fcc2 	bl	8000ad4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4601      	mov	r1, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	5cd3      	ldrb	r3, [r2, r3]
 80031f6:	fa21 f303 	lsr.w	r3, r1, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1cc>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fc24 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40022000 	.word	0x40022000
 8003218:	40021000 	.word	0x40021000
 800321c:	0800824c 	.word	0x0800824c
 8003220:	20000004 	.word	0x20000004
 8003224:	20000008 	.word	0x20000008

08003228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b490      	push	{r4, r7}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003230:	1d3c      	adds	r4, r7, #4
 8003232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b04      	cmp	r3, #4
 8003260:	d002      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 8003262:	2b08      	cmp	r3, #8
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x46>
 8003266:	e02d      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326a:	623b      	str	r3, [r7, #32]
      break;
 800326c:	e02d      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327a:	4413      	add	r3, r2
 800327c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003280:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c5b      	lsrs	r3, r3, #17
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800329a:	4413      	add	r3, r2
 800329c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a6:	fb02 f203 	mul.w	r2, r2, r3
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e004      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	623b      	str	r3, [r7, #32]
      break;
 80032c2:	e002      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c6:	623b      	str	r3, [r7, #32]
      break;
 80032c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc90      	pop	{r4, r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	080081f0 	.word	0x080081f0
 80032dc:	08008200 	.word	0x08008200
 80032e0:	40021000 	.word	0x40021000
 80032e4:	007a1200 	.word	0x007a1200
 80032e8:	003d0900 	.word	0x003d0900

080032ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <HAL_RCC_GetHCLKFreq+0x10>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003304:	f7ff fff2 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003308:	4601      	mov	r1, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4a03      	ldr	r2, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	0800825c 	.word	0x0800825c

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800332c:	f7ff ffde 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003330:	4601      	mov	r1, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4a03      	ldr	r2, [pc, #12]	; (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	0800825c 	.word	0x0800825c

08003350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <RCC_Delay+0x34>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <RCC_Delay+0x38>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0a5b      	lsrs	r3, r3, #9
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800336c:	bf00      	nop
  }
  while (Delay --);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	60fa      	str	r2, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f9      	bne.n	800336c <RCC_Delay+0x1c>
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000004 	.word	0x20000004
 8003388:	10624dd3 	.word	0x10624dd3

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d07d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	61d3      	str	r3, [r2, #28]
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d118      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e0:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ec:	f7fd fb72 	bl	8000ad4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	e008      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fd fb6e 	bl	8000ad4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e06d      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003412:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02e      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d027      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003430:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003446:	4a29      	ldr	r2, [pc, #164]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d014      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fd fb3d 	bl	8000ad4 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fd fb39 	bl	8000ad4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e036      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ee      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003480:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4917      	ldr	r1, [pc, #92]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	4313      	orrs	r3, r2
 8003490:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	490b      	ldr	r1, [pc, #44]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	42420440 	.word	0x42420440

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd f96e 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 faa0 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d001      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e044      	b.n	800363a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_TIM_Base_Start_IT+0xac>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_TIM_Base_Start_IT+0xb0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_TIM_Base_Start_IT+0xb4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_TIM_Base_Start_IT+0xb8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x6c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_TIM_Base_Start_IT+0xbc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40013400 	.word	0x40013400
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00

08003658 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a1a      	ldr	r2, [r3, #32]
 8003676:	f241 1311 	movw	r3, #4369	; 0x1111
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	f240 4344 	movw	r3, #1092	; 0x444
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9a4 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f997 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9a6 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f97a 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f96d 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f97c 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0208 	mvn.w	r2, #8
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f950 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f943 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f952 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f926 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f919 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f928 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0201 	mvn.w	r2, #1
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fc fddc 	bl	80003f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa91 	bl	8003d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8ec 	bl	8003a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa5c 	bl	8003d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIM_ConfigClockSource+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0a6      	b.n	8003a2a <HAL_TIM_ConfigClockSource+0x166>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d067      	beq.n	80039e4 <HAL_TIM_ConfigClockSource+0x120>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d80b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x6c>
 8003918:	2b10      	cmp	r3, #16
 800391a:	d073      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x140>
 800391c:	2b10      	cmp	r3, #16
 800391e:	d802      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x62>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d06f      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003924:	e078      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003926:	2b20      	cmp	r3, #32
 8003928:	d06c      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x140>
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d06a      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800392e:	e073      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d00d      	beq.n	8003950 <HAL_TIM_ConfigClockSource+0x8c>
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d804      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x7e>
 8003938:	2b50      	cmp	r3, #80	; 0x50
 800393a:	d033      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0xe0>
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d041      	beq.n	80039c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003940:	e06a      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d066      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x152>
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394c:	d017      	beq.n	800397e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800394e:	e063      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f000 f97d 	bl	8003c5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003972:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
      break;
 800397c:	e04c      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f000 f966 	bl	8003c5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a0:	609a      	str	r2, [r3, #8]
      break;
 80039a2:	e039      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f000 f8dd 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2150      	movs	r1, #80	; 0x50
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f934 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 80039c2:	e029      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	461a      	mov	r2, r3
 80039d2:	f000 f8fb 	bl	8003bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2160      	movs	r1, #96	; 0x60
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f924 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 80039e2:	e019      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f000 f8bd 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f914 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 8003a02:	e009      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 f90b 	bl	8003c2a <TIM_ITRx_SetConfig>
        break;
 8003a14:	e000      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
	...

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <TIM_Base_SetConfig+0xe0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <TIM_Base_SetConfig+0xe4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <TIM_Base_SetConfig+0xe8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <TIM_Base_SetConfig+0xec>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <TIM_Base_SetConfig+0xf0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <TIM_Base_SetConfig+0xe0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0x82>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <TIM_Base_SetConfig+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0x82>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <TIM_Base_SetConfig+0xe8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x82>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <TIM_Base_SetConfig+0xec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x82>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <TIM_Base_SetConfig+0xf0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <TIM_Base_SetConfig+0xe0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0xc8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <TIM_Base_SetConfig+0xe4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00

08003b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 030a 	bic.w	r3, r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 0210 	bic.w	r2, r3, #16
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	031b      	lsls	r3, r3, #12
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f043 0307 	orr.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e050      	b.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d018      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10c      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800
 8003d70:	40000c00 	.word	0x40000c00

08003d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03f      	b.n	8003e2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc fd5c 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f829 	bl	8003e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e6e:	f023 030c 	bic.w	r3, r3, #12
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2c      	ldr	r2, [pc, #176]	; (8003f48 <UART_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d103      	bne.n	8003ea4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7ff fa44 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	e002      	b.n	8003eaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff fa2c 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <UART_SetConfig+0x118>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	0119      	lsls	r1, r3, #4
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <UART_SetConfig+0x118>)
 8003ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2064      	movs	r0, #100	; 0x64
 8003eea:	fb00 f303 	mul.w	r3, r0, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	3332      	adds	r3, #50	; 0x32
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <UART_SetConfig+0x118>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f00:	4419      	add	r1, r3
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009a      	lsls	r2, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <UART_SetConfig+0x118>)
 8003f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2064      	movs	r0, #100	; 0x64
 8003f22:	fb00 f303 	mul.w	r3, r0, r3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <UART_SetConfig+0x118>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	51eb851f 	.word	0x51eb851f

08003f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f50:	b084      	sub	sp, #16
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	f107 0014 	add.w	r0, r7, #20
 8003f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	b004      	add	sp, #16
 8003f6e:	4770      	bx	lr

08003f70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f80:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fa4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fa8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fe8:	b084      	sub	sp, #16
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	f107 0014 	add.w	r0, r7, #20
 8003ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	b004      	add	sp, #16
 8004026:	4770      	bx	lr

08004028 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004028:	b480      	push	{r7}
 800402a:	b09b      	sub	sp, #108	; 0x6c
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	78db      	ldrb	r3, [r3, #3]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d81f      	bhi.n	800409a <USB_ActivateEndpoint+0x72>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <USB_ActivateEndpoint+0x38>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004071 	.word	0x08004071
 8004064:	0800408d 	.word	0x0800408d
 8004068:	080040a3 	.word	0x080040a3
 800406c:	0800407f 	.word	0x0800407f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004070:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004078:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800407c:	e012      	b.n	80040a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800407e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004082:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004086:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800408a:	e00b      	b.n	80040a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800408c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004094:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004098:	e004      	b.n	80040a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80040a0:	e000      	b.n	80040a4 <USB_ActivateEndpoint+0x7c>
      break;
 80040a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	b29a      	uxth	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	7b1b      	ldrb	r3, [r3, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8149 	bne.w	80043a8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8084 	beq.w	8004228 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	88db      	ldrh	r3, [r3, #6]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	81fb      	strh	r3, [r7, #14]
 8004162:	89fb      	ldrh	r3, [r7, #14]
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <USB_ActivateEndpoint+0x17c>
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	81bb      	strh	r3, [r7, #12]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	89bb      	ldrh	r3, [r7, #12]
 8004190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	78db      	ldrb	r3, [r3, #3]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d020      	beq.n	80041ee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	813b      	strh	r3, [r7, #8]
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	f083 0320 	eor.w	r3, r3, #32
 80041ca:	813b      	strh	r3, [r7, #8]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	441a      	add	r2, r3
 80041d6:	893b      	ldrh	r3, [r7, #8]
 80041d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	8013      	strh	r3, [r2, #0]
 80041ec:	e27f      	b.n	80046ee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	897b      	ldrh	r3, [r7, #10]
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
 8004226:	e262      	b.n	80046ee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	4413      	add	r3, r2
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	4413      	add	r3, r2
 8004246:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	88db      	ldrh	r3, [r3, #6]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	4413      	add	r3, r2
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	4413      	add	r3, r2
 800427a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d112      	bne.n	80042ae <USB_ActivateEndpoint+0x286>
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004292:	b29a      	uxth	r2, r3
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	e02f      	b.n	800430e <USB_ActivateEndpoint+0x2e6>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b3e      	cmp	r3, #62	; 0x3e
 80042b4:	d813      	bhi.n	80042de <USB_ActivateEndpoint+0x2b6>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	663b      	str	r3, [r7, #96]	; 0x60
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <USB_ActivateEndpoint+0x2a8>
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	3301      	adds	r3, #1
 80042ce:	663b      	str	r3, [r7, #96]	; 0x60
 80042d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e017      	b.n	800430e <USB_ActivateEndpoint+0x2e6>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <USB_ActivateEndpoint+0x2d0>
 80042f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f4:	3b01      	subs	r3, #1
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	b29b      	uxth	r3, r3
 8004300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004308:	b29a      	uxth	r2, r3
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	83fb      	strh	r3, [r7, #30]
 800431c:	8bfb      	ldrh	r3, [r7, #30]
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01b      	beq.n	800435e <USB_ActivateEndpoint+0x336>
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	83bb      	strh	r3, [r7, #28]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	8bbb      	ldrh	r3, [r7, #28]
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	837b      	strh	r3, [r7, #26]
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800437c:	837b      	strh	r3, [r7, #26]
 800437e:	8b7b      	ldrh	r3, [r7, #26]
 8004380:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004384:	837b      	strh	r3, [r7, #26]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8b7b      	ldrh	r3, [r7, #26]
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]
 80043a6:	e1a2      	b.n	80046ee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	441a      	add	r2, r3
 80043cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f4:	4413      	add	r3, r2
 80043f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004400:	4413      	add	r3, r2
 8004402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004406:	657b      	str	r3, [r7, #84]	; 0x54
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	891b      	ldrh	r3, [r3, #8]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	b29b      	uxth	r3, r3
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004416:	801a      	strh	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	653b      	str	r3, [r7, #80]	; 0x50
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004428:	4413      	add	r3, r2
 800442a:	653b      	str	r3, [r7, #80]	; 0x50
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	4413      	add	r3, r2
 8004436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	895b      	ldrh	r3, [r3, #10]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8091 	bne.w	8004578 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004464:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01b      	beq.n	80044a6 <USB_ActivateEndpoint+0x47e>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80044b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01b      	beq.n	80044f6 <USB_ActivateEndpoint+0x4ce>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800450e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004514:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004516:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004518:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800451c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	867b      	strh	r3, [r7, #50]	; 0x32
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]
 8004576:	e0ba      	b.n	80046ee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004588:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01d      	beq.n	80045d0 <USB_ActivateEndpoint+0x5a8>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80045e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01d      	beq.n	8004628 <USB_ActivateEndpoint+0x600>
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d024      	beq.n	800467a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004646:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800464a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800464e:	f083 0320 	eor.w	r3, r3, #32
 8004652:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
 8004678:	e01d      	b.n	80046b6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80046ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	376c      	adds	r7, #108	; 0x6c
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b08d      	sub	sp, #52	; 0x34
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 808e 	bne.w	800482c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d044      	beq.n	80047a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	81bb      	strh	r3, [r7, #12]
 8004726:	89bb      	ldrh	r3, [r7, #12]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <USB_DeactivateEndpoint+0x6c>
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	817b      	strh	r3, [r7, #10]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477e:	813b      	strh	r3, [r7, #8]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	893b      	ldrh	r3, [r7, #8]
 800478c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	b29b      	uxth	r3, r3
 800479e:	8013      	strh	r3, [r2, #0]
 80047a0:	e192      	b.n	8004ac8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	827b      	strh	r3, [r7, #18]
 80047b0:	8a7b      	ldrh	r3, [r7, #18]
 80047b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01b      	beq.n	80047f2 <USB_DeactivateEndpoint+0xf6>
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	823b      	strh	r3, [r7, #16]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	8a3b      	ldrh	r3, [r7, #16]
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	89fb      	ldrh	r3, [r7, #14]
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
 800482a:	e14d      	b.n	8004ac8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 80a5 	bne.w	8004980 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	843b      	strh	r3, [r7, #32]
 8004844:	8c3b      	ldrh	r3, [r7, #32]
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <USB_DeactivateEndpoint+0x18a>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	83fb      	strh	r3, [r7, #30]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	8bfb      	ldrh	r3, [r7, #30]
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	83bb      	strh	r3, [r7, #28]
 8004894:	8bbb      	ldrh	r3, [r7, #28]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <USB_DeactivateEndpoint+0x1da>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b4:	837b      	strh	r3, [r7, #26]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	8b7b      	ldrh	r3, [r7, #26]
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	833b      	strh	r3, [r7, #24]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	8b3b      	ldrh	r3, [r7, #24]
 80048fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800490a:	b29b      	uxth	r3, r3
 800490c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004924:	82fb      	strh	r3, [r7, #22]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	8afb      	ldrh	r3, [r7, #22]
 8004932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004942:	b29b      	uxth	r3, r3
 8004944:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495c:	82bb      	strh	r3, [r7, #20]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	8abb      	ldrh	r3, [r7, #20]
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	e0a3      	b.n	8004ac8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800498e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <USB_DeactivateEndpoint+0x2d4>
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <USB_DeactivateEndpoint+0x324>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3734      	adds	r7, #52	; 0x34
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0c4      	sub	sp, #272	; 0x110
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	6018      	str	r0, [r3, #0]
 8004ade:	463b      	mov	r3, r7
 8004ae0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f040 8557 	bne.w	800559c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	463b      	mov	r3, r7
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d905      	bls.n	8004b0a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b08:	e004      	b.n	8004b14 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b14:	463b      	mov	r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	7b1b      	ldrb	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d12c      	bne.n	8004b78 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b1e:	463b      	mov	r3, r7
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6959      	ldr	r1, [r3, #20]
 8004b24:	463b      	mov	r3, r7
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	88da      	ldrh	r2, [r3, #6]
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	1d38      	adds	r0, r7, #4
 8004b32:	6800      	ldr	r0, [r0, #0]
 8004b34:	f001 fa2c 	bl	8005f90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	463b      	mov	r3, r7
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	011a      	lsls	r2, r3, #4
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	f000 bcdd 	b.w	8005532 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	f040 8347 	bne.w	8005212 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f240 82eb 	bls.w	800516c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	463b      	mov	r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004bda:	463b      	mov	r3, r7
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be4:	1ad2      	subs	r2, r2, r3
 8004be6:	463b      	mov	r3, r7
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8159 	beq.w	8004eba <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d164      	bne.n	8004ce2 <USB_EPStartXfer+0x20e>
 8004c18:	1d3b      	adds	r3, r7, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	4413      	add	r3, r2
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	011a      	lsls	r2, r3, #4
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d112      	bne.n	8004c70 <USB_EPStartXfer+0x19c>
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e054      	b.n	8004d1a <USB_EPStartXfer+0x246>
 8004c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c74:	2b3e      	cmp	r3, #62	; 0x3e
 8004c76:	d817      	bhi.n	8004ca8 <USB_EPStartXfer+0x1d4>
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <USB_EPStartXfer+0x1c4>
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e038      	b.n	8004d1a <USB_EPStartXfer+0x246>
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <USB_EPStartXfer+0x1f4>
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	029b      	lsls	r3, r3, #10
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e01b      	b.n	8004d1a <USB_EPStartXfer+0x246>
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d116      	bne.n	8004d1a <USB_EPStartXfer+0x246>
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	4413      	add	r3, r2
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	4413      	add	r3, r2
 8004d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	895b      	ldrh	r3, [r3, #10]
 8004d20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6959      	ldr	r1, [r3, #20]
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d34:	1d38      	adds	r0, r7, #4
 8004d36:	6800      	ldr	r0, [r0, #0]
 8004d38:	f001 f92a 	bl	8005f90 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	441a      	add	r2, r3
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d909      	bls.n	8004d72 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d68:	1ad2      	subs	r2, r2, r3
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e008      	b.n	8004d84 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d72:	463b      	mov	r3, r7
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d164      	bne.n	8004e58 <USB_EPStartXfer+0x384>
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d112      	bne.n	8004de6 <USB_EPStartXfer+0x312>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e057      	b.n	8004e96 <USB_EPStartXfer+0x3c2>
 8004de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dea:	2b3e      	cmp	r3, #62	; 0x3e
 8004dec:	d817      	bhi.n	8004e1e <USB_EPStartXfer+0x34a>
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <USB_EPStartXfer+0x33a>
 8004e04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e03b      	b.n	8004e96 <USB_EPStartXfer+0x3c2>
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <USB_EPStartXfer+0x36a>
 8004e34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e01e      	b.n	8004e96 <USB_EPStartXfer+0x3c2>
 8004e58:	463b      	mov	r3, r7
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d119      	bne.n	8004e96 <USB_EPStartXfer+0x3c2>
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	4413      	add	r3, r2
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	011a      	lsls	r2, r3, #4
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	891b      	ldrh	r3, [r3, #8]
 8004e9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6959      	ldr	r1, [r3, #20]
 8004ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004eb0:	1d38      	adds	r0, r7, #4
 8004eb2:	6800      	ldr	r0, [r0, #0]
 8004eb4:	f001 f86c 	bl	8005f90 <USB_WritePMA>
 8004eb8:	e33b      	b.n	8005532 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d164      	bne.n	8004f8e <USB_EPStartXfer+0x4ba>
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	4413      	add	r3, r2
 8004eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	011a      	lsls	r2, r3, #4
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d112      	bne.n	8004f1c <USB_EPStartXfer+0x448>
 8004ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	e057      	b.n	8004fcc <USB_EPStartXfer+0x4f8>
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	2b3e      	cmp	r3, #62	; 0x3e
 8004f22:	d817      	bhi.n	8004f54 <USB_EPStartXfer+0x480>
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <USB_EPStartXfer+0x470>
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	e03b      	b.n	8004fcc <USB_EPStartXfer+0x4f8>
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <USB_EPStartXfer+0x4a0>
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e01e      	b.n	8004fcc <USB_EPStartXfer+0x4f8>
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d119      	bne.n	8004fcc <USB_EPStartXfer+0x4f8>
 8004f98:	1d3b      	adds	r3, r7, #4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fac:	4413      	add	r3, r2
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	011a      	lsls	r2, r3, #4
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fba:	4413      	add	r3, r2
 8004fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	891b      	ldrh	r3, [r3, #8]
 8004fd2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6959      	ldr	r1, [r3, #20]
 8004fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fe6:	1d38      	adds	r0, r7, #4
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f000 ffd1 	bl	8005f90 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	441a      	add	r2, r3
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d909      	bls.n	8005024 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	621a      	str	r2, [r3, #32]
 8005022:	e008      	b.n	8005036 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800502e:	463b      	mov	r3, r7
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	647b      	str	r3, [r7, #68]	; 0x44
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d164      	bne.n	8005110 <USB_EPStartXfer+0x63c>
 8005046:	1d3b      	adds	r3, r7, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005054:	b29b      	uxth	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	4413      	add	r3, r2
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505e:	463b      	mov	r3, r7
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	011a      	lsls	r2, r3, #4
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	4413      	add	r3, r2
 800506a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d112      	bne.n	800509e <USB_EPStartXfer+0x5ca>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005082:	b29a      	uxth	r2, r3
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005096:	b29a      	uxth	r2, r3
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e054      	b.n	8005148 <USB_EPStartXfer+0x674>
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a2:	2b3e      	cmp	r3, #62	; 0x3e
 80050a4:	d817      	bhi.n	80050d6 <USB_EPStartXfer+0x602>
 80050a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <USB_EPStartXfer+0x5f2>
 80050bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c0:	3301      	adds	r3, #1
 80050c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e038      	b.n	8005148 <USB_EPStartXfer+0x674>
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <USB_EPStartXfer+0x622>
 80050ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050f0:	3b01      	subs	r3, #1
 80050f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	b29b      	uxth	r3, r3
 8005100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005108:	b29a      	uxth	r2, r3
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e01b      	b.n	8005148 <USB_EPStartXfer+0x674>
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d116      	bne.n	8005148 <USB_EPStartXfer+0x674>
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005128:	4413      	add	r3, r2
 800512a:	647b      	str	r3, [r7, #68]	; 0x44
 800512c:	463b      	mov	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	011a      	lsls	r2, r3, #4
 8005134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005136:	4413      	add	r3, r2
 8005138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005142:	b29a      	uxth	r2, r3
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	895b      	ldrh	r3, [r3, #10]
 800514e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515c:	b29b      	uxth	r3, r3
 800515e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005162:	1d38      	adds	r0, r7, #4
 8005164:	6800      	ldr	r0, [r0, #0]
 8005166:	f000 ff13 	bl	8005f90 <USB_WritePMA>
 800516a:	e1e2      	b.n	8005532 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	463b      	mov	r3, r7
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	663b      	str	r3, [r7, #96]	; 0x60
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ce:	4413      	add	r3, r2
 80051d0:	663b      	str	r3, [r7, #96]	; 0x60
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	011a      	lsls	r2, r3, #4
 80051da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051dc:	4413      	add	r3, r2
 80051de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	891b      	ldrh	r3, [r3, #8]
 80051f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6959      	ldr	r1, [r3, #20]
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	b29b      	uxth	r3, r3
 8005204:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005208:	1d38      	adds	r0, r7, #4
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f000 fec0 	bl	8005f90 <USB_WritePMA>
 8005210:	e18f      	b.n	8005532 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 808f 	beq.w	800534c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	67bb      	str	r3, [r7, #120]	; 0x78
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d164      	bne.n	8005308 <USB_EPStartXfer+0x834>
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005252:	4413      	add	r3, r2
 8005254:	673b      	str	r3, [r7, #112]	; 0x70
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	011a      	lsls	r2, r3, #4
 800525e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005260:	4413      	add	r3, r2
 8005262:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d112      	bne.n	8005296 <USB_EPStartXfer+0x7c2>
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800527a:	b29a      	uxth	r2, r3
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e054      	b.n	8005340 <USB_EPStartXfer+0x86c>
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	2b3e      	cmp	r3, #62	; 0x3e
 800529c:	d817      	bhi.n	80052ce <USB_EPStartXfer+0x7fa>
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <USB_EPStartXfer+0x7ea>
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e038      	b.n	8005340 <USB_EPStartXfer+0x86c>
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <USB_EPStartXfer+0x81a>
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005300:	b29a      	uxth	r2, r3
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e01b      	b.n	8005340 <USB_EPStartXfer+0x86c>
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d116      	bne.n	8005340 <USB_EPStartXfer+0x86c>
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005320:	4413      	add	r3, r2
 8005322:	67bb      	str	r3, [r7, #120]	; 0x78
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	677b      	str	r3, [r7, #116]	; 0x74
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	b29a      	uxth	r2, r3
 800533c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800533e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	895b      	ldrh	r3, [r3, #10]
 8005346:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800534a:	e097      	b.n	800547c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d168      	bne.n	8005428 <USB_EPStartXfer+0x954>
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800536e:	4413      	add	r3, r2
 8005370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005380:	4413      	add	r3, r2
 8005382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d112      	bne.n	80053b6 <USB_EPStartXfer+0x8e2>
 8005390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800539a:	b29a      	uxth	r2, r3
 800539c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e05d      	b.n	8005472 <USB_EPStartXfer+0x99e>
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	2b3e      	cmp	r3, #62	; 0x3e
 80053bc:	d817      	bhi.n	80053ee <USB_EPStartXfer+0x91a>
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <USB_EPStartXfer+0x90a>
 80053d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053d8:	3301      	adds	r3, #1
 80053da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	029b      	lsls	r3, r3, #10
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e041      	b.n	8005472 <USB_EPStartXfer+0x99e>
 80053ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <USB_EPStartXfer+0x93a>
 8005404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005408:	3b01      	subs	r3, #1
 800540a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800540e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29a      	uxth	r2, r3
 8005422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e024      	b.n	8005472 <USB_EPStartXfer+0x99e>
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d11f      	bne.n	8005472 <USB_EPStartXfer+0x99e>
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800544a:	4413      	add	r3, r2
 800544c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005450:	463b      	mov	r3, r7
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	011a      	lsls	r2, r3, #4
 8005458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545c:	4413      	add	r3, r2
 800545e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546a:	b29a      	uxth	r2, r3
 800546c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005470:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	891b      	ldrh	r3, [r3, #8]
 8005478:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547c:	463b      	mov	r3, r7
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6959      	ldr	r1, [r3, #20]
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005486:	b29b      	uxth	r3, r3
 8005488:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800548c:	1d38      	adds	r0, r7, #4
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	f000 fd7e 	bl	8005f90 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d122      	bne.n	80054e4 <USB_EPStartXfer+0xa10>
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	e026      	b.n	8005532 <USB_EPStartXfer+0xa5e>
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d121      	bne.n	8005532 <USB_EPStartXfer+0xa5e>
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	463b      	mov	r3, r7
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f107 020e 	add.w	r2, r7, #14
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	8013      	strh	r3, [r2, #0]
 8005552:	f107 030e 	add.w	r3, r7, #14
 8005556:	f107 020e 	add.w	r2, r7, #14
 800555a:	8812      	ldrh	r2, [r2, #0]
 800555c:	f082 0210 	eor.w	r2, r2, #16
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	f107 030e 	add.w	r3, r7, #14
 8005566:	f107 020e 	add.w	r2, r7, #14
 800556a:	8812      	ldrh	r2, [r2, #0]
 800556c:	f082 0220 	eor.w	r2, r2, #32
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	463b      	mov	r3, r7
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	f107 030e 	add.w	r3, r7, #14
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
 800559a:	e3b5      	b.n	8005d08 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	7b1b      	ldrb	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8090 	bne.w	80056c8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d90e      	bls.n	80055d6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	619a      	str	r2, [r3, #24]
 80055d4:	e008      	b.n	80055e8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005600:	4413      	add	r3, r2
 8005602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	011a      	lsls	r2, r3, #4
 800560e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005612:	4413      	add	r3, r2
 8005614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800561c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <USB_EPStartXfer+0xb7e>
 8005624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005630:	b29a      	uxth	r2, r3
 8005632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005648:	b29a      	uxth	r2, r3
 800564a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e32c      	b.n	8005cac <USB_EPStartXfer+0x11d8>
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005656:	2b3e      	cmp	r3, #62	; 0x3e
 8005658:	d818      	bhi.n	800568c <USB_EPStartXfer+0xbb8>
 800565a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <USB_EPStartXfer+0xba6>
 8005670:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005674:	3301      	adds	r3, #1
 8005676:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800567a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29a      	uxth	r2, r3
 8005684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e30f      	b.n	8005cac <USB_EPStartXfer+0x11d8>
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <USB_EPStartXfer+0xbd8>
 80056a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e2f1      	b.n	8005cac <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	78db      	ldrb	r3, [r3, #3]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	f040 818f 	bne.w	80059f2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056d4:	463b      	mov	r3, r7
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d175      	bne.n	80057ca <USB_EPStartXfer+0xcf6>
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056f6:	4413      	add	r3, r2
 80056f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005708:	4413      	add	r3, r2
 800570a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <USB_EPStartXfer+0xc76>
 800571c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005728:	b29a      	uxth	r2, r3
 800572a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005740:	b29a      	uxth	r2, r3
 8005742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	e065      	b.n	8005816 <USB_EPStartXfer+0xd42>
 800574a:	463b      	mov	r3, r7
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b3e      	cmp	r3, #62	; 0x3e
 8005752:	d81a      	bhi.n	800578a <USB_EPStartXfer+0xcb6>
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <USB_EPStartXfer+0xca4>
 800576e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005772:	3301      	adds	r3, #1
 8005774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005778:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29a      	uxth	r2, r3
 8005782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e045      	b.n	8005816 <USB_EPStartXfer+0xd42>
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <USB_EPStartXfer+0xcda>
 80057a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057a8:	3b01      	subs	r3, #1
 80057aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	029b      	lsls	r3, r3, #10
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e025      	b.n	8005816 <USB_EPStartXfer+0xd42>
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d120      	bne.n	8005816 <USB_EPStartXfer+0xd42>
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057ec:	4413      	add	r3, r2
 80057ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057fe:	4413      	add	r3, r2
 8005800:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	b29a      	uxth	r2, r3
 8005810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d175      	bne.n	8005914 <USB_EPStartXfer+0xe40>
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005838:	b29b      	uxth	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005840:	4413      	add	r3, r2
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	011a      	lsls	r2, r3, #4
 800584e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005852:	4413      	add	r3, r2
 8005854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <USB_EPStartXfer+0xdc0>
 8005866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005872:	b29a      	uxth	r2, r3
 8005874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e061      	b.n	8005958 <USB_EPStartXfer+0xe84>
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b3e      	cmp	r3, #62	; 0x3e
 800589c:	d81a      	bhi.n	80058d4 <USB_EPStartXfer+0xe00>
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <USB_EPStartXfer+0xdee>
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058bc:	3301      	adds	r3, #1
 80058be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	029b      	lsls	r3, r3, #10
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e041      	b.n	8005958 <USB_EPStartXfer+0xe84>
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <USB_EPStartXfer+0xe24>
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e021      	b.n	8005958 <USB_EPStartXfer+0xe84>
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d11c      	bne.n	8005958 <USB_EPStartXfer+0xe84>
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800592e:	4413      	add	r3, r2
 8005930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005940:	4413      	add	r3, r2
 8005942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	b29a      	uxth	r2, r3
 8005952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005956:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 81a4 	beq.w	8005cac <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005978:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800597c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <USB_EPStartXfer+0xebc>
 8005984:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005990:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8187 	bne.w	8005cac <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800599e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 8180 	bne.w	8005cac <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
 80059f0:	e15c      	b.n	8005cac <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	f040 8155 	bne.w	8005ca8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d90e      	bls.n	8005a2c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	619a      	str	r2, [r3, #24]
 8005a2a:	e008      	b.n	8005a3e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005a36:	463b      	mov	r3, r7
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d16f      	bne.n	8005b28 <USB_EPStartXfer+0x1054>
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a60:	4413      	add	r3, r2
 8005a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a72:	4413      	add	r3, r2
 8005a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <USB_EPStartXfer+0xfde>
 8005a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e05f      	b.n	8005b72 <USB_EPStartXfer+0x109e>
 8005ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab8:	d818      	bhi.n	8005aec <USB_EPStartXfer+0x1018>
 8005aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <USB_EPStartXfer+0x1006>
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e042      	b.n	8005b72 <USB_EPStartXfer+0x109e>
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <USB_EPStartXfer+0x1038>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b06:	3b01      	subs	r3, #1
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	029b      	lsls	r3, r3, #10
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e024      	b.n	8005b72 <USB_EPStartXfer+0x109e>
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d11f      	bne.n	8005b72 <USB_EPStartXfer+0x109e>
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	011a      	lsls	r2, r3, #4
 8005b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d16f      	bne.n	8005c64 <USB_EPStartXfer+0x1190>
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d116      	bne.n	8005bee <USB_EPStartXfer+0x111a>
 8005bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e05e      	b.n	8005cac <USB_EPStartXfer+0x11d8>
 8005bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf4:	d818      	bhi.n	8005c28 <USB_EPStartXfer+0x1154>
 8005bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <USB_EPStartXfer+0x1142>
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c10:	3301      	adds	r3, #1
 8005c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e041      	b.n	8005cac <USB_EPStartXfer+0x11d8>
 8005c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <USB_EPStartXfer+0x1174>
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e023      	b.n	8005cac <USB_EPStartXfer+0x11d8>
 8005c64:	463b      	mov	r3, r7
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d11e      	bne.n	8005cac <USB_EPStartXfer+0x11d8>
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c7e:	4413      	add	r3, r2
 8005c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	011a      	lsls	r2, r3, #4
 8005c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e001      	b.n	8005cac <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e02e      	b.n	8005d0a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005cca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005cce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cd2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005cd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cde:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ce2:	1d3b      	adds	r3, r7, #4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d020      	beq.n	8005d68 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	81bb      	strh	r3, [r7, #12]
 8005d3e:	89bb      	ldrh	r3, [r7, #12]
 8005d40:	f083 0310 	eor.w	r3, r3, #16
 8005d44:	81bb      	strh	r3, [r7, #12]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	89bb      	ldrh	r3, [r7, #12]
 8005d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8013      	strh	r3, [r2, #0]
 8005d66:	e01f      	b.n	8005da8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	81fb      	strh	r3, [r7, #14]
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d86:	81fb      	strh	r3, [r7, #14]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	89fb      	ldrh	r3, [r7, #14]
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	7b1b      	ldrb	r3, [r3, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 809d 	bne.w	8005f02 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d04c      	beq.n	8005e6a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	823b      	strh	r3, [r7, #16]
 8005dde:	8a3b      	ldrh	r3, [r7, #16]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <USB_EPClearStall+0x6c>
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	81fb      	strh	r3, [r7, #14]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	89fb      	ldrh	r3, [r7, #14]
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d06c      	beq.n	8005f02 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3e:	81bb      	strh	r3, [r7, #12]
 8005e40:	89bb      	ldrh	r3, [r7, #12]
 8005e42:	f083 0320 	eor.w	r3, r3, #32
 8005e46:	81bb      	strh	r3, [r7, #12]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	89bb      	ldrh	r3, [r7, #12]
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
 8005e68:	e04b      	b.n	8005f02 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	82fb      	strh	r3, [r7, #22]
 8005e78:	8afb      	ldrh	r3, [r7, #22]
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01b      	beq.n	8005eba <USB_EPClearStall+0x106>
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	82bb      	strh	r3, [r7, #20]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8abb      	ldrh	r3, [r7, #20]
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	827b      	strh	r3, [r7, #18]
 8005ed2:	8a7b      	ldrh	r3, [r7, #18]
 8005ed4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ed8:	827b      	strh	r3, [r7, #18]
 8005eda:	8a7b      	ldrh	r3, [r7, #18]
 8005edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee0:	827b      	strh	r3, [r7, #18]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	8a7b      	ldrh	r3, [r7, #18]
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2280      	movs	r2, #128	; 0x80
 8005f24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr

08005f48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b08d      	sub	sp, #52	; 0x34
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	80fb      	strh	r3, [r7, #6]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc8:	e01e      	b.n	8006008 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	3b01      	subs	r3, #1
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1dd      	bne.n	8005fca <USB_WritePMA+0x3a>
  }
}
 800600e:	bf00      	nop
 8006010:	3734      	adds	r7, #52	; 0x34
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006018:	b480      	push	{r7}
 800601a:	b08b      	sub	sp, #44	; 0x2c
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	460b      	mov	r3, r1
 8006028:	80fb      	strh	r3, [r7, #6]
 800602a:	4613      	mov	r3, r2
 800602c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800602e:	88bb      	ldrh	r3, [r7, #4]
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	b29b      	uxth	r3, r3
 8006034:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	005a      	lsls	r2, r3, #1
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
 8006050:	e01b      	b.n	800608a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	3302      	adds	r3, #2
 800605e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	b2da      	uxtb	r2, r3
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	3302      	adds	r3, #2
 8006082:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	3b01      	subs	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e0      	bne.n	8006052 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006090:	88bb      	ldrh	r3, [r7, #4]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	701a      	strb	r2, [r3, #0]
  }
}
 80060ac:	bf00      	nop
 80060ae:	372c      	adds	r7, #44	; 0x2c
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7c1b      	ldrb	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d115      	bne.n	80060fa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d2:	2202      	movs	r2, #2
 80060d4:	2181      	movs	r1, #129	; 0x81
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fedf 	bl	8007e9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e6:	2202      	movs	r2, #2
 80060e8:	2101      	movs	r1, #1
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fed5 	bl	8007e9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80060f8:	e012      	b.n	8006120 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060fa:	2340      	movs	r3, #64	; 0x40
 80060fc:	2202      	movs	r2, #2
 80060fe:	2181      	movs	r1, #129	; 0x81
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 feca 	bl	8007e9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	2202      	movs	r2, #2
 8006110:	2101      	movs	r1, #1
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fec1 	bl	8007e9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006120:	2308      	movs	r3, #8
 8006122:	2203      	movs	r2, #3
 8006124:	2182      	movs	r1, #130	; 0x82
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 feb7 	bl	8007e9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006132:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006136:	f001 ffd7 	bl	80080e8 <USBD_static_malloc>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	e026      	b.n	80061a0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006158:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7c1b      	ldrb	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006186:	2101      	movs	r1, #1
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 ff77 	bl	800807c <USBD_LL_PrepareReceive>
 800618e:	e007      	b.n	80061a0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006196:	2340      	movs	r3, #64	; 0x40
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 ff6e 	bl	800807c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061ba:	2181      	movs	r1, #129	; 0x81
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fe92 	bl	8007ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061c8:	2101      	movs	r1, #1
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fe8b 	bl	8007ee6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061d8:	2182      	movs	r1, #130	; 0x82
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fe83 	bl	8007ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	4618      	mov	r0, r3
 8006202:	f001 ff7d 	bl	8008100 <USBD_static_free>
    pdev->pClassData = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006228:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800623e:	2b00      	cmp	r3, #0
 8006240:	d039      	beq.n	80062b6 <USBD_CDC_Setup+0x9e>
 8006242:	2b20      	cmp	r3, #32
 8006244:	d17c      	bne.n	8006340 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d029      	beq.n	80062a2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b25b      	sxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	da11      	bge.n	800627c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006264:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	88d2      	ldrh	r2, [r2, #6]
 800626a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800626c:	6939      	ldr	r1, [r7, #16]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	88db      	ldrh	r3, [r3, #6]
 8006272:	461a      	mov	r2, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f9c9 	bl	800760c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800627a:	e068      	b.n	800634e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	785a      	ldrb	r2, [r3, #1]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	88db      	ldrh	r3, [r3, #6]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006292:	6939      	ldr	r1, [r7, #16]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	88db      	ldrh	r3, [r3, #6]
 8006298:	461a      	mov	r2, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 f9e4 	bl	8007668 <USBD_CtlPrepareRx>
      break;
 80062a0:	e055      	b.n	800634e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	7850      	ldrb	r0, [r2, #1]
 80062ae:	2200      	movs	r2, #0
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4798      	blx	r3
      break;
 80062b4:	e04b      	b.n	800634e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b0a      	cmp	r3, #10
 80062bc:	d017      	beq.n	80062ee <USBD_CDC_Setup+0xd6>
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d029      	beq.n	8006316 <USBD_CDC_Setup+0xfe>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d133      	bne.n	800632e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d107      	bne.n	80062e0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	2202      	movs	r2, #2
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f997 	bl	800760c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062de:	e02e      	b.n	800633e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f928 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e8:	2302      	movs	r3, #2
 80062ea:	75fb      	strb	r3, [r7, #23]
          break;
 80062ec:	e027      	b.n	800633e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d107      	bne.n	8006308 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80062f8:	f107 030f 	add.w	r3, r7, #15
 80062fc:	2201      	movs	r2, #1
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f983 	bl	800760c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006306:	e01a      	b.n	800633e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 f914 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 8006310:	2302      	movs	r3, #2
 8006312:	75fb      	strb	r3, [r7, #23]
          break;
 8006314:	e013      	b.n	800633e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	2b03      	cmp	r3, #3
 800631e:	d00d      	beq.n	800633c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f908 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 8006328:	2302      	movs	r3, #2
 800632a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800632c:	e006      	b.n	800633c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 f901 	bl	8007538 <USBD_CtlError>
          ret = USBD_FAIL;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
          break;
 800633a:	e000      	b.n	800633e <USBD_CDC_Setup+0x126>
          break;
 800633c:	bf00      	nop
      }
      break;
 800633e:	e006      	b.n	800634e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f8f8 	bl	8007538 <USBD_CtlError>
      ret = USBD_FAIL;
 8006348:	2302      	movs	r3, #2
 800634a:	75fb      	strb	r3, [r7, #23]
      break;
 800634c:	bf00      	nop
  }

  return ret;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006372:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03a      	beq.n	80063f4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	331c      	adds	r3, #28
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d029      	beq.n	80063e8 <USBD_CDC_DataIn+0x90>
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	331c      	adds	r3, #28
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	78f9      	ldrb	r1, [r7, #3]
 80063a8:	68b8      	ldr	r0, [r7, #8]
 80063aa:	460b      	mov	r3, r1
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4403      	add	r3, r0
 80063b4:	3338      	adds	r3, #56	; 0x38
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063bc:	fb03 f301 	mul.w	r3, r3, r1
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d110      	bne.n	80063e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	331c      	adds	r3, #28
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063da:	78f9      	ldrb	r1, [r7, #3]
 80063dc:	2300      	movs	r3, #0
 80063de:	2200      	movs	r2, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fe28 	bl	8008036 <USBD_LL_Transmit>
 80063e6:	e003      	b.n	80063f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fe53 	bl	80080c2 <USBD_LL_GetRxDataSize>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00d      	beq.n	800644a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006442:	4611      	mov	r1, r2
 8006444:	4798      	blx	r3

    return USBD_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800644a:	2302      	movs	r3, #2
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800646a:	2b00      	cmp	r3, #0
 800646c:	d015      	beq.n	800649a <USBD_CDC_EP0_RxReady+0x46>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006474:	2bff      	cmp	r3, #255	; 0xff
 8006476:	d010      	beq.n	800649a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006486:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800648e:	b292      	uxth	r2, r2
 8006490:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2243      	movs	r2, #67	; 0x43
 80064b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064b2:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000098 	.word	0x20000098

080064c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2243      	movs	r2, #67	; 0x43
 80064d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064d2:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000054 	.word	0x20000054

080064e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	200000dc 	.word	0x200000dc

08006504 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220a      	movs	r2, #10
 8006510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000010 	.word	0x20000010

08006524 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr

08006550 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006564:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d017      	beq.n	80065f2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7c1b      	ldrb	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fd50 	bl	800807c <USBD_LL_PrepareReceive>
 80065dc:	e007      	b.n	80065ee <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	2101      	movs	r1, #1
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fd47 	bl	800807c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80065f2:	2302      	movs	r3, #2
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006610:	2302      	movs	r3, #2
 8006612:	e01a      	b.n	800664a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	79fa      	ldrb	r2, [r7, #7]
 8006640:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f001 fbb4 	bl	8007db0 <USBD_LL_Init>

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006652:	b480      	push	{r7}
 8006654:	b085      	sub	sp, #20
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e001      	b.n	8006678 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006674:	2302      	movs	r3, #2
 8006676:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fbe9 	bl	8007e64 <USBD_LL_Start>

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr

080066b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066bc:	2302      	movs	r3, #2
 80066be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	4611      	mov	r1, r2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	4611      	mov	r1, r2
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 feca 	bl	80074c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b01      	cmp	r3, #1
 800674e:	d00c      	beq.n	800676a <USBD_LL_SetupStage+0x56>
 8006750:	2b01      	cmp	r3, #1
 8006752:	d302      	bcc.n	800675a <USBD_LL_SetupStage+0x46>
 8006754:	2b02      	cmp	r3, #2
 8006756:	d010      	beq.n	800677a <USBD_LL_SetupStage+0x66>
 8006758:	e017      	b.n	800678a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f9ca 	bl	8006afc <USBD_StdDevReq>
      break;
 8006768:	e01a      	b.n	80067a0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa2c 	bl	8006bd0 <USBD_StdItfReq>
      break;
 8006778:	e012      	b.n	80067a0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa6a 	bl	8006c5c <USBD_StdEPReq>
      break;
 8006788:	e00a      	b.n	80067a0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006794:	b2db      	uxtb	r3, r3
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fbc3 	bl	8007f24 <USBD_LL_StallEP>
      break;
 800679e:	bf00      	nop
  }

  return USBD_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	460b      	mov	r3, r1
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d14b      	bne.n	8006856 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d134      	bne.n	800683a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d919      	bls.n	8006810 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	1ad2      	subs	r2, r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d203      	bcs.n	80067fe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	e002      	b.n	8006804 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006802:	b29b      	uxth	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 ff4b 	bl	80076a4 <USBD_CtlContinueRx>
 800680e:	e038      	b.n	8006882 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006822:	2b03      	cmp	r3, #3
 8006824:	d105      	bne.n	8006832 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 ff48 	bl	80076c8 <USBD_CtlSendStatus>
 8006838:	e023      	b.n	8006882 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006840:	2b05      	cmp	r3, #5
 8006842:	d11e      	bne.n	8006882 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800684c:	2100      	movs	r1, #0
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 fb68 	bl	8007f24 <USBD_LL_StallEP>
 8006854:	e015      	b.n	8006882 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006868:	2b03      	cmp	r3, #3
 800686a:	d108      	bne.n	800687e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	7afa      	ldrb	r2, [r7, #11]
 8006876:	4611      	mov	r1, r2
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	4798      	blx	r3
 800687c:	e001      	b.n	8006882 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800687e:	2302      	movs	r3, #2
 8006880:	e000      	b.n	8006884 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	460b      	mov	r3, r1
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d17f      	bne.n	80069a0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3314      	adds	r3, #20
 80068a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d15c      	bne.n	800696a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d915      	bls.n	80068e8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 feb5 	bl	8007644 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068da:	2300      	movs	r3, #0
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f001 fbcb 	bl	800807c <USBD_LL_PrepareReceive>
 80068e6:	e04e      	b.n	8006986 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	6912      	ldr	r2, [r2, #16]
 80068f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80068f4:	fb02 f201 	mul.w	r2, r2, r1
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11c      	bne.n	8006938 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006906:	429a      	cmp	r2, r3
 8006908:	d316      	bcc.n	8006938 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006914:	429a      	cmp	r2, r3
 8006916:	d20f      	bcs.n	8006938 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006918:	2200      	movs	r2, #0
 800691a:	2100      	movs	r1, #0
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fe91 	bl	8007644 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800692a:	2300      	movs	r3, #0
 800692c:	2200      	movs	r2, #0
 800692e:	2100      	movs	r1, #0
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 fba3 	bl	800807c <USBD_LL_PrepareReceive>
 8006936:	e026      	b.n	8006986 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800694a:	2b03      	cmp	r3, #3
 800694c:	d105      	bne.n	800695a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f001 fae1 	bl	8007f24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fec3 	bl	80076ee <USBD_CtlReceiveStatus>
 8006968:	e00d      	b.n	8006986 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006970:	2b04      	cmp	r3, #4
 8006972:	d004      	beq.n	800697e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f001 facf 	bl	8007f24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d11d      	bne.n	80069cc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fe83 	bl	800669c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800699e:	e015      	b.n	80069cc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00d      	beq.n	80069c8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d108      	bne.n	80069c8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	7afa      	ldrb	r2, [r7, #11]
 80069c0:	4611      	mov	r1, r2
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	4798      	blx	r3
 80069c6:	e001      	b.n	80069cc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e000      	b.n	80069ce <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069de:	2340      	movs	r3, #64	; 0x40
 80069e0:	2200      	movs	r2, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fa58 	bl	8007e9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069fa:	2340      	movs	r3, #64	; 0x40
 80069fc:	2200      	movs	r2, #0
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fa4a 	bl	8007e9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2240      	movs	r2, #64	; 0x40
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6852      	ldr	r2, [r2, #4]
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	4611      	mov	r1, r2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
  }

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d105      	bne.n	8006abc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d10b      	bne.n	8006af2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d004      	beq.n	8006b20 <USBD_StdDevReq+0x24>
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d002      	beq.n	8006b20 <USBD_StdDevReq+0x24>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <USBD_StdDevReq+0x34>
 8006b1e:	e04c      	b.n	8006bba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
      break;
 8006b2e:	e049      	b.n	8006bc4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b09      	cmp	r3, #9
 8006b36:	d83a      	bhi.n	8006bae <USBD_StdDevReq+0xb2>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBD_StdDevReq+0x44>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b91 	.word	0x08006b91
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	08006baf 	.word	0x08006baf
 8006b4c:	08006b9b 	.word	0x08006b9b
 8006b50:	08006baf 	.word	0x08006baf
 8006b54:	08006b73 	.word	0x08006b73
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006baf 	.word	0x08006baf
 8006b60:	08006b87 	.word	0x08006b87
 8006b64:	08006b7d 	.word	0x08006b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9d4 	bl	8006f18 <USBD_GetDescriptor>
          break;
 8006b70:	e022      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fb37 	bl	80071e8 <USBD_SetAddress>
          break;
 8006b7a:	e01d      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fb74 	bl	800726c <USBD_SetConfig>
          break;
 8006b84:	e018      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fbfd 	bl	8007388 <USBD_GetConfig>
          break;
 8006b8e:	e013      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fc2c 	bl	80073f0 <USBD_GetStatus>
          break;
 8006b98:	e00e      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fc5a 	bl	8007456 <USBD_SetFeature>
          break;
 8006ba2:	e009      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fc69 	bl	800747e <USBD_ClrFeature>
          break;
 8006bac:	e004      	b.n	8006bb8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fcc1 	bl	8007538 <USBD_CtlError>
          break;
 8006bb6:	bf00      	nop
      }
      break;
 8006bb8:	e004      	b.n	8006bc4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fcbb 	bl	8007538 <USBD_CtlError>
      break;
 8006bc2:	bf00      	nop
  }

  return ret;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop

08006bd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d003      	beq.n	8006bf2 <USBD_StdItfReq+0x22>
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d001      	beq.n	8006bf2 <USBD_StdItfReq+0x22>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d12a      	bne.n	8006c48 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d81d      	bhi.n	8006c3a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	889b      	ldrh	r3, [r3, #4]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d813      	bhi.n	8006c30 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d110      	bne.n	8006c44 <USBD_StdItfReq+0x74>
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10d      	bne.n	8006c44 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fd4d 	bl	80076c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c2e:	e009      	b.n	8006c44 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc80 	bl	8007538 <USBD_CtlError>
          break;
 8006c38:	e004      	b.n	8006c44 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc7b 	bl	8007538 <USBD_CtlError>
          break;
 8006c42:	e000      	b.n	8006c46 <USBD_StdItfReq+0x76>
          break;
 8006c44:	bf00      	nop
      }
      break;
 8006c46:	e004      	b.n	8006c52 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fc74 	bl	8007538 <USBD_CtlError>
      break;
 8006c50:	bf00      	nop
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d004      	beq.n	8006c86 <USBD_StdEPReq+0x2a>
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d002      	beq.n	8006c86 <USBD_StdEPReq+0x2a>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <USBD_StdEPReq+0x3a>
 8006c84:	e13d      	b.n	8006f02 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
      break;
 8006c94:	e13a      	b.n	8006f0c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d10a      	bne.n	8006cb8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	e12a      	b.n	8006f0e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d03e      	beq.n	8006d3e <USBD_StdEPReq+0xe2>
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d002      	beq.n	8006cca <USBD_StdEPReq+0x6e>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d070      	beq.n	8006daa <USBD_StdEPReq+0x14e>
 8006cc8:	e115      	b.n	8006ef6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d002      	beq.n	8006cda <USBD_StdEPReq+0x7e>
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d015      	beq.n	8006d04 <USBD_StdEPReq+0xa8>
 8006cd8:	e02b      	b.n	8006d32 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <USBD_StdEPReq+0x9e>
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d009      	beq.n	8006cfa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f91a 	bl	8007f24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cf0:	2180      	movs	r1, #128	; 0x80
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f916 	bl	8007f24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf8:	e020      	b.n	8006d3c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fc1b 	bl	8007538 <USBD_CtlError>
              break;
 8006d02:	e01b      	b.n	8006d3c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10e      	bne.n	8006d2a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <USBD_StdEPReq+0xce>
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d008      	beq.n	8006d2a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	88db      	ldrh	r3, [r3, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f8fd 	bl	8007f24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fccc 	bl	80076c8 <USBD_CtlSendStatus>

              break;
 8006d30:	e004      	b.n	8006d3c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fbff 	bl	8007538 <USBD_CtlError>
              break;
 8006d3a:	bf00      	nop
          }
          break;
 8006d3c:	e0e0      	b.n	8006f00 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d002      	beq.n	8006d4e <USBD_StdEPReq+0xf2>
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d015      	beq.n	8006d78 <USBD_StdEPReq+0x11c>
 8006d4c:	e026      	b.n	8006d9c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00c      	beq.n	8006d6e <USBD_StdEPReq+0x112>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d009      	beq.n	8006d6e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f8e0 	bl	8007f24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 f8dc 	bl	8007f24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d6c:	e01c      	b.n	8006da8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbe1 	bl	8007538 <USBD_CtlError>
              break;
 8006d76:	e017      	b.n	8006da8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	885b      	ldrh	r3, [r3, #2]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d112      	bne.n	8006da6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f8e7 	bl	8007f62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc97 	bl	80076c8 <USBD_CtlSendStatus>
              }
              break;
 8006d9a:	e004      	b.n	8006da6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbca 	bl	8007538 <USBD_CtlError>
              break;
 8006da4:	e000      	b.n	8006da8 <USBD_StdEPReq+0x14c>
              break;
 8006da6:	bf00      	nop
          }
          break;
 8006da8:	e0aa      	b.n	8006f00 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d002      	beq.n	8006dba <USBD_StdEPReq+0x15e>
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d032      	beq.n	8006e1e <USBD_StdEPReq+0x1c2>
 8006db8:	e097      	b.n	8006eea <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <USBD_StdEPReq+0x174>
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d004      	beq.n	8006dd0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbb5 	bl	8007538 <USBD_CtlError>
                break;
 8006dce:	e091      	b.n	8006ef4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da0b      	bge.n	8006df0 <USBD_StdEPReq+0x194>
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	3310      	adds	r3, #16
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4413      	add	r3, r2
 8006dec:	3304      	adds	r3, #4
 8006dee:	e00b      	b.n	8006e08 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	3304      	adds	r3, #4
 8006e08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2202      	movs	r2, #2
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fbf8 	bl	800760c <USBD_CtlSendData>
              break;
 8006e1c:	e06a      	b.n	8006ef4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da11      	bge.n	8006e4a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	3318      	adds	r3, #24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d117      	bne.n	8006e70 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fb78 	bl	8007538 <USBD_CtlError>
                  break;
 8006e48:	e054      	b.n	8006ef4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fb65 	bl	8007538 <USBD_CtlError>
                  break;
 8006e6e:	e041      	b.n	8006ef4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da0b      	bge.n	8006e90 <USBD_StdEPReq+0x234>
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	3310      	adds	r3, #16
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	e00b      	b.n	8006ea8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <USBD_StdEPReq+0x25a>
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d103      	bne.n	8006ebe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	e00e      	b.n	8006edc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 f86c 	bl	8007fa0 <USBD_LL_IsStallEP>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e002      	b.n	8006edc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb92 	bl	800760c <USBD_CtlSendData>
              break;
 8006ee8:	e004      	b.n	8006ef4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fb23 	bl	8007538 <USBD_CtlError>
              break;
 8006ef2:	bf00      	nop
          }
          break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb1d 	bl	8007538 <USBD_CtlError>
          break;
 8006efe:	bf00      	nop
      }
      break;
 8006f00:	e004      	b.n	8006f0c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb17 	bl	8007538 <USBD_CtlError>
      break;
 8006f0a:	bf00      	nop
  }

  return ret;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	885b      	ldrh	r3, [r3, #2]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	f200 8128 	bhi.w	800718e <USBD_GetDescriptor+0x276>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <USBD_GetDescriptor+0x2c>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	08006f79 	.word	0x08006f79
 8006f4c:	08006fb9 	.word	0x08006fb9
 8006f50:	0800718f 	.word	0x0800718f
 8006f54:	0800718f 	.word	0x0800718f
 8006f58:	0800712f 	.word	0x0800712f
 8006f5c:	0800715b 	.word	0x0800715b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
      break;
 8006f76:	e112      	b.n	800719e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	7c1b      	ldrb	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10d      	bne.n	8006f9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	2202      	movs	r2, #2
 8006f98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f9a:	e100      	b.n	800719e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	f107 0208 	add.w	r2, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	701a      	strb	r2, [r3, #0]
      break;
 8006fb6:	e0f2      	b.n	800719e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	885b      	ldrh	r3, [r3, #2]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	f200 80ac 	bhi.w	800711c <USBD_GetDescriptor+0x204>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <USBD_GetDescriptor+0xb4>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fe5 	.word	0x08006fe5
 8006fd0:	08007019 	.word	0x08007019
 8006fd4:	0800704d 	.word	0x0800704d
 8006fd8:	08007081 	.word	0x08007081
 8006fdc:	080070b5 	.word	0x080070b5
 8006fe0:	080070e9 	.word	0x080070e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007006:	e091      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa94 	bl	8007538 <USBD_CtlError>
            err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
          break;
 8007016:	e089      	b.n	800712c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	7c12      	ldrb	r2, [r2, #16]
 8007030:	f107 0108 	add.w	r1, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703a:	e077      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa7a 	bl	8007538 <USBD_CtlError>
            err++;
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	3301      	adds	r3, #1
 8007048:	72fb      	strb	r3, [r7, #11]
          break;
 800704a:	e06f      	b.n	800712c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	7c12      	ldrb	r2, [r2, #16]
 8007064:	f107 0108 	add.w	r1, r7, #8
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
 800706c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706e:	e05d      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa60 	bl	8007538 <USBD_CtlError>
            err++;
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	3301      	adds	r3, #1
 800707c:	72fb      	strb	r3, [r7, #11]
          break;
 800707e:	e055      	b.n	800712c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7c12      	ldrb	r2, [r2, #16]
 8007098:	f107 0108 	add.w	r1, r7, #8
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a2:	e043      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa46 	bl	8007538 <USBD_CtlError>
            err++;
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	3301      	adds	r3, #1
 80070b0:	72fb      	strb	r3, [r7, #11]
          break;
 80070b2:	e03b      	b.n	800712c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7c12      	ldrb	r2, [r2, #16]
 80070cc:	f107 0108 	add.w	r1, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d6:	e029      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa2c 	bl	8007538 <USBD_CtlError>
            err++;
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	3301      	adds	r3, #1
 80070e4:	72fb      	strb	r3, [r7, #11]
          break;
 80070e6:	e021      	b.n	800712c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e00f      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa12 	bl	8007538 <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e007      	b.n	800712c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa0a 	bl	8007538 <USBD_CtlError>
          err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800712a:	e038      	b.n	800719e <USBD_GetDescriptor+0x286>
 800712c:	e037      	b.n	800719e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7c1b      	ldrb	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	f107 0208 	add.w	r2, r7, #8
 8007142:	4610      	mov	r0, r2
 8007144:	4798      	blx	r3
 8007146:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007148:	e029      	b.n	800719e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9f3 	bl	8007538 <USBD_CtlError>
        err++;
 8007152:	7afb      	ldrb	r3, [r7, #11]
 8007154:	3301      	adds	r3, #1
 8007156:	72fb      	strb	r3, [r7, #11]
      break;
 8007158:	e021      	b.n	800719e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7c1b      	ldrb	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	f107 0208 	add.w	r2, r7, #8
 800716e:	4610      	mov	r0, r2
 8007170:	4798      	blx	r3
 8007172:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	2207      	movs	r2, #7
 800717a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800717c:	e00f      	b.n	800719e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9d9 	bl	8007538 <USBD_CtlError>
        err++;
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	3301      	adds	r3, #1
 800718a:	72fb      	strb	r3, [r7, #11]
      break;
 800718c:	e007      	b.n	800719e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f9d1 	bl	8007538 <USBD_CtlError>
      err++;
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	3301      	adds	r3, #1
 800719a:	72fb      	strb	r3, [r7, #11]
      break;
 800719c:	bf00      	nop
  }

  if (err != 0U)
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d11c      	bne.n	80071de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d011      	beq.n	80071ce <USBD_GetDescriptor+0x2b6>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	88da      	ldrh	r2, [r3, #6]
 80071b6:	893b      	ldrh	r3, [r7, #8]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf28      	it	cs
 80071bc:	4613      	movcs	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071c2:	893b      	ldrh	r3, [r7, #8]
 80071c4:	461a      	mov	r2, r3
 80071c6:	68f9      	ldr	r1, [r7, #12]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa1f 	bl	800760c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa76 	bl	80076c8 <USBD_CtlSendStatus>
 80071dc:	e000      	b.n	80071e0 <USBD_GetDescriptor+0x2c8>
    return;
 80071de:	bf00      	nop
    }
  }
}
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	889b      	ldrh	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d130      	bne.n	800725c <USBD_SetAddress+0x74>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	88db      	ldrh	r3, [r3, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d12c      	bne.n	800725c <USBD_SetAddress+0x74>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	2b7f      	cmp	r3, #127	; 0x7f
 8007208:	d828      	bhi.n	800725c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	885b      	ldrh	r3, [r3, #2]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	2b03      	cmp	r3, #3
 800721e:	d104      	bne.n	800722a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f988 	bl	8007538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007228:	e01c      	b.n	8007264 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7bfa      	ldrb	r2, [r7, #15]
 800722e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fede 	bl	8007ff8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fa43 	bl	80076c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007250:	e008      	b.n	8007264 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725a:	e003      	b.n	8007264 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f96a 	bl	8007538 <USBD_CtlError>
  }
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	885b      	ldrh	r3, [r3, #2]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	4b41      	ldr	r3, [pc, #260]	; (8007384 <USBD_SetConfig+0x118>)
 800727e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007280:	4b40      	ldr	r3, [pc, #256]	; (8007384 <USBD_SetConfig+0x118>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d904      	bls.n	8007292 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f954 	bl	8007538 <USBD_CtlError>
 8007290:	e075      	b.n	800737e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	2b02      	cmp	r3, #2
 800729a:	d002      	beq.n	80072a2 <USBD_SetConfig+0x36>
 800729c:	2b03      	cmp	r3, #3
 800729e:	d023      	beq.n	80072e8 <USBD_SetConfig+0x7c>
 80072a0:	e062      	b.n	8007368 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80072a2:	4b38      	ldr	r3, [pc, #224]	; (8007384 <USBD_SetConfig+0x118>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01a      	beq.n	80072e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80072aa:	4b36      	ldr	r3, [pc, #216]	; (8007384 <USBD_SetConfig+0x118>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072bc:	4b31      	ldr	r3, [pc, #196]	; (8007384 <USBD_SetConfig+0x118>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff f9f4 	bl	80066b0 <USBD_SetClassConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d104      	bne.n	80072d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f931 	bl	8007538 <USBD_CtlError>
            return;
 80072d6:	e052      	b.n	800737e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9f5 	bl	80076c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072de:	e04e      	b.n	800737e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9f1 	bl	80076c8 <USBD_CtlSendStatus>
        break;
 80072e6:	e04a      	b.n	800737e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80072e8:	4b26      	ldr	r3, [pc, #152]	; (8007384 <USBD_SetConfig+0x118>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <USBD_SetConfig+0x118>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007302:	4b20      	ldr	r3, [pc, #128]	; (8007384 <USBD_SetConfig+0x118>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff f9f0 	bl	80066ee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9da 	bl	80076c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007314:	e033      	b.n	800737e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007316:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <USBD_SetConfig+0x118>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d01d      	beq.n	8007360 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff f9de 	bl	80066ee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007332:	4b14      	ldr	r3, [pc, #80]	; (8007384 <USBD_SetConfig+0x118>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <USBD_SetConfig+0x118>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff f9b4 	bl	80066b0 <USBD_SetClassConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	2b02      	cmp	r3, #2
 800734c:	d104      	bne.n	8007358 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f8f1 	bl	8007538 <USBD_CtlError>
            return;
 8007356:	e012      	b.n	800737e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f9b5 	bl	80076c8 <USBD_CtlSendStatus>
        break;
 800735e:	e00e      	b.n	800737e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9b1 	bl	80076c8 <USBD_CtlSendStatus>
        break;
 8007366:	e00a      	b.n	800737e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f8e4 	bl	8007538 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <USBD_SetConfig+0x118>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff f9b9 	bl	80066ee <USBD_ClrClassConfig>
        break;
 800737c:	bf00      	nop
    }
  }
}
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200001a1 	.word	0x200001a1

08007388 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d004      	beq.n	80073a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f8cb 	bl	8007538 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073a2:	e021      	b.n	80073e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	db17      	blt.n	80073de <USBD_GetConfig+0x56>
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	dd02      	ble.n	80073b8 <USBD_GetConfig+0x30>
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d00b      	beq.n	80073ce <USBD_GetConfig+0x46>
 80073b6:	e012      	b.n	80073de <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3308      	adds	r3, #8
 80073c2:	2201      	movs	r2, #1
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f920 	bl	800760c <USBD_CtlSendData>
        break;
 80073cc:	e00c      	b.n	80073e8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3304      	adds	r3, #4
 80073d2:	2201      	movs	r2, #1
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f918 	bl	800760c <USBD_CtlSendData>
        break;
 80073dc:	e004      	b.n	80073e8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8a9 	bl	8007538 <USBD_CtlError>
        break;
 80073e6:	bf00      	nop
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	3b01      	subs	r3, #1
 8007402:	2b02      	cmp	r3, #2
 8007404:	d81e      	bhi.n	8007444 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	88db      	ldrh	r3, [r3, #6]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d004      	beq.n	8007418 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f891 	bl	8007538 <USBD_CtlError>
        break;
 8007416:	e01a      	b.n	800744e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f043 0202 	orr.w	r2, r3, #2
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	330c      	adds	r3, #12
 8007438:	2202      	movs	r2, #2
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8e5 	bl	800760c <USBD_CtlSendData>
      break;
 8007442:	e004      	b.n	800744e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f876 	bl	8007538 <USBD_CtlError>
      break;
 800744c:	bf00      	nop
  }
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	885b      	ldrh	r3, [r3, #2]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f929 	bl	80076c8 <USBD_CtlSendStatus>
  }
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	3b01      	subs	r3, #1
 8007490:	2b02      	cmp	r3, #2
 8007492:	d80b      	bhi.n	80074ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	885b      	ldrh	r3, [r3, #2]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10c      	bne.n	80074b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f90f 	bl	80076c8 <USBD_CtlSendStatus>
      }
      break;
 80074aa:	e004      	b.n	80074b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f842 	bl	8007538 <USBD_CtlError>
      break;
 80074b4:	e000      	b.n	80074b8 <USBD_ClrFeature+0x3a>
      break;
 80074b6:	bf00      	nop
  }
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	785a      	ldrb	r2, [r3, #1]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3302      	adds	r3, #2
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	3303      	adds	r3, #3
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4413      	add	r3, r2
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3304      	adds	r3, #4
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	3305      	adds	r3, #5
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b29b      	uxth	r3, r3
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	4413      	add	r3, r2
 800750c:	b29a      	uxth	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	3306      	adds	r3, #6
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	3307      	adds	r3, #7
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	4413      	add	r3, r2
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	80da      	strh	r2, [r3, #6]

}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fced 	bl	8007f24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fce9 	bl	8007f24 <USBD_LL_StallEP>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d032      	beq.n	80075d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f834 	bl	80075de <USBD_GetLen>
 8007576:	4603      	mov	r3, r0
 8007578:	3301      	adds	r3, #1
 800757a:	b29b      	uxth	r3, r3
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	75fa      	strb	r2, [r7, #23]
 800758a:	461a      	mov	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	75fa      	strb	r2, [r7, #23]
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	2203      	movs	r2, #3
 80075a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075a6:	e012      	b.n	80075ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	60fa      	str	r2, [r7, #12]
 80075ae:	7dfa      	ldrb	r2, [r7, #23]
 80075b0:	1c51      	adds	r1, r2, #1
 80075b2:	75f9      	strb	r1, [r7, #23]
 80075b4:	4611      	mov	r1, r2
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	440a      	add	r2, r1
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	75fa      	strb	r2, [r7, #23]
 80075c4:	461a      	mov	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4413      	add	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e8      	bne.n	80075a8 <USBD_GetString+0x4e>
    }
  }
}
 80075d6:	bf00      	nop
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80075ea:	e005      	b.n	80075f8 <USBD_GetLen+0x1a>
  {
    len++;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	3301      	adds	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3301      	adds	r3, #1
 80075f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f5      	bne.n	80075ec <USBD_GetLen+0xe>
  }

  return len;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	2100      	movs	r1, #0
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fcfe 	bl	8008036 <USBD_LL_Transmit>

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	2100      	movs	r1, #0
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fcec 	bl	8008036 <USBD_LL_Transmit>

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2203      	movs	r2, #3
 800767a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	2100      	movs	r1, #0
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fcf1 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	2100      	movs	r1, #0
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 fcdf 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2204      	movs	r2, #4
 80076d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076d8:	2300      	movs	r3, #0
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fca9 	bl	8008036 <USBD_LL_Transmit>

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2205      	movs	r2, #5
 80076fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076fe:	2300      	movs	r3, #0
 8007700:	2200      	movs	r2, #0
 8007702:	2100      	movs	r1, #0
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fcb9 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007718:	2200      	movs	r2, #0
 800771a:	4912      	ldr	r1, [pc, #72]	; (8007764 <MX_USB_DEVICE_Init+0x50>)
 800771c:	4812      	ldr	r0, [pc, #72]	; (8007768 <MX_USB_DEVICE_Init+0x54>)
 800771e:	f7fe ff6d 	bl	80065fc <USBD_Init>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007728:	f7f9 f832 	bl	8000790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800772c:	490f      	ldr	r1, [pc, #60]	; (800776c <MX_USB_DEVICE_Init+0x58>)
 800772e:	480e      	ldr	r0, [pc, #56]	; (8007768 <MX_USB_DEVICE_Init+0x54>)
 8007730:	f7fe ff8f 	bl	8006652 <USBD_RegisterClass>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800773a:	f7f9 f829 	bl	8000790 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800773e:	490c      	ldr	r1, [pc, #48]	; (8007770 <MX_USB_DEVICE_Init+0x5c>)
 8007740:	4809      	ldr	r0, [pc, #36]	; (8007768 <MX_USB_DEVICE_Init+0x54>)
 8007742:	f7fe feef 	bl	8006524 <USBD_CDC_RegisterInterface>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800774c:	f7f9 f820 	bl	8000790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007750:	4805      	ldr	r0, [pc, #20]	; (8007768 <MX_USB_DEVICE_Init+0x54>)
 8007752:	f7fe ff97 	bl	8006684 <USBD_Start>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800775c:	f7f9 f818 	bl	8000790 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000130 	.word	0x20000130
 8007768:	20000480 	.word	0x20000480
 800776c:	2000001c 	.word	0x2000001c
 8007770:	20000120 	.word	0x20000120

08007774 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007778:	2200      	movs	r2, #0
 800777a:	4905      	ldr	r1, [pc, #20]	; (8007790 <CDC_Init_FS+0x1c>)
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <CDC_Init_FS+0x20>)
 800777e:	f7fe fee7 	bl	8006550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007782:	4905      	ldr	r1, [pc, #20]	; (8007798 <CDC_Init_FS+0x24>)
 8007784:	4803      	ldr	r0, [pc, #12]	; (8007794 <CDC_Init_FS+0x20>)
 8007786:	f7fe fefc 	bl	8006582 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800778a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800778c:	4618      	mov	r0, r3
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20001384 	.word	0x20001384
 8007794:	20000480 	.word	0x20000480
 8007798:	20000f9c 	.word	0x20000f9c

0800779c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr
	...

080077ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
 80077b8:	4613      	mov	r3, r2
 80077ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	2b23      	cmp	r3, #35	; 0x23
 80077c0:	d84a      	bhi.n	8007858 <CDC_Control_FS+0xac>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <CDC_Control_FS+0x1c>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	08007859 	.word	0x08007859
 80077cc:	08007859 	.word	0x08007859
 80077d0:	08007859 	.word	0x08007859
 80077d4:	08007859 	.word	0x08007859
 80077d8:	08007859 	.word	0x08007859
 80077dc:	08007859 	.word	0x08007859
 80077e0:	08007859 	.word	0x08007859
 80077e4:	08007859 	.word	0x08007859
 80077e8:	08007859 	.word	0x08007859
 80077ec:	08007859 	.word	0x08007859
 80077f0:	08007859 	.word	0x08007859
 80077f4:	08007859 	.word	0x08007859
 80077f8:	08007859 	.word	0x08007859
 80077fc:	08007859 	.word	0x08007859
 8007800:	08007859 	.word	0x08007859
 8007804:	08007859 	.word	0x08007859
 8007808:	08007859 	.word	0x08007859
 800780c:	08007859 	.word	0x08007859
 8007810:	08007859 	.word	0x08007859
 8007814:	08007859 	.word	0x08007859
 8007818:	08007859 	.word	0x08007859
 800781c:	08007859 	.word	0x08007859
 8007820:	08007859 	.word	0x08007859
 8007824:	08007859 	.word	0x08007859
 8007828:	08007859 	.word	0x08007859
 800782c:	08007859 	.word	0x08007859
 8007830:	08007859 	.word	0x08007859
 8007834:	08007859 	.word	0x08007859
 8007838:	08007859 	.word	0x08007859
 800783c:	08007859 	.word	0x08007859
 8007840:	08007859 	.word	0x08007859
 8007844:	08007859 	.word	0x08007859
 8007848:	08007859 	.word	0x08007859
 800784c:	08007859 	.word	0x08007859
 8007850:	08007859 	.word	0x08007859
 8007854:	08007859 	.word	0x08007859
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007858:	bf00      	nop
  }

  return (USBD_OK);
 800785a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop

08007868 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t temp1;
  if(((*Len)==4)&&(Buf[0]==0xf0)&&(Buf[0]==0xf0)&&(Buf[1]==0x0D)&&(Buf[3]==0xf7)){
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b04      	cmp	r3, #4
 8007878:	d11b      	bne.n	80078b2 <CDC_Receive_FS+0x4a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2bf0      	cmp	r3, #240	; 0xf0
 8007880:	d117      	bne.n	80078b2 <CDC_Receive_FS+0x4a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2bf0      	cmp	r3, #240	; 0xf0
 8007888:	d113      	bne.n	80078b2 <CDC_Receive_FS+0x4a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3301      	adds	r3, #1
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b0d      	cmp	r3, #13
 8007892:	d10e      	bne.n	80078b2 <CDC_Receive_FS+0x4a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3303      	adds	r3, #3
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2bf7      	cmp	r3, #247	; 0xf7
 800789c:	d109      	bne.n	80078b2 <CDC_Receive_FS+0x4a>
	  flag3=1;
 800789e:	4b53      	ldr	r3, [pc, #332]	; (80079ec <CDC_Receive_FS+0x184>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
	  SIZE=Buf[2];
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3302      	adds	r3, #2
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <CDC_Receive_FS+0x188>)
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	e08e      	b.n	80079d0 <CDC_Receive_FS+0x168>
  }else{
	  my_RxLength=*Len;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4f      	ldr	r2, [pc, #316]	; (80079f4 <CDC_Receive_FS+0x18c>)
 80078b8:	6013      	str	r3, [r2, #0]
		if(my_RxLength<64){
 80078ba:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <CDC_Receive_FS+0x18c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b3f      	cmp	r3, #63	; 0x3f
 80078c0:	d83d      	bhi.n	800793e <CDC_Receive_FS+0xd6>
			valid_data=my_RxLength/4+count;
 80078c2:	4b4c      	ldr	r3, [pc, #304]	; (80079f4 <CDC_Receive_FS+0x18c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	089a      	lsrs	r2, r3, #2
 80078c8:	4b4b      	ldr	r3, [pc, #300]	; (80079f8 <CDC_Receive_FS+0x190>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	461a      	mov	r2, r3
 80078d0:	4b4a      	ldr	r3, [pc, #296]	; (80079fc <CDC_Receive_FS+0x194>)
 80078d2:	601a      	str	r2, [r3, #0]
			for(int i=0;i<(my_RxLength/4);i++){
 80078d4:	2300      	movs	r3, #0
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	e027      	b.n	800792a <CDC_Receive_FS+0xc2>
				temp1=0;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
				for(int j=0;j<4;j++){
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e013      	b.n	800790c <CDC_Receive_FS+0xa4>
					temp1 |= ((Buf[4*i+j])<<(8*j));
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	009a      	lsls	r2, r3, #2
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4413      	add	r3, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4313      	orrs	r3, r2
 8007904:	61fb      	str	r3, [r7, #28]
				for(int j=0;j<4;j++){
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	3301      	adds	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b03      	cmp	r3, #3
 8007910:	dde8      	ble.n	80078e4 <CDC_Receive_FS+0x7c>
				}
				writeFlashData[temp_count++]=temp1;
 8007912:	4b3b      	ldr	r3, [pc, #236]	; (8007a00 <CDC_Receive_FS+0x198>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	4939      	ldr	r1, [pc, #228]	; (8007a00 <CDC_Receive_FS+0x198>)
 800791a:	600a      	str	r2, [r1, #0]
 800791c:	4939      	ldr	r1, [pc, #228]	; (8007a04 <CDC_Receive_FS+0x19c>)
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i=0;i<(my_RxLength/4);i++){
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	3301      	adds	r3, #1
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	4b32      	ldr	r3, [pc, #200]	; (80079f4 <CDC_Receive_FS+0x18c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	089a      	lsrs	r2, r3, #2
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	429a      	cmp	r2, r3
 8007934:	d8d1      	bhi.n	80078da <CDC_Receive_FS+0x72>
			}
			flag2=1;
 8007936:	4b34      	ldr	r3, [pc, #208]	; (8007a08 <CDC_Receive_FS+0x1a0>)
 8007938:	2201      	movs	r2, #1
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e048      	b.n	80079d0 <CDC_Receive_FS+0x168>
		}else{
			for(int i=0;i<(my_RxLength/4);i++){
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e02c      	b.n	800799e <CDC_Receive_FS+0x136>
				temp1=0;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
				for(int j=0;j<4;j++){
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e013      	b.n	8007976 <CDC_Receive_FS+0x10e>
					temp1 |= ((Buf[4*i+j])<<(8*j));
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	009a      	lsls	r2, r3, #2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4413      	add	r3, r2
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	461a      	mov	r2, r3
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4313      	orrs	r3, r2
 800796e:	61fb      	str	r3, [r7, #28]
				for(int j=0;j<4;j++){
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b03      	cmp	r3, #3
 800797a:	dde8      	ble.n	800794e <CDC_Receive_FS+0xe6>
				}
				writeFlashData[temp_count++]=temp1;
 800797c:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <CDC_Receive_FS+0x198>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	491f      	ldr	r1, [pc, #124]	; (8007a00 <CDC_Receive_FS+0x198>)
 8007984:	600a      	str	r2, [r1, #0]
 8007986:	491f      	ldr	r1, [pc, #124]	; (8007a04 <CDC_Receive_FS+0x19c>)
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				count++;
 800798e:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <CDC_Receive_FS+0x190>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <CDC_Receive_FS+0x190>)
 8007996:	6013      	str	r3, [r2, #0]
			for(int i=0;i<(my_RxLength/4);i++){
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3301      	adds	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	4b15      	ldr	r3, [pc, #84]	; (80079f4 <CDC_Receive_FS+0x18c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	089a      	lsrs	r2, r3, #2
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d8cc      	bhi.n	8007944 <CDC_Receive_FS+0xdc>
			}
			if(temp_count>511){
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <CDC_Receive_FS+0x198>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b2:	d30d      	bcc.n	80079d0 <CDC_Receive_FS+0x168>
				valid_data=count;
 80079b4:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <CDC_Receive_FS+0x190>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	4b10      	ldr	r3, [pc, #64]	; (80079fc <CDC_Receive_FS+0x194>)
 80079bc:	601a      	str	r2, [r3, #0]
				flag2=1;
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <CDC_Receive_FS+0x1a0>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
				temp_count=0;
 80079c4:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <CDC_Receive_FS+0x198>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
				count=0;
 80079ca:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <CDC_Receive_FS+0x190>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
//	  for(int i=0;i<(*Len);i++){
//		  my_RxBuf[i]=Buf[i];
//	  }
//	  my_RxLength=*Len;
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	480e      	ldr	r0, [pc, #56]	; (8007a0c <CDC_Receive_FS+0x1a4>)
 80079d4:	f7fe fdd5 	bl	8006582 <USBD_CDC_SetRxBuffer>
  uint8_t state = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079d8:	480c      	ldr	r0, [pc, #48]	; (8007a0c <CDC_Receive_FS+0x1a4>)
 80079da:	f7fe fde5 	bl	80065a8 <USBD_CDC_ReceivePacket>
 80079de:	4603      	mov	r3, r0
 80079e0:	72fb      	strb	r3, [r7, #11]
  return (USBD_OK);
 80079e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000f58 	.word	0x20000f58
 80079f0:	20000744 	.word	0x20000744
 80079f4:	20000f50 	.word	0x20000f50
 80079f8:	2000019c 	.word	0x2000019c
 80079fc:	20000748 	.word	0x20000748
 8007a00:	20000f54 	.word	0x20000f54
 8007a04:	20000750 	.word	0x20000750
 8007a08:	2000074c 	.word	0x2000074c
 8007a0c:	20000480 	.word	0x20000480

08007a10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	6039      	str	r1, [r7, #0]
 8007a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2212      	movs	r2, #18
 8007a20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a22:	4b03      	ldr	r3, [pc, #12]	; (8007a30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2000014c 	.word	0x2000014c

08007a34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2204      	movs	r2, #4
 8007a44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000160 	.word	0x20000160

08007a58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4907      	ldr	r1, [pc, #28]	; (8007a8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a6e:	4808      	ldr	r0, [pc, #32]	; (8007a90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a70:	f7ff fd73 	bl	800755a <USBD_GetString>
 8007a74:	e004      	b.n	8007a80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	4904      	ldr	r1, [pc, #16]	; (8007a8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a7a:	4805      	ldr	r0, [pc, #20]	; (8007a90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a7c:	f7ff fd6d 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	2000176c 	.word	0x2000176c
 8007a90:	08008204 	.word	0x08008204

08007a94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007aa4:	4804      	ldr	r0, [pc, #16]	; (8007ab8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007aa6:	f7ff fd58 	bl	800755a <USBD_GetString>
  return USBD_StrDesc;
 8007aaa:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	2000176c 	.word	0x2000176c
 8007ab8:	0800821c 	.word	0x0800821c

08007abc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	221a      	movs	r2, #26
 8007acc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ace:	f000 f843 	bl	8007b58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ad2:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000164 	.word	0x20000164

08007ae0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d105      	bne.n	8007afe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4907      	ldr	r1, [pc, #28]	; (8007b14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007af6:	4808      	ldr	r0, [pc, #32]	; (8007b18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af8:	f7ff fd2f 	bl	800755a <USBD_GetString>
 8007afc:	e004      	b.n	8007b08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4904      	ldr	r1, [pc, #16]	; (8007b14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b04:	f7ff fd29 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	2000176c 	.word	0x2000176c
 8007b18:	08008230 	.word	0x08008230

08007b1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4907      	ldr	r1, [pc, #28]	; (8007b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b32:	4808      	ldr	r0, [pc, #32]	; (8007b54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b34:	f7ff fd11 	bl	800755a <USBD_GetString>
 8007b38:	e004      	b.n	8007b44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4904      	ldr	r1, [pc, #16]	; (8007b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b3e:	4805      	ldr	r0, [pc, #20]	; (8007b54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b40:	f7ff fd0b 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b44:	4b02      	ldr	r3, [pc, #8]	; (8007b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000176c 	.word	0x2000176c
 8007b54:	0800823c 	.word	0x0800823c

08007b58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b5e:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <Get_SerialNum+0x44>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <Get_SerialNum+0x48>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <Get_SerialNum+0x4c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b7e:	2208      	movs	r2, #8
 8007b80:	4909      	ldr	r1, [pc, #36]	; (8007ba8 <Get_SerialNum+0x50>)
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f814 	bl	8007bb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b88:	2204      	movs	r2, #4
 8007b8a:	4908      	ldr	r1, [pc, #32]	; (8007bac <Get_SerialNum+0x54>)
 8007b8c:	68b8      	ldr	r0, [r7, #8]
 8007b8e:	f000 f80f 	bl	8007bb0 <IntToUnicode>
  }
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	1ffff7e8 	.word	0x1ffff7e8
 8007ba0:	1ffff7ec 	.word	0x1ffff7ec
 8007ba4:	1ffff7f0 	.word	0x1ffff7f0
 8007ba8:	20000166 	.word	0x20000166
 8007bac:	20000176 	.word	0x20000176

08007bb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	75fb      	strb	r3, [r7, #23]
 8007bc6:	e027      	b.n	8007c18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	0f1b      	lsrs	r3, r3, #28
 8007bcc:	2b09      	cmp	r3, #9
 8007bce:	d80b      	bhi.n	8007be8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	0f1b      	lsrs	r3, r3, #28
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	440b      	add	r3, r1
 8007be0:	3230      	adds	r2, #48	; 0x30
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	e00a      	b.n	8007bfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	0f1b      	lsrs	r3, r3, #28
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3237      	adds	r2, #55	; 0x37
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	3301      	adds	r3, #1
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	3301      	adds	r3, #1
 8007c16:	75fb      	strb	r3, [r7, #23]
 8007c18:	7dfa      	ldrb	r2, [r7, #23]
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d3d3      	bcc.n	8007bc8 <IntToUnicode+0x18>
  }
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
	...

08007c2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a0d      	ldr	r2, [pc, #52]	; (8007c70 <HAL_PCD_MspInit+0x44>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d113      	bne.n	8007c66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <HAL_PCD_MspInit+0x48>)
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	4a0c      	ldr	r2, [pc, #48]	; (8007c74 <HAL_PCD_MspInit+0x48>)
 8007c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c48:	61d3      	str	r3, [r2, #28]
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <HAL_PCD_MspInit+0x48>)
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	2014      	movs	r0, #20
 8007c5c:	f7f9 f83d 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c60:	2014      	movs	r0, #20
 8007c62:	f7f9 f856 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40005c00 	.word	0x40005c00
 8007c74:	40021000 	.word	0x40021000

08007c78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7fe fd40 	bl	8006714 <USBD_LL_SetupStage>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	00db      	lsls	r3, r3, #3
 8007cba:	440b      	add	r3, r1
 8007cbc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7fe fd70 	bl	80067aa <USBD_LL_DataOutStage>
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	440b      	add	r3, r1
 8007cf2:	333c      	adds	r3, #60	; 0x3c
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f7fe fdc7 	bl	800688c <USBD_LL_DataInStage>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fed7 	bl	8006ac8 <USBD_LL_SOF>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d001      	beq.n	8007d3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d36:	f7f8 fd2b 	bl	8000790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d40:	7bfa      	ldrb	r2, [r7, #15]
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fe87 	bl	8006a58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fe40 	bl	80069d6 <USBD_LL_Reset>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fe81 	bl	8006a76 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <HAL_PCD_SuspendCallback+0x30>)
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	4a03      	ldr	r2, [pc, #12]	; (8007d90 <HAL_PCD_SuspendCallback+0x30>)
 8007d82:	f043 0306 	orr.w	r3, r3, #6
 8007d86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fe7b 	bl	8006a9e <USBD_LL_Resume>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007db8:	4a28      	ldr	r2, [pc, #160]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007dc8:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dca:	4a25      	ldr	r2, [pc, #148]	; (8007e60 <USBD_LL_Init+0xb0>)
 8007dcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dce:	4b23      	ldr	r3, [pc, #140]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dd4:	4b21      	ldr	r3, [pc, #132]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dda:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <USBD_LL_Init+0xac>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <USBD_LL_Init+0xac>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007de6:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <USBD_LL_Init+0xac>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007dec:	481b      	ldr	r0, [pc, #108]	; (8007e5c <USBD_LL_Init+0xac>)
 8007dee:	f7f9 fb2d 	bl	800144c <HAL_PCD_Init>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007df8:	f7f8 fcca 	bl	8000790 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e02:	2318      	movs	r3, #24
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	f7fa fe61 	bl	8002ace <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e12:	2358      	movs	r3, #88	; 0x58
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	f7fa fe59 	bl	8002ace <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e22:	23c0      	movs	r3, #192	; 0xc0
 8007e24:	2200      	movs	r2, #0
 8007e26:	2181      	movs	r1, #129	; 0x81
 8007e28:	f7fa fe51 	bl	8002ace <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e36:	2200      	movs	r2, #0
 8007e38:	2101      	movs	r1, #1
 8007e3a:	f7fa fe48 	bl	8002ace <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2182      	movs	r1, #130	; 0x82
 8007e4c:	f7fa fe3f 	bl	8002ace <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	2000196c 	.word	0x2000196c
 8007e60:	40005c00 	.word	0x40005c00

08007e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7f9 fbf1 	bl	8001662 <HAL_PCD_Start>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f94e 	bl	8008128 <USBD_Get_USB_Status>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	70fb      	strb	r3, [r7, #3]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70bb      	strb	r3, [r7, #2]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ec2:	78bb      	ldrb	r3, [r7, #2]
 8007ec4:	883a      	ldrh	r2, [r7, #0]
 8007ec6:	78f9      	ldrb	r1, [r7, #3]
 8007ec8:	f7f9 fd6b 	bl	80019a2 <HAL_PCD_EP_Open>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f928 	bl	8008128 <USBD_Get_USB_Status>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f9 fdb2 	bl	8001a6e <HAL_PCD_EP_Close>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f909 	bl	8008128 <USBD_Get_USB_Status>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f9 fe72 	bl	8001c2c <HAL_PCD_EP_SetStall>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f8ea 	bl	8008128 <USBD_Get_USB_Status>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7f9 feb3 	bl	8001cec <HAL_PCD_EP_ClrStall>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f8cb 	bl	8008128 <USBD_Get_USB_Status>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	da0c      	bge.n	8007fd6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	440b      	add	r3, r1
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	e00b      	b.n	8007fee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007fec:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7f9 fc9e 	bl	8001958 <HAL_PCD_SetAddress>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f880 	bl	8008128 <USBD_Get_USB_Status>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800802c:	7bbb      	ldrb	r3, [r7, #14]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	461a      	mov	r2, r3
 8008042:	460b      	mov	r3, r1
 8008044:	72fb      	strb	r3, [r7, #11]
 8008046:	4613      	mov	r3, r2
 8008048:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	7af9      	ldrb	r1, [r7, #11]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f7f9 fda2 	bl	8001ba6 <HAL_PCD_EP_Transmit>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f85d 	bl	8008128 <USBD_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008072:	7dbb      	ldrb	r3, [r7, #22]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	461a      	mov	r2, r3
 8008088:	460b      	mov	r3, r1
 800808a:	72fb      	strb	r3, [r7, #11]
 800808c:	4613      	mov	r3, r2
 800808e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800809e:	893b      	ldrh	r3, [r7, #8]
 80080a0:	7af9      	ldrb	r1, [r7, #11]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	f7f9 fd2b 	bl	8001afe <HAL_PCD_EP_Receive>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f83a 	bl	8008128 <USBD_Get_USB_Status>
 80080b4:	4603      	mov	r3, r0
 80080b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f9 fd4d 	bl	8001b78 <HAL_PCD_EP_GetRxCount>
 80080de:	4603      	mov	r3, r0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_static_malloc+0x14>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	200001a4 	.word	0x200001a4

08008100 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr

08008112 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr

08008128 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d817      	bhi.n	800816c <USBD_Get_USB_Status+0x44>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <USBD_Get_USB_Status+0x1c>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008155 	.word	0x08008155
 8008148:	0800815b 	.word	0x0800815b
 800814c:	08008161 	.word	0x08008161
 8008150:	08008167 	.word	0x08008167
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
    break;
 8008158:	e00b      	b.n	8008172 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800815a:	2302      	movs	r3, #2
 800815c:	73fb      	strb	r3, [r7, #15]
    break;
 800815e:	e008      	b.n	8008172 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	e005      	b.n	8008172 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008166:	2302      	movs	r3, #2
 8008168:	73fb      	strb	r3, [r7, #15]
    break;
 800816a:	e002      	b.n	8008172 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	bf00      	nop
  }
  return usb_status;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop

08008180 <__libc_init_array>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	2500      	movs	r5, #0
 8008184:	4e0c      	ldr	r6, [pc, #48]	; (80081b8 <__libc_init_array+0x38>)
 8008186:	4c0d      	ldr	r4, [pc, #52]	; (80081bc <__libc_init_array+0x3c>)
 8008188:	1ba4      	subs	r4, r4, r6
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	42a5      	cmp	r5, r4
 800818e:	d109      	bne.n	80081a4 <__libc_init_array+0x24>
 8008190:	f000 f822 	bl	80081d8 <_init>
 8008194:	2500      	movs	r5, #0
 8008196:	4e0a      	ldr	r6, [pc, #40]	; (80081c0 <__libc_init_array+0x40>)
 8008198:	4c0a      	ldr	r4, [pc, #40]	; (80081c4 <__libc_init_array+0x44>)
 800819a:	1ba4      	subs	r4, r4, r6
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	42a5      	cmp	r5, r4
 80081a0:	d105      	bne.n	80081ae <__libc_init_array+0x2e>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a8:	4798      	blx	r3
 80081aa:	3501      	adds	r5, #1
 80081ac:	e7ee      	b.n	800818c <__libc_init_array+0xc>
 80081ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081b2:	4798      	blx	r3
 80081b4:	3501      	adds	r5, #1
 80081b6:	e7f2      	b.n	800819e <__libc_init_array+0x1e>
 80081b8:	08008264 	.word	0x08008264
 80081bc:	08008264 	.word	0x08008264
 80081c0:	08008264 	.word	0x08008264
 80081c4:	08008268 	.word	0x08008268

080081c8 <memset>:
 80081c8:	4603      	mov	r3, r0
 80081ca:	4402      	add	r2, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <_init>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr

080081e4 <_fini>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr
